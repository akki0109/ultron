/*! For license information please see 9449.js.LICENSE.txt */
"use strict";(self.webpackChunklavender_medical=self.webpackChunklavender_medical||[]).push([[9449],{69449:function(t,e,i){function s(t){return t+.5|0}i.r(e),i.d(e,{Animation:function(){return ki},Animations:function(){return Si},ArcElement:function(){return Dn},BarController:function(){return Ui},BarElement:function(){return jn},BasePlatform:function(){return Ms},BasicPlatform:function(){return ws},BubbleController:function(){return Xi},CategoryScale:function(){return Ho},Chart:function(){return wn},Colors:function(){return Gn},DatasetController:function(){return Fi},Decimation:function(){return Qn},DomPlatform:function(){return Vs},DoughnutController:function(){return qi},Element:function(){return Ws},Filler:function(){return mo},Interaction:function(){return hs},Legend:function(){return yo},LineController:function(){return Ki},LineElement:function(){return In},LinearScale:function(){return Yo},LogarithmicScale:function(){return Go},PieController:function(){return Zi},PointElement:function(){return Fn},PolarAreaController:function(){return Gi},RadarController:function(){return Ji},RadialLinearScale:function(){return sa},Scale:function(){return Ks},ScatterController:function(){return Qi},SubTitle:function(){return ko},Ticks:function(){return Zt},TimeScale:function(){return da},TimeSeriesScale:function(){return fa},Title:function(){return Mo},Tooltip:function(){return Bo},_adapters:function(){return ss},_detectPlatform:function(){return Bs},animator:function(){return vi},controllers:function(){return ts},defaults:function(){return se},elements:function(){return $n},layouts:function(){return vs},plugins:function(){return Wo},registerables:function(){return pa},registry:function(){return Js},scales:function(){return ga}});const n=(t,e,i)=>Math.max(Math.min(t,i),e);function o(t){return n(s(2.55*t),0,255)}function a(t){return n(s(255*t),0,255)}function r(t){return n(s(t/2.55)/100,0,1)}function l(t){return n(s(100*t),0,100)}const h={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},c=[..."0123456789ABCDEF"],d=t=>c[15&t],u=t=>c[(240&t)>>4]+c[15&t],f=t=>(240&t)>>4==(15&t);const g=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function p(t,e,i){const s=e*Math.min(i,1-i),n=(e,n=(e+t/30)%12)=>i-s*Math.max(Math.min(n-3,9-n,1),-1);return[n(0),n(8),n(4)]}function m(t,e,i){const s=(s,n=(s+t/60)%6)=>i-i*e*Math.max(Math.min(n,4-n,1),0);return[s(5),s(3),s(1)]}function b(t,e,i){const s=p(t,1,.5);let n;for(e+i>1&&(n=1/(e+i),e*=n,i*=n),n=0;n<3;n++)s[n]*=1-e-i,s[n]+=e;return s}function x(t){const e=t.r/255,i=t.g/255,s=t.b/255,n=Math.max(e,i,s),o=Math.min(e,i,s),a=(n+o)/2;let r,l,h;return n!==o&&(h=n-o,l=a>.5?h/(2-n-o):h/(n+o),r=function(t,e,i,s,n){return t===n?(e-i)/s+(e<i?6:0):e===n?(i-t)/s+2:(t-e)/s+4}(e,i,s,h,n),r=60*r+.5),[0|r,l||0,a]}function _(t,e,i,s){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,i,s)).map(a)}function y(t,e,i){return _(p,t,e,i)}function v(t){return(t%360+360)%360}const M={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},w={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let k;const S=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,P=t=>t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055,D=t=>t<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4);function C(t,e,i){if(t){let s=x(t);s[e]=Math.max(0,Math.min(s[e]+s[e]*i,0===e?360:1)),s=y(s),t.r=s[0],t.g=s[1],t.b=s[2]}}function O(t,e){return t?Object.assign(e||{},t):t}function A(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=a(t[3]))):(e=O(t,{r:0,g:0,b:0,a:1})).a=a(e.a),e}function T(t){return"r"===t.charAt(0)?function(t){const e=S.exec(t);let i,s,a,r=255;if(e){if(e[7]!==i){const t=+e[7];r=e[8]?o(t):n(255*t,0,255)}return i=+e[1],s=+e[3],a=+e[5],i=255&(e[2]?o(i):n(i,0,255)),s=255&(e[4]?o(s):n(s,0,255)),a=255&(e[6]?o(a):n(a,0,255)),{r:i,g:s,b:a,a:r}}}(t):function(t){const e=g.exec(t);let i,s=255;if(!e)return;e[5]!==i&&(s=e[6]?o(+e[5]):a(+e[5]));const n=v(+e[2]),r=+e[3]/100,l=+e[4]/100;return i="hwb"===e[1]?function(t,e,i){return _(b,t,e,i)}(n,r,l):"hsv"===e[1]?function(t,e,i){return _(m,t,e,i)}(n,r,l):y(n,r,l),{r:i[0],g:i[1],b:i[2],a:s}}(t)}class L{constructor(t){if(t instanceof L)return t;const e=typeof t;let i;var s,n,o;"object"===e?i=A(t):"string"===e&&(o=(s=t).length,"#"===s[0]&&(4===o||5===o?n={r:255&17*h[s[1]],g:255&17*h[s[2]],b:255&17*h[s[3]],a:5===o?17*h[s[4]]:255}:7!==o&&9!==o||(n={r:h[s[1]]<<4|h[s[2]],g:h[s[3]]<<4|h[s[4]],b:h[s[5]]<<4|h[s[6]],a:9===o?h[s[7]]<<4|h[s[8]]:255})),i=n||function(t){k||(k=function(){const t={},e=Object.keys(w),i=Object.keys(M);let s,n,o,a,r;for(s=0;s<e.length;s++){for(a=r=e[s],n=0;n<i.length;n++)o=i[n],r=r.replace(o,M[o]);o=parseInt(w[a],16),t[r]=[o>>16&255,o>>8&255,255&o]}return t}(),k.transparent=[0,0,0,0]);const e=k[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}(t)||T(t)),this._rgb=i,this._valid=!!i}get valid(){return this._valid}get rgb(){var t=O(this._rgb);return t&&(t.a=r(t.a)),t}set rgb(t){this._rgb=A(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${r(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):void 0;var t}hexString(){return this._valid?(t=this._rgb,e=(t=>f(t.r)&&f(t.g)&&f(t.b)&&f(t.a))(t)?d:u,t?"#"+e(t.r)+e(t.g)+e(t.b)+((t,e)=>t<255?e(t):"")(t.a,e):void 0):void 0;var t,e}hslString(){return this._valid?function(t){if(!t)return;const e=x(t),i=e[0],s=l(e[1]),n=l(e[2]);return t.a<255?`hsla(${i}, ${s}%, ${n}%, ${r(t.a)})`:`hsl(${i}, ${s}%, ${n}%)`}(this._rgb):void 0}mix(t,e){if(t){const i=this.rgb,s=t.rgb;let n;const o=e===n?.5:e,a=2*o-1,r=i.a-s.a,l=((a*r==-1?a:(a+r)/(1+a*r))+1)/2;n=1-l,i.r=255&l*i.r+n*s.r+.5,i.g=255&l*i.g+n*s.g+.5,i.b=255&l*i.b+n*s.b+.5,i.a=o*i.a+(1-o)*s.a,this.rgb=i}return this}interpolate(t,e){return t&&(this._rgb=function(t,e,i){const s=D(r(t.r)),n=D(r(t.g)),o=D(r(t.b));return{r:a(P(s+i*(D(r(e.r))-s))),g:a(P(n+i*(D(r(e.g))-n))),b:a(P(o+i*(D(r(e.b))-o))),a:t.a+i*(e.a-t.a)}}(this._rgb,t._rgb,e)),this}clone(){return new L(this.rgb)}alpha(t){return this._rgb.a=a(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=s(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return C(this._rgb,2,t),this}darken(t){return C(this._rgb,2,-t),this}saturate(t){return C(this._rgb,1,t),this}desaturate(t){return C(this._rgb,1,-t),this}rotate(t){return function(t,e){var i=x(t);i[0]=v(i[0]+e),i=y(i),t.r=i[0],t.g=i[1],t.b=i[2]}(this._rgb,t),this}}function E(){}const R=(()=>{let t=0;return()=>t++})();function I(t){return null==t}function z(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.slice(0,7)&&"Array]"===e.slice(-6)}function F(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}function V(t){return("number"==typeof t||t instanceof Number)&&isFinite(+t)}function B(t,e){return V(t)?t:e}function W(t,e){return void 0===t?e:t}const N=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function H(t,e,i){if(t&&"function"==typeof t.call)return t.apply(i,e)}function j(t,e,i,s){let n,o,a;if(z(t))if(o=t.length,s)for(n=o-1;n>=0;n--)e.call(i,t[n],n);else for(n=0;n<o;n++)e.call(i,t[n],n);else if(F(t))for(a=Object.keys(t),o=a.length,n=0;n<o;n++)e.call(i,t[a[n]],a[n])}function $(t,e){let i,s,n,o;if(!t||!e||t.length!==e.length)return!1;for(i=0,s=t.length;i<s;++i)if(n=t[i],o=e[i],n.datasetIndex!==o.datasetIndex||n.index!==o.index)return!1;return!0}function Y(t){if(z(t))return t.map(Y);if(F(t)){const e=Object.create(null),i=Object.keys(t),s=i.length;let n=0;for(;n<s;++n)e[i[n]]=Y(t[i[n]]);return e}return t}function U(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function X(t,e,i,s){if(!U(t))return;const n=e[t],o=i[t];F(n)&&F(o)?q(n,o,s):e[t]=Y(o)}function q(t,e,i){const s=z(e)?e:[e],n=s.length;if(!F(t))return t;const o=(i=i||{}).merger||X;let a;for(let e=0;e<n;++e){if(a=s[e],!F(a))continue;const n=Object.keys(a);for(let e=0,s=n.length;e<s;++e)o(n[e],t,a,i)}return t}function K(t,e){return q(t,e,{merger:G})}function G(t,e,i){if(!U(t))return;const s=e[t],n=i[t];F(s)&&F(n)?K(s,n):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=Y(n))}const Z={"":t=>t,x:t=>t.x,y:t=>t.y};function J(t,e){const i=Z[e]||(Z[e]=function(t){const e=function(t){const e=t.split("."),i=[];let s="";for(const t of e)s+=t,s.endsWith("\\")?s=s.slice(0,-1)+".":(i.push(s),s="");return i}(t);return t=>{for(const i of e){if(""===i)break;t=t&&t[i]}return t}}(e));return i(t)}function Q(t){return t.charAt(0).toUpperCase()+t.slice(1)}const tt=t=>void 0!==t,et=t=>"function"==typeof t,it=(t,e)=>{if(t.size!==e.size)return!1;for(const i of t)if(!e.has(i))return!1;return!0},st=Math.PI,nt=2*st,ot=nt+st,at=Number.POSITIVE_INFINITY,rt=st/180,lt=st/2,ht=st/4,ct=2*st/3,dt=Math.log10,ut=Math.sign;function ft(t,e,i){return Math.abs(t-e)<i}function gt(t){const e=Math.round(t);t=ft(t,e,t/1e3)?e:t;const i=Math.pow(10,Math.floor(dt(t))),s=t/i;return(s<=1?1:s<=2?2:s<=5?5:10)*i}function pt(t){return!isNaN(parseFloat(t))&&isFinite(t)}function mt(t,e,i){let s,n,o;for(s=0,n=t.length;s<n;s++)o=t[s][i],isNaN(o)||(e.min=Math.min(e.min,o),e.max=Math.max(e.max,o))}function bt(t){return t*(st/180)}function xt(t){return t*(180/st)}function _t(t){if(!V(t))return;let e=1,i=0;for(;Math.round(t*e)/e!==t;)e*=10,i++;return i}function yt(t,e){const i=e.x-t.x,s=e.y-t.y,n=Math.sqrt(i*i+s*s);let o=Math.atan2(s,i);return o<-.5*st&&(o+=nt),{angle:o,distance:n}}function vt(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function Mt(t,e){return(t-e+ot)%nt-st}function wt(t){return(t%nt+nt)%nt}function kt(t,e,i,s){const n=wt(t),o=wt(e),a=wt(i),r=wt(o-n),l=wt(a-n),h=wt(n-o),c=wt(n-a);return n===o||n===a||s&&o===a||r>l&&h<c}function St(t,e,i){return Math.max(e,Math.min(i,t))}function Pt(t,e,i,s=1e-6){return t>=Math.min(e,i)-s&&t<=Math.max(e,i)+s}function Dt(t,e,i){i=i||(i=>t[i]<e);let s,n=t.length-1,o=0;for(;n-o>1;)s=o+n>>1,i(s)?o=s:n=s;return{lo:o,hi:n}}const Ct=(t,e,i,s)=>Dt(t,i,s?s=>{const n=t[s][e];return n<i||n===i&&t[s+1][e]===i}:s=>t[s][e]<i),Ot=(t,e,i)=>Dt(t,i,(s=>t[s][e]>=i)),At=["push","pop","shift","splice","unshift"];function Tt(t,e){const i=t._chartjs;if(!i)return;const s=i.listeners,n=s.indexOf(e);-1!==n&&s.splice(n,1),s.length>0||(At.forEach((e=>{delete t[e]})),delete t._chartjs)}function Lt(t){const e=new Set;let i,s;for(i=0,s=t.length;i<s;++i)e.add(t[i]);return e.size===s?t:Array.from(e)}const Et="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function Rt(t,e){let i=[],s=!1;return function(...n){i=n,s||(s=!0,Et.call(window,(()=>{s=!1,t.apply(e,i)})))}}const It=t=>"start"===t?"left":"end"===t?"right":"center",zt=(t,e,i)=>"start"===t?e:"end"===t?i:(e+i)/2;function Ft(t,e,i){const s=e.length;let n=0,o=s;if(t._sorted){const{iScale:a,_parsed:r}=t,l=a.axis,{min:h,max:c,minDefined:d,maxDefined:u}=a.getUserBounds();d&&(n=St(Math.min(Ct(r,a.axis,h).lo,i?s:Ct(e,l,a.getPixelForValue(h)).lo),0,s-1)),o=u?St(Math.max(Ct(r,a.axis,c,!0).hi+1,i?0:Ct(e,l,a.getPixelForValue(c),!0).hi+1),n,s)-n:s-n}return{start:n,count:o}}function Vt(t){const{xScale:e,yScale:i,_scaleRanges:s}=t,n={xmin:e.min,xmax:e.max,ymin:i.min,ymax:i.max};if(!s)return t._scaleRanges=n,!0;const o=s.xmin!==e.min||s.xmax!==e.max||s.ymin!==i.min||s.ymax!==i.max;return Object.assign(s,n),o}const Bt=t=>0===t||1===t,Wt=(t,e,i)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*nt/i),Nt=(t,e,i)=>Math.pow(2,-10*t)*Math.sin((t-e)*nt/i)+1,Ht={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*lt),easeOutSine:t=>Math.sin(t*lt),easeInOutSine:t=>-.5*(Math.cos(st*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>Bt(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>Bt(t)?t:Wt(t,.075,.3),easeOutElastic:t=>Bt(t)?t:Nt(t,.075,.3),easeInOutElastic(t){const e=.1125;return Bt(t)?t:t<.5?.5*Wt(2*t,e,.45):.5+.5*Nt(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-Ht.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,i=2.75;return t<1/i?e*t*t:t<2/i?e*(t-=1.5/i)*t+.75:t<2.5/i?e*(t-=2.25/i)*t+.9375:e*(t-=2.625/i)*t+.984375},easeInOutBounce:t=>t<.5?.5*Ht.easeInBounce(2*t):.5*Ht.easeOutBounce(2*t-1)+.5};function jt(t){if(t&&"object"==typeof t){const e=t.toString();return"[object CanvasPattern]"===e||"[object CanvasGradient]"===e}return!1}function $t(t){return jt(t)?t:new L(t)}function Yt(t){return jt(t)?t:new L(t).saturate(.5).darken(.1).hexString()}const Ut=["x","y","borderWidth","radius","tension"],Xt=["color","borderColor","backgroundColor"],qt=new Map;function Kt(t,e,i){return function(t,e){e=e||{};const i=t+JSON.stringify(e);let s=qt.get(i);return s||(s=new Intl.NumberFormat(t,e),qt.set(i,s)),s}(e,i).format(t)}const Gt={values(t){return z(t)?t:""+t},numeric(t,e,i){if(0===t)return"0";const s=this.chart.options.locale;let n,o=t;if(i.length>1){const e=Math.max(Math.abs(i[0].value),Math.abs(i[i.length-1].value));(e<1e-4||e>1e15)&&(n="scientific"),o=function(t,e){let i=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;return Math.abs(i)>=1&&t!==Math.floor(t)&&(i=t-Math.floor(t)),i}(t,i)}const a=dt(Math.abs(o)),r=Math.max(Math.min(-1*Math.floor(a),20),0),l={notation:n,minimumFractionDigits:r,maximumFractionDigits:r};return Object.assign(l,this.options.ticks.format),Kt(t,s,l)},logarithmic(t,e,i){if(0===t)return"0";const s=i[e].significand||t/Math.pow(10,Math.floor(dt(t)));return[1,2,3,5,10,15].includes(s)||e>.8*i.length?Gt.numeric.call(this,t,e,i):""}};var Zt={formatters:Gt};const Jt=Object.create(null),Qt=Object.create(null);function te(t,e){if(!e)return t;const i=e.split(".");for(let e=0,s=i.length;e<s;++e){const s=i[e];t=t[s]||(t[s]=Object.create(null))}return t}function ee(t,e,i){return"string"==typeof e?q(te(t,e),i):q(te(t,""),e)}class ie{constructor(t,e){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>Yt(e.backgroundColor),this.hoverBorderColor=(t,e)=>Yt(e.borderColor),this.hoverColor=(t,e)=>Yt(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0,includeInvisible:!1},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t),this.apply(e)}set(t,e){return ee(this,t,e)}get(t){return te(this,t)}describe(t,e){return ee(Qt,t,e)}override(t,e){return ee(Jt,t,e)}route(t,e,i,s){const n=te(this,t),o=te(this,i),a="_"+e;Object.defineProperties(n,{[a]:{value:n[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[a],e=o[s];return F(t)?Object.assign({},e,t):W(t,e)},set(t){this[a]=t}}})}apply(t){t.forEach((t=>t(this)))}}var se=new ie({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}},[function(t){t.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0}),t.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),t.set("animations",{colors:{type:"color",properties:Xt},numbers:{type:"number",properties:Ut}}),t.describe("animations",{_fallback:"animation"}),t.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}})},function(t){t.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}})},function(t){t.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1},border:{display:!0,dash:[],dashOffset:0,width:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:Zt.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),t.route("scale.ticks","color","","color"),t.route("scale.grid","color","","borderColor"),t.route("scale.border","color","","borderColor"),t.route("scale.title","color","","color"),t.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t&&"dash"!==t}),t.describe("scales",{_fallback:"scale"}),t.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t})}]);function ne(t,e,i,s,n){let o=e[n];return o||(o=e[n]=t.measureText(n).width,i.push(n)),o>s&&(s=o),s}function oe(t,e,i,s){let n=(s=s||{}).data=s.data||{},o=s.garbageCollect=s.garbageCollect||[];s.font!==e&&(n=s.data={},o=s.garbageCollect=[],s.font=e),t.save(),t.font=e;let a=0;const r=i.length;let l,h,c,d,u;for(l=0;l<r;l++)if(d=i[l],null!=d&&!0!==z(d))a=ne(t,n,o,a,d);else if(z(d))for(h=0,c=d.length;h<c;h++)u=d[h],null==u||z(u)||(a=ne(t,n,o,a,u));t.restore();const f=o.length/2;if(f>i.length){for(l=0;l<f;l++)delete n[o[l]];o.splice(0,f)}return a}function ae(t,e,i){const s=t.currentDevicePixelRatio,n=0!==i?Math.max(i/2,.5):0;return Math.round((e-n)*s)/s+n}function re(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function le(t,e,i,s){he(t,e,i,s,null)}function he(t,e,i,s,n){let o,a,r,l,h,c,d,u;const f=e.pointStyle,g=e.rotation,p=e.radius;let m=(g||0)*rt;if(f&&"object"==typeof f&&(o=f.toString(),"[object HTMLImageElement]"===o||"[object HTMLCanvasElement]"===o))return t.save(),t.translate(i,s),t.rotate(m),t.drawImage(f,-f.width/2,-f.height/2,f.width,f.height),void t.restore();if(!(isNaN(p)||p<=0)){switch(t.beginPath(),f){default:n?t.ellipse(i,s,n/2,p,0,0,nt):t.arc(i,s,p,0,nt),t.closePath();break;case"triangle":c=n?n/2:p,t.moveTo(i+Math.sin(m)*c,s-Math.cos(m)*p),m+=ct,t.lineTo(i+Math.sin(m)*c,s-Math.cos(m)*p),m+=ct,t.lineTo(i+Math.sin(m)*c,s-Math.cos(m)*p),t.closePath();break;case"rectRounded":h=.516*p,l=p-h,a=Math.cos(m+ht)*l,d=Math.cos(m+ht)*(n?n/2-h:l),r=Math.sin(m+ht)*l,u=Math.sin(m+ht)*(n?n/2-h:l),t.arc(i-d,s-r,h,m-st,m-lt),t.arc(i+u,s-a,h,m-lt,m),t.arc(i+d,s+r,h,m,m+lt),t.arc(i-u,s+a,h,m+lt,m+st),t.closePath();break;case"rect":if(!g){l=Math.SQRT1_2*p,c=n?n/2:l,t.rect(i-c,s-l,2*c,2*l);break}m+=ht;case"rectRot":d=Math.cos(m)*(n?n/2:p),a=Math.cos(m)*p,r=Math.sin(m)*p,u=Math.sin(m)*(n?n/2:p),t.moveTo(i-d,s-r),t.lineTo(i+u,s-a),t.lineTo(i+d,s+r),t.lineTo(i-u,s+a),t.closePath();break;case"crossRot":m+=ht;case"cross":d=Math.cos(m)*(n?n/2:p),a=Math.cos(m)*p,r=Math.sin(m)*p,u=Math.sin(m)*(n?n/2:p),t.moveTo(i-d,s-r),t.lineTo(i+d,s+r),t.moveTo(i+u,s-a),t.lineTo(i-u,s+a);break;case"star":d=Math.cos(m)*(n?n/2:p),a=Math.cos(m)*p,r=Math.sin(m)*p,u=Math.sin(m)*(n?n/2:p),t.moveTo(i-d,s-r),t.lineTo(i+d,s+r),t.moveTo(i+u,s-a),t.lineTo(i-u,s+a),m+=ht,d=Math.cos(m)*(n?n/2:p),a=Math.cos(m)*p,r=Math.sin(m)*p,u=Math.sin(m)*(n?n/2:p),t.moveTo(i-d,s-r),t.lineTo(i+d,s+r),t.moveTo(i+u,s-a),t.lineTo(i-u,s+a);break;case"line":a=n?n/2:Math.cos(m)*p,r=Math.sin(m)*p,t.moveTo(i-a,s-r),t.lineTo(i+a,s+r);break;case"dash":t.moveTo(i,s),t.lineTo(i+Math.cos(m)*(n?n/2:p),s+Math.sin(m)*p);break;case!1:t.closePath()}t.fill(),e.borderWidth>0&&t.stroke()}}function ce(t,e,i){return i=i||.5,!e||t&&t.x>e.left-i&&t.x<e.right+i&&t.y>e.top-i&&t.y<e.bottom+i}function de(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function ue(t){t.restore()}function fe(t,e,i,s,n){if(!e)return t.lineTo(i.x,i.y);if("middle"===n){const s=(e.x+i.x)/2;t.lineTo(s,e.y),t.lineTo(s,i.y)}else"after"===n!=!!s?t.lineTo(e.x,i.y):t.lineTo(i.x,e.y);t.lineTo(i.x,i.y)}function ge(t,e,i,s){if(!e)return t.lineTo(i.x,i.y);t.bezierCurveTo(s?e.cp1x:e.cp2x,s?e.cp1y:e.cp2y,s?i.cp2x:i.cp1x,s?i.cp2y:i.cp1y,i.x,i.y)}function pe(t,e,i,s,n,o={}){const a=z(e)?e:[e],r=o.strokeWidth>0&&""!==o.strokeColor;let l,h;for(t.save(),t.font=n.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]),I(e.rotation)||t.rotate(e.rotation),e.color&&(t.fillStyle=e.color),e.textAlign&&(t.textAlign=e.textAlign),e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,o),l=0;l<a.length;++l)h=a[l],o.backdrop&&be(t,o.backdrop),r&&(o.strokeColor&&(t.strokeStyle=o.strokeColor),I(o.strokeWidth)||(t.lineWidth=o.strokeWidth),t.strokeText(h,i,s,o.maxWidth)),t.fillText(h,i,s,o.maxWidth),me(t,i,s,h,o),s+=n.lineHeight;t.restore()}function me(t,e,i,s,n){if(n.strikethrough||n.underline){const o=t.measureText(s),a=e-o.actualBoundingBoxLeft,r=e+o.actualBoundingBoxRight,l=i-o.actualBoundingBoxAscent,h=i+o.actualBoundingBoxDescent,c=n.strikethrough?(l+h)/2:h;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=n.decorationWidth||2,t.moveTo(a,c),t.lineTo(r,c),t.stroke()}}function be(t,e){const i=t.fillStyle;t.fillStyle=e.color,t.fillRect(e.left,e.top,e.width,e.height),t.fillStyle=i}function xe(t,e){const{x:i,y:s,w:n,h:o,radius:a}=e;t.arc(i+a.topLeft,s+a.topLeft,a.topLeft,-lt,st,!0),t.lineTo(i,s+o-a.bottomLeft),t.arc(i+a.bottomLeft,s+o-a.bottomLeft,a.bottomLeft,st,lt,!0),t.lineTo(i+n-a.bottomRight,s+o),t.arc(i+n-a.bottomRight,s+o-a.bottomRight,a.bottomRight,lt,0,!0),t.lineTo(i+n,s+a.topRight),t.arc(i+n-a.topRight,s+a.topRight,a.topRight,0,-lt,!0),t.lineTo(i+a.topLeft,s)}const _e=/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/,ye=/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;function ve(t,e){const i=(""+t).match(_e);if(!i||"normal"===i[1])return 1.2*e;switch(t=+i[2],i[3]){case"px":return t;case"%":t/=100}return e*t}const Me=t=>+t||0;function we(t,e){const i={},s=F(e),n=s?Object.keys(e):e,o=F(t)?s?i=>W(t[i],t[e[i]]):e=>t[e]:()=>t;for(const t of n)i[t]=Me(o(t));return i}function ke(t){return we(t,{top:"y",right:"x",bottom:"y",left:"x"})}function Se(t){return we(t,["topLeft","topRight","bottomLeft","bottomRight"])}function Pe(t){const e=ke(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function De(t,e){t=t||{},e=e||se.font;let i=W(t.size,e.size);"string"==typeof i&&(i=parseInt(i,10));let s=W(t.style,e.style);s&&!(""+s).match(ye)&&(console.warn('Invalid font style specified: "'+s+'"'),s=void 0);const n={family:W(t.family,e.family),lineHeight:ve(W(t.lineHeight,e.lineHeight),i),size:i,style:s,weight:W(t.weight,e.weight),string:""};return n.string=function(t){return!t||I(t.size)||I(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}(n),n}function Ce(t,e,i,s){let n,o,a,r=!0;for(n=0,o=t.length;n<o;++n)if(a=t[n],void 0!==a&&(void 0!==e&&"function"==typeof a&&(a=a(e),r=!1),void 0!==i&&z(a)&&(a=a[i%a.length],r=!1),void 0!==a))return s&&!r&&(s.cacheable=!1),a}function Oe(t,e){return Object.assign(Object.create(t),e)}function Ae(t,e=[""],i=t,s,n=(()=>t[0])){tt(s)||(s=Ne("_fallback",t));const o={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:i,_fallback:s,_getTarget:n,override:n=>Ae([n,...t],e,i,s)};return new Proxy(o,{deleteProperty(e,i){return delete e[i],delete e._keys,delete t[0][i],!0},get(i,s){return Ie(i,s,(()=>function(t,e,i,s){let n;for(const o of e)if(n=Ne(Ee(o,t),i),tt(n))return Re(t,n)?Be(i,s,t,n):n}(s,e,t,i)))},getOwnPropertyDescriptor(t,e){return Reflect.getOwnPropertyDescriptor(t._scopes[0],e)},getPrototypeOf(){return Reflect.getPrototypeOf(t[0])},has(t,e){return He(t).includes(e)},ownKeys(t){return He(t)},set(t,e,i){const s=t._storage||(t._storage=n());return t[e]=s[e]=i,delete t._keys,!0}})}function Te(t,e,i,s){const n={_cacheable:!1,_proxy:t,_context:e,_subProxy:i,_stack:new Set,_descriptors:Le(t,s),setContext:e=>Te(t,e,i,s),override:n=>Te(t.override(n),e,i,s)};return new Proxy(n,{deleteProperty(e,i){return delete e[i],delete t[i],!0},get(t,e,i){return Ie(t,e,(()=>function(t,e,i){const{_proxy:s,_context:n,_subProxy:o,_descriptors:a}=t;let r=s[e];return et(r)&&a.isScriptable(e)&&(r=function(t,e,i,s){const{_proxy:n,_context:o,_subProxy:a,_stack:r}=i;if(r.has(t))throw new Error("Recursion detected: "+Array.from(r).join("->")+"->"+t);return r.add(t),e=e(o,a||s),r.delete(t),Re(t,e)&&(e=Be(n._scopes,n,t,e)),e}(e,r,t,i)),z(r)&&r.length&&(r=function(t,e,i,s){const{_proxy:n,_context:o,_subProxy:a,_descriptors:r}=i;if(tt(o.index)&&s(t))e=e[o.index%e.length];else if(F(e[0])){const i=e,s=n._scopes.filter((t=>t!==i));e=[];for(const l of i){const i=Be(s,n,t,l);e.push(Te(i,o,a&&a[t],r))}}return e}(e,r,t,a.isIndexable)),Re(e,r)&&(r=Te(r,n,o&&o[e],a)),r}(t,e,i)))},getOwnPropertyDescriptor(e,i){return e._descriptors.allKeys?Reflect.has(t,i)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,i)},getPrototypeOf(){return Reflect.getPrototypeOf(t)},has(e,i){return Reflect.has(t,i)},ownKeys(){return Reflect.ownKeys(t)},set(e,i,s){return t[i]=s,delete e[i],!0}})}function Le(t,e={scriptable:!0,indexable:!0}){const{_scriptable:i=e.scriptable,_indexable:s=e.indexable,_allKeys:n=e.allKeys}=t;return{allKeys:n,scriptable:i,indexable:s,isScriptable:et(i)?i:()=>i,isIndexable:et(s)?s:()=>s}}const Ee=(t,e)=>t?t+Q(e):e,Re=(t,e)=>F(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function Ie(t,e,i){if(Object.prototype.hasOwnProperty.call(t,e))return t[e];const s=i();return t[e]=s,s}function ze(t,e,i){return et(t)?t(e,i):t}const Fe=(t,e)=>!0===t?e:"string"==typeof t?J(e,t):void 0;function Ve(t,e,i,s,n){for(const o of e){const e=Fe(i,o);if(e){t.add(e);const o=ze(e._fallback,i,n);if(tt(o)&&o!==i&&o!==s)return o}else if(!1===e&&tt(s)&&i!==s)return null}return!1}function Be(t,e,i,s){const n=e._rootScopes,o=ze(e._fallback,i,s),a=[...t,...n],r=new Set;r.add(s);let l=We(r,a,i,o||i,s);return null!==l&&(!tt(o)||o===i||(l=We(r,a,o,l,s),null!==l))&&Ae(Array.from(r),[""],n,o,(()=>function(t,e,i){const s=t._getTarget();e in s||(s[e]={});const n=s[e];return z(n)&&F(i)?i:n||{}}(e,i,s)))}function We(t,e,i,s,n){for(;i;)i=Ve(t,e,i,s,n);return i}function Ne(t,e){for(const i of e){if(!i)continue;const e=i[t];if(tt(e))return e}}function He(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const i of t)for(const t of Object.keys(i).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}function je(t,e,i,s){const{iScale:n}=t,{key:o="r"}=this._parsing,a=new Array(s);let r,l,h,c;for(r=0,l=s;r<l;++r)h=r+i,c=e[h],a[r]={r:n.parse(J(c,o),h)};return a}const $e=Number.EPSILON||1e-14,Ye=(t,e)=>e<t.length&&!t[e].skip&&t[e],Ue=t=>"x"===t?"y":"x";function Xe(t,e,i,s){const n=t.skip?e:t,o=e,a=i.skip?e:i,r=vt(o,n),l=vt(a,o);let h=r/(r+l),c=l/(r+l);h=isNaN(h)?0:h,c=isNaN(c)?0:c;const d=s*h,u=s*c;return{previous:{x:o.x-d*(a.x-n.x),y:o.y-d*(a.y-n.y)},next:{x:o.x+u*(a.x-n.x),y:o.y+u*(a.y-n.y)}}}function qe(t,e,i){return Math.max(Math.min(t,i),e)}function Ke(t,e,i,s,n){let o,a,r,l;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)!function(t,e="x"){const i=Ue(e),s=t.length,n=Array(s).fill(0),o=Array(s);let a,r,l,h=Ye(t,0);for(a=0;a<s;++a)if(r=l,l=h,h=Ye(t,a+1),l){if(h){const t=h[e]-l[e];n[a]=0!==t?(h[i]-l[i])/t:0}o[a]=r?h?ut(n[a-1])!==ut(n[a])?0:(n[a-1]+n[a])/2:n[a-1]:n[a]}!function(t,e,i){const s=t.length;let n,o,a,r,l,h=Ye(t,0);for(let c=0;c<s-1;++c)l=h,h=Ye(t,c+1),l&&h&&(ft(e[c],0,$e)?i[c]=i[c+1]=0:(n=i[c]/e[c],o=i[c+1]/e[c],r=Math.pow(n,2)+Math.pow(o,2),r<=9||(a=3/Math.sqrt(r),i[c]=n*a*e[c],i[c+1]=o*a*e[c])))}(t,n,o),function(t,e,i="x"){const s=Ue(i),n=t.length;let o,a,r,l=Ye(t,0);for(let h=0;h<n;++h){if(a=r,r=l,l=Ye(t,h+1),!r)continue;const n=r[i],c=r[s];a&&(o=(n-a[i])/3,r[`cp1${i}`]=n-o,r[`cp1${s}`]=c-o*e[h]),l&&(o=(l[i]-n)/3,r[`cp2${i}`]=n+o,r[`cp2${s}`]=c+o*e[h])}}(t,o,e)}(t,n);else{let i=s?t[t.length-1]:t[0];for(o=0,a=t.length;o<a;++o)r=t[o],l=Xe(i,r,t[Math.min(o+1,a-(s?0:1))%a],e.tension),r.cp1x=l.previous.x,r.cp1y=l.previous.y,r.cp2x=l.next.x,r.cp2y=l.next.y,i=r}e.capBezierPoints&&function(t,e){let i,s,n,o,a,r=ce(t[0],e);for(i=0,s=t.length;i<s;++i)a=o,o=r,r=i<s-1&&ce(t[i+1],e),o&&(n=t[i],a&&(n.cp1x=qe(n.cp1x,e.left,e.right),n.cp1y=qe(n.cp1y,e.top,e.bottom)),r&&(n.cp2x=qe(n.cp2x,e.left,e.right),n.cp2y=qe(n.cp2y,e.top,e.bottom)))}(t,i)}function Ge(){return"undefined"!=typeof window&&"undefined"!=typeof document}function Ze(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function Je(t,e,i){let s;return"string"==typeof t?(s=parseInt(t,10),-1!==t.indexOf("%")&&(s=s/100*e.parentNode[i])):s=t,s}const Qe=t=>t.ownerDocument.defaultView.getComputedStyle(t,null),ti=["top","right","bottom","left"];function ei(t,e,i){const s={};i=i?"-"+i:"";for(let n=0;n<4;n++){const o=ti[n];s[o]=parseFloat(t[e+"-"+o+i])||0}return s.width=s.left+s.right,s.height=s.top+s.bottom,s}const ii=(t,e,i)=>(t>0||e>0)&&(!i||!i.shadowRoot);function si(t,e){if("native"in t)return t;const{canvas:i,currentDevicePixelRatio:s}=e,n=Qe(i),o="border-box"===n.boxSizing,a=ei(n,"padding"),r=ei(n,"border","width"),{x:l,y:h,box:c}=function(t,e){const i=t.touches,s=i&&i.length?i[0]:t,{offsetX:n,offsetY:o}=s;let a,r,l=!1;if(ii(n,o,t.target))a=n,r=o;else{const t=e.getBoundingClientRect();a=s.clientX-t.left,r=s.clientY-t.top,l=!0}return{x:a,y:r,box:l}}(t,i),d=a.left+(c&&r.left),u=a.top+(c&&r.top);let{width:f,height:g}=e;return o&&(f-=a.width+r.width,g-=a.height+r.height),{x:Math.round((l-d)/f*i.width/s),y:Math.round((h-u)/g*i.height/s)}}const ni=t=>Math.round(10*t)/10;function oi(t,e,i){const s=e||1,n=Math.floor(t.height*s),o=Math.floor(t.width*s);t.height=Math.floor(t.height),t.width=Math.floor(t.width);const a=t.canvas;return a.style&&(i||!a.style.height&&!a.style.width)&&(a.style.height=`${t.height}px`,a.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==s||a.height!==n||a.width!==o)&&(t.currentDevicePixelRatio=s,a.height=n,a.width=o,t.ctx.setTransform(s,0,0,s,0,0),!0)}const ai=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(t){}return t}();function ri(t,e){const i=function(t,e){return Qe(t).getPropertyValue(e)}(t,e),s=i&&i.match(/^(\d+)(\.\d+)?px$/);return s?+s[1]:void 0}function li(t,e,i,s){return{x:t.x+i*(e.x-t.x),y:t.y+i*(e.y-t.y)}}function hi(t,e,i,s){return{x:t.x+i*(e.x-t.x),y:"middle"===s?i<.5?t.y:e.y:"after"===s?i<1?t.y:e.y:i>0?e.y:t.y}}function ci(t,e,i,s){const n={x:t.cp2x,y:t.cp2y},o={x:e.cp1x,y:e.cp1y},a=li(t,n,i),r=li(n,o,i),l=li(o,e,i),h=li(a,r,i),c=li(r,l,i);return li(h,c,i)}function di(t,e,i){return t?function(t,e){return{x(i){return t+t+e-i},setWidth(t){e=t},textAlign(t){return"center"===t?t:"right"===t?"left":"right"},xPlus(t,e){return t-e},leftForLtr(t,e){return t-e}}}(e,i):{x(t){return t},setWidth(t){},textAlign(t){return t},xPlus(t,e){return t+e},leftForLtr(t,e){return t}}}function ui(t,e){let i,s;"ltr"!==e&&"rtl"!==e||(i=t.canvas.style,s=[i.getPropertyValue("direction"),i.getPropertyPriority("direction")],i.setProperty("direction",e,"important"),t.prevTextDirection=s)}function fi(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function gi(t){return"angle"===t?{between:kt,compare:Mt,normalize:wt}:{between:Pt,compare:(t,e)=>t-e,normalize:t=>t}}function pi({start:t,end:e,count:i,loop:s,style:n}){return{start:t%i,end:e%i,loop:s&&(e-t+1)%i==0,style:n}}function mi(t,e,i){if(!i)return[t];const{property:s,start:n,end:o}=i,a=e.length,{compare:r,between:l,normalize:h}=gi(s),{start:c,end:d,loop:u,style:f}=function(t,e,i){const{property:s,start:n,end:o}=i,{between:a,normalize:r}=gi(s),l=e.length;let h,c,{start:d,end:u,loop:f}=t;if(f){for(d+=l,u+=l,h=0,c=l;h<c&&a(r(e[d%l][s]),n,o);++h)d--,u--;d%=l,u%=l}return u<d&&(u+=l),{start:d,end:u,loop:f,style:t.style}}(t,e,i),g=[];let p,m,b,x=!1,_=null;for(let t=c,i=c;t<=d;++t)m=e[t%a],m.skip||(p=h(m[s]),p!==b&&(x=l(p,n,o),null===_&&(x||l(n,b,p)&&0!==r(n,b))&&(_=0===r(p,n)?t:i),null!==_&&(!x||0===r(o,p)||l(o,b,p))&&(g.push(pi({start:_,end:t,loop:u,count:a,style:f})),_=null),i=t,b=p));return null!==_&&g.push(pi({start:_,end:d,loop:u,count:a,style:f})),g}function bi(t,e){const i=[],s=t.segments;for(let n=0;n<s.length;n++){const o=mi(s[n],t.points,e);o.length&&i.push(...o)}return i}function xi(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function _i(t,e){return e&&JSON.stringify(t)!==JSON.stringify(e)}class yi{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,i,s){const n=e.listeners[s],o=e.duration;n.forEach((s=>s({chart:t,initial:e.initial,numSteps:o,currentStep:Math.min(i-e.start,o)})))}_refresh(){this._request||(this._running=!0,this._request=Et.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(t=Date.now()){let e=0;this._charts.forEach(((i,s)=>{if(!i.running||!i.items.length)return;const n=i.items;let o,a=n.length-1,r=!1;for(;a>=0;--a)o=n[a],o._active?(o._total>i.duration&&(i.duration=o._total),o.tick(t),r=!0):(n[a]=n[n.length-1],n.pop());r&&(s.draw(),this._notify(s,i,t,"progress")),n.length||(i.running=!1,this._notify(s,i,t,"complete"),i.initial=!1),e+=n.length})),this._lastDate=t,0===e&&(this._running=!1)}_getAnims(t){const e=this._charts;let i=e.get(t);return i||(i={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,i)),i}listen(t,e,i){this._getAnims(t).listeners[e].push(i)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const i=e.items;let s=i.length-1;for(;s>=0;--s)i[s].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}}var vi=new yi;const Mi="transparent",wi={boolean(t,e,i){return i>.5?e:t},color(t,e,i){const s=$t(t||Mi),n=s.valid&&$t(e||Mi);return n&&n.valid?n.mix(s,i).hexString():e},number(t,e,i){return t+(e-t)*i}};class ki{constructor(t,e,i,s){const n=e[i];s=Ce([t.to,s,n,t.from]);const o=Ce([t.from,n,s]);this._active=!0,this._fn=t.fn||wi[t.type||typeof o],this._easing=Ht[t.easing]||Ht.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=i,this._from=o,this._to=s,this._promises=void 0}active(){return this._active}update(t,e,i){if(this._active){this._notify(!1);const s=this._target[this._prop],n=i-this._start,o=this._duration-n;this._start=i,this._duration=Math.floor(Math.max(o,t.duration)),this._total+=n,this._loop=!!t.loop,this._to=Ce([t.to,e,s,t.from]),this._from=Ce([t.from,s,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const e=t-this._start,i=this._duration,s=this._prop,n=this._from,o=this._loop,a=this._to;let r;if(this._active=n!==a&&(o||e<i),!this._active)return this._target[s]=a,void this._notify(!0);e<0?this._target[s]=n:(r=e/i%2,r=o&&r>1?2-r:r,r=this._easing(Math.min(1,Math.max(0,r))),this._target[s]=this._fn(n,a,r))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,i)=>{t.push({res:e,rej:i})}))}_notify(t){const e=t?"res":"rej",i=this._promises||[];for(let t=0;t<i.length;t++)i[t][e]()}}class Si{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!F(t))return;const e=Object.keys(se.animation),i=this._properties;Object.getOwnPropertyNames(t).forEach((s=>{const n=t[s];if(!F(n))return;const o={};for(const t of e)o[t]=n[t];(z(n.properties)&&n.properties||[s]).forEach((t=>{t!==s&&i.has(t)||i.set(t,o)}))}))}_animateOptions(t,e){const i=e.options,s=function(t,e){if(!e)return;let i=t.options;if(i)return i.$shared&&(t.options=i=Object.assign({},i,{$shared:!1,$animations:{}})),i;t.options=e}(t,i);if(!s)return[];const n=this._createAnimations(s,i);return i.$shared&&function(t,e){const i=[],s=Object.keys(e);for(let e=0;e<s.length;e++){const n=t[s[e]];n&&n.active()&&i.push(n.wait())}return Promise.all(i)}(t.options.$animations,i).then((()=>{t.options=i}),(()=>{})),n}_createAnimations(t,e){const i=this._properties,s=[],n=t.$animations||(t.$animations={}),o=Object.keys(e),a=Date.now();let r;for(r=o.length-1;r>=0;--r){const l=o[r];if("$"===l.charAt(0))continue;if("options"===l){s.push(...this._animateOptions(t,e));continue}const h=e[l];let c=n[l];const d=i.get(l);if(c){if(d&&c.active()){c.update(d,h,a);continue}c.cancel()}d&&d.duration?(n[l]=c=new ki(d,t,l,h),s.push(c)):t[l]=h}return s}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const i=this._createAnimations(t,e);return i.length?(vi.add(this._chart,i),!0):void 0}}function Pi(t,e){const i=t&&t.options||{},s=i.reverse,n=void 0===i.min?e:0,o=void 0===i.max?e:0;return{start:s?o:n,end:s?n:o}}function Di(t,e){const i=[],s=t._getSortedDatasetMetas(e);let n,o;for(n=0,o=s.length;n<o;++n)i.push(s[n].index);return i}function Ci(t,e,i,s={}){const n=t.keys,o="single"===s.mode;let a,r,l,h;if(null!==e){for(a=0,r=n.length;a<r;++a){if(l=+n[a],l===i){if(s.all)continue;break}h=t.values[l],V(h)&&(o||0===e||ut(e)===ut(h))&&(e+=h)}return e}}function Oi(t,e){const i=t&&t.options.stacked;return i||void 0===i&&void 0!==e.stack}function Ai(t,e,i){const s=t[e]||(t[e]={});return s[i]||(s[i]={})}function Ti(t,e,i,s){for(const n of e.getMatchingVisibleMetas(s).reverse()){const e=t[n.index];if(i&&e>0||!i&&e<0)return n.index}return null}function Li(t,e){const{chart:i,_cachedMeta:s}=t,n=i._stacks||(i._stacks={}),{iScale:o,vScale:a,index:r}=s,l=o.axis,h=a.axis,c=function(t,e,i){return`${t.id}.${e.id}.${i.stack||i.type}`}(o,a,s),d=e.length;let u;for(let t=0;t<d;++t){const i=e[t],{[l]:o,[h]:d}=i;u=(i._stacks||(i._stacks={}))[h]=Ai(n,c,o),u[r]=d,u._top=Ti(u,a,!0,s.type),u._bottom=Ti(u,a,!1,s.type),(u._visualValues||(u._visualValues={}))[r]=d}}function Ei(t,e){const i=t.scales;return Object.keys(i).filter((t=>i[t].axis===e)).shift()}function Ri(t,e){const i=t.controller.index,s=t.vScale&&t.vScale.axis;if(s){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[s]||void 0===e[s][i])return;delete e[s][i],void 0!==e[s]._visualValues&&void 0!==e[s]._visualValues[i]&&delete e[s]._visualValues[i]}}}const Ii=t=>"reset"===t||"none"===t,zi=(t,e)=>e?t:Object.assign({},t);class Fi{static defaults={};static datasetElementType=null;static dataElementType=null;constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.supportsDecimation=!1,this.$context=void 0,this._syncList=[],this.datasetElementType=new.target.datasetElementType,this.dataElementType=new.target.dataElementType,this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=Oi(t.vScale,t),this.addElements(),this.options.fill&&!this.chart.isPluginEnabled("filler")&&console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options")}updateIndex(t){this.index!==t&&Ri(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,i=this.getDataset(),s=(t,e,i,s)=>"x"===t?e:"r"===t?s:i,n=e.xAxisID=W(i.xAxisID,Ei(t,"x")),o=e.yAxisID=W(i.yAxisID,Ei(t,"y")),a=e.rAxisID=W(i.rAxisID,Ei(t,"r")),r=e.indexAxis,l=e.iAxisID=s(r,n,o,a),h=e.vAxisID=s(r,o,n,a);e.xScale=this.getScaleForId(n),e.yScale=this.getScaleForId(o),e.rScale=this.getScaleForId(a),e.iScale=this.getScaleForId(l),e.vScale=this.getScaleForId(h)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&Tt(this._data,this),t._stacked&&Ri(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),i=this._data;if(F(e))this._data=function(t){const e=Object.keys(t),i=new Array(e.length);let s,n,o;for(s=0,n=e.length;s<n;++s)o=e[s],i[s]={x:o,y:t[o]};return i}(e);else if(i!==e){if(i){Tt(i,this);const t=this._cachedMeta;Ri(t),t._parsed=[]}e&&Object.isExtensible(e)&&(this,(s=e)._chartjs?s._chartjs.listeners.push(this):(Object.defineProperty(s,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[this]}}),At.forEach((t=>{const e="_onData"+Q(t),i=s[t];Object.defineProperty(s,t,{configurable:!0,enumerable:!1,value(...t){const n=i.apply(this,t);return s._chartjs.listeners.forEach((i=>{"function"==typeof i[e]&&i[e](...t)})),n}})})))),this._syncList=[],this._data=e}var s}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,i=this.getDataset();let s=!1;this._dataCheck();const n=e._stacked;e._stacked=Oi(e.vScale,e),e.stack!==i.stack&&(s=!0,Ri(e),e.stack=i.stack),this._resyncElements(t),(s||n!==e._stacked)&&Li(this,e._parsed)}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),i=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(i,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:i,_data:s}=this,{iScale:n,_stacked:o}=i,a=n.axis;let r,l,h,c=0===t&&e===s.length||i._sorted,d=t>0&&i._parsed[t-1];if(!1===this._parsing)i._parsed=s,i._sorted=!0,h=s;else{h=z(s[t])?this.parseArrayData(i,s,t,e):F(s[t])?this.parseObjectData(i,s,t,e):this.parsePrimitiveData(i,s,t,e);const n=()=>null===l[a]||d&&l[a]<d[a];for(r=0;r<e;++r)i._parsed[r+t]=l=h[r],c&&(n()&&(c=!1),d=l);i._sorted=c}o&&Li(this,h)}parsePrimitiveData(t,e,i,s){const{iScale:n,vScale:o}=t,a=n.axis,r=o.axis,l=n.getLabels(),h=n===o,c=new Array(s);let d,u,f;for(d=0,u=s;d<u;++d)f=d+i,c[d]={[a]:h||n.parse(l[f],f),[r]:o.parse(e[f],f)};return c}parseArrayData(t,e,i,s){const{xScale:n,yScale:o}=t,a=new Array(s);let r,l,h,c;for(r=0,l=s;r<l;++r)h=r+i,c=e[h],a[r]={x:n.parse(c[0],h),y:o.parse(c[1],h)};return a}parseObjectData(t,e,i,s){const{xScale:n,yScale:o}=t,{xAxisKey:a="x",yAxisKey:r="y"}=this._parsing,l=new Array(s);let h,c,d,u;for(h=0,c=s;h<c;++h)d=h+i,u=e[d],l[h]={x:n.parse(J(u,a),d),y:o.parse(J(u,r),d)};return l}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,i){const s=this.chart,n=this._cachedMeta,o=e[t.axis];return Ci({keys:Di(s,!0),values:e._stacks[t.axis]._visualValues},o,n.index,{mode:i})}updateRangeFromParsed(t,e,i,s){const n=i[e.axis];let o=null===n?NaN:n;const a=s&&i._stacks[e.axis];s&&a&&(s.values=a,o=Ci(s,n,this._cachedMeta.index)),t.min=Math.min(t.min,o),t.max=Math.max(t.max,o)}getMinMax(t,e){const i=this._cachedMeta,s=i._parsed,n=i._sorted&&t===i.iScale,o=s.length,a=this._getOtherScale(t),r=((t,e,i)=>t&&!e.hidden&&e._stacked&&{keys:Di(i,!0),values:null})(e,i,this.chart),l={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:h,max:c}=function(t){const{min:e,max:i,minDefined:s,maxDefined:n}=t.getUserBounds();return{min:s?e:Number.NEGATIVE_INFINITY,max:n?i:Number.POSITIVE_INFINITY}}(a);let d,u;function f(){u=s[d];const e=u[a.axis];return!V(u[t.axis])||h>e||c<e}for(d=0;d<o&&(f()||(this.updateRangeFromParsed(l,t,u,r),!n));++d);if(n)for(d=o-1;d>=0;--d)if(!f()){this.updateRangeFromParsed(l,t,u,r);break}return l}getAllParsedValues(t){const e=this._cachedMeta._parsed,i=[];let s,n,o;for(s=0,n=e.length;s<n;++s)o=e[s][t.axis],V(o)&&i.push(o);return i}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,i=e.iScale,s=e.vScale,n=this.getParsed(t);return{label:i?""+i.getLabelForValue(n[i.axis]):"",value:s?""+s.getLabelForValue(n[s.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,i,s,n;return F(t)?(e=t.top,i=t.right,s=t.bottom,n=t.left):e=i=s=n=t,{top:e,right:i,bottom:s,left:n,disabled:!1===t}}(W(this.options.clip,function(t,e,i){if(!1===i)return!1;const s=Pi(t,i),n=Pi(e,i);return{top:n.end,right:s.end,bottom:n.start,left:s.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,i=this._cachedMeta,s=i.data||[],n=e.chartArea,o=[],a=this._drawStart||0,r=this._drawCount||s.length-a,l=this.options.drawActiveElementsOnTop;let h;for(i.dataset&&i.dataset.draw(t,n,a,r),h=a;h<a+r;++h){const e=s[h];e.hidden||(e.active&&l?o.push(e):e.draw(t,n))}for(h=0;h<o.length;++h)o[h].draw(t,n)}getStyle(t,e){const i=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(i):this.resolveDataElementOptions(t||0,i)}getContext(t,e,i){const s=this.getDataset();let n;if(t>=0&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];n=e.$context||(e.$context=function(t,e,i){return Oe(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:i,index:e,mode:"default",type:"data"})}(this.getContext(),t,e)),n.parsed=this.getParsed(t),n.raw=s.data[t],n.index=n.dataIndex=t}else n=this.$context||(this.$context=function(t,e){return Oe(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),n.dataset=s,n.index=n.datasetIndex=this.index;return n.active=!!e,n.mode=i,n}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",i){const s="active"===e,n=this._cachedDataOpts,o=t+"-"+e,a=n[o],r=this.enableOptionSharing&&tt(i);if(a)return zi(a,r);const l=this.chart.config,h=l.datasetElementScopeKeys(this._type,t),c=s?[`${t}Hover`,"hover",t,""]:[t,""],d=l.getOptionScopes(this.getDataset(),h),u=Object.keys(se.elements[t]),f=l.resolveNamedOptions(d,u,(()=>this.getContext(i,s,e)),c);return f.$shared&&(f.$shared=r,n[o]=Object.freeze(zi(f,r))),f}_resolveAnimations(t,e,i){const s=this.chart,n=this._cachedDataOpts,o=`animation-${e}`,a=n[o];if(a)return a;let r;if(!1!==s.options.animation){const s=this.chart.config,n=s.datasetAnimationScopeKeys(this._type,e),o=s.getOptionScopes(this.getDataset(),n);r=s.createResolver(o,this.getContext(t,i,e))}const l=new Si(s,r&&r.animations);return r&&r._cacheable&&(n[o]=Object.freeze(l)),l}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||Ii(t)||this.chart._animationsDisabled}_getSharedOptions(t,e){const i=this.resolveDataElementOptions(t,e),s=this._sharedOptions,n=this.getSharedOptions(i),o=this.includeOptions(e,n)||n!==s;return this.updateSharedOptions(n,e,i),{sharedOptions:n,includeOptions:o}}updateElement(t,e,i,s){Ii(s)?Object.assign(t,i):this._resolveAnimations(e,s).update(t,i)}updateSharedOptions(t,e,i){t&&!Ii(e)&&this._resolveAnimations(void 0,e).update(t,i)}_setStyle(t,e,i,s){t.active=s;const n=this.getStyle(e,s);this._resolveAnimations(e,i,s).update(t,{options:!s&&this.getSharedOptions(n)||n})}removeHoverStyle(t,e,i){this._setStyle(t,i,"active",!1)}setHoverStyle(t,e,i){this._setStyle(t,i,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,i=this._cachedMeta.data;for(const[t,e,i]of this._syncList)this[t](e,i);this._syncList=[];const s=i.length,n=e.length,o=Math.min(n,s);o&&this.parse(0,o),n>s?this._insertElements(s,n-s,t):n<s&&this._removeElements(n,s-n)}_insertElements(t,e,i=!0){const s=this._cachedMeta,n=s.data,o=t+e;let a;const r=t=>{for(t.length+=e,a=t.length-1;a>=o;a--)t[a]=t[a-e]};for(r(n),a=t;a<o;++a)n[a]=new this.dataElementType;this._parsing&&r(s._parsed),this.parse(t,e),i&&this.updateElements(n,t,e,"reset")}updateElements(t,e,i,s){}_removeElements(t,e){const i=this._cachedMeta;if(this._parsing){const s=i._parsed.splice(t,e);i._stacked&&Ri(i,s)}i.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,i,s]=t;this[e](i,s)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);const i=arguments.length-2;i&&this._sync(["_insertElements",t,i])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function Vi(t){const e=t.iScale,i=function(t,e){if(!t._cache.$bar){const i=t.getMatchingVisibleMetas(e);let s=[];for(let e=0,n=i.length;e<n;e++)s=s.concat(i[e].controller.getAllParsedValues(t));t._cache.$bar=Lt(s.sort(((t,e)=>t-e)))}return t._cache.$bar}(e,t.type);let s,n,o,a,r=e._length;const l=()=>{32767!==o&&-32768!==o&&(tt(a)&&(r=Math.min(r,Math.abs(o-a)||r)),a=o)};for(s=0,n=i.length;s<n;++s)o=e.getPixelForValue(i[s]),l();for(a=void 0,s=0,n=e.ticks.length;s<n;++s)o=e.getPixelForTick(s),l();return r}function Bi(t,e,i,s){return z(t)?function(t,e,i,s){const n=i.parse(t[0],s),o=i.parse(t[1],s),a=Math.min(n,o),r=Math.max(n,o);let l=a,h=r;Math.abs(a)>Math.abs(r)&&(l=r,h=a),e[i.axis]=h,e._custom={barStart:l,barEnd:h,start:n,end:o,min:a,max:r}}(t,e,i,s):e[i.axis]=i.parse(t,s),e}function Wi(t,e,i,s){const n=t.iScale,o=t.vScale,a=n.getLabels(),r=n===o,l=[];let h,c,d,u;for(h=i,c=i+s;h<c;++h)u=e[h],d={},d[n.axis]=r||n.parse(a[h],h),l.push(Bi(u,d,o,h));return l}function Ni(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function Hi(t,e,i,s){let n=e.borderSkipped;const o={};if(!n)return void(t.borderSkipped=o);if(!0===n)return void(t.borderSkipped={top:!0,right:!0,bottom:!0,left:!0});const{start:a,end:r,reverse:l,top:h,bottom:c}=function(t){let e,i,s,n,o;return t.horizontal?(e=t.base>t.x,i="left",s="right"):(e=t.base<t.y,i="bottom",s="top"),e?(n="end",o="start"):(n="start",o="end"),{start:i,end:s,reverse:e,top:n,bottom:o}}(t);"middle"===n&&i&&(t.enableBorderRadius=!0,(i._top||0)===s?n=h:(i._bottom||0)===s?n=c:(o[ji(c,a,r,l)]=!0,n=h)),o[ji(n,a,r,l)]=!0,t.borderSkipped=o}function ji(t,e,i,s){var n,o,a;return s?(a=i,t=$i(t=(n=t)===(o=e)?a:n===a?o:n,i,e)):t=$i(t,e,i),t}function $i(t,e,i){return"start"===t?e:"end"===t?i:t}function Yi(t,{inflateAmount:e},i){t.inflateAmount="auto"===e?1===i?.33:0:e}class Ui extends Fi{static id="bar";static defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}};static overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};parsePrimitiveData(t,e,i,s){return Wi(t,e,i,s)}parseArrayData(t,e,i,s){return Wi(t,e,i,s)}parseObjectData(t,e,i,s){const{iScale:n,vScale:o}=t,{xAxisKey:a="x",yAxisKey:r="y"}=this._parsing,l="x"===n.axis?a:r,h="x"===o.axis?a:r,c=[];let d,u,f,g;for(d=i,u=i+s;d<u;++d)g=e[d],f={},f[n.axis]=n.parse(J(g,l),d),c.push(Bi(J(g,h),f,o,d));return c}updateRangeFromParsed(t,e,i,s){super.updateRangeFromParsed(t,e,i,s);const n=i._custom;n&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,n.min),t.max=Math.max(t.max,n.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:i,vScale:s}=e,n=this.getParsed(t),o=n._custom,a=Ni(o)?"["+o.start+", "+o.end+"]":""+s.getLabelForValue(n[s.axis]);return{label:""+i.getLabelForValue(n[i.axis]),value:a}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,i,s){const n="reset"===s,{index:o,_cachedMeta:{vScale:a}}=this,r=a.getBasePixel(),l=a.isHorizontal(),h=this._getRuler(),{sharedOptions:c,includeOptions:d}=this._getSharedOptions(e,s);for(let u=e;u<e+i;u++){const e=this.getParsed(u),i=n||I(e[a.axis])?{base:r,head:r}:this._calculateBarValuePixels(u),f=this._calculateBarIndexPixels(u,h),g=(e._stacks||{})[a.axis],p={horizontal:l,base:i.base,enableBorderRadius:!g||Ni(e._custom)||o===g._top||o===g._bottom,x:l?i.head:f.center,y:l?f.center:i.head,height:l?f.size:Math.abs(i.size),width:l?Math.abs(i.size):f.size};d&&(p.options=c||this.resolveDataElementOptions(u,t[u].active?"active":s));const m=p.options||t[u].options;Hi(p,m,g,o),Yi(p,m,h.ratio),this.updateElement(t[u],u,p,s)}}_getStacks(t,e){const{iScale:i}=this._cachedMeta,s=i.getMatchingVisibleMetas(this._type).filter((t=>t.controller.options.grouped)),n=i.options.stacked,o=[],a=t=>{const i=t.controller.getParsed(e),s=i&&i[t.vScale.axis];if(I(s)||isNaN(s))return!0};for(const i of s)if((void 0===e||!a(i))&&((!1===n||-1===o.indexOf(i.stack)||void 0===n&&void 0===i.stack)&&o.push(i.stack),i.index===t))break;return o.length||o.push(void 0),o}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,i){const s=this._getStacks(t,i),n=void 0!==e?s.indexOf(e):-1;return-1===n?s.length-1:n}_getRuler(){const t=this.options,e=this._cachedMeta,i=e.iScale,s=[];let n,o;for(n=0,o=e.data.length;n<o;++n)s.push(i.getPixelForValue(this.getParsed(n)[i.axis],n));const a=t.barThickness;return{min:a||Vi(e),pixels:s,start:i._startPixel,end:i._endPixel,stackCount:this._getStackCount(),scale:i,grouped:t.grouped,ratio:a?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:i,index:s},options:{base:n,minBarLength:o}}=this,a=n||0,r=this.getParsed(t),l=r._custom,h=Ni(l);let c,d,u=r[e.axis],f=0,g=i?this.applyStack(e,r,i):u;g!==u&&(f=g-u,g=u),h&&(u=l.barStart,g=l.barEnd-l.barStart,0!==u&&ut(u)!==ut(l.barEnd)&&(f=0),f+=u);const p=I(n)||h?f:n;let m=e.getPixelForValue(p);if(c=this.chart.getDataVisibility(t)?e.getPixelForValue(f+g):m,d=c-m,Math.abs(d)<o){d=function(t,e,i){return 0!==t?ut(t):(e.isHorizontal()?1:-1)*(e.min>=i?1:-1)}(d,e,a)*o,u===a&&(m-=d/2);const t=e.getPixelForDecimal(0),n=e.getPixelForDecimal(1),l=Math.min(t,n),f=Math.max(t,n);m=Math.max(Math.min(m,f),l),c=m+d,i&&!h&&(r._stacks[e.axis]._visualValues[s]=e.getValueForPixel(c)-e.getValueForPixel(m))}if(m===e.getPixelForValue(a)){const t=ut(d)*e.getLineWidthForValue(a)/2;m+=t,d-=t}return{size:d,base:m,head:c,center:c+d/2}}_calculateBarIndexPixels(t,e){const i=e.scale,s=this.options,n=s.skipNull,o=W(s.maxBarThickness,1/0);let a,r;if(e.grouped){const i=n?this._getStackCount(t):e.stackCount,l="flex"===s.barThickness?function(t,e,i,s){const n=e.pixels,o=n[t];let a=t>0?n[t-1]:null,r=t<n.length-1?n[t+1]:null;const l=i.categoryPercentage;null===a&&(a=o-(null===r?e.end-e.start:r-o)),null===r&&(r=o+o-a);const h=o-(o-Math.min(a,r))/2*l;return{chunk:Math.abs(r-a)/2*l/s,ratio:i.barPercentage,start:h}}(t,e,s,i):function(t,e,i,s){const n=i.barThickness;let o,a;return I(n)?(o=e.min*i.categoryPercentage,a=i.barPercentage):(o=n*s,a=1),{chunk:o/s,ratio:a,start:e.pixels[t]-o/2}}(t,e,s,i),h=this._getStackIndex(this.index,this._cachedMeta.stack,n?t:void 0);a=l.start+l.chunk*h+l.chunk/2,r=Math.min(o,l.chunk*l.ratio)}else a=i.getPixelForValue(this.getParsed(t)[i.axis],t),r=Math.min(o,e.min*e.ratio);return{base:a-r/2,head:a+r/2,center:a,size:r}}draw(){const t=this._cachedMeta,e=t.vScale,i=t.data,s=i.length;let n=0;for(;n<s;++n)null!==this.getParsed(n)[e.axis]&&i[n].draw(this._ctx)}}class Xi extends Fi{static id="bubble";static defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}};static overrides={scales:{x:{type:"linear"},y:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,i,s){const n=super.parsePrimitiveData(t,e,i,s);for(let t=0;t<n.length;t++)n[t]._custom=this.resolveDataElementOptions(t+i).radius;return n}parseArrayData(t,e,i,s){const n=super.parseArrayData(t,e,i,s);for(let t=0;t<n.length;t++){const s=e[i+t];n[t]._custom=W(s[2],this.resolveDataElementOptions(t+i).radius)}return n}parseObjectData(t,e,i,s){const n=super.parseObjectData(t,e,i,s);for(let t=0;t<n.length;t++){const s=e[i+t];n[t]._custom=W(s&&s.r&&+s.r,this.resolveDataElementOptions(t+i).radius)}return n}getMaxOverflow(){const t=this._cachedMeta.data;let e=0;for(let i=t.length-1;i>=0;--i)e=Math.max(e,t[i].size(this.resolveDataElementOptions(i))/2);return e>0&&e}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart.data.labels||[],{xScale:s,yScale:n}=e,o=this.getParsed(t),a=s.getLabelForValue(o.x),r=n.getLabelForValue(o.y),l=o._custom;return{label:i[t]||"",value:"("+a+", "+r+(l?", "+l:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,i,s){const n="reset"===s,{iScale:o,vScale:a}=this._cachedMeta,{sharedOptions:r,includeOptions:l}=this._getSharedOptions(e,s),h=o.axis,c=a.axis;for(let d=e;d<e+i;d++){const e=t[d],i=!n&&this.getParsed(d),u={},f=u[h]=n?o.getPixelForDecimal(.5):o.getPixelForValue(i[h]),g=u[c]=n?a.getBasePixel():a.getPixelForValue(i[c]);u.skip=isNaN(f)||isNaN(g),l&&(u.options=r||this.resolveDataElementOptions(d,e.active?"active":s),n&&(u.options.radius=0)),this.updateElement(e,d,u,s)}}resolveDataElementOptions(t,e){const i=this.getParsed(t);let s=super.resolveDataElementOptions(t,e);s.$shared&&(s=Object.assign({},s,{$shared:!1}));const n=s.radius;return"active"!==e&&(s.radius=0),s.radius+=W(i&&i._custom,n),s}}class qi extends Fi{static id="doughnut";static defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"};static descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i,color:s}}=t.legend.options;return e.labels.map(((e,n)=>{const o=t.getDatasetMeta(0).controller.getStyle(n);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,fontColor:s,lineWidth:o.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(n),index:n}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}}}};constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const i=this.getDataset().data,s=this._cachedMeta;if(!1===this._parsing)s._parsed=i;else{let n,o,a=t=>+i[t];if(F(i[t])){const{key:t="value"}=this._parsing;a=e=>+J(i[e],t)}for(n=t,o=t+e;n<o;++n)s._parsed[n]=a(n)}}_getRotation(){return bt(this.options.rotation-90)}_getCircumference(){return bt(this.options.circumference)}_getRotationExtents(){let t=nt,e=-nt;for(let i=0;i<this.chart.data.datasets.length;++i)if(this.chart.isDatasetVisible(i)&&this.chart.getDatasetMeta(i).type===this._type){const s=this.chart.getDatasetMeta(i).controller,n=s._getRotation(),o=s._getCircumference();t=Math.min(t,n),e=Math.max(e,n+o)}return{rotation:t,circumference:e-t}}update(t){const e=this.chart,{chartArea:i}=e,s=this._cachedMeta,n=s.data,o=this.getMaxBorderWidth()+this.getMaxOffset(n)+this.options.spacing,a=Math.max((Math.min(i.width,i.height)-o)/2,0),r=Math.min((h=a,"string"==typeof(l=this.options.cutout)&&l.endsWith("%")?parseFloat(l)/100:+l/h),1);var l,h;const c=this._getRingWeight(this.index),{circumference:d,rotation:u}=this._getRotationExtents(),{ratioX:f,ratioY:g,offsetX:p,offsetY:m}=function(t,e,i){let s=1,n=1,o=0,a=0;if(e<nt){const r=t,l=r+e,h=Math.cos(r),c=Math.sin(r),d=Math.cos(l),u=Math.sin(l),f=(t,e,s)=>kt(t,r,l,!0)?1:Math.max(e,e*i,s,s*i),g=(t,e,s)=>kt(t,r,l,!0)?-1:Math.min(e,e*i,s,s*i),p=f(0,h,d),m=f(lt,c,u),b=g(st,h,d),x=g(st+lt,c,u);s=(p-b)/2,n=(m-x)/2,o=-(p+b)/2,a=-(m+x)/2}return{ratioX:s,ratioY:n,offsetX:o,offsetY:a}}(u,d,r),b=(i.width-o)/f,x=(i.height-o)/g,_=Math.max(Math.min(b,x)/2,0),y=N(this.options.radius,_),v=(y-Math.max(y*r,0))/this._getVisibleDatasetWeightTotal();this.offsetX=p*y,this.offsetY=m*y,s.total=this.calculateTotal(),this.outerRadius=y-v*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-v*c,0),this.updateElements(n,0,n.length,t)}_circumference(t,e){const i=this.options,s=this._cachedMeta,n=this._getCircumference();return e&&i.animation.animateRotate||!this.chart.getDataVisibility(t)||null===s._parsed[t]||s.data[t].hidden?0:this.calculateCircumference(s._parsed[t]*n/nt)}updateElements(t,e,i,s){const n="reset"===s,o=this.chart,a=o.chartArea,r=o.options.animation,l=(a.left+a.right)/2,h=(a.top+a.bottom)/2,c=n&&r.animateScale,d=c?0:this.innerRadius,u=c?0:this.outerRadius,{sharedOptions:f,includeOptions:g}=this._getSharedOptions(e,s);let p,m=this._getRotation();for(p=0;p<e;++p)m+=this._circumference(p,n);for(p=e;p<e+i;++p){const e=this._circumference(p,n),i=t[p],o={x:l+this.offsetX,y:h+this.offsetY,startAngle:m,endAngle:m+e,circumference:e,outerRadius:u,innerRadius:d};g&&(o.options=f||this.resolveDataElementOptions(p,i.active?"active":s)),m+=e,this.updateElement(i,p,o,s)}}calculateTotal(){const t=this._cachedMeta,e=t.data;let i,s=0;for(i=0;i<e.length;i++){const n=t._parsed[i];null===n||isNaN(n)||!this.chart.getDataVisibility(i)||e[i].hidden||(s+=Math.abs(n))}return s}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?nt*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,s=i.data.labels||[],n=Kt(e._parsed[t],i.options.locale);return{label:s[t]||"",value:n}}getMaxBorderWidth(t){let e=0;const i=this.chart;let s,n,o,a,r;if(!t)for(s=0,n=i.data.datasets.length;s<n;++s)if(i.isDatasetVisible(s)){o=i.getDatasetMeta(s),t=o.data,a=o.controller;break}if(!t)return 0;for(s=0,n=t.length;s<n;++s)r=a.resolveDataElementOptions(s),"inner"!==r.borderAlign&&(e=Math.max(e,r.borderWidth||0,r.hoverBorderWidth||0));return e}getMaxOffset(t){let e=0;for(let i=0,s=t.length;i<s;++i){const t=this.resolveDataElementOptions(i);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let i=0;i<t;++i)this.chart.isDatasetVisible(i)&&(e+=this._getRingWeight(i));return e}_getRingWeight(t){return Math.max(W(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}class Ki extends Fi{static id="line";static defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1};static overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,this.supportsDecimation=!0,super.initialize()}update(t){const e=this._cachedMeta,{dataset:i,data:s=[],_dataset:n}=e,o=this.chart._animationsDisabled;let{start:a,count:r}=Ft(e,s,o);this._drawStart=a,this._drawCount=r,Vt(e)&&(a=0,r=s.length),i._chart=this.chart,i._datasetIndex=this.index,i._decimated=!!n._decimated,i.points=s;const l=this.resolveDatasetElementOptions(t);this.options.showLine||(l.borderWidth=0),l.segment=this.options.segment,this.updateElement(i,void 0,{animated:!o,options:l},t),this.updateElements(s,a,r,t)}updateElements(t,e,i,s){const n="reset"===s,{iScale:o,vScale:a,_stacked:r,_dataset:l}=this._cachedMeta,{sharedOptions:h,includeOptions:c}=this._getSharedOptions(e,s),d=o.axis,u=a.axis,{spanGaps:f,segment:g}=this.options,p=pt(f)?f:Number.POSITIVE_INFINITY,m=this.chart._animationsDisabled||n||"none"===s,b=e+i,x=t.length;let _=e>0&&this.getParsed(e-1);for(let i=0;i<x;++i){const f=t[i],x=m?f:{};if(i<e||i>=b){x.skip=!0;continue}const y=this.getParsed(i),v=I(y[u]),M=x[d]=o.getPixelForValue(y[d],i),w=x[u]=n||v?a.getBasePixel():a.getPixelForValue(r?this.applyStack(a,y,r):y[u],i);x.skip=isNaN(M)||isNaN(w)||v,x.stop=i>0&&Math.abs(y[d]-_[d])>p,g&&(x.parsed=y,x.raw=l.data[i]),c&&(x.options=h||this.resolveDataElementOptions(i,f.active?"active":s)),m||this.updateElement(f,i,x,s),_=y}}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,i=e.options&&e.options.borderWidth||0,s=t.data||[];if(!s.length)return i;const n=s[0].size(this.resolveDataElementOptions(0)),o=s[s.length-1].size(this.resolveDataElementOptions(s.length-1));return Math.max(i,n,o)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}}class Gi extends Fi{static id="polarArea";static defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i,color:s}}=t.legend.options;return e.labels.map(((e,n)=>{const o=t.getDatasetMeta(0).controller.getStyle(n);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,fontColor:s,lineWidth:o.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(n),index:n}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,s=i.data.labels||[],n=Kt(e._parsed[t].r,i.options.locale);return{label:s[t]||"",value:n}}parseObjectData(t,e,i,s){return je.bind(this)(t,e,i,s)}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}getMinMax(){const t=this._cachedMeta,e={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY};return t.data.forEach(((t,i)=>{const s=this.getParsed(i).r;!isNaN(s)&&this.chart.getDataVisibility(i)&&(s<e.min&&(e.min=s),s>e.max&&(e.max=s))})),e}_updateRadius(){const t=this.chart,e=t.chartArea,i=t.options,s=Math.min(e.right-e.left,e.bottom-e.top),n=Math.max(s/2,0),o=(n-Math.max(i.cutoutPercentage?n/100*i.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=n-o*this.index,this.innerRadius=this.outerRadius-o}updateElements(t,e,i,s){const n="reset"===s,o=this.chart,a=o.options.animation,r=this._cachedMeta.rScale,l=r.xCenter,h=r.yCenter,c=r.getIndexAngle(0)-.5*st;let d,u=c;const f=360/this.countVisibleElements();for(d=0;d<e;++d)u+=this._computeAngle(d,s,f);for(d=e;d<e+i;d++){const e=t[d];let i=u,g=u+this._computeAngle(d,s,f),p=o.getDataVisibility(d)?r.getDistanceFromCenterForValue(this.getParsed(d).r):0;u=g,n&&(a.animateScale&&(p=0),a.animateRotate&&(i=g=c));const m={x:l,y:h,innerRadius:0,outerRadius:p,startAngle:i,endAngle:g,options:this.resolveDataElementOptions(d,e.active?"active":s)};this.updateElement(e,d,m,s)}}countVisibleElements(){const t=this._cachedMeta;let e=0;return t.data.forEach(((t,i)=>{!isNaN(this.getParsed(i).r)&&this.chart.getDataVisibility(i)&&e++})),e}_computeAngle(t,e,i){return this.chart.getDataVisibility(t)?bt(this.resolveDataElementOptions(t,e).angle||i):0}}class Zi extends qi{static id="pie";static defaults={cutout:0,rotation:0,circumference:360,radius:"100%"}}class Ji extends Fi{static id="radar";static defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}};static overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};getLabelAndValue(t){const e=this._cachedMeta.vScale,i=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(i[e.axis])}}parseObjectData(t,e,i,s){return je.bind(this)(t,e,i,s)}update(t){const e=this._cachedMeta,i=e.dataset,s=e.data||[],n=e.iScale.getLabels();if(i.points=s,"resize"!==t){const e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0);const o={_loop:!0,_fullLoop:n.length===s.length,options:e};this.updateElement(i,void 0,o,t)}this.updateElements(s,0,s.length,t)}updateElements(t,e,i,s){const n=this._cachedMeta.rScale,o="reset"===s;for(let a=e;a<e+i;a++){const e=t[a],i=this.resolveDataElementOptions(a,e.active?"active":s),r=n.getPointPositionForValue(a,this.getParsed(a).r),l=o?n.xCenter:r.x,h=o?n.yCenter:r.y,c={x:l,y:h,angle:r.angle,skip:isNaN(l)||isNaN(h),options:i};this.updateElement(e,a,c,s)}}}class Qi extends Fi{static id="scatter";static defaults={datasetElementType:!1,dataElementType:"point",showLine:!1,fill:!1};static overrides={interaction:{mode:"point"},scales:{x:{type:"linear"},y:{type:"linear"}}};getLabelAndValue(t){const e=this._cachedMeta,i=this.chart.data.labels||[],{xScale:s,yScale:n}=e,o=this.getParsed(t),a=s.getLabelForValue(o.x),r=n.getLabelForValue(o.y);return{label:i[t]||"",value:"("+a+", "+r+")"}}update(t){const e=this._cachedMeta,{data:i=[]}=e,s=this.chart._animationsDisabled;let{start:n,count:o}=Ft(e,i,s);if(this._drawStart=n,this._drawCount=o,Vt(e)&&(n=0,o=i.length),this.options.showLine){const{dataset:n,_dataset:o}=e;n._chart=this.chart,n._datasetIndex=this.index,n._decimated=!!o._decimated,n.points=i;const a=this.resolveDatasetElementOptions(t);a.segment=this.options.segment,this.updateElement(n,void 0,{animated:!s,options:a},t)}this.updateElements(i,n,o,t)}addElements(){const{showLine:t}=this.options;!this.datasetElementType&&t&&(this.datasetElementType=this.chart.registry.getElement("line")),super.addElements()}updateElements(t,e,i,s){const n="reset"===s,{iScale:o,vScale:a,_stacked:r,_dataset:l}=this._cachedMeta,h=this.resolveDataElementOptions(e,s),c=this.getSharedOptions(h),d=this.includeOptions(s,c),u=o.axis,f=a.axis,{spanGaps:g,segment:p}=this.options,m=pt(g)?g:Number.POSITIVE_INFINITY,b=this.chart._animationsDisabled||n||"none"===s;let x=e>0&&this.getParsed(e-1);for(let h=e;h<e+i;++h){const e=t[h],i=this.getParsed(h),g=b?e:{},_=I(i[f]),y=g[u]=o.getPixelForValue(i[u],h),v=g[f]=n||_?a.getBasePixel():a.getPixelForValue(r?this.applyStack(a,i,r):i[f],h);g.skip=isNaN(y)||isNaN(v)||_,g.stop=h>0&&Math.abs(i[u]-x[u])>m,p&&(g.parsed=i,g.raw=l.data[h]),d&&(g.options=c||this.resolveDataElementOptions(h,e.active?"active":s)),b||this.updateElement(e,h,g,s),x=i}this.updateSharedOptions(c,s,h)}getMaxOverflow(){const t=this._cachedMeta,e=t.data||[];if(!this.options.showLine){let t=0;for(let i=e.length-1;i>=0;--i)t=Math.max(t,e[i].size(this.resolveDataElementOptions(i))/2);return t>0&&t}const i=t.dataset,s=i.options&&i.options.borderWidth||0;if(!e.length)return s;const n=e[0].size(this.resolveDataElementOptions(0)),o=e[e.length-1].size(this.resolveDataElementOptions(e.length-1));return Math.max(s,n,o)/2}}var ts=Object.freeze({__proto__:null,BarController:Ui,BubbleController:Xi,DoughnutController:qi,LineController:Ki,PolarAreaController:Gi,PieController:Zi,RadarController:Ji,ScatterController:Qi});function es(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class is{static override(t){Object.assign(is.prototype,t)}constructor(t){this.options=t||{}}init(){}formats(){return es()}parse(){return es()}format(){return es()}add(){return es()}diff(){return es()}startOf(){return es()}endOf(){return es()}}var ss={_date:is};function ns(t,e,i,s){const{controller:n,data:o,_sorted:a}=t,r=n._cachedMeta.iScale;if(r&&e===r.axis&&"r"!==e&&a&&o.length){const t=r._reversePixels?Ot:Ct;if(!s)return t(o,e,i);if(n._sharedOptions){const s=o[0],n="function"==typeof s.getRange&&s.getRange(e);if(n){const s=t(o,e,i-n),a=t(o,e,i+n);return{lo:s.lo,hi:a.hi}}}}return{lo:0,hi:o.length-1}}function os(t,e,i,s,n){const o=t.getSortedVisibleDatasetMetas(),a=i[e];for(let t=0,i=o.length;t<i;++t){const{index:i,data:r}=o[t],{lo:l,hi:h}=ns(o[t],e,a,n);for(let t=l;t<=h;++t){const e=r[t];e.skip||s(e,i,t)}}}function as(t,e,i,s,n){const o=[];return n||t.isPointInArea(e)?(os(t,i,e,(function(i,a,r){(n||ce(i,t.chartArea,0))&&i.inRange(e.x,e.y,s)&&o.push({element:i,datasetIndex:a,index:r})}),!0),o):o}function rs(t,e,i,s,n,o){return o||t.isPointInArea(e)?"r"!==i||s?function(t,e,i,s,n,o){let a=[];const r=function(t){const e=-1!==t.indexOf("x"),i=-1!==t.indexOf("y");return function(t,s){const n=e?Math.abs(t.x-s.x):0,o=i?Math.abs(t.y-s.y):0;return Math.sqrt(Math.pow(n,2)+Math.pow(o,2))}}(i);let l=Number.POSITIVE_INFINITY;return os(t,i,e,(function(i,h,c){const d=i.inRange(e.x,e.y,n);if(s&&!d)return;const u=i.getCenterPoint(n);if(!o&&!t.isPointInArea(u)&&!d)return;const f=r(e,u);f<l?(a=[{element:i,datasetIndex:h,index:c}],l=f):f===l&&a.push({element:i,datasetIndex:h,index:c})})),a}(t,e,i,s,n,o):function(t,e,i,s){let n=[];return os(t,i,e,(function(t,i,o){const{startAngle:a,endAngle:r}=t.getProps(["startAngle","endAngle"],s),{angle:l}=yt(t,{x:e.x,y:e.y});kt(l,a,r)&&n.push({element:t,datasetIndex:i,index:o})})),n}(t,e,i,n):[]}function ls(t,e,i,s,n){const o=[],a="x"===i?"inXRange":"inYRange";let r=!1;return os(t,i,e,((t,s,l)=>{t[a](e[i],n)&&(o.push({element:t,datasetIndex:s,index:l}),r=r||t.inRange(e.x,e.y,n))})),s&&!r?[]:o}var hs={evaluateInteractionItems:os,modes:{index(t,e,i,s){const n=si(e,t),o=i.axis||"x",a=i.includeInvisible||!1,r=i.intersect?as(t,n,o,s,a):rs(t,n,o,!1,s,a),l=[];return r.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=r[0].index,i=t.data[e];i&&!i.skip&&l.push({element:i,datasetIndex:t.index,index:e})})),l):[]},dataset(t,e,i,s){const n=si(e,t),o=i.axis||"xy",a=i.includeInvisible||!1;let r=i.intersect?as(t,n,o,s,a):rs(t,n,o,!1,s,a);if(r.length>0){const e=r[0].datasetIndex,i=t.getDatasetMeta(e).data;r=[];for(let t=0;t<i.length;++t)r.push({element:i[t],datasetIndex:e,index:t})}return r},point(t,e,i,s){return as(t,si(e,t),i.axis||"xy",s,i.includeInvisible||!1)},nearest(t,e,i,s){const n=si(e,t),o=i.axis||"xy",a=i.includeInvisible||!1;return rs(t,n,o,i.intersect,s,a)},x(t,e,i,s){return ls(t,si(e,t),"x",i.intersect,s)},y(t,e,i,s){return ls(t,si(e,t),"y",i.intersect,s)}}};const cs=["left","top","right","bottom"];function ds(t,e){return t.filter((t=>t.pos===e))}function us(t,e){return t.filter((t=>-1===cs.indexOf(t.pos)&&t.box.axis===e))}function fs(t,e){return t.sort(((t,i)=>{const s=e?i:t,n=e?t:i;return s.weight===n.weight?s.index-n.index:s.weight-n.weight}))}function gs(t,e,i,s){return Math.max(t[i],e[i])+Math.max(t[s],e[s])}function ps(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function ms(t,e,i,s){const{pos:n,box:o}=i,a=t.maxPadding;if(!F(n)){i.size&&(t[n]-=i.size);const e=s[i.stack]||{size:0,count:1};e.size=Math.max(e.size,i.horizontal?o.height:o.width),i.size=e.size/e.count,t[n]+=i.size}o.getPadding&&ps(a,o.getPadding());const r=Math.max(0,e.outerWidth-gs(a,t,"left","right")),l=Math.max(0,e.outerHeight-gs(a,t,"top","bottom")),h=r!==t.w,c=l!==t.h;return t.w=r,t.h=l,i.horizontal?{same:h,other:c}:{same:c,other:h}}function bs(t,e){const i=e.maxPadding;return function(t){const s={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{s[t]=Math.max(e[t],i[t])})),s}(t?["left","right"]:["top","bottom"])}function xs(t,e,i,s){const n=[];let o,a,r,l,h,c;for(o=0,a=t.length,h=0;o<a;++o){r=t[o],l=r.box,l.update(r.width||e.w,r.height||e.h,bs(r.horizontal,e));const{same:a,other:d}=ms(e,i,r,s);h|=a&&n.length,c=c||d,l.fullSize||n.push(r)}return h&&xs(n,e,i,s)||c}function _s(t,e,i,s,n){t.top=i,t.left=e,t.right=e+s,t.bottom=i+n,t.width=s,t.height=n}function ys(t,e,i,s){const n=i.padding;let{x:o,y:a}=e;for(const r of t){const t=r.box,l=s[r.stack]||{count:1,placed:0,weight:1},h=r.stackWeight/l.weight||1;if(r.horizontal){const s=e.w*h,o=l.size||t.height;tt(l.start)&&(a=l.start),t.fullSize?_s(t,n.left,a,i.outerWidth-n.right-n.left,o):_s(t,e.left+l.placed,a,s,o),l.start=a,l.placed+=s,a=t.bottom}else{const s=e.h*h,a=l.size||t.width;tt(l.start)&&(o=l.start),t.fullSize?_s(t,o,n.top,a,i.outerHeight-n.bottom-n.top):_s(t,o,e.top+l.placed,a,s),l.start=o,l.placed+=s,o=t.right}}e.x=o,e.y=a}var vs={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const i=t.boxes?t.boxes.indexOf(e):-1;-1!==i&&t.boxes.splice(i,1)},configure(t,e,i){e.fullSize=i.fullSize,e.position=i.position,e.weight=i.weight},update(t,e,i,s){if(!t)return;const n=Pe(t.options.layout.padding),o=Math.max(e-n.width,0),a=Math.max(i-n.height,0),r=function(t){const e=function(t){const e=[];let i,s,n,o,a,r;for(i=0,s=(t||[]).length;i<s;++i)n=t[i],({position:o,options:{stack:a,stackWeight:r=1}}=n),e.push({index:i,box:n,pos:o,horizontal:n.isHorizontal(),weight:n.weight,stack:a&&o+a,stackWeight:r});return e}(t),i=fs(e.filter((t=>t.box.fullSize)),!0),s=fs(ds(e,"left"),!0),n=fs(ds(e,"right")),o=fs(ds(e,"top"),!0),a=fs(ds(e,"bottom")),r=us(e,"x"),l=us(e,"y");return{fullSize:i,leftAndTop:s.concat(o),rightAndBottom:n.concat(l).concat(a).concat(r),chartArea:ds(e,"chartArea"),vertical:s.concat(n).concat(l),horizontal:o.concat(a).concat(r)}}(t.boxes),l=r.vertical,h=r.horizontal;j(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const c=l.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,d=Object.freeze({outerWidth:e,outerHeight:i,padding:n,availableWidth:o,availableHeight:a,vBoxMaxWidth:o/2/c,hBoxMaxHeight:a/2}),u=Object.assign({},n);ps(u,Pe(s));const f=Object.assign({maxPadding:u,w:o,h:a,x:n.left,y:n.top},n),g=function(t,e){const i=function(t){const e={};for(const i of t){const{stack:t,pos:s,stackWeight:n}=i;if(!t||!cs.includes(s))continue;const o=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});o.count++,o.weight+=n}return e}(t),{vBoxMaxWidth:s,hBoxMaxHeight:n}=e;let o,a,r;for(o=0,a=t.length;o<a;++o){r=t[o];const{fullSize:a}=r.box,l=i[r.stack],h=l&&r.stackWeight/l.weight;r.horizontal?(r.width=h?h*s:a&&e.availableWidth,r.height=n):(r.width=s,r.height=h?h*n:a&&e.availableHeight)}return i}(l.concat(h),d);xs(r.fullSize,f,d,g),xs(l,f,d,g),xs(h,f,d,g)&&xs(l,f,d,g),function(t){const e=t.maxPadding;function i(i){const s=Math.max(e[i]-t[i],0);return t[i]+=s,s}t.y+=i("top"),t.x+=i("left"),i("right"),i("bottom")}(f),ys(r.leftAndTop,f,d,g),f.x+=f.w,f.y+=f.h,ys(r.rightAndBottom,f,d,g),t.chartArea={left:f.left,top:f.top,right:f.left+f.w,bottom:f.top+f.h,height:f.h,width:f.w},j(r.chartArea,(e=>{const i=e.box;Object.assign(i,t.chartArea),i.update(f.w,f.h,{left:0,top:0,right:0,bottom:0})}))}};class Ms{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,i){}removeEventListener(t,e,i){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,i,s){return e=Math.max(0,e||t.width),i=i||t.height,{width:e,height:Math.max(0,s?Math.floor(e/s):i)}}isAttached(t){return!0}updateConfig(t){}}class ws extends Ms{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const ks="$chartjs",Ss={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},Ps=t=>null===t||""===t,Ds=!!ai&&{passive:!0};function Cs(t,e,i){t.canvas.removeEventListener(e,i,Ds)}function Os(t,e){for(const i of t)if(i===e||i.contains(e))return!0}function As(t,e,i){const s=t.canvas,n=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||Os(i.addedNodes,s),e=e&&!Os(i.removedNodes,s);e&&i()}));return n.observe(document,{childList:!0,subtree:!0}),n}function Ts(t,e,i){const s=t.canvas,n=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||Os(i.removedNodes,s),e=e&&!Os(i.addedNodes,s);e&&i()}));return n.observe(document,{childList:!0,subtree:!0}),n}const Ls=new Map;let Es=0;function Rs(){const t=window.devicePixelRatio;t!==Es&&(Es=t,Ls.forEach(((e,i)=>{i.currentDevicePixelRatio!==t&&e()})))}function Is(t,e,i){const s=t.canvas,n=s&&Ze(s);if(!n)return;const o=Rt(((t,e)=>{const s=n.clientWidth;i(t,e),s<n.clientWidth&&i()}),window),a=new ResizeObserver((t=>{const e=t[0],i=e.contentRect.width,s=e.contentRect.height;0===i&&0===s||o(i,s)}));return a.observe(n),function(t,e){Ls.size||window.addEventListener("resize",Rs),Ls.set(t,e)}(t,o),a}function zs(t,e,i){i&&i.disconnect(),"resize"===e&&function(t){Ls.delete(t),Ls.size||window.removeEventListener("resize",Rs)}(t)}function Fs(t,e,i){const s=t.canvas,n=Rt((e=>{null!==t.ctx&&i(function(t,e){const i=Ss[t.type]||t.type,{x:s,y:n}=si(t,e);return{type:i,chart:e,native:t,x:void 0!==s?s:null,y:void 0!==n?n:null}}(e,t))}),t);return function(t,e,i){t.addEventListener(e,i,Ds)}(s,e,n),n}class Vs extends Ms{acquireContext(t,e){const i=t&&t.getContext&&t.getContext("2d");return i&&i.canvas===t?(function(t,e){const i=t.style,s=t.getAttribute("height"),n=t.getAttribute("width");if(t[ks]={initial:{height:s,width:n,style:{display:i.display,height:i.height,width:i.width}}},i.display=i.display||"block",i.boxSizing=i.boxSizing||"border-box",Ps(n)){const e=ri(t,"width");void 0!==e&&(t.width=e)}if(Ps(s))if(""===t.style.height)t.height=t.width/(e||2);else{const e=ri(t,"height");void 0!==e&&(t.height=e)}}(t,e),i):null}releaseContext(t){const e=t.canvas;if(!e[ks])return!1;const i=e[ks].initial;["height","width"].forEach((t=>{const s=i[t];I(s)?e.removeAttribute(t):e.setAttribute(t,s)}));const s=i.style||{};return Object.keys(s).forEach((t=>{e.style[t]=s[t]})),e.width=e.width,delete e[ks],!0}addEventListener(t,e,i){this.removeEventListener(t,e);const s=t.$proxies||(t.$proxies={}),n={attach:As,detach:Ts,resize:Is}[e]||Fs;s[e]=n(t,e,i)}removeEventListener(t,e){const i=t.$proxies||(t.$proxies={}),s=i[e];s&&(({attach:zs,detach:zs,resize:zs}[e]||Cs)(t,e,s),i[e]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,i,s){return function(t,e,i,s){const n=Qe(t),o=ei(n,"margin"),a=Je(n.maxWidth,t,"clientWidth")||at,r=Je(n.maxHeight,t,"clientHeight")||at,l=function(t,e,i){let s,n;if(void 0===e||void 0===i){const o=Ze(t);if(o){const t=o.getBoundingClientRect(),a=Qe(o),r=ei(a,"border","width"),l=ei(a,"padding");e=t.width-l.width-r.width,i=t.height-l.height-r.height,s=Je(a.maxWidth,o,"clientWidth"),n=Je(a.maxHeight,o,"clientHeight")}else e=t.clientWidth,i=t.clientHeight}return{width:e,height:i,maxWidth:s||at,maxHeight:n||at}}(t,e,i);let{width:h,height:c}=l;if("content-box"===n.boxSizing){const t=ei(n,"border","width"),e=ei(n,"padding");h-=e.width+t.width,c-=e.height+t.height}return h=Math.max(0,h-o.width),c=Math.max(0,s?h/s:c-o.height),h=ni(Math.min(h,a,l.maxWidth)),c=ni(Math.min(c,r,l.maxHeight)),h&&!c&&(c=ni(h/2)),(void 0!==e||void 0!==i)&&s&&l.height&&c>l.height&&(c=l.height,h=ni(Math.floor(c*s))),{width:h,height:c}}(t,e,i,s)}isAttached(t){const e=Ze(t);return!(!e||!e.isConnected)}}function Bs(t){return!Ge()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?ws:Vs}class Ws{static defaults={};static defaultRoutes=void 0;active=!1;tooltipPosition(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}hasValue(){return pt(this.x)&&pt(this.y)}getProps(t,e){const i=this.$animations;if(!e||!i)return this;const s={};return t.forEach((t=>{s[t]=i[t]&&i[t].active()?i[t]._to:this[t]})),s}}function Ns(t,e,i,s,n){const o=W(s,0),a=Math.min(W(n,t.length),t.length);let r,l,h,c=0;for(i=Math.ceil(i),n&&(r=n-s,i=r/Math.floor(r/i)),h=o;h<0;)c++,h=Math.round(o+c*i);for(l=Math.max(o,0);l<a;l++)l===h&&(e.push(t[l]),c++,h=Math.round(o+c*i))}const Hs=(t,e,i)=>"top"===e||"left"===e?t[e]+i:t[e]-i,js=(t,e)=>Math.min(e||t,t);function $s(t,e){const i=[],s=t.length/e,n=t.length;let o=0;for(;o<n;o+=s)i.push(t[Math.floor(o)]);return i}function Ys(t,e,i){const s=t.ticks.length,n=Math.min(e,s-1),o=t._startPixel,a=t._endPixel,r=1e-6;let l,h=t.getPixelForTick(n);if(!(i&&(l=1===s?Math.max(h-o,a-h):0===e?(t.getPixelForTick(1)-h)/2:(h-t.getPixelForTick(n-1))/2,h+=n<e?l:-l,h<o-r||h>a+r)))return h}function Us(t){return t.drawTicks?t.tickLength:0}function Xs(t,e){if(!t.display)return 0;const i=De(t.font,e),s=Pe(t.padding);return(z(t.text)?t.text.length:1)*i.lineHeight+s.height}function qs(t,e,i){let s=It(t);return(i&&"right"!==e||!i&&"right"===e)&&(s=(t=>"left"===t?"right":"right"===t?"left":t)(s)),s}class Ks extends Ws{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:i,_suggestedMax:s}=this;return t=B(t,Number.POSITIVE_INFINITY),e=B(e,Number.NEGATIVE_INFINITY),i=B(i,Number.POSITIVE_INFINITY),s=B(s,Number.NEGATIVE_INFINITY),{min:B(t,i),max:B(e,s),minDefined:V(t),maxDefined:V(e)}}getMinMax(t){let e,{min:i,max:s,minDefined:n,maxDefined:o}=this.getUserBounds();if(n&&o)return{min:i,max:s};const a=this.getMatchingVisibleMetas();for(let r=0,l=a.length;r<l;++r)e=a[r].controller.getMinMax(this,t),n||(i=Math.min(i,e.min)),o||(s=Math.max(s,e.max));return i=o&&i>s?s:i,s=n&&i>s?i:s,{min:B(i,B(s,i)),max:B(s,B(i,s))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}getLabelItems(t=this.chart.chartArea){return this._labelItems||(this._labelItems=this._computeLabelItems(t))}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){H(this.options.beforeUpdate,[this])}update(t,e,i){const{beginAtZero:s,grace:n,ticks:o}=this.options,a=o.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=i=Object.assign({left:0,right:0,top:0,bottom:0},i),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+i.left+i.right:this.height+i.top+i.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=function(t,e,i){const{min:s,max:n}=t,o=N(e,(n-s)/2),a=(t,e)=>i&&0===t?0:t+e;return{min:a(s,-Math.abs(o)),max:a(n,o)}}(this,n,s),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const r=a<this.ticks.length;this._convertTicksToLabels(r?$s(this.ticks,a):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),o.display&&(o.autoSkip||"auto"===o.source)&&(this.ticks=function(t,e){const i=t.options.ticks,s=function(t){const e=t.options.offset,i=t._tickSize(),s=t._length/i+(e?0:1),n=t._maxLength/i;return Math.floor(Math.min(s,n))}(t),n=Math.min(i.maxTicksLimit||s,s),o=i.major.enabled?function(t){const e=[];let i,s;for(i=0,s=t.length;i<s;i++)t[i].major&&e.push(i);return e}(e):[],a=o.length,r=o[0],l=o[a-1],h=[];if(a>n)return function(t,e,i,s){let n,o=0,a=i[0];for(s=Math.ceil(s),n=0;n<t.length;n++)n===a&&(e.push(t[n]),o++,a=i[o*s])}(e,h,o,a/n),h;const c=function(t,e,i){const s=function(t){const e=t.length;let i,s;if(e<2)return!1;for(s=t[0],i=1;i<e;++i)if(t[i]-t[i-1]!==s)return!1;return s}(t),n=e.length/i;if(!s)return Math.max(n,1);const o=function(t){const e=[],i=Math.sqrt(t);let s;for(s=1;s<i;s++)t%s==0&&(e.push(s),e.push(t/s));return i===(0|i)&&e.push(i),e.sort(((t,e)=>t-e)).pop(),e}(s);for(let t=0,e=o.length-1;t<e;t++){const e=o[t];if(e>n)return e}return Math.max(n,1)}(o,e,n);if(a>0){let t,i;const s=a>1?Math.round((l-r)/(a-1)):null;for(Ns(e,h,c,I(s)?0:r-s,r),t=0,i=a-1;t<i;t++)Ns(e,h,c,o[t],o[t+1]);return Ns(e,h,c,l,I(s)?e.length:l+s),h}return Ns(e,h,c),h}(this,this.ticks),this._labelSizes=null,this.afterAutoSkip()),r&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,i=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,i=!i),this._startPixel=t,this._endPixel=e,this._reversePixels=i,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){H(this.options.afterUpdate,[this])}beforeSetDimensions(){H(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){H(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),H(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){H(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this.options.ticks;let i,s,n;for(i=0,s=t.length;i<s;i++)n=t[i],n.label=H(e.callback,[n.value,i,t],this)}afterTickToLabelConversion(){H(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){H(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,e=t.ticks,i=js(this.ticks.length,t.ticks.maxTicksLimit),s=e.minRotation||0,n=e.maxRotation;let o,a,r,l=s;if(!this._isVisible()||!e.display||s>=n||i<=1||!this.isHorizontal())return void(this.labelRotation=s);const h=this._getLabelSizes(),c=h.widest.width,d=h.highest.height,u=St(this.chart.width-c,0,this.maxWidth);o=t.offset?this.maxWidth/i:u/(i-1),c+6>o&&(o=u/(i-(t.offset?.5:1)),a=this.maxHeight-Us(t.grid)-e.padding-Xs(t.title,this.chart.options.font),r=Math.sqrt(c*c+d*d),l=xt(Math.min(Math.asin(St((h.highest.height+6)/o,-1,1)),Math.asin(St(a/r,-1,1))-Math.asin(St(d/r,-1,1)))),l=Math.max(s,Math.min(n,l))),this.labelRotation=l}afterCalculateLabelRotation(){H(this.options.afterCalculateLabelRotation,[this])}afterAutoSkip(){}beforeFit(){H(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:i,title:s,grid:n}}=this,o=this._isVisible(),a=this.isHorizontal();if(o){const o=Xs(s,e.options.font);if(a?(t.width=this.maxWidth,t.height=Us(n)+o):(t.height=this.maxHeight,t.width=Us(n)+o),i.display&&this.ticks.length){const{first:e,last:s,widest:n,highest:o}=this._getLabelSizes(),r=2*i.padding,l=bt(this.labelRotation),h=Math.cos(l),c=Math.sin(l);if(a){const e=i.mirror?0:c*n.width+h*o.height;t.height=Math.min(this.maxHeight,t.height+e+r)}else{const e=i.mirror?0:h*n.width+c*o.height;t.width=Math.min(this.maxWidth,t.width+e+r)}this._calculatePadding(e,s,c,h)}}this._handleMargins(),a?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,i,s){const{ticks:{align:n,padding:o},position:a}=this.options,r=0!==this.labelRotation,l="top"!==a&&"x"===this.axis;if(this.isHorizontal()){const a=this.getPixelForTick(0)-this.left,h=this.right-this.getPixelForTick(this.ticks.length-1);let c=0,d=0;r?l?(c=s*t.width,d=i*e.height):(c=i*t.height,d=s*e.width):"start"===n?d=e.width:"end"===n?c=t.width:"inner"!==n&&(c=t.width/2,d=e.width/2),this.paddingLeft=Math.max((c-a+o)*this.width/(this.width-a),0),this.paddingRight=Math.max((d-h+o)*this.width/(this.width-h),0)}else{let i=e.height/2,s=t.height/2;"start"===n?(i=0,s=t.height):"end"===n&&(i=e.height,s=0),this.paddingTop=i+o,this.paddingBottom=s+o}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){H(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,i;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,i=t.length;e<i;e++)I(t[e].label)&&(t.splice(e,1),i--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const e=this.options.ticks.sampleSize;let i=this.ticks;e<i.length&&(i=$s(i,e)),this._labelSizes=t=this._computeLabelSizes(i,i.length,this.options.ticks.maxTicksLimit)}return t}_computeLabelSizes(t,e,i){const{ctx:s,_longestTextCache:n}=this,o=[],a=[],r=Math.floor(e/js(e,i));let l,h,c,d,u,f,g,p,m,b,x,_=0,y=0;for(l=0;l<e;l+=r){if(d=t[l].label,u=this._resolveTickFontOptions(l),s.font=f=u.string,g=n[f]=n[f]||{data:{},gc:[]},p=u.lineHeight,m=b=0,I(d)||z(d)){if(z(d))for(h=0,c=d.length;h<c;++h)x=d[h],I(x)||z(x)||(m=ne(s,g.data,g.gc,m,x),b+=p)}else m=ne(s,g.data,g.gc,m,d),b=p;o.push(m),a.push(b),_=Math.max(m,_),y=Math.max(b,y)}!function(t,e){j(t,(t=>{const i=t.gc,s=i.length/2;let n;if(s>e){for(n=0;n<s;++n)delete t.data[i[n]];i.splice(0,s)}}))}(n,e);const v=o.indexOf(_),M=a.indexOf(y),w=t=>({width:o[t]||0,height:a[t]||0});return{first:w(0),last:w(e-1),widest:w(v),highest:w(M),widths:o,heights:a}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const e=this._startPixel+t*this._length;return St(this._alignToPixels?ae(this.chart,e,0):e,-32768,32767)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this.ticks||[];if(t>=0&&t<e.length){const i=e[t];return i.$context||(i.$context=function(t,e,i){return Oe(t,{tick:i,index:e,type:"tick"})}(this.getContext(),t,i))}return this.$context||(this.$context=Oe(this.chart.getContext(),{scale:this,type:"scale"}))}_tickSize(){const t=this.options.ticks,e=bt(this.labelRotation),i=Math.abs(Math.cos(e)),s=Math.abs(Math.sin(e)),n=this._getLabelSizes(),o=t.autoSkipPadding||0,a=n?n.widest.width+o:0,r=n?n.highest.height+o:0;return this.isHorizontal()?r*i>a*s?a/i:r/s:r*s<a*i?r/i:a/s}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this.axis,i=this.chart,s=this.options,{grid:n,position:o,border:a}=s,r=n.offset,l=this.isHorizontal(),h=this.ticks.length+(r?1:0),c=Us(n),d=[],u=a.setContext(this.getContext()),f=u.display?u.width:0,g=f/2,p=function(t){return ae(i,t,f)};let m,b,x,_,y,v,M,w,k,S,P,D;if("top"===o)m=p(this.bottom),v=this.bottom-c,w=m-g,S=p(t.top)+g,D=t.bottom;else if("bottom"===o)m=p(this.top),S=t.top,D=p(t.bottom)-g,v=m+g,w=this.top+c;else if("left"===o)m=p(this.right),y=this.right-c,M=m-g,k=p(t.left)+g,P=t.right;else if("right"===o)m=p(this.left),k=t.left,P=p(t.right)-g,y=m+g,M=this.left+c;else if("x"===e){if("center"===o)m=p((t.top+t.bottom)/2+.5);else if(F(o)){const t=Object.keys(o)[0],e=o[t];m=p(this.chart.scales[t].getPixelForValue(e))}S=t.top,D=t.bottom,v=m+g,w=v+c}else if("y"===e){if("center"===o)m=p((t.left+t.right)/2);else if(F(o)){const t=Object.keys(o)[0],e=o[t];m=p(this.chart.scales[t].getPixelForValue(e))}y=m-g,M=y-c,k=t.left,P=t.right}const C=W(s.ticks.maxTicksLimit,h),O=Math.max(1,Math.ceil(h/C));for(b=0;b<h;b+=O){const t=this.getContext(b),e=n.setContext(t),s=a.setContext(t),o=e.lineWidth,h=e.color,c=s.dash||[],u=s.dashOffset,f=e.tickWidth,g=e.tickColor,p=e.tickBorderDash||[],m=e.tickBorderDashOffset;x=Ys(this,b,r),void 0!==x&&(_=ae(i,x,o),l?y=M=k=P=_:v=w=S=D=_,d.push({tx1:y,ty1:v,tx2:M,ty2:w,x1:k,y1:S,x2:P,y2:D,width:o,color:h,borderDash:c,borderDashOffset:u,tickWidth:f,tickColor:g,tickBorderDash:p,tickBorderDashOffset:m}))}return this._ticksLength=h,this._borderValue=m,d}_computeLabelItems(t){const e=this.axis,i=this.options,{position:s,ticks:n}=i,o=this.isHorizontal(),a=this.ticks,{align:r,crossAlign:l,padding:h,mirror:c}=n,d=Us(i.grid),u=d+h,f=c?-h:u,g=-bt(this.labelRotation),p=[];let m,b,x,_,y,v,M,w,k,S,P,D,C="middle";if("top"===s)v=this.bottom-f,M=this._getXAxisLabelAlignment();else if("bottom"===s)v=this.top+f,M=this._getXAxisLabelAlignment();else if("left"===s){const t=this._getYAxisLabelAlignment(d);M=t.textAlign,y=t.x}else if("right"===s){const t=this._getYAxisLabelAlignment(d);M=t.textAlign,y=t.x}else if("x"===e){if("center"===s)v=(t.top+t.bottom)/2+u;else if(F(s)){const t=Object.keys(s)[0],e=s[t];v=this.chart.scales[t].getPixelForValue(e)+u}M=this._getXAxisLabelAlignment()}else if("y"===e){if("center"===s)y=(t.left+t.right)/2-u;else if(F(s)){const t=Object.keys(s)[0],e=s[t];y=this.chart.scales[t].getPixelForValue(e)}M=this._getYAxisLabelAlignment(d).textAlign}"y"===e&&("start"===r?C="top":"end"===r&&(C="bottom"));const O=this._getLabelSizes();for(m=0,b=a.length;m<b;++m){x=a[m],_=x.label;const t=n.setContext(this.getContext(m));w=this.getPixelForTick(m)+n.labelOffset,k=this._resolveTickFontOptions(m),S=k.lineHeight,P=z(_)?_.length:1;const e=P/2,i=t.color,r=t.textStrokeColor,h=t.textStrokeWidth;let d,u=M;if(o?(y=w,"inner"===M&&(u=m===b-1?this.options.reverse?"left":"right":0===m?this.options.reverse?"right":"left":"center"),D="top"===s?"near"===l||0!==g?-P*S+S/2:"center"===l?-O.highest.height/2-e*S+S:-O.highest.height+S/2:"near"===l||0!==g?S/2:"center"===l?O.highest.height/2-e*S:O.highest.height-P*S,c&&(D*=-1),0===g||t.showLabelBackdrop||(y+=S/2*Math.sin(g))):(v=w,D=(1-P)*S/2),t.showLabelBackdrop){const e=Pe(t.backdropPadding),i=O.heights[m],s=O.widths[m];let n=D-e.top,o=0-e.left;switch(C){case"middle":n-=i/2;break;case"bottom":n-=i}switch(M){case"center":o-=s/2;break;case"right":o-=s}d={left:o,top:n,width:s+e.width,height:i+e.height,color:t.backdropColor}}p.push({label:_,font:k,textOffset:D,options:{rotation:g,color:i,strokeColor:r,strokeWidth:h,textAlign:u,textBaseline:C,translation:[y,v],backdrop:d}})}return p}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-bt(this.labelRotation))return"top"===t?"left":"right";let i="center";return"start"===e.align?i="left":"end"===e.align?i="right":"inner"===e.align&&(i="inner"),i}_getYAxisLabelAlignment(t){const{position:e,ticks:{crossAlign:i,mirror:s,padding:n}}=this.options,o=t+n,a=this._getLabelSizes().widest.width;let r,l;return"left"===e?s?(l=this.right+n,"near"===i?r="left":"center"===i?(r="center",l+=a/2):(r="right",l+=a)):(l=this.right-o,"near"===i?r="right":"center"===i?(r="center",l-=a/2):(r="left",l=this.left)):"right"===e?s?(l=this.left+n,"near"===i?r="right":"center"===i?(r="center",l-=a/2):(r="left",l-=a)):(l=this.left+o,"near"===i?r="left":"center"===i?(r="center",l+=a/2):(r="right",l=this.right)):r="right",{textAlign:r,x:l}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:i,top:s,width:n,height:o}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(i,s,n,o),t.restore())}getLineWidthForValue(t){const e=this.options.grid;if(!this._isVisible()||!e.display)return 0;const i=this.ticks.findIndex((e=>e.value===t));return i>=0?e.setContext(this.getContext(i)).lineWidth:0}drawGrid(t){const e=this.options.grid,i=this.ctx,s=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let n,o;const a=(t,e,s)=>{s.width&&s.color&&(i.save(),i.lineWidth=s.width,i.strokeStyle=s.color,i.setLineDash(s.borderDash||[]),i.lineDashOffset=s.borderDashOffset,i.beginPath(),i.moveTo(t.x,t.y),i.lineTo(e.x,e.y),i.stroke(),i.restore())};if(e.display)for(n=0,o=s.length;n<o;++n){const t=s[n];e.drawOnChartArea&&a({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&a({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:e,options:{border:i,grid:s}}=this,n=i.setContext(this.getContext()),o=i.display?n.width:0;if(!o)return;const a=s.setContext(this.getContext(0)).lineWidth,r=this._borderValue;let l,h,c,d;this.isHorizontal()?(l=ae(t,this.left,o)-o/2,h=ae(t,this.right,a)+a/2,c=d=r):(c=ae(t,this.top,o)-o/2,d=ae(t,this.bottom,a)+a/2,l=h=r),e.save(),e.lineWidth=n.width,e.strokeStyle=n.color,e.beginPath(),e.moveTo(l,c),e.lineTo(h,d),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;const e=this.ctx,i=this._computeLabelArea();i&&de(e,i);const s=this.getLabelItems(t);for(const t of s){const i=t.options,s=t.font;pe(e,t.label,0,t.textOffset,s,i)}i&&ue(e)}drawTitle(){const{ctx:t,options:{position:e,title:i,reverse:s}}=this;if(!i.display)return;const n=De(i.font),o=Pe(i.padding),a=i.align;let r=n.lineHeight/2;"bottom"===e||"center"===e||F(e)?(r+=o.bottom,z(i.text)&&(r+=n.lineHeight*(i.text.length-1))):r+=o.top;const{titleX:l,titleY:h,maxWidth:c,rotation:d}=function(t,e,i,s){const{top:n,left:o,bottom:a,right:r,chart:l}=t,{chartArea:h,scales:c}=l;let d,u,f,g=0;const p=a-n,m=r-o;if(t.isHorizontal()){if(u=zt(s,o,r),F(i)){const t=Object.keys(i)[0],s=i[t];f=c[t].getPixelForValue(s)+p-e}else f="center"===i?(h.bottom+h.top)/2+p-e:Hs(t,i,e);d=r-o}else{if(F(i)){const t=Object.keys(i)[0],s=i[t];u=c[t].getPixelForValue(s)-m+e}else u="center"===i?(h.left+h.right)/2-m+e:Hs(t,i,e);f=zt(s,a,n),g="left"===i?-lt:lt}return{titleX:u,titleY:f,maxWidth:d,rotation:g}}(this,r,e,a);pe(t,i.text,0,0,n,{color:i.color,maxWidth:c,rotation:d,textAlign:qs(a,e,s),textBaseline:"middle",translation:[l,h]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,e=t.ticks&&t.ticks.z||0,i=W(t.grid&&t.grid.z,-1),s=W(t.border&&t.border.z,0);return this._isVisible()&&this.draw===Ks.prototype.draw?[{z:i,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:s,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),i=this.axis+"AxisID",s=[];let n,o;for(n=0,o=e.length;n<o;++n){const o=e[n];o[i]!==this.id||t&&o.type!==t||s.push(o)}return s}_resolveTickFontOptions(t){return De(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class Gs{constructor(t,e,i){this.type=t,this.scope=e,this.override=i,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=Object.getPrototypeOf(t);let i;(function(t){return"id"in t&&"defaults"in t})(e)&&(i=this.register(e));const s=this.items,n=t.id,o=this.scope+"."+n;if(!n)throw new Error("class does not have id: "+t);return n in s||(s[n]=t,function(t,e,i){const s=q(Object.create(null),[i?se.get(i):{},se.get(e),t.defaults]);se.set(e,s),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((i=>{const s=i.split("."),n=s.pop(),o=[t].concat(s).join("."),a=e[i].split("."),r=a.pop(),l=a.join(".");se.route(o,n,l,r)}))}(e,t.defaultRoutes),t.descriptors&&se.describe(e,t.descriptors)}(t,o,i),this.override&&se.override(t.id,t.overrides)),o}get(t){return this.items[t]}unregister(t){const e=this.items,i=t.id,s=this.scope;i in e&&delete e[i],s&&i in se[s]&&(delete se[s][i],this.override&&delete Jt[i])}}class Zs{constructor(){this.controllers=new Gs(Fi,"datasets",!0),this.elements=new Gs(Ws,"elements"),this.plugins=new Gs(Object,"plugins"),this.scales=new Gs(Ks,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,i){[...e].forEach((e=>{const s=i||this._getRegistryForType(e);i||s.isForType(e)||s===this.plugins&&e.id?this._exec(t,s,e):j(e,(e=>{const s=i||this._getRegistryForType(e);this._exec(t,s,e)}))}))}_exec(t,e,i){const s=Q(t);H(i["before"+s],[],i),e[t](i),H(i["after"+s],[],i)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const i=this._typedRegistries[e];if(i.isForType(t))return i}return this.plugins}_get(t,e,i){const s=e.get(t);if(void 0===s)throw new Error('"'+t+'" is not a registered '+i+".");return s}}var Js=new Zs;class Qs{constructor(){this._init=[]}notify(t,e,i,s){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const n=s?this._descriptors(t).filter(s):this._descriptors(t),o=this._notify(n,t,e,i);return"afterDestroy"===e&&(this._notify(n,t,"stop"),this._notify(this._init,t,"uninstall")),o}_notify(t,e,i,s){s=s||{};for(const n of t){const t=n.plugin;if(!1===H(t[i],[e,s,n.options],t)&&s.cancelable)return!1}return!0}invalidate(){I(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const i=t&&t.config,s=W(i.options&&i.options.plugins,{}),n=function(t){const e={},i=[],s=Object.keys(Js.plugins.items);for(let t=0;t<s.length;t++)i.push(Js.getPlugin(s[t]));const n=t.plugins||[];for(let t=0;t<n.length;t++){const s=n[t];-1===i.indexOf(s)&&(i.push(s),e[s.id]=!0)}return{plugins:i,localIds:e}}(i);return!1!==s||e?function(t,{plugins:e,localIds:i},s,n){const o=[],a=t.getContext();for(const r of e){const e=r.id,l=tn(s[e],n);null!==l&&o.push({plugin:r,options:en(t.config,{plugin:r,local:i[e]},l,a)})}return o}(t,n,s,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],i=this._cache,s=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(s(e,i),t,"stop"),this._notify(s(i,e),t,"start")}}function tn(t,e){return e||!1!==t?!0===t?{}:t:null}function en(t,{plugin:e,local:i},s,n){const o=t.pluginScopeKeys(e),a=t.getOptionScopes(s,o);return i&&e.defaults&&a.push(e.defaults),t.createResolver(a,n,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function sn(t,e){const i=se.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||i.indexAxis||"x"}function nn(t,e){if("x"===t||"y"===t||"r"===t)return t;var i;if(t=e.axis||("top"===(i=e.position)||"bottom"===i?"x":"left"===i||"right"===i?"y":void 0)||t.length>1&&nn(t[0].toLowerCase(),e))return t;throw new Error(`Cannot determine type of '${name}' axis. Please provide 'axis' or 'position' option.`)}function on(t){const e=t.options||(t.options={});e.plugins=W(e.plugins,{}),e.scales=function(t,e){const i=Jt[t.type]||{scales:{}},s=e.scales||{},n=sn(t.type,e),o=Object.create(null);return Object.keys(s).forEach((t=>{const e=s[t];if(!F(e))return console.error(`Invalid scale configuration for scale: ${t}`);if(e._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${t}`);const a=nn(t,e),r=function(t,e){return t===e?"_index_":"_value_"}(a,n),l=i.scales||{};o[t]=K(Object.create(null),[{axis:a},e,l[a],l[r]])})),t.data.datasets.forEach((i=>{const n=i.type||t.type,a=i.indexAxis||sn(n,e),r=(Jt[n]||{}).scales||{};Object.keys(r).forEach((t=>{const e=function(t,e){let i=t;return"_index_"===t?i=e:"_value_"===t&&(i="x"===e?"y":"x"),i}(t,a),n=i[e+"AxisID"]||e;o[n]=o[n]||Object.create(null),K(o[n],[{axis:e},s[n],r[t]])}))})),Object.keys(o).forEach((t=>{const e=o[t];K(e,[se.scales[e.type],se.scale])})),o}(t,e)}function an(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const rn=new Map,ln=new Set;function hn(t,e){let i=rn.get(t);return i||(i=e(),rn.set(t,i),ln.add(i)),i}const cn=(t,e,i)=>{const s=J(e,i);void 0!==s&&t.add(s)};class dn{constructor(t){this._config=function(t){return(t=t||{}).data=an(t.data),on(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=an(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),on(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return hn(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return hn(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return hn(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return hn(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const i=this._scopeCache;let s=i.get(t);return s&&!e||(s=new Map,i.set(t,s)),s}getOptionScopes(t,e,i){const{options:s,type:n}=this,o=this._cachedScopes(t,i),a=o.get(e);if(a)return a;const r=new Set;e.forEach((e=>{t&&(r.add(t),e.forEach((e=>cn(r,t,e)))),e.forEach((t=>cn(r,s,t))),e.forEach((t=>cn(r,Jt[n]||{},t))),e.forEach((t=>cn(r,se,t))),e.forEach((t=>cn(r,Qt,t)))}));const l=Array.from(r);return 0===l.length&&l.push(Object.create(null)),ln.has(e)&&o.set(e,l),l}chartOptionScopes(){const{options:t,type:e}=this;return[t,Jt[e]||{},se.datasets[e]||{},{type:e},se,Qt]}resolveNamedOptions(t,e,i,s=[""]){const n={$shared:!0},{resolver:o,subPrefixes:a}=un(this._resolverCache,t,s);let r=o;(function(t,e){const{isScriptable:i,isIndexable:s}=Le(t);for(const n of e){const e=i(n),o=s(n),a=(o||e)&&t[n];if(e&&(et(a)||fn(a))||o&&z(a))return!0}return!1})(o,e)&&(n.$shared=!1,r=Te(o,i=et(i)?i():i,this.createResolver(t,i,a)));for(const t of e)n[t]=r[t];return n}createResolver(t,e,i=[""],s){const{resolver:n}=un(this._resolverCache,t,i);return F(e)?Te(n,e,void 0,s):n}}function un(t,e,i){let s=t.get(e);s||(s=new Map,t.set(e,s));const n=i.join();let o=s.get(n);return o||(o={resolver:Ae(e,i),subPrefixes:i.filter((t=>!t.toLowerCase().includes("hover")))},s.set(n,o)),o}const fn=t=>F(t)&&Object.getOwnPropertyNames(t).reduce(((e,i)=>e||et(t[i])),!1),gn=["top","bottom","left","right","chartArea"];function pn(t,e){return"top"===t||"bottom"===t||-1===gn.indexOf(t)&&"x"===e}function mn(t,e){return function(i,s){return i[t]===s[t]?i[e]-s[e]:i[t]-s[t]}}function bn(t){const e=t.chart,i=e.options.animation;e.notifyPlugins("afterRender"),H(i&&i.onComplete,[t],e)}function xn(t){const e=t.chart,i=e.options.animation;H(i&&i.onProgress,[t],e)}function _n(t){return Ge()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const yn={},vn=t=>{const e=_n(t);return Object.values(yn).filter((t=>t.canvas===e)).pop()};function Mn(t,e,i){const s=Object.keys(t);for(const n of s){const s=+n;if(s>=e){const o=t[n];delete t[n],(i>0||s>e)&&(t[s+i]=o)}}}class wn{static defaults=se;static instances=yn;static overrides=Jt;static registry=Js;static version="4.2.1";static getChart=vn;static register(...t){Js.add(...t),kn()}static unregister(...t){Js.remove(...t),kn()}constructor(t,e){const i=this.config=new dn(e),s=_n(t),n=vn(s);if(n)throw new Error("Canvas is already in use. Chart with ID '"+n.id+"' must be destroyed before the canvas with ID '"+n.canvas.id+"' can be reused.");const o=i.createResolver(i.chartOptionScopes(),this.getContext());this.platform=new(i.platform||Bs(s)),this.platform.updateConfig(i);const a=this.platform.acquireContext(s,o.aspectRatio),r=a&&a.canvas,l=r&&r.height,h=r&&r.width;this.id=R(),this.ctx=a,this.canvas=r,this.width=h,this.height=l,this._options=o,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new Qs,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(t,e){let i;return function(...s){return e?(clearTimeout(i),i=setTimeout(t,e,s)):t.apply(this,s),e}}((t=>this.update(t)),o.resizeDelay||0),this._dataChanges=[],yn[this.id]=this,a&&r?(vi.listen(this,"complete",bn),vi.listen(this,"progress",xn),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:i,height:s,_aspectRatio:n}=this;return I(t)?e&&n?n:s?i/s:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}get registry(){return Js}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():oi(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return re(this.canvas,this.ctx),this}stop(){return vi.stop(this),this}resize(t,e){vi.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const i=this.options,s=this.canvas,n=i.maintainAspectRatio&&this.aspectRatio,o=this.platform.getMaximumSize(s,t,e,n),a=i.devicePixelRatio||this.platform.getDevicePixelRatio(),r=this.width?"resize":"attach";this.width=o.width,this.height=o.height,this._aspectRatio=this.aspectRatio,oi(this,a,!0)&&(this.notifyPlugins("resize",{size:o}),H(i.onResize,[this,o],this),this.attached&&this._doResize(r)&&this.render())}ensureScalesHaveIDs(){j(this.options.scales||{},((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this.options,e=t.scales,i=this.scales,s=Object.keys(i).reduce(((t,e)=>(t[e]=!1,t)),{});let n=[];e&&(n=n.concat(Object.keys(e).map((t=>{const i=e[t],s=nn(t,i),n="r"===s,o="x"===s;return{options:i,dposition:n?"chartArea":o?"bottom":"left",dtype:n?"radialLinear":o?"category":"linear"}})))),j(n,(e=>{const n=e.options,o=n.id,a=nn(o,n),r=W(n.type,e.dtype);void 0!==n.position&&pn(n.position,a)===pn(e.dposition)||(n.position=e.dposition),s[o]=!0;let l=null;o in i&&i[o].type===r?l=i[o]:(l=new(Js.getScale(r))({id:o,type:r,ctx:this.ctx,chart:this}),i[l.id]=l),l.init(n,t)})),j(s,((t,e)=>{t||delete i[e]})),j(i,(t=>{vs.configure(this,t,t.options),vs.addBox(this,t)}))}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,i=t.length;if(t.sort(((t,e)=>t.index-e.index)),i>e){for(let t=e;t<i;++t)this._destroyDatasetMeta(t);t.splice(e,i-e)}this._sortedMetasets=t.slice(0).sort(mn("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach(((t,i)=>{0===e.filter((e=>e===t._dataset)).length&&this._destroyDatasetMeta(i)}))}buildOrUpdateControllers(){const t=[],e=this.data.datasets;let i,s;for(this._removeUnreferencedMetasets(),i=0,s=e.length;i<s;i++){const s=e[i];let n=this.getDatasetMeta(i);const o=s.type||this.config.type;if(n.type&&n.type!==o&&(this._destroyDatasetMeta(i),n=this.getDatasetMeta(i)),n.type=o,n.indexAxis=s.indexAxis||sn(o,this.options),n.order=s.order||0,n.index=i,n.label=""+s.label,n.visible=this.isDatasetVisible(i),n.controller)n.controller.updateIndex(i),n.controller.linkScales();else{const e=Js.getController(o),{datasetElementType:s,dataElementType:a}=se.datasets[o];Object.assign(e,{dataElementType:Js.getElement(a),datasetElementType:s&&Js.getElement(s)}),n.controller=new e(this,i),t.push(n.controller)}}return this._updateMetasets(),t}_resetElements(){j(this.data.datasets,((t,e)=>{this.getDatasetMeta(e).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this.config;e.update();const i=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),s=this._animationsDisabled=!i.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const n=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let o=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const{controller:e}=this.getDatasetMeta(t),i=!s&&-1===n.indexOf(e);e.buildOrUpdateElements(i),o=Math.max(+e.getMaxOverflow(),o)}o=this._minPadding=i.layout.autoPadding?o:0,this._updateLayout(o),s||j(n,(t=>{t.reset()})),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(mn("z","_idx"));const{_active:a,_lastEvent:r}=this;r?this._eventHandler(r,!0):a.length&&this._updateHoverStyles(a,a,!0),this.render()}_updateScales(){j(this.scales,(t=>{vs.removeBox(this,t)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,e=new Set(Object.keys(this._listeners)),i=new Set(t.events);it(e,i)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(const{method:i,start:s,count:n}of e)Mn(t,s,"_removeElements"===i?-n:n)}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const e=this.data.datasets.length,i=e=>new Set(t.filter((t=>t[0]===e)).map(((t,e)=>e+","+t.splice(1).join(",")))),s=i(0);for(let t=1;t<e;t++)if(!it(s,i(t)))return;return Array.from(s).map((t=>t.split(","))).map((t=>({method:t[1],start:+t[2],count:+t[3]})))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;vs.update(this,this.width,this.height,t);const e=this.chartArea,i=e.width<=0||e.height<=0;this._layers=[],j(this.boxes,(t=>{i&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))}),this),this._layers.forEach(((t,e)=>{t._idx=e})),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let e=0,i=this.data.datasets.length;e<i;++e)this._updateDataset(e,et(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const i=this.getDatasetMeta(t),s={meta:i,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",s)&&(i.controller._update(e),s.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",s))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(vi.has(this)?this.attached&&!vi.running(this)&&vi.start(this):(this.draw(),bn({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resize(t,e),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,i=[];let s,n;for(s=0,n=e.length;s<n;++s){const n=e[s];t&&!n.visible||i.push(n)}return i}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this.ctx,i=t._clip,s=!i.disabled,n=function(t){const{xScale:e,yScale:i}=t;if(e&&i)return{left:e.left,right:e.right,top:i.top,bottom:i.bottom}}(t)||this.chartArea,o={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",o)&&(s&&de(e,{left:!1===i.left?0:n.left-i.left,right:!1===i.right?this.width:n.right+i.right,top:!1===i.top?0:n.top-i.top,bottom:!1===i.bottom?this.height:n.bottom+i.bottom}),t.controller.draw(),s&&ue(e),o.cancelable=!1,this.notifyPlugins("afterDatasetDraw",o))}isPointInArea(t){return ce(t,this.chartArea,this._minPadding)}getElementsAtEventForMode(t,e,i,s){const n=hs.modes[e];return"function"==typeof n?n(this,t,i,s):[]}getDatasetMeta(t){const e=this.data.datasets[t],i=this._metasets;let s=i.filter((t=>t&&t._dataset===e)).pop();return s||(s={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},i.push(s)),s}getContext(){return this.$context||(this.$context=Oe(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const i=this.getDatasetMeta(t);return"boolean"==typeof i.hidden?!i.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,i){const s=i?"show":"hide",n=this.getDatasetMeta(t),o=n.controller._resolveAnimations(void 0,s);tt(e)?(n.data[e].hidden=!i,this.update()):(this.setDatasetVisibility(t,i),o.update(n,{visible:i}),this.update((e=>e.datasetIndex===t?s:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),vi.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),re(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),delete yn[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,e=this.platform,i=(i,s)=>{e.addEventListener(this,i,s),t[i]=s},s=(t,e,i)=>{t.offsetX=e,t.offsetY=i,this._eventHandler(t)};j(this.options.events,(t=>i(t,s)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,e=this.platform,i=(i,s)=>{e.addEventListener(this,i,s),t[i]=s},s=(i,s)=>{t[i]&&(e.removeEventListener(this,i,s),delete t[i])},n=(t,e)=>{this.canvas&&this.resize(t,e)};let o;const a=()=>{s("attach",a),this.attached=!0,this.resize(),i("resize",n),i("detach",o)};o=()=>{this.attached=!1,s("resize",n),this._stop(),this._resize(0,0),i("attach",a)},e.isAttached(this.canvas)?a():o()}unbindEvents(){j(this._listeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._listeners={},j(this._responsiveListeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._responsiveListeners=void 0}updateHoverStyle(t,e,i){const s=i?"set":"remove";let n,o,a,r;for("dataset"===e&&(n=this.getDatasetMeta(t[0].datasetIndex),n.controller["_"+s+"DatasetHoverStyle"]()),a=0,r=t.length;a<r;++a){o=t[a];const e=o&&this.getDatasetMeta(o.datasetIndex).controller;e&&e[s+"HoverStyle"](o.element,o.datasetIndex,o.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this._active||[],i=t.map((({datasetIndex:t,index:e})=>{const i=this.getDatasetMeta(t);if(!i)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:i.data[e],index:e}}));!$(i,e)&&(this._active=i,this._lastEvent=null,this._updateHoverStyles(i,e))}notifyPlugins(t,e,i){return this._plugins.notify(this,t,e,i)}isPluginEnabled(t){return 1===this._plugins._cache.filter((e=>e.plugin.id===t)).length}_updateHoverStyles(t,e,i){const s=this.options.hover,n=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),o=n(e,t),a=i?t:n(t,e);o.length&&this.updateHoverStyle(o,s.mode,!1),a.length&&s.mode&&this.updateHoverStyle(a,s.mode,!0)}_eventHandler(t,e){const i={event:t,replay:e,cancelable:!0,inChartArea:this.isPointInArea(t)},s=e=>(e.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",i,s))return;const n=this._handleEvent(t,e,i.inChartArea);return i.cancelable=!1,this.notifyPlugins("afterEvent",i,s),(n||i.changed)&&this.render(),this}_handleEvent(t,e,i){const{_active:s=[],options:n}=this,o=e,a=this._getActiveElements(t,s,i,o),r=function(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}(t),l=function(t,e,i,s){return i&&"mouseout"!==t.type?s?e:t:null}(t,this._lastEvent,i,r);i&&(this._lastEvent=null,H(n.onHover,[t,a,this],this),r&&H(n.onClick,[t,a,this],this));const h=!$(a,s);return(h||e)&&(this._active=a,this._updateHoverStyles(a,s,e)),this._lastEvent=l,h}_getActiveElements(t,e,i,s){if("mouseout"===t.type)return[];if(!i)return e;const n=this.options.hover;return this.getElementsAtEventForMode(t,n.mode,n,s)}}function kn(){return j(wn.instances,(t=>t._plugins.invalidate()))}function Sn(t,e,i,s){return{x:i+t*Math.cos(e),y:s+t*Math.sin(e)}}function Pn(t,e,i,s,n,o){const{x:a,y:r,startAngle:l,pixelMargin:h,innerRadius:c}=e,d=Math.max(e.outerRadius+s+i-h,0),u=c>0?c+s+i+h:0;let f=0;const g=n-l;if(s){const t=((c>0?c-s:0)+(d>0?d-s:0))/2;f=(g-(0!==t?g*t/(t+s):g))/2}const p=(g-Math.max(.001,g*d-i/st)/d)/2,m=l+p+f,b=n-p-f,{outerStart:x,outerEnd:_,innerStart:y,innerEnd:v}=function(t,e,i,s){const n=we(t.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]),o=(i-e)/2,a=Math.min(o,s*e/2),r=t=>{const e=(i-Math.min(o,t))*s/2;return St(t,0,Math.min(o,e))};return{outerStart:r(n.outerStart),outerEnd:r(n.outerEnd),innerStart:St(n.innerStart,0,a),innerEnd:St(n.innerEnd,0,a)}}(e,u,d,b-m),M=d-x,w=d-_,k=m+x/M,S=b-_/w,P=u+y,D=u+v,C=m+y/P,O=b-v/D;if(t.beginPath(),o){const e=(k+S)/2;if(t.arc(a,r,d,k,e),t.arc(a,r,d,e,S),_>0){const e=Sn(w,S,a,r);t.arc(e.x,e.y,_,S,b+lt)}const i=Sn(D,b,a,r);if(t.lineTo(i.x,i.y),v>0){const e=Sn(D,O,a,r);t.arc(e.x,e.y,v,b+lt,O+Math.PI)}const s=(b-v/u+(m+y/u))/2;if(t.arc(a,r,u,b-v/u,s,!0),t.arc(a,r,u,s,m+y/u,!0),y>0){const e=Sn(P,C,a,r);t.arc(e.x,e.y,y,C+Math.PI,m-lt)}const n=Sn(M,m,a,r);if(t.lineTo(n.x,n.y),x>0){const e=Sn(M,k,a,r);t.arc(e.x,e.y,x,m-lt,k)}}else{t.moveTo(a,r);const e=Math.cos(k)*d+a,i=Math.sin(k)*d+r;t.lineTo(e,i);const s=Math.cos(S)*d+a,n=Math.sin(S)*d+r;t.lineTo(s,n)}t.closePath()}class Dn extends Ws{static id="arc";static defaults={borderAlign:"center",borderColor:"#fff",borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0,circular:!0};static defaultRoutes={backgroundColor:"backgroundColor"};constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,i){const s=this.getProps(["x","y"],i),{angle:n,distance:o}=yt(s,{x:t,y:e}),{startAngle:a,endAngle:r,innerRadius:l,outerRadius:h,circumference:c}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],i),d=this.options.spacing/2,u=W(c,r-a)>=nt||kt(n,a,r),f=Pt(o,l+d,h+d);return u&&f}getCenterPoint(t){const{x:e,y:i,startAngle:s,endAngle:n,innerRadius:o,outerRadius:a}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius"],t),{offset:r,spacing:l}=this.options,h=(s+n)/2,c=(o+a+l+r)/2;return{x:e+Math.cos(h)*c,y:i+Math.sin(h)*c}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const{options:e,circumference:i}=this,s=(e.offset||0)/4,n=(e.spacing||0)/2,o=e.circular;if(this.pixelMargin="inner"===e.borderAlign?.33:0,this.fullCircles=i>nt?Math.floor(i/nt):0,0===i||this.innerRadius<0||this.outerRadius<0)return;t.save();const a=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(a)*s,Math.sin(a)*s);const r=s*(1-Math.sin(Math.min(st,i||0)));t.fillStyle=e.backgroundColor,t.strokeStyle=e.borderColor,function(t,e,i,s,n){const{fullCircles:o,startAngle:a,circumference:r}=e;let l=e.endAngle;if(o){Pn(t,e,i,s,l,n);for(let e=0;e<o;++e)t.fill();isNaN(r)||(l=a+(r%nt||nt))}Pn(t,e,i,s,l,n),t.fill()}(t,this,r,n,o),function(t,e,i,s,n){const{fullCircles:o,startAngle:a,circumference:r,options:l}=e,{borderWidth:h,borderJoinStyle:c}=l,d="inner"===l.borderAlign;if(!h)return;d?(t.lineWidth=2*h,t.lineJoin=c||"round"):(t.lineWidth=h,t.lineJoin=c||"bevel");let u=e.endAngle;if(o){Pn(t,e,i,s,u,n);for(let e=0;e<o;++e)t.stroke();isNaN(r)||(u=a+(r%nt||nt))}d&&function(t,e,i){const{startAngle:s,pixelMargin:n,x:o,y:a,outerRadius:r,innerRadius:l}=e;let h=n/r;t.beginPath(),t.arc(o,a,r,s-h,i+h),l>n?(h=n/l,t.arc(o,a,l,i+h,s-h,!0)):t.arc(o,a,n,i+lt,s-lt),t.closePath(),t.clip()}(t,e,u),o||(Pn(t,e,i,s,u,n),t.stroke())}(t,this,r,n,o),t.restore()}}function Cn(t,e,i=e){t.lineCap=W(i.borderCapStyle,e.borderCapStyle),t.setLineDash(W(i.borderDash,e.borderDash)),t.lineDashOffset=W(i.borderDashOffset,e.borderDashOffset),t.lineJoin=W(i.borderJoinStyle,e.borderJoinStyle),t.lineWidth=W(i.borderWidth,e.borderWidth),t.strokeStyle=W(i.borderColor,e.borderColor)}function On(t,e,i){t.lineTo(i.x,i.y)}function An(t,e,i={}){const s=t.length,{start:n=0,end:o=s-1}=i,{start:a,end:r}=e,l=Math.max(n,a),h=Math.min(o,r),c=n<a&&o<a||n>r&&o>r;return{count:s,start:l,loop:e.loop,ilen:h<l&&!c?s+h-l:h-l}}function Tn(t,e,i,s){const{points:n,options:o}=e,{count:a,start:r,loop:l,ilen:h}=An(n,i,s),c=function(t){return t.stepped?fe:t.tension||"monotone"===t.cubicInterpolationMode?ge:On}(o);let d,u,f,{move:g=!0,reverse:p}=s||{};for(d=0;d<=h;++d)u=n[(r+(p?h-d:d))%a],u.skip||(g?(t.moveTo(u.x,u.y),g=!1):c(t,f,u,p,o.stepped),f=u);return l&&(u=n[(r+(p?h:0))%a],c(t,f,u,p,o.stepped)),!!l}function Ln(t,e,i,s){const n=e.points,{count:o,start:a,ilen:r}=An(n,i,s),{move:l=!0,reverse:h}=s||{};let c,d,u,f,g,p,m=0,b=0;const x=t=>(a+(h?r-t:t))%o,_=()=>{f!==g&&(t.lineTo(m,g),t.lineTo(m,f),t.lineTo(m,p))};for(l&&(d=n[x(0)],t.moveTo(d.x,d.y)),c=0;c<=r;++c){if(d=n[x(c)],d.skip)continue;const e=d.x,i=d.y,s=0|e;s===u?(i<f?f=i:i>g&&(g=i),m=(b*m+e)/++b):(_(),t.lineTo(e,i),u=s,b=0,f=g=i),p=i}_()}function En(t){const e=t.options,i=e.borderDash&&e.borderDash.length;return t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||i?Tn:Ln}const Rn="function"==typeof Path2D;class In extends Ws{static id="line";static defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const i=this.options;if((i.tension||"monotone"===i.cubicInterpolationMode)&&!i.stepped&&!this._pointsUpdated){const s=i.spanGaps?this._loop:this._fullLoop;Ke(this._points,i,t,s,e),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(t,e){const i=t.points,s=t.options.spanGaps,n=i.length;if(!n)return[];const o=!!t._loop,{start:a,end:r}=function(t,e,i,s){let n=0,o=e-1;if(i&&!s)for(;n<e&&!t[n].skip;)n++;for(;n<e&&t[n].skip;)n++;for(n%=e,i&&(o+=n);o>n&&t[o%e].skip;)o--;return o%=e,{start:n,end:o}}(i,n,o,s);return function(t,e,i,s){return s&&s.setContext&&i?function(t,e,i,s){const n=t._chart.getContext(),o=xi(t.options),{_datasetIndex:a,options:{spanGaps:r}}=t,l=i.length,h=[];let c=o,d=e[0].start,u=d;function f(t,e,s,n){const o=r?-1:1;if(t!==e){for(t+=l;i[t%l].skip;)t-=o;for(;i[e%l].skip;)e+=o;t%l!=e%l&&(h.push({start:t%l,end:e%l,loop:s,style:n}),c=n,d=e%l)}}for(const t of e){d=r?d:t.start;let e,o=i[d%l];for(u=d+1;u<=t.end;u++){const r=i[u%l];e=xi(s.setContext(Oe(n,{type:"segment",p0:o,p1:r,p0DataIndex:(u-1)%l,p1DataIndex:u%l,datasetIndex:a}))),_i(e,c)&&f(d,u-1,t.loop,c),o=r,c=e}d<u-1&&f(d,u-1,t.loop,c)}return h}(t,e,i,s):e}(t,!0===s?[{start:a,end:r,loop:o}]:function(t,e,i,s){const n=t.length,o=[];let a,r=e,l=t[e];for(a=e+1;a<=i;++a){const i=t[a%n];i.skip||i.stop?l.skip||(s=!1,o.push({start:e%n,end:(a-1)%n,loop:s}),e=r=i.stop?a:null):(r=a,l.skip&&(e=a)),l=i}return null!==r&&o.push({start:e%n,end:r%n,loop:s}),o}(i,a,r<a?r+n:r,!!t._fullLoop&&0===a&&r===n-1),i,e)}(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,i=t.length;return i&&e[t[i-1].end]}interpolate(t,e){const i=this.options,s=t[e],n=this.points,o=bi(this,{property:e,start:s,end:s});if(!o.length)return;const a=[],r=function(t){return t.stepped?hi:t.tension||"monotone"===t.cubicInterpolationMode?ci:li}(i);let l,h;for(l=0,h=o.length;l<h;++l){const{start:h,end:c}=o[l],d=n[h],u=n[c];if(d===u){a.push(d);continue}const f=r(d,u,Math.abs((s-d[e])/(u[e]-d[e])),i.stepped);f[e]=t[e],a.push(f)}return 1===a.length?a[0]:a}pathSegment(t,e,i){return En(this)(t,this,e,i)}path(t,e,i){const s=this.segments,n=En(this);let o=this._loop;e=e||0,i=i||this.points.length-e;for(const a of s)o&=n(t,this,a,{start:e,end:e+i-1});return!!o}draw(t,e,i,s){const n=this.options||{};(this.points||[]).length&&n.borderWidth&&(t.save(),function(t,e,i,s){Rn&&!e.options.segment?function(t,e,i,s){let n=e._path;n||(n=e._path=new Path2D,e.path(n,i,s)&&n.closePath()),Cn(t,e.options),t.stroke(n)}(t,e,i,s):function(t,e,i,s){const{segments:n,options:o}=e,a=En(e);for(const r of n)Cn(t,o,r.style),t.beginPath(),a(t,e,r,{start:i,end:i+s-1})&&t.closePath(),t.stroke()}(t,e,i,s)}(t,this,i,s),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function zn(t,e,i,s){const n=t.options,{[i]:o}=t.getProps([i],s);return Math.abs(e-o)<n.radius+n.hitRadius}class Fn extends Ws{static id="point";static defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,i){const s=this.options,{x:n,y:o}=this.getProps(["x","y"],i);return Math.pow(t-n,2)+Math.pow(e-o,2)<Math.pow(s.hitRadius+s.radius,2)}inXRange(t,e){return zn(this,t,"x",e)}inYRange(t,e){return zn(this,t,"y",e)}getCenterPoint(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}size(t){let e=(t=t||this.options||{}).radius||0;return e=Math.max(e,e&&t.hoverRadius||0),2*(e+(e&&t.borderWidth||0))}draw(t,e){const i=this.options;this.skip||i.radius<.1||!ce(this,e,this.size(i)/2)||(t.strokeStyle=i.borderColor,t.lineWidth=i.borderWidth,t.fillStyle=i.backgroundColor,le(t,i,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}function Vn(t,e){const{x:i,y:s,base:n,width:o,height:a}=t.getProps(["x","y","base","width","height"],e);let r,l,h,c,d;return t.horizontal?(d=a/2,r=Math.min(i,n),l=Math.max(i,n),h=s-d,c=s+d):(d=o/2,r=i-d,l=i+d,h=Math.min(s,n),c=Math.max(s,n)),{left:r,top:h,right:l,bottom:c}}function Bn(t,e,i,s){return t?0:St(e,i,s)}function Wn(t,e,i,s){const n=null===e,o=null===i,a=t&&!(n&&o)&&Vn(t,s);return a&&(n||Pt(e,a.left,a.right))&&(o||Pt(i,a.top,a.bottom))}function Nn(t,e){t.rect(e.x,e.y,e.w,e.h)}function Hn(t,e,i={}){const s=t.x!==i.x?-e:0,n=t.y!==i.y?-e:0,o=(t.x+t.w!==i.x+i.w?e:0)-s,a=(t.y+t.h!==i.y+i.h?e:0)-n;return{x:t.x+s,y:t.y+n,w:t.w+o,h:t.h+a,radius:t.radius}}class jn extends Ws{static id="bar";static defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:i,backgroundColor:s}}=this,{inner:n,outer:o}=function(t){const e=Vn(t),i=e.right-e.left,s=e.bottom-e.top,n=function(t,e,i){const s=t.options.borderWidth,n=t.borderSkipped,o=ke(s);return{t:Bn(n.top,o.top,0,i),r:Bn(n.right,o.right,0,e),b:Bn(n.bottom,o.bottom,0,i),l:Bn(n.left,o.left,0,e)}}(t,i/2,s/2),o=function(t,e,i){const{enableBorderRadius:s}=t.getProps(["enableBorderRadius"]),n=t.options.borderRadius,o=Se(n),a=Math.min(e,i),r=t.borderSkipped,l=s||F(n);return{topLeft:Bn(!l||r.top||r.left,o.topLeft,0,a),topRight:Bn(!l||r.top||r.right,o.topRight,0,a),bottomLeft:Bn(!l||r.bottom||r.left,o.bottomLeft,0,a),bottomRight:Bn(!l||r.bottom||r.right,o.bottomRight,0,a)}}(t,i/2,s/2);return{outer:{x:e.left,y:e.top,w:i,h:s,radius:o},inner:{x:e.left+n.l,y:e.top+n.t,w:i-n.l-n.r,h:s-n.t-n.b,radius:{topLeft:Math.max(0,o.topLeft-Math.max(n.t,n.l)),topRight:Math.max(0,o.topRight-Math.max(n.t,n.r)),bottomLeft:Math.max(0,o.bottomLeft-Math.max(n.b,n.l)),bottomRight:Math.max(0,o.bottomRight-Math.max(n.b,n.r))}}}}(this),a=(r=o.radius).topLeft||r.topRight||r.bottomLeft||r.bottomRight?xe:Nn;var r;t.save(),o.w===n.w&&o.h===n.h||(t.beginPath(),a(t,Hn(o,e,n)),t.clip(),a(t,Hn(n,-e,o)),t.fillStyle=i,t.fill("evenodd")),t.beginPath(),a(t,Hn(n,e)),t.fillStyle=s,t.fill(),t.restore()}inRange(t,e,i){return Wn(this,t,e,i)}inXRange(t,e){return Wn(this,t,null,e)}inYRange(t,e){return Wn(this,null,t,e)}getCenterPoint(t){const{x:e,y:i,base:s,horizontal:n}=this.getProps(["x","y","base","horizontal"],t);return{x:n?(e+s)/2:e,y:n?i:(i+s)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}}var $n=Object.freeze({__proto__:null,ArcElement:Dn,LineElement:In,PointElement:Fn,BarElement:jn});const Yn=["rgb(54, 162, 235)","rgb(255, 99, 132)","rgb(255, 159, 64)","rgb(255, 205, 86)","rgb(75, 192, 192)","rgb(153, 102, 255)","rgb(201, 203, 207)"],Un=Yn.map((t=>t.replace("rgb(","rgba(").replace(")",", 0.5)")));function Xn(t){return Yn[t%Yn.length]}function qn(t){return Un[t%Un.length]}function Kn(t){let e;for(e in t)if(t[e].borderColor||t[e].backgroundColor)return!0;return!1}var Gn={id:"colors",defaults:{enabled:!0,forceOverride:!1},beforeLayout(t,e,i){if(!i.enabled)return;const{data:{datasets:s},options:n}=t.config,{elements:o}=n;if(!i.forceOverride&&(Kn(s)||(a=n)&&(a.borderColor||a.backgroundColor)||o&&Kn(o)))return;var a;const r=function(t){let e=0;return(i,s)=>{const n=t.getDatasetMeta(s).controller;n instanceof qi?e=function(t,e){return t.backgroundColor=t.data.map((()=>Xn(e++))),e}(i,e):n instanceof Gi?e=function(t,e){return t.backgroundColor=t.data.map((()=>qn(e++))),e}(i,e):n&&(e=function(t,e){return t.borderColor=Xn(e),t.backgroundColor=qn(e),++e}(i,e))}}(t);s.forEach(r)}};function Zn(t){if(t._decimated){const e=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{configurable:!0,enumerable:!0,writable:!0,value:e})}}function Jn(t){t.data.datasets.forEach((t=>{Zn(t)}))}var Qn={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,e,i)=>{if(!i.enabled)return void Jn(t);const s=t.width;t.data.datasets.forEach(((e,n)=>{const{_data:o,indexAxis:a}=e,r=t.getDatasetMeta(n),l=o||e.data;if("y"===Ce([a,t.options.indexAxis]))return;if(!r.controller.supportsDecimation)return;const h=t.scales[r.xAxisID];if("linear"!==h.type&&"time"!==h.type)return;if(t.options.parsing)return;let c,{start:d,count:u}=function(t,e){const i=e.length;let s,n=0;const{iScale:o}=t,{min:a,max:r,minDefined:l,maxDefined:h}=o.getUserBounds();return l&&(n=St(Ct(e,o.axis,a).lo,0,i-1)),s=h?St(Ct(e,o.axis,r).hi+1,n,i)-n:i-n,{start:n,count:s}}(r,l);if(u<=(i.threshold||4*s))Zn(e);else{switch(I(o)&&(e._data=l,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),i.algorithm){case"lttb":c=function(t,e,i,s,n){const o=n.samples||s;if(o>=i)return t.slice(e,e+i);const a=[],r=(i-2)/(o-2);let l=0;const h=e+i-1;let c,d,u,f,g,p=e;for(a[l++]=t[p],c=0;c<o-2;c++){let s,n=0,o=0;const h=Math.floor((c+1)*r)+1+e,m=Math.min(Math.floor((c+2)*r)+1,i)+e,b=m-h;for(s=h;s<m;s++)n+=t[s].x,o+=t[s].y;n/=b,o/=b;const x=Math.floor(c*r)+1+e,_=Math.min(Math.floor((c+1)*r)+1,i)+e,{x:y,y:v}=t[p];for(u=f=-1,s=x;s<_;s++)f=.5*Math.abs((y-n)*(t[s].y-v)-(y-t[s].x)*(o-v)),f>u&&(u=f,d=t[s],g=s);a[l++]=d,p=g}return a[l++]=t[h],a}(l,d,u,s,i);break;case"min-max":c=function(t,e,i,s){let n,o,a,r,l,h,c,d,u,f,g=0,p=0;const m=[],b=e+i-1,x=t[e].x,_=t[b].x-x;for(n=e;n<e+i;++n){o=t[n],a=(o.x-x)/_*s,r=o.y;const e=0|a;if(e===l)r<u?(u=r,h=n):r>f&&(f=r,c=n),g=(p*g+o.x)/++p;else{const i=n-1;if(!I(h)&&!I(c)){const e=Math.min(h,c),s=Math.max(h,c);e!==d&&e!==i&&m.push({...t[e],x:g}),s!==d&&s!==i&&m.push({...t[s],x:g})}n>0&&i!==d&&m.push(t[i]),m.push(o),l=e,p=0,u=f=r,h=c=d=n}}return m}(l,d,u,s);break;default:throw new Error(`Unsupported decimation algorithm '${i.algorithm}'`)}e._decimated=c}}))},destroy(t){Jn(t)}};function to(t,e,i,s){if(s)return;let n=e[t],o=i[t];return"angle"===t&&(n=wt(n),o=wt(o)),{property:t,start:n,end:o}}function eo(t,e,i){for(;e>t;e--){const t=i[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}function io(t,e,i,s){return t&&e?s(t[i],e[i]):t?t[i]:e?e[i]:0}function so(t,e){let i=[],s=!1;return z(t)?(s=!0,i=t):i=function(t,e){const{x:i=null,y:s=null}=t||{},n=e.points,o=[];return e.segments.forEach((({start:t,end:e})=>{e=eo(t,e,n);const a=n[t],r=n[e];null!==s?(o.push({x:a.x,y:s}),o.push({x:r.x,y:s})):null!==i&&(o.push({x:i,y:a.y}),o.push({x:i,y:r.y}))})),o}(t,e),i.length?new In({points:i,options:{tension:0},_loop:s,_fullLoop:s}):null}function no(t){return t&&!1!==t.fill}function oo(t,e,i){let s=t[e].fill;const n=[e];let o;if(!i)return s;for(;!1!==s&&-1===n.indexOf(s);){if(!V(s))return s;if(o=t[s],!o)return!1;if(o.visible)return s;n.push(s),s=o.fill}return!1}function ao(t,e,i){const s=function(t){const e=t.options,i=e.fill;let s=W(i&&i.target,i);return void 0===s&&(s=!!e.backgroundColor),!1!==s&&null!==s&&(!0===s?"origin":s)}(t);if(F(s))return!isNaN(s.value)&&s;let n=parseFloat(s);return V(n)&&Math.floor(n)===n?function(t,e,i,s){return"-"!==t&&"+"!==t||(i=e+i),!(i===e||i<0||i>=s)&&i}(s[0],e,n,i):["origin","start","end","stack","shape"].indexOf(s)>=0&&s}function ro(t,e,i){const s=[];for(let n=0;n<i.length;n++){const o=i[n],{first:a,last:r,point:l}=lo(o,e,"x");if(!(!l||a&&r))if(a)s.unshift(l);else if(t.push(l),!r)break}t.push(...s)}function lo(t,e,i){const s=t.interpolate(e,i);if(!s)return{};const n=s[i],o=t.segments,a=t.points;let r=!1,l=!1;for(let t=0;t<o.length;t++){const e=o[t],s=a[e.start][i],h=a[e.end][i];if(Pt(n,s,h)){r=n===s,l=n===h;break}}return{first:r,last:l,point:s}}class ho{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,i){const{x:s,y:n,radius:o}=this;return e=e||{start:0,end:nt},t.arc(s,n,o,e.end,e.start,!0),!i.bounds}interpolate(t){const{x:e,y:i,radius:s}=this,n=t.angle;return{x:e+Math.cos(n)*s,y:i+Math.sin(n)*s,angle:n}}}function co(t,e,i){const s=function(t){const{chart:e,fill:i,line:s}=t;if(V(i))return function(t,e){const i=t.getDatasetMeta(e);return i&&t.isDatasetVisible(e)?i.dataset:null}(e,i);if("stack"===i)return function(t){const{scale:e,index:i,line:s}=t,n=[],o=s.segments,a=s.points,r=function(t,e){const i=[],s=t.getMatchingVisibleMetas("line");for(let t=0;t<s.length;t++){const n=s[t];if(n.index===e)break;n.hidden||i.unshift(n.dataset)}return i}(e,i);r.push(so({x:null,y:e.bottom},s));for(let t=0;t<o.length;t++){const e=o[t];for(let t=e.start;t<=e.end;t++)ro(n,a[t],r)}return new In({points:n,options:{}})}(t);if("shape"===i)return!0;const n=function(t){return(t.scale||{}).getPointPositionForValue?function(t){const{scale:e,fill:i}=t,s=e.options,n=e.getLabels().length,o=s.reverse?e.max:e.min,a=function(t,e,i){let s;return s="start"===t?i:"end"===t?e.options.reverse?e.min:e.max:F(t)?t.value:e.getBaseValue(),s}(i,e,o),r=[];if(s.grid.circular){const t=e.getPointPositionForValue(0,o);return new ho({x:t.x,y:t.y,radius:e.getDistanceFromCenterForValue(a)})}for(let t=0;t<n;++t)r.push(e.getPointPositionForValue(t,a));return r}(t):function(t){const{scale:e={},fill:i}=t,s=function(t,e){let i=null;return"start"===t?i=e.bottom:"end"===t?i=e.top:F(t)?i=e.getPixelForValue(t.value):e.getBasePixel&&(i=e.getBasePixel()),i}(i,e);if(V(s)){const t=e.isHorizontal();return{x:t?s:null,y:t?null:s}}return null}(t)}(t);return n instanceof ho?n:so(n,s)}(e),{line:n,scale:o,axis:a}=e,r=n.options,l=r.fill,h=r.backgroundColor,{above:c=h,below:d=h}=l||{};s&&n.points.length&&(de(t,i),function(t,e){const{line:i,target:s,above:n,below:o,area:a,scale:r}=e,l=i._loop?"angle":e.axis;t.save(),"x"===l&&o!==n&&(uo(t,s,a.top),fo(t,{line:i,target:s,color:n,scale:r,property:l}),t.restore(),t.save(),uo(t,s,a.bottom)),fo(t,{line:i,target:s,color:o,scale:r,property:l}),t.restore()}(t,{line:n,target:s,above:c,below:d,area:i,scale:o,axis:a}),ue(t))}function uo(t,e,i){const{segments:s,points:n}=e;let o=!0,a=!1;t.beginPath();for(const r of s){const{start:s,end:l}=r,h=n[s],c=n[eo(s,l,n)];o?(t.moveTo(h.x,h.y),o=!1):(t.lineTo(h.x,i),t.lineTo(h.x,h.y)),a=!!e.pathSegment(t,r,{move:a}),a?t.closePath():t.lineTo(c.x,i)}t.lineTo(e.first().x,i),t.closePath(),t.clip()}function fo(t,e){const{line:i,target:s,property:n,color:o,scale:a}=e,r=function(t,e,i){const s=t.segments,n=t.points,o=e.points,a=[];for(const t of s){let{start:s,end:r}=t;r=eo(s,r,n);const l=to(i,n[s],n[r],t.loop);if(!e.segments){a.push({source:t,target:l,start:n[s],end:n[r]});continue}const h=bi(e,l);for(const e of h){const s=to(i,o[e.start],o[e.end],e.loop),r=mi(t,n,s);for(const t of r)a.push({source:t,target:e,start:{[i]:io(l,s,"start",Math.max)},end:{[i]:io(l,s,"end",Math.min)}})}}return a}(i,s,n);for(const{source:e,target:l,start:h,end:c}of r){const{style:{backgroundColor:r=o}={}}=e,d=!0!==s;t.save(),t.fillStyle=r,go(t,a,d&&to(n,h,c)),t.beginPath();const u=!!i.pathSegment(t,e);let f;if(d){u?t.closePath():po(t,s,c,n);const e=!!s.pathSegment(t,l,{move:u,reverse:!0});f=u&&e,f||po(t,s,h,n)}t.closePath(),t.fill(f?"evenodd":"nonzero"),t.restore()}}function go(t,e,i){const{top:s,bottom:n}=e.chart.chartArea,{property:o,start:a,end:r}=i||{};"x"===o&&(t.beginPath(),t.rect(a,s,r-a,n-s),t.clip())}function po(t,e,i,s){const n=e.interpolate(i,s);n&&t.lineTo(n.x,n.y)}var mo={id:"filler",afterDatasetsUpdate(t,e,i){const s=(t.data.datasets||[]).length,n=[];let o,a,r,l;for(a=0;a<s;++a)o=t.getDatasetMeta(a),r=o.dataset,l=null,r&&r.options&&r instanceof In&&(l={visible:t.isDatasetVisible(a),index:a,fill:ao(r,a,s),chart:t,axis:o.controller.options.indexAxis,scale:o.vScale,line:r}),o.$filler=l,n.push(l);for(a=0;a<s;++a)l=n[a],l&&!1!==l.fill&&(l.fill=oo(n,a,i.propagate))},beforeDraw(t,e,i){const s="beforeDraw"===i.drawTime,n=t.getSortedVisibleDatasetMetas(),o=t.chartArea;for(let e=n.length-1;e>=0;--e){const i=n[e].$filler;i&&(i.line.updateControlPoints(o,i.axis),s&&i.fill&&co(t.ctx,i,o))}},beforeDatasetsDraw(t,e,i){if("beforeDatasetsDraw"!==i.drawTime)return;const s=t.getSortedVisibleDatasetMetas();for(let e=s.length-1;e>=0;--e){const i=s[e].$filler;no(i)&&co(t.ctx,i,t.chartArea)}},beforeDatasetDraw(t,e,i){const s=e.meta.$filler;no(s)&&"beforeDatasetDraw"===i.drawTime&&co(t.ctx,s,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const bo=(t,e)=>{let{boxHeight:i=e,boxWidth:s=e}=t;return t.usePointStyle&&(i=Math.min(i,e),s=t.pointStyleWidth||Math.min(s,e)),{boxWidth:s,boxHeight:i,itemHeight:Math.max(e,i)}};class xo extends Ws{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,i){this.maxWidth=t,this.maxHeight=e,this._margins=i,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const t=this.options.labels||{};let e=H(t.generateLabels,[this.chart],this)||[];t.filter&&(e=e.filter((e=>t.filter(e,this.chart.data)))),t.sort&&(e=e.sort(((e,i)=>t.sort(e,i,this.chart.data)))),this.options.reverse&&e.reverse(),this.legendItems=e}fit(){const{options:t,ctx:e}=this;if(!t.display)return void(this.width=this.height=0);const i=t.labels,s=De(i.font),n=s.size,o=this._computeTitleHeight(),{boxWidth:a,itemHeight:r}=bo(i,n);let l,h;e.font=s.string,this.isHorizontal()?(l=this.maxWidth,h=this._fitRows(o,n,a,r)+10):(h=this.maxHeight,l=this._fitCols(o,s,a,r)+10),this.width=Math.min(l,t.maxWidth||this.maxWidth),this.height=Math.min(h,t.maxHeight||this.maxHeight)}_fitRows(t,e,i,s){const{ctx:n,maxWidth:o,options:{labels:{padding:a}}}=this,r=this.legendHitBoxes=[],l=this.lineWidths=[0],h=s+a;let c=t;n.textAlign="left",n.textBaseline="middle";let d=-1,u=-h;return this.legendItems.forEach(((t,f)=>{const g=i+e/2+n.measureText(t.text).width;(0===f||l[l.length-1]+g+2*a>o)&&(c+=h,l[l.length-(f>0?0:1)]=0,u+=h,d++),r[f]={left:0,top:u,row:d,width:g,height:s},l[l.length-1]+=g+a})),c}_fitCols(t,e,i,s){const{ctx:n,maxHeight:o,options:{labels:{padding:a}}}=this,r=this.legendHitBoxes=[],l=this.columnSizes=[],h=o-t;let c=a,d=0,u=0,f=0,g=0;return this.legendItems.forEach(((t,o)=>{const{itemWidth:p,itemHeight:m}=function(t,e,i,s,n){const o=function(t,e,i,s){let n=t.text;return n&&"string"!=typeof n&&(n=n.reduce(((t,e)=>t.length>e.length?t:e))),e+i.size/2+s.measureText(n).width}(s,t,e,i),a=function(t,e,i){let s=t;return"string"!=typeof e.text&&(s=_o(e,i)),s}(n,s,e.lineHeight);return{itemWidth:o,itemHeight:a}}(i,e,n,t,s);o>0&&u+m+2*a>h&&(c+=d+a,l.push({width:d,height:u}),f+=d+a,g++,d=u=0),r[o]={left:f,top:u,col:g,width:p,height:m},d=Math.max(d,p),u+=m+a})),c+=d,l.push({width:d,height:u}),c}adjustHitBoxes(){if(!this.options.display)return;const t=this._computeTitleHeight(),{legendHitBoxes:e,options:{align:i,labels:{padding:s},rtl:n}}=this,o=di(n,this.left,this.width);if(this.isHorizontal()){let n=0,a=zt(i,this.left+s,this.right-this.lineWidths[n]);for(const r of e)n!==r.row&&(n=r.row,a=zt(i,this.left+s,this.right-this.lineWidths[n])),r.top+=this.top+t+s,r.left=o.leftForLtr(o.x(a),r.width),a+=r.width+s}else{let n=0,a=zt(i,this.top+t+s,this.bottom-this.columnSizes[n].height);for(const r of e)r.col!==n&&(n=r.col,a=zt(i,this.top+t+s,this.bottom-this.columnSizes[n].height)),r.top=a,r.left+=this.left+s,r.left=o.leftForLtr(o.x(r.left),r.width),a+=r.height+s}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const t=this.ctx;de(t,this),this._draw(),ue(t)}}_draw(){const{options:t,columnSizes:e,lineWidths:i,ctx:s}=this,{align:n,labels:o}=t,a=se.color,r=di(t.rtl,this.left,this.width),l=De(o.font),{padding:h}=o,c=l.size,d=c/2;let u;this.drawTitle(),s.textAlign=r.textAlign("left"),s.textBaseline="middle",s.lineWidth=.5,s.font=l.string;const{boxWidth:f,boxHeight:g,itemHeight:p}=bo(o,c),m=this.isHorizontal(),b=this._computeTitleHeight();u=m?{x:zt(n,this.left+h,this.right-i[0]),y:this.top+h+b,line:0}:{x:this.left+h,y:zt(n,this.top+b+h,this.bottom-e[0].height),line:0},ui(this.ctx,t.textDirection);const x=p+h;this.legendItems.forEach(((_,y)=>{s.strokeStyle=_.fontColor,s.fillStyle=_.fontColor;const v=s.measureText(_.text).width,M=r.textAlign(_.textAlign||(_.textAlign=o.textAlign)),w=f+d+v;let k=u.x,S=u.y;if(r.setWidth(this.width),m?y>0&&k+w+h>this.right&&(S=u.y+=x,u.line++,k=u.x=zt(n,this.left+h,this.right-i[u.line])):y>0&&S+x>this.bottom&&(k=u.x=k+e[u.line].width+h,u.line++,S=u.y=zt(n,this.top+b+h,this.bottom-e[u.line].height)),function(t,e,i){if(isNaN(f)||f<=0||isNaN(g)||g<0)return;s.save();const n=W(i.lineWidth,1);if(s.fillStyle=W(i.fillStyle,a),s.lineCap=W(i.lineCap,"butt"),s.lineDashOffset=W(i.lineDashOffset,0),s.lineJoin=W(i.lineJoin,"miter"),s.lineWidth=n,s.strokeStyle=W(i.strokeStyle,a),s.setLineDash(W(i.lineDash,[])),o.usePointStyle){const a={radius:g*Math.SQRT2/2,pointStyle:i.pointStyle,rotation:i.rotation,borderWidth:n},l=r.xPlus(t,f/2);he(s,a,l,e+d,o.pointStyleWidth&&f)}else{const o=e+Math.max((c-g)/2,0),a=r.leftForLtr(t,f),l=Se(i.borderRadius);s.beginPath(),Object.values(l).some((t=>0!==t))?xe(s,{x:a,y:o,w:f,h:g,radius:l}):s.rect(a,o,f,g),s.fill(),0!==n&&s.stroke()}s.restore()}(r.x(k),S,_),k=((t,e,i,s)=>t===(s?"left":"right")?i:"center"===t?(e+i)/2:e)(M,k+f+d,m?k+w:this.right,t.rtl),function(t,e,i){pe(s,i.text,t,e+p/2,l,{strikethrough:i.hidden,textAlign:r.textAlign(i.textAlign)})}(r.x(k),S,_),m)u.x+=w+h;else if("string"!=typeof _.text){const t=l.lineHeight;u.y+=_o(_,t)}else u.y+=x})),fi(this.ctx,t.textDirection)}drawTitle(){const t=this.options,e=t.title,i=De(e.font),s=Pe(e.padding);if(!e.display)return;const n=di(t.rtl,this.left,this.width),o=this.ctx,a=e.position,r=i.size/2,l=s.top+r;let h,c=this.left,d=this.width;if(this.isHorizontal())d=Math.max(...this.lineWidths),h=this.top+l,c=zt(t.align,c,this.right-d);else{const e=this.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);h=l+zt(t.align,this.top,this.bottom-e-t.labels.padding-this._computeTitleHeight())}const u=zt(a,c,c+d);o.textAlign=n.textAlign(It(a)),o.textBaseline="middle",o.strokeStyle=e.color,o.fillStyle=e.color,o.font=i.string,pe(o,e.text,u,h,i)}_computeTitleHeight(){const t=this.options.title,e=De(t.font),i=Pe(t.padding);return t.display?e.lineHeight+i.height:0}_getLegendItemAt(t,e){let i,s,n;if(Pt(t,this.left,this.right)&&Pt(e,this.top,this.bottom))for(n=this.legendHitBoxes,i=0;i<n.length;++i)if(s=n[i],Pt(t,s.left,s.left+s.width)&&Pt(e,s.top,s.top+s.height))return this.legendItems[i];return null}handleEvent(t){const e=this.options;if(!function(t,e){return!("mousemove"!==t&&"mouseout"!==t||!e.onHover&&!e.onLeave)||!(!e.onClick||"click"!==t&&"mouseup"!==t)}(t.type,e))return;const i=this._getLegendItemAt(t.x,t.y);if("mousemove"===t.type||"mouseout"===t.type){const o=this._hoveredItem,a=(n=i,null!==(s=o)&&null!==n&&s.datasetIndex===n.datasetIndex&&s.index===n.index);o&&!a&&H(e.onLeave,[t,o,this],this),this._hoveredItem=i,i&&!a&&H(e.onHover,[t,i,this],this)}else i&&H(e.onClick,[t,i,this],this);var s,n}}function _o(t,e){return e*(t.text?t.text.length+.5:0)}var yo={id:"legend",_element:xo,start(t,e,i){const s=t.legend=new xo({ctx:t.ctx,options:i,chart:t});vs.configure(t,s,i),vs.addBox(t,s)},stop(t){vs.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,i){const s=t.legend;vs.configure(t,s,i),s.options=i},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,i){const s=e.datasetIndex,n=i.chart;n.isDatasetVisible(s)?(n.hide(s),e.hidden=!0):(n.show(s),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:i,pointStyle:s,textAlign:n,color:o,useBorderRadius:a,borderRadius:r}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const l=t.controller.getStyle(i?0:void 0),h=Pe(l.borderWidth);return{text:e[t.index].label,fillStyle:l.backgroundColor,fontColor:o,hidden:!t.visible,lineCap:l.borderCapStyle,lineDash:l.borderDash,lineDashOffset:l.borderDashOffset,lineJoin:l.borderJoinStyle,lineWidth:(h.width+h.height)/4,strokeStyle:l.borderColor,pointStyle:s||l.pointStyle,rotation:l.rotation,textAlign:n||l.textAlign,borderRadius:a&&(r||l.borderRadius),datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class vo extends Ws{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const i=this.options;if(this.left=0,this.top=0,!i.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=t,this.height=this.bottom=e;const s=z(i.text)?i.text.length:1;this._padding=Pe(i.padding);const n=s*De(i.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=n:this.width=n}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:i,bottom:s,right:n,options:o}=this,a=o.align;let r,l,h,c=0;return this.isHorizontal()?(l=zt(a,i,n),h=e+t,r=n-i):("left"===o.position?(l=i+t,h=zt(a,s,e),c=-.5*st):(l=n-t,h=zt(a,e,s),c=.5*st),r=s-e),{titleX:l,titleY:h,maxWidth:r,rotation:c}}draw(){const t=this.ctx,e=this.options;if(!e.display)return;const i=De(e.font),s=i.lineHeight/2+this._padding.top,{titleX:n,titleY:o,maxWidth:a,rotation:r}=this._drawArgs(s);pe(t,e.text,0,0,i,{color:e.color,maxWidth:a,rotation:r,textAlign:It(e.align),textBaseline:"middle",translation:[n,o]})}}var Mo={id:"title",_element:vo,start(t,e,i){!function(t,e){const i=new vo({ctx:t.ctx,options:e,chart:t});vs.configure(t,i,e),vs.addBox(t,i),t.titleBlock=i}(t,i)},stop(t){const e=t.titleBlock;vs.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,i){const s=t.titleBlock;vs.configure(t,s,i),s.options=i},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const wo=new WeakMap;var ko={id:"subtitle",start(t,e,i){const s=new vo({ctx:t.ctx,options:i,chart:t});vs.configure(t,s,i),vs.addBox(t,s),wo.set(t,s)},stop(t){vs.removeBox(t,wo.get(t)),wo.delete(t)},beforeUpdate(t,e,i){const s=wo.get(t);vs.configure(t,s,i),s.options=i},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const So={average(t){if(!t.length)return!1;let e,i,s=0,n=0,o=0;for(e=0,i=t.length;e<i;++e){const i=t[e].element;if(i&&i.hasValue()){const t=i.tooltipPosition();s+=t.x,n+=t.y,++o}}return{x:s/o,y:n/o}},nearest(t,e){if(!t.length)return!1;let i,s,n,o=e.x,a=e.y,r=Number.POSITIVE_INFINITY;for(i=0,s=t.length;i<s;++i){const s=t[i].element;if(s&&s.hasValue()){const t=vt(e,s.getCenterPoint());t<r&&(r=t,n=s)}}if(n){const t=n.tooltipPosition();o=t.x,a=t.y}return{x:o,y:a}}};function Po(t,e){return e&&(z(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function Do(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function Co(t,e){const{element:i,datasetIndex:s,index:n}=e,o=t.getDatasetMeta(s).controller,{label:a,value:r}=o.getLabelAndValue(n);return{chart:t,label:a,parsed:o.getParsed(n),raw:t.data.datasets[s].data[n],formattedValue:r,dataset:o.getDataset(),dataIndex:n,datasetIndex:s,element:i}}function Oo(t,e){const i=t.chart.ctx,{body:s,footer:n,title:o}=t,{boxWidth:a,boxHeight:r}=e,l=De(e.bodyFont),h=De(e.titleFont),c=De(e.footerFont),d=o.length,u=n.length,f=s.length,g=Pe(e.padding);let p=g.height,m=0,b=s.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);b+=t.beforeBody.length+t.afterBody.length,d&&(p+=d*h.lineHeight+(d-1)*e.titleSpacing+e.titleMarginBottom),b&&(p+=f*(e.displayColors?Math.max(r,l.lineHeight):l.lineHeight)+(b-f)*l.lineHeight+(b-1)*e.bodySpacing),u&&(p+=e.footerMarginTop+u*c.lineHeight+(u-1)*e.footerSpacing);let x=0;const _=function(t){m=Math.max(m,i.measureText(t).width+x)};return i.save(),i.font=h.string,j(t.title,_),i.font=l.string,j(t.beforeBody.concat(t.afterBody),_),x=e.displayColors?a+2+e.boxPadding:0,j(s,(t=>{j(t.before,_),j(t.lines,_),j(t.after,_)})),x=0,i.font=c.string,j(t.footer,_),i.restore(),m+=g.width,{width:m,height:p}}function Ao(t,e,i,s){const{x:n,width:o}=i,{width:a,chartArea:{left:r,right:l}}=t;let h="center";return"center"===s?h=n<=(r+l)/2?"left":"right":n<=o/2?h="left":n>=a-o/2&&(h="right"),function(t,e,i,s){const{x:n,width:o}=s,a=i.caretSize+i.caretPadding;return"left"===t&&n+o+a>e.width||"right"===t&&n-o-a<0||void 0}(h,t,e,i)&&(h="center"),h}function To(t,e,i){const s=i.yAlign||e.yAlign||function(t,e){const{y:i,height:s}=e;return i<s/2?"top":i>t.height-s/2?"bottom":"center"}(t,i);return{xAlign:i.xAlign||e.xAlign||Ao(t,e,i,s),yAlign:s}}function Lo(t,e,i,s){const{caretSize:n,caretPadding:o,cornerRadius:a}=t,{xAlign:r,yAlign:l}=i,h=n+o,{topLeft:c,topRight:d,bottomLeft:u,bottomRight:f}=Se(a);let g=function(t,e){let{x:i,width:s}=t;return"right"===e?i-=s:"center"===e&&(i-=s/2),i}(e,r);const p=function(t,e,i){let{y:s,height:n}=t;return"top"===e?s+=i:s-="bottom"===e?n+i:n/2,s}(e,l,h);return"center"===l?"left"===r?g+=h:"right"===r&&(g-=h):"left"===r?g-=Math.max(c,u)+n:"right"===r&&(g+=Math.max(d,f)+n),{x:St(g,0,s.width-e.width),y:St(p,0,s.height-e.height)}}function Eo(t,e,i){const s=Pe(i.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-s.right:t.x+s.left}function Ro(t){return Po([],Do(t))}function Io(t,e){const i=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return i?t.override(i):t}const zo={beforeTitle:E,title(t){if(t.length>0){const e=t[0],i=e.chart.data.labels,s=i?i.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(s>0&&e.dataIndex<s)return i[e.dataIndex]}return""},afterTitle:E,beforeBody:E,beforeLabel:E,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const i=t.formattedValue;return I(i)||(e+=i),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:E,afterBody:E,beforeFooter:E,footer:E,afterFooter:E};function Fo(t,e,i,s){const n=t[e].call(i,s);return void 0===n?zo[e].call(i,s):n}class Vo extends Ws{static positioners=So;constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const e=this.chart,i=this.options.setContext(this.getContext()),s=i.enabled&&e.options.animation&&i.animations,n=new Si(this.chart,s);return s._cacheable&&(this._cachedAnimations=Object.freeze(n)),n}getContext(){return this.$context||(this.$context=(this,Oe(this.chart.getContext(),{tooltip:this,tooltipItems:this._tooltipItems,type:"tooltip"})))}getTitle(t,e){const{callbacks:i}=e,s=Fo(i,"beforeTitle",this,t),n=Fo(i,"title",this,t),o=Fo(i,"afterTitle",this,t);let a=[];return a=Po(a,Do(s)),a=Po(a,Do(n)),a=Po(a,Do(o)),a}getBeforeBody(t,e){return Ro(Fo(e.callbacks,"beforeBody",this,t))}getBody(t,e){const{callbacks:i}=e,s=[];return j(t,(t=>{const e={before:[],lines:[],after:[]},n=Io(i,t);Po(e.before,Do(Fo(n,"beforeLabel",this,t))),Po(e.lines,Fo(n,"label",this,t)),Po(e.after,Do(Fo(n,"afterLabel",this,t))),s.push(e)})),s}getAfterBody(t,e){return Ro(Fo(e.callbacks,"afterBody",this,t))}getFooter(t,e){const{callbacks:i}=e,s=Fo(i,"beforeFooter",this,t),n=Fo(i,"footer",this,t),o=Fo(i,"afterFooter",this,t);let a=[];return a=Po(a,Do(s)),a=Po(a,Do(n)),a=Po(a,Do(o)),a}_createItems(t){const e=this._active,i=this.chart.data,s=[],n=[],o=[];let a,r,l=[];for(a=0,r=e.length;a<r;++a)l.push(Co(this.chart,e[a]));return t.filter&&(l=l.filter(((e,s,n)=>t.filter(e,s,n,i)))),t.itemSort&&(l=l.sort(((e,s)=>t.itemSort(e,s,i)))),j(l,(e=>{const i=Io(t.callbacks,e);s.push(Fo(i,"labelColor",this,e)),n.push(Fo(i,"labelPointStyle",this,e)),o.push(Fo(i,"labelTextColor",this,e))})),this.labelColors=s,this.labelPointStyles=n,this.labelTextColors=o,this.dataPoints=l,l}update(t,e){const i=this.options.setContext(this.getContext()),s=this._active;let n,o=[];if(s.length){const t=So[i.position].call(this,s,this._eventPosition);o=this._createItems(i),this.title=this.getTitle(o,i),this.beforeBody=this.getBeforeBody(o,i),this.body=this.getBody(o,i),this.afterBody=this.getAfterBody(o,i),this.footer=this.getFooter(o,i);const e=this._size=Oo(this,i),a=Object.assign({},t,e),r=To(this.chart,i,a),l=Lo(i,a,r,this.chart);this.xAlign=r.xAlign,this.yAlign=r.yAlign,n={opacity:1,x:l.x,y:l.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(n={opacity:0});this._tooltipItems=o,this.$context=void 0,n&&this._resolveAnimations().update(this,n),t&&i.external&&i.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,i,s){const n=this.getCaretPosition(t,i,s);e.lineTo(n.x1,n.y1),e.lineTo(n.x2,n.y2),e.lineTo(n.x3,n.y3)}getCaretPosition(t,e,i){const{xAlign:s,yAlign:n}=this,{caretSize:o,cornerRadius:a}=i,{topLeft:r,topRight:l,bottomLeft:h,bottomRight:c}=Se(a),{x:d,y:u}=t,{width:f,height:g}=e;let p,m,b,x,_,y;return"center"===n?(_=u+g/2,"left"===s?(p=d,m=p-o,x=_+o,y=_-o):(p=d+f,m=p+o,x=_-o,y=_+o),b=p):(m="left"===s?d+Math.max(r,h)+o:"right"===s?d+f-Math.max(l,c)-o:this.caretX,"top"===n?(x=u,_=x-o,p=m-o,b=m+o):(x=u+g,_=x+o,p=m+o,b=m-o),y=x),{x1:p,x2:m,x3:b,y1:x,y2:_,y3:y}}drawTitle(t,e,i){const s=this.title,n=s.length;let o,a,r;if(n){const l=di(i.rtl,this.x,this.width);for(t.x=Eo(this,i.titleAlign,i),e.textAlign=l.textAlign(i.titleAlign),e.textBaseline="middle",o=De(i.titleFont),a=i.titleSpacing,e.fillStyle=i.titleColor,e.font=o.string,r=0;r<n;++r)e.fillText(s[r],l.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+a,r+1===n&&(t.y+=i.titleMarginBottom-a)}}_drawColorBox(t,e,i,s,n){const o=this.labelColors[i],a=this.labelPointStyles[i],{boxHeight:r,boxWidth:l,boxPadding:h}=n,c=De(n.bodyFont),d=Eo(this,"left",n),u=s.x(d),f=r<c.lineHeight?(c.lineHeight-r)/2:0,g=e.y+f;if(n.usePointStyle){const e={radius:Math.min(l,r)/2,pointStyle:a.pointStyle,rotation:a.rotation,borderWidth:1},i=s.leftForLtr(u,l)+l/2,h=g+r/2;t.strokeStyle=n.multiKeyBackground,t.fillStyle=n.multiKeyBackground,le(t,e,i,h),t.strokeStyle=o.borderColor,t.fillStyle=o.backgroundColor,le(t,e,i,h)}else{t.lineWidth=F(o.borderWidth)?Math.max(...Object.values(o.borderWidth)):o.borderWidth||1,t.strokeStyle=o.borderColor,t.setLineDash(o.borderDash||[]),t.lineDashOffset=o.borderDashOffset||0;const e=s.leftForLtr(u,l-h),i=s.leftForLtr(s.xPlus(u,1),l-h-2),a=Se(o.borderRadius);Object.values(a).some((t=>0!==t))?(t.beginPath(),t.fillStyle=n.multiKeyBackground,xe(t,{x:e,y:g,w:l,h:r,radius:a}),t.fill(),t.stroke(),t.fillStyle=o.backgroundColor,t.beginPath(),xe(t,{x:i,y:g+1,w:l-2,h:r-2,radius:a}),t.fill()):(t.fillStyle=n.multiKeyBackground,t.fillRect(e,g,l,r),t.strokeRect(e,g,l,r),t.fillStyle=o.backgroundColor,t.fillRect(i,g+1,l-2,r-2))}t.fillStyle=this.labelTextColors[i]}drawBody(t,e,i){const{body:s}=this,{bodySpacing:n,bodyAlign:o,displayColors:a,boxHeight:r,boxWidth:l,boxPadding:h}=i,c=De(i.bodyFont);let d=c.lineHeight,u=0;const f=di(i.rtl,this.x,this.width),g=function(i){e.fillText(i,f.x(t.x+u),t.y+d/2),t.y+=d+n},p=f.textAlign(o);let m,b,x,_,y,v,M;for(e.textAlign=o,e.textBaseline="middle",e.font=c.string,t.x=Eo(this,p,i),e.fillStyle=i.bodyColor,j(this.beforeBody,g),u=a&&"right"!==p?"center"===o?l/2+h:l+2+h:0,_=0,v=s.length;_<v;++_){for(m=s[_],b=this.labelTextColors[_],e.fillStyle=b,j(m.before,g),x=m.lines,a&&x.length&&(this._drawColorBox(e,t,_,f,i),d=Math.max(c.lineHeight,r)),y=0,M=x.length;y<M;++y)g(x[y]),d=c.lineHeight;j(m.after,g)}u=0,d=c.lineHeight,j(this.afterBody,g),t.y-=n}drawFooter(t,e,i){const s=this.footer,n=s.length;let o,a;if(n){const r=di(i.rtl,this.x,this.width);for(t.x=Eo(this,i.footerAlign,i),t.y+=i.footerMarginTop,e.textAlign=r.textAlign(i.footerAlign),e.textBaseline="middle",o=De(i.footerFont),e.fillStyle=i.footerColor,e.font=o.string,a=0;a<n;++a)e.fillText(s[a],r.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+i.footerSpacing}}drawBackground(t,e,i,s){const{xAlign:n,yAlign:o}=this,{x:a,y:r}=t,{width:l,height:h}=i,{topLeft:c,topRight:d,bottomLeft:u,bottomRight:f}=Se(s.cornerRadius);e.fillStyle=s.backgroundColor,e.strokeStyle=s.borderColor,e.lineWidth=s.borderWidth,e.beginPath(),e.moveTo(a+c,r),"top"===o&&this.drawCaret(t,e,i,s),e.lineTo(a+l-d,r),e.quadraticCurveTo(a+l,r,a+l,r+d),"center"===o&&"right"===n&&this.drawCaret(t,e,i,s),e.lineTo(a+l,r+h-f),e.quadraticCurveTo(a+l,r+h,a+l-f,r+h),"bottom"===o&&this.drawCaret(t,e,i,s),e.lineTo(a+u,r+h),e.quadraticCurveTo(a,r+h,a,r+h-u),"center"===o&&"left"===n&&this.drawCaret(t,e,i,s),e.lineTo(a,r+c),e.quadraticCurveTo(a,r,a+c,r),e.closePath(),e.fill(),s.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,i=this.$animations,s=i&&i.x,n=i&&i.y;if(s||n){const i=So[t.position].call(this,this._active,this._eventPosition);if(!i)return;const o=this._size=Oo(this,t),a=Object.assign({},i,this._size),r=To(e,t,a),l=Lo(t,a,r,e);s._to===l.x&&n._to===l.y||(this.xAlign=r.xAlign,this.yAlign=r.yAlign,this.width=o.width,this.height=o.height,this.caretX=i.x,this.caretY=i.y,this._resolveAnimations().update(this,l))}}_willRender(){return!!this.opacity}draw(t){const e=this.options.setContext(this.getContext());let i=this.opacity;if(!i)return;this._updateAnimationTarget(e);const s={width:this.width,height:this.height},n={x:this.x,y:this.y};i=Math.abs(i)<.001?0:i;const o=Pe(e.padding),a=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&a&&(t.save(),t.globalAlpha=i,this.drawBackground(n,t,s,e),ui(t,e.textDirection),n.y+=o.top,this.drawTitle(n,t,e),this.drawBody(n,t,e),this.drawFooter(n,t,e),fi(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const i=this._active,s=t.map((({datasetIndex:t,index:e})=>{const i=this.chart.getDatasetMeta(t);if(!i)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:i.data[e],index:e}})),n=!$(i,s),o=this._positionChanged(s,e);(n||o)&&(this._active=s,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,i=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const s=this.options,n=this._active||[],o=this._getActiveElements(t,n,e,i),a=this._positionChanged(o,t),r=e||!$(o,n)||a;return r&&(this._active=o,(s.enabled||s.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),r}_getActiveElements(t,e,i,s){const n=this.options;if("mouseout"===t.type)return[];if(!s)return e;const o=this.chart.getElementsAtEventForMode(t,n.mode,n,i);return n.reverse&&o.reverse(),o}_positionChanged(t,e){const{caretX:i,caretY:s,options:n}=this,o=So[n.position].call(this,t,e);return!1!==o&&(i!==o.x||s!==o.y)}}var Bo={id:"tooltip",_element:Vo,positioners:So,afterInit(t,e,i){i&&(t.tooltip=new Vo({chart:t,options:i}))},beforeUpdate(t,e,i){t.tooltip&&t.tooltip.initialize(i)},reset(t,e,i){t.tooltip&&t.tooltip.initialize(i)},afterDraw(t){const e=t.tooltip;if(e&&e._willRender()){const i={tooltip:e};if(!1===t.notifyPlugins("beforeTooltipDraw",{...i,cancelable:!0}))return;e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",i)}},afterEvent(t,e){if(t.tooltip){const i=e.replay;t.tooltip.handleEvent(e.event,i,e.inChartArea)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:zo},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},Wo=Object.freeze({__proto__:null,Colors:Gn,Decimation:Qn,Filler:mo,Legend:yo,SubTitle:ko,Title:Mo,Tooltip:Bo});function No(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}class Ho extends Ks{static id="category";static defaults={ticks:{callback:No}};constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const e=this._addedLabels;if(e.length){const t=this.getLabels();for(const{index:i,label:s}of e)t[i]===s&&t.splice(i,1);this._addedLabels=[]}super.init(t)}parse(t,e){if(I(t))return null;const i=this.getLabels();return((t,e)=>null===t?null:St(Math.round(t),0,e))(e=isFinite(e)&&i[e]===t?e:function(t,e,i,s){const n=t.indexOf(e);return-1===n?((t,e,i,s)=>("string"==typeof e?(i=t.push(e)-1,s.unshift({index:i,label:e})):isNaN(e)&&(i=null),i))(t,e,i,s):n!==t.lastIndexOf(e)?i:n}(i,t,W(e,t),this._addedLabels),i.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:i,max:s}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(i=0),e||(s=this.getLabels().length-1)),this.min=i,this.max=s}buildTicks(){const t=this.min,e=this.max,i=this.options.offset,s=[];let n=this.getLabels();n=0===t&&e===n.length-1?n:n.slice(t,e+1),this._valueRange=Math.max(n.length-(i?0:1),1),this._startValue=this.min-(i?.5:0);for(let i=t;i<=e;i++)s.push({value:i});return s}getLabelForValue(t){return No.call(this,t)}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}}function jo(t,e,{horizontal:i,minRotation:s}){const n=bt(s),o=(i?Math.sin(n):Math.cos(n))||.001,a=.75*e*(""+t).length;return Math.min(e/o,a)}class $o extends Ks{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return I(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:e,maxDefined:i}=this.getUserBounds();let{min:s,max:n}=this;const o=t=>s=e?s:t,a=t=>n=i?n:t;if(t){const t=ut(s),e=ut(n);t<0&&e<0?a(0):t>0&&e>0&&o(0)}if(s===n){let e=0===n?1:Math.abs(.05*n);a(n+e),t||o(s-e)}this.min=s,this.max=n}getTickLimit(){const t=this.options.ticks;let e,{maxTicksLimit:i,stepSize:s}=t;return s?(e=Math.ceil(this.max/s)-Math.floor(this.min/s)+1,e>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${s} would result generating up to ${e} ticks. Limiting to 1000.`),e=1e3)):(e=this.computeTickLimit(),i=i||11),i&&(e=Math.min(i,e)),e}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,e=t.ticks;let i=this.getTickLimit();i=Math.max(2,i);const s=function(t,e){const i=[],{bounds:s,step:n,min:o,max:a,precision:r,count:l,maxTicks:h,maxDigits:c,includeBounds:d}=t,u=n||1,f=h-1,{min:g,max:p}=e,m=!I(o),b=!I(a),x=!I(l),_=(p-g)/(c+1);let y,v,M,w,k=gt((p-g)/f/u)*u;if(k<1e-14&&!m&&!b)return[{value:g},{value:p}];w=Math.ceil(p/k)-Math.floor(g/k),w>f&&(k=gt(w*k/f/u)*u),I(r)||(y=Math.pow(10,r),k=Math.ceil(k*y)/y),"ticks"===s?(v=Math.floor(g/k)*k,M=Math.ceil(p/k)*k):(v=g,M=p),m&&b&&n&&function(t,e){const i=Math.round(t);return i-e<=t&&i+e>=t}((a-o)/n,k/1e3)?(w=Math.round(Math.min((a-o)/k,h)),k=(a-o)/w,v=o,M=a):x?(v=m?o:v,M=b?a:M,w=l-1,k=(M-v)/w):(w=(M-v)/k,w=ft(w,Math.round(w),k/1e3)?Math.round(w):Math.ceil(w));const S=Math.max(_t(k),_t(v));y=Math.pow(10,I(r)?S:r),v=Math.round(v*y)/y,M=Math.round(M*y)/y;let P=0;for(m&&(d&&v!==o?(i.push({value:o}),v<o&&P++,ft(Math.round((v+P*k)*y)/y,o,jo(o,_,t))&&P++):v<o&&P++);P<w;++P)i.push({value:Math.round((v+P*k)*y)/y});return b&&d&&M!==a?i.length&&ft(i[i.length-1].value,a,jo(a,_,t))?i[i.length-1].value=a:i.push({value:a}):b&&M!==a||i.push({value:M}),i}({maxTicks:i,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&mt(s,this,"value"),t.reverse?(s.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),s}configure(){const t=this.ticks;let e=this.min,i=this.max;if(super.configure(),this.options.offset&&t.length){const s=(i-e)/Math.max(t.length-1,1)/2;e-=s,i+=s}this._startValue=e,this._endValue=i,this._valueRange=i-e}getLabelForValue(t){return Kt(t,this.chart.options.locale,this.options.ticks.format)}}class Yo extends $o{static id="linear";static defaults={ticks:{callback:Zt.formatters.numeric}};determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=V(t)?t:0,this.max=V(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),e=t?this.width:this.height,i=bt(this.options.ticks.minRotation),s=(t?Math.sin(i):Math.cos(i))||.001,n=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,n.lineHeight/s))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}const Uo=t=>Math.floor(dt(t)),Xo=(t,e)=>Math.pow(10,Uo(t)+e);function qo(t){return 1==t/Math.pow(10,Uo(t))}function Ko(t,e,i){const s=Math.pow(10,i),n=Math.floor(t/s);return Math.ceil(e/s)-n}class Go extends Ks{static id="logarithmic";static defaults={ticks:{callback:Zt.formatters.logarithmic,major:{enabled:!0}}};constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const i=$o.prototype.parse.apply(this,[t,e]);if(0!==i)return V(i)&&i>0?i:null;this._zero=!0}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=V(t)?Math.max(0,t):null,this.max=V(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this._zero&&this.min!==this._suggestedMin&&!V(this._userMin)&&(this.min=t===Xo(this.min,0)?Xo(this.min,-1):Xo(this.min,0)),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let i=this.min,s=this.max;const n=e=>i=t?i:e,o=t=>s=e?s:t;i===s&&(i<=0?(n(1),o(10)):(n(Xo(i,-1)),o(Xo(s,1)))),i<=0&&n(Xo(s,-1)),s<=0&&o(Xo(i,1)),this.min=i,this.max=s}buildTicks(){const t=this.options,e=function(t,{min:e,max:i}){e=B(t.min,e);const s=[],n=Uo(e);let o=function(t,e){let i=Uo(e-t);for(;Ko(t,e,i)>10;)i++;for(;Ko(t,e,i)<10;)i--;return Math.min(i,Uo(t))}(e,i),a=o<0?Math.pow(10,Math.abs(o)):1;const r=Math.pow(10,o),l=n>o?Math.pow(10,n):0,h=Math.round((e-l)*a)/a,c=Math.floor((e-l)/r/10)*r*10;let d=Math.floor((h-c)/Math.pow(10,o)),u=B(t.min,Math.round((l+c+d*Math.pow(10,o))*a)/a);for(;u<i;)s.push({value:u,major:qo(u),significand:d}),d>=10?d=d<15?15:20:d++,d>=20&&(o++,d=2,a=o>=0?1:a),u=Math.round((l+c+d*Math.pow(10,o))*a)/a;const f=B(t.max,u);return s.push({value:f,major:qo(f),significand:d}),s}({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&mt(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":Kt(t,this.chart.options.locale,this.options.ticks.format)}configure(){const t=this.min;super.configure(),this._startValue=dt(t),this._valueRange=dt(this.max)-dt(t)}getPixelForValue(t){return void 0!==t&&0!==t||(t=this.min),null===t||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(dt(t)-this._startValue)/this._valueRange)}getValueForPixel(t){const e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}}function Zo(t){const e=t.ticks;if(e.display&&t.display){const t=Pe(e.backdropPadding);return W(e.font&&e.font.size,se.font.size)+t.height}return 0}function Jo(t,e,i,s,n){return t===s||t===n?{start:e-i/2,end:e+i/2}:t<s||t>n?{start:e-i,end:e}:{start:e,end:e+i}}function Qo(t,e,i,s,n){const o=Math.abs(Math.sin(i)),a=Math.abs(Math.cos(i));let r=0,l=0;s.start<e.l?(r=(e.l-s.start)/o,t.l=Math.min(t.l,e.l-r)):s.end>e.r&&(r=(s.end-e.r)/o,t.r=Math.max(t.r,e.r+r)),n.start<e.t?(l=(e.t-n.start)/a,t.t=Math.min(t.t,e.t-l)):n.end>e.b&&(l=(n.end-e.b)/a,t.b=Math.max(t.b,e.b+l))}function ta(t){return 0===t||180===t?"center":t<180?"left":"right"}function ea(t,e,i){return 90===i||270===i?t-=e/2:(i>270||i<90)&&(t-=e),t}function ia(t,e,i,s){const{ctx:n}=t;if(i)n.arc(t.xCenter,t.yCenter,e,0,nt);else{let i=t.getPointPosition(0,e);n.moveTo(i.x,i.y);for(let o=1;o<s;o++)i=t.getPointPosition(o,e),n.lineTo(i.x,i.y)}}class sa extends $o{static id="radialLinear";static defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:Zt.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback(t){return t},padding:5,centerPointLabels:!1}};static defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"};static descriptors={angleLines:{_fallback:"grid"}};constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this._padding=Pe(Zo(this.options)/2),e=this.width=this.maxWidth-t.width,i=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+i/2+t.top),this.drawingArea=Math.floor(Math.min(e,i)/2)}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!1);this.min=V(t)&&!isNaN(t)?t:0,this.max=V(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/Zo(this.options))}generateTickLabels(t){$o.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map(((t,e)=>{const i=H(this.options.pointLabels.callback,[t,e],this);return i||0===i?i:""})).filter(((t,e)=>this.chart.getDataVisibility(e)))}fit(){const t=this.options;t.display&&t.pointLabels.display?function(t){const e={l:t.left+t._padding.left,r:t.right-t._padding.right,t:t.top+t._padding.top,b:t.bottom-t._padding.bottom},i=Object.assign({},e),s=[],n=[],o=t._pointLabels.length,a=t.options.pointLabels,r=a.centerPointLabels?st/o:0;for(let d=0;d<o;d++){const o=a.setContext(t.getPointLabelContext(d));n[d]=o.padding;const u=t.getPointPosition(d,t.drawingArea+n[d],r),f=De(o.font),g=(l=t.ctx,h=f,c=z(c=t._pointLabels[d])?c:[c],{w:oe(l,h.string,c),h:c.length*h.lineHeight});s[d]=g;const p=wt(t.getIndexAngle(d)+r),m=Math.round(xt(p));Qo(i,e,p,Jo(m,u.x,g.w,0,180),Jo(m,u.y,g.h,90,270))}var l,h,c;t.setCenterPoint(e.l-i.l,i.r-e.r,e.t-i.t,i.b-e.b),t._pointLabelItems=function(t,e,i){const s=[],n=t._pointLabels.length,o=t.options,a=Zo(o)/2,r=t.drawingArea,l=o.pointLabels.centerPointLabels?st/n:0;for(let o=0;o<n;o++){const n=t.getPointPosition(o,r+a+i[o],l),u=Math.round(xt(wt(n.angle+lt))),f=e[o],g=ea(n.y,f.h,u),p=ta(u),m=(h=n.x,c=f.w,"right"===(d=p)?h-=c:"center"===d&&(h-=c/2),h);s.push({x:n.x,y:g,textAlign:p,left:m,top:g,right:m+f.w,bottom:g+f.h})}var h,c,d;return s}(t,s,n)}(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,i,s){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((i-s)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,i,s))}getIndexAngle(t){return wt(t*(nt/(this._pointLabels.length||1))+bt(this.options.startAngle||0))}getDistanceFromCenterForValue(t){if(I(t))return NaN;const e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if(I(t))return NaN;const e=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-e:this.min+e}getPointLabelContext(t){const e=this._pointLabels||[];if(t>=0&&t<e.length){const i=e[t];return function(t,e,i){return Oe(t,{label:i,index:e,type:"pointLabel"})}(this.getContext(),t,i)}}getPointPosition(t,e,i=0){const s=this.getIndexAngle(t)-lt+i;return{x:Math.cos(s)*e+this.xCenter,y:Math.sin(s)*e+this.yCenter,angle:s}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:i,right:s,bottom:n}=this._pointLabelItems[t];return{left:e,top:i,right:s,bottom:n}}drawBackground(){const{backgroundColor:t,grid:{circular:e}}=this.options;if(t){const i=this.ctx;i.save(),i.beginPath(),ia(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),i.closePath(),i.fillStyle=t,i.fill(),i.restore()}}drawGrid(){const t=this.ctx,e=this.options,{angleLines:i,grid:s,border:n}=e,o=this._pointLabels.length;let a,r,l;if(e.pointLabels.display&&function(t,e){const{ctx:i,options:{pointLabels:s}}=t;for(let n=e-1;n>=0;n--){const e=s.setContext(t.getPointLabelContext(n)),o=De(e.font),{x:a,y:r,textAlign:l,left:h,top:c,right:d,bottom:u}=t._pointLabelItems[n],{backdropColor:f}=e;if(!I(f)){const t=Se(e.borderRadius),s=Pe(e.backdropPadding);i.fillStyle=f;const n=h-s.left,o=c-s.top,a=d-h+s.width,r=u-c+s.height;Object.values(t).some((t=>0!==t))?(i.beginPath(),xe(i,{x:n,y:o,w:a,h:r,radius:t}),i.fill()):i.fillRect(n,o,a,r)}pe(i,t._pointLabels[n],a,r+o.lineHeight/2,o,{color:e.color,textAlign:l,textBaseline:"middle"})}}(this,o),s.display&&this.ticks.forEach(((t,e)=>{if(0!==e){r=this.getDistanceFromCenterForValue(t.value);const i=this.getContext(e),a=s.setContext(i),l=n.setContext(i);!function(t,e,i,s,n){const o=t.ctx,a=e.circular,{color:r,lineWidth:l}=e;!a&&!s||!r||!l||i<0||(o.save(),o.strokeStyle=r,o.lineWidth=l,o.setLineDash(n.dash),o.lineDashOffset=n.dashOffset,o.beginPath(),ia(t,i,a,s),o.closePath(),o.stroke(),o.restore())}(this,a,r,o,l)}})),i.display){for(t.save(),a=o-1;a>=0;a--){const s=i.setContext(this.getPointLabelContext(a)),{color:n,lineWidth:o}=s;o&&n&&(t.lineWidth=o,t.strokeStyle=n,t.setLineDash(s.borderDash),t.lineDashOffset=s.borderDashOffset,r=this.getDistanceFromCenterForValue(e.ticks.reverse?this.min:this.max),l=this.getPointPosition(a,r),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(l.x,l.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const t=this.ctx,e=this.options,i=e.ticks;if(!i.display)return;const s=this.getIndexAngle(0);let n,o;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(s),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach(((s,a)=>{if(0===a&&!e.reverse)return;const r=i.setContext(this.getContext(a)),l=De(r.font);if(n=this.getDistanceFromCenterForValue(this.ticks[a].value),r.showLabelBackdrop){t.font=l.string,o=t.measureText(s.label).width,t.fillStyle=r.backdropColor;const e=Pe(r.backdropPadding);t.fillRect(-o/2-e.left,-n-l.size/2-e.top,o+e.width,l.size+e.height)}pe(t,s.label,0,-n,l,{color:r.color})})),t.restore()}drawTitle(){}}const na={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},oa=Object.keys(na);function aa(t,e){return t-e}function ra(t,e){if(I(e))return null;const i=t._adapter,{parser:s,round:n,isoWeekday:o}=t._parseOpts;let a=e;return"function"==typeof s&&(a=s(a)),V(a)||(a="string"==typeof s?i.parse(a,s):i.parse(a)),null===a?null:(n&&(a="week"!==n||!pt(o)&&!0!==o?i.startOf(a,n):i.startOf(a,"isoWeek",o)),+a)}function la(t,e,i,s){const n=oa.length;for(let o=oa.indexOf(t);o<n-1;++o){const t=na[oa[o]],n=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((i-e)/(n*t.size))<=s)return oa[o]}return oa[n-1]}function ha(t,e,i){if(i){if(i.length){const{lo:s,hi:n}=Dt(i,e);t[i[s]>=e?i[s]:i[n]]=!0}}else t[e]=!0}function ca(t,e,i){const s=[],n={},o=e.length;let a,r;for(a=0;a<o;++a)r=e[a],n[r]=a,s.push({value:r,major:!1});return 0!==o&&i?function(t,e,i,s){const n=t._adapter,o=+n.startOf(e[0].value,s),a=e[e.length-1].value;let r,l;for(r=o;r<=a;r=+n.add(r,1,s))l=i[r],l>=0&&(e[l].major=!0);return e}(t,s,n,i):s}class da extends Ks{static id="time";static defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",callback:!1,major:{enabled:!1}}};constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e={}){const i=t.time||(t.time={}),s=this._adapter=new ss._date(t.adapters.date);s.init(e),K(i.displayFormats,s.formats()),this._parseOpts={parser:i.parser,round:i.round,isoWeekday:i.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:ra(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,e=this._adapter,i=t.time.unit||"day";let{min:s,max:n,minDefined:o,maxDefined:a}=this.getUserBounds();function r(t){o||isNaN(t.min)||(s=Math.min(s,t.min)),a||isNaN(t.max)||(n=Math.max(n,t.max))}o&&a||(r(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||r(this.getMinMax(!1))),s=V(s)&&!isNaN(s)?s:+e.startOf(Date.now(),i),n=V(n)&&!isNaN(n)?n:+e.endOf(Date.now(),i)+1,this.min=Math.min(s,n-1),this.max=Math.max(s+1,n)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],i=t[t.length-1]),{min:e,max:i}}buildTicks(){const t=this.options,e=t.time,i=t.ticks,s="labels"===i.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&s.length&&(this.min=this._userMin||s[0],this.max=this._userMax||s[s.length-1]);const n=this.min,o=function(t,e,i){let s=0,n=t.length;for(;s<n&&t[s]<e;)s++;for(;n>s&&t[n-1]>i;)n--;return s>0||n<t.length?t.slice(s,n):t}(s,n,this.max);return this._unit=e.unit||(i.autoSkip?la(e.minUnit,this.min,this.max,this._getLabelCapacity(n)):function(t,e,i,s,n){for(let o=oa.length-1;o>=oa.indexOf(i);o--){const i=oa[o];if(na[i].common&&t._adapter.diff(n,s,i)>=e-1)return i}return oa[i?oa.indexOf(i):0]}(this,o.length,e.minUnit,this.min,this.max)),this._majorUnit=i.major.enabled&&"year"!==this._unit?function(t){for(let e=oa.indexOf(t)+1,i=oa.length;e<i;++e)if(na[oa[e]].common)return oa[e]}(this._unit):void 0,this.initOffsets(s),t.reverse&&o.reverse(),ca(this,o,this._majorUnit)}afterAutoSkip(){this.options.offsetAfterAutoskip&&this.initOffsets(this.ticks.map((t=>+t.value)))}initOffsets(t=[]){let e,i,s=0,n=0;this.options.offset&&t.length&&(e=this.getDecimalForValue(t[0]),s=1===t.length?1-e:(this.getDecimalForValue(t[1])-e)/2,i=this.getDecimalForValue(t[t.length-1]),n=1===t.length?i:(i-this.getDecimalForValue(t[t.length-2]))/2);const o=t.length<3?.5:.25;s=St(s,0,o),n=St(n,0,o),this._offsets={start:s,end:n,factor:1/(s+1+n)}}_generate(){const t=this._adapter,e=this.min,i=this.max,s=this.options,n=s.time,o=n.unit||la(n.minUnit,e,i,this._getLabelCapacity(e)),a=W(s.ticks.stepSize,1),r="week"===o&&n.isoWeekday,l=pt(r)||!0===r,h={};let c,d,u=e;if(l&&(u=+t.startOf(u,"isoWeek",r)),u=+t.startOf(u,l?"day":o),t.diff(i,e,o)>1e5*a)throw new Error(e+" and "+i+" are too far apart with stepSize of "+a+" "+o);const f="data"===s.ticks.source&&this.getDataTimestamps();for(c=u,d=0;c<i;c=+t.add(c,a,o),d++)ha(h,c,f);return c!==i&&"ticks"!==s.bounds&&1!==d||ha(h,c,f),Object.keys(h).sort(((t,e)=>t-e)).map((t=>+t))}getLabelForValue(t){const e=this._adapter,i=this.options.time;return i.tooltipFormat?e.format(t,i.tooltipFormat):e.format(t,i.displayFormats.datetime)}format(t,e){const i=this.options.time.displayFormats,s=this._unit,n=e||i[s];return this._adapter.format(t,n)}_tickFormatFunction(t,e,i,s){const n=this.options,o=n.ticks.callback;if(o)return H(o,[t,e,i],this);const a=n.time.displayFormats,r=this._unit,l=this._majorUnit,h=r&&a[r],c=l&&a[l],d=i[e],u=l&&c&&d&&d.major;return this._adapter.format(t,s||(u?c:h))}generateTickLabels(t){let e,i,s;for(e=0,i=t.length;e<i;++e)s=t[e],s.label=this._tickFormatFunction(s.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const e=this._offsets,i=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+i)*e.factor)}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+i*(this.max-this.min)}_getLabelSize(t){const e=this.options.ticks,i=this.ctx.measureText(t).width,s=bt(this.isHorizontal()?e.maxRotation:e.minRotation),n=Math.cos(s),o=Math.sin(s),a=this._resolveTickFontOptions(0).size;return{w:i*n+a*o,h:i*o+a*n}}_getLabelCapacity(t){const e=this.options.time,i=e.displayFormats,s=i[e.unit]||i.millisecond,n=this._tickFormatFunction(t,0,ca(this,[t],this._majorUnit),s),o=this._getLabelSize(n),a=Math.floor(this.isHorizontal()?this.width/o.w:this.height/o.h)-1;return a>0?a:1}getDataTimestamps(){let t,e,i=this._cache.data||[];if(i.length)return i;const s=this.getMatchingVisibleMetas();if(this._normalized&&s.length)return this._cache.data=s[0].controller.getAllParsedValues(this);for(t=0,e=s.length;t<e;++t)i=i.concat(s[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(i)}getLabelTimestamps(){const t=this._cache.labels||[];let e,i;if(t.length)return t;const s=this.getLabels();for(e=0,i=s.length;e<i;++e)t.push(ra(this,s[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return Lt(t.sort(aa))}}function ua(t,e,i){let s,n,o,a,r=0,l=t.length-1;i?(e>=t[r].pos&&e<=t[l].pos&&({lo:r,hi:l}=Ct(t,"pos",e)),({pos:s,time:o}=t[r]),({pos:n,time:a}=t[l])):(e>=t[r].time&&e<=t[l].time&&({lo:r,hi:l}=Ct(t,"time",e)),({time:s,pos:o}=t[r]),({time:n,pos:a}=t[l]));const h=n-s;return h?o+(a-o)*(e-s)/h:o}class fa extends da{static id="timeseries";static defaults=da.defaults;constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=ua(e,this.min),this._tableRange=ua(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:e,max:i}=this,s=[],n=[];let o,a,r,l,h;for(o=0,a=t.length;o<a;++o)l=t[o],l>=e&&l<=i&&s.push(l);if(s.length<2)return[{time:e,pos:0},{time:i,pos:1}];for(o=0,a=s.length;o<a;++o)h=s[o+1],r=s[o-1],l=s[o],Math.round((h+r)/2)!==l&&n.push({time:l,pos:o/(a-1)});return n}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const e=this.getDataTimestamps(),i=this.getLabelTimestamps();return t=e.length&&i.length?this.normalize(e.concat(i)):e.length?e:i,t=this._cache.all=t,t}getDecimalForValue(t){return(ua(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return ua(this._table,i*this._tableRange+this._minPos,!0)}}var ga=Object.freeze({__proto__:null,CategoryScale:Ho,LinearScale:Yo,LogarithmicScale:Go,RadialLinearScale:sa,TimeScale:da,TimeSeriesScale:fa});const pa=[ts,$n,Wo,ga]}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQUcsT0FDSEMsRUFBRyxLQUNIQyxFQUFHLFFBQ0hDLEVBQUcsTUFFQ0MsRUFBVSxDQUNkQyxPQUFRLFNBQ1JDLFlBQWEsU0FDYkMsS0FBTSxPQUNOQyxVQUFXLFNBQ1hDLEtBQU0sU0FDTkMsTUFBTyxTQUNQQyxPQUFRLFNBQ1JDLE1BQU8sSUFDUEMsYUFBYyxTQUNkQyxHQUFJLEtBQ0pDLFFBQVMsU0FDVEMsS0FBTSxTQUNOQyxVQUFXLFNBQ1hDLE9BQVEsU0FDUkMsU0FBVSxTQUNWQyxRQUFTLFNBQ1RDLElBQUssU0FDTEMsWUFBYSxTQUNiQyxRQUFTLFNBQ1RDLFFBQVMsU0FDVEMsS0FBTSxPQUNOQyxJQUFLLEtBQ0xDLE1BQU8sT0FDUEMsUUFBUyxTQUNUQyxLQUFNLFNBQ05DLEtBQU0sT0FDTkMsS0FBTSxTQUNOQyxPQUFRLFNBQ1JDLFFBQVMsU0FDVEMsU0FBVSxTQUNWQyxPQUFRLFNBQ1JDLE1BQU8sU0FDUEMsSUFBSyxTQUNMQyxPQUFRLFNBQ1JDLE9BQVEsU0FDUkMsS0FBTSxTQUNOQyxNQUFPLFNBQ1BDLE1BQU8sU0FDUEMsSUFBSyxPQUNMQyxPQUFRLFNBQ1JDLE9BQVEsU0FDUkMsU0FBVSxPQUNWQyxPQUFRLFNBQ1JDLE9BQVEsU0FDUkMsU0FBVSxTQUNWQyxTQUFVLFNBQ1ZDLFNBQVUsU0FDVkMsU0FBVSxTQUNWQyxPQUFRLFNBQ1JDLFFBQVMsU0FDVEMsVUFBVyxTQUNYQyxJQUFLLFNBQ0xDLE9BQVEsU0FDUkMsSUFBSyxTQUNMQyxJQUFLLE9BQ0xDLE1BQU8sU0FDUEMsSUFBSyxTQUNMQyxRQUFTLFNBQ1RDLE9BQVEsU0FDUkMsUUFBUyxTQUNUQyxNQUFPLFNBQ1BDLEtBQU0sU0FDTkMsTUFBTyxTQUNQQyxPQUFRLFNBQ1JDLFVBQVcsU0FDWEMsUUFBUyxTQUNUQyxXQUFZLFNBQ1pDLElBQUssU0FDTEMsS0FBTSxTQUNOQyxNQUFPLFNBQ1BDLFVBQVcsU0FDWEMsS0FBTSxTQUNOQyxLQUFNLFNBQ05DLEtBQU0sU0FDTkMsS0FBTSxTQUNOQyxPQUFRLFNBQ1JDLE9BQVEsU0FD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QU10MEMsRUFDTjNWLElBQUtyM0IsR0FBS2lTLEVBQU8sS0FJN0IsT0FBT2tHLENBQ1gsQ0FDSCxzQkFBQXNzRSxHQUNPLElBQUlsRCxFQUFhdnpFLEtBQUswK0IsT0FBT3hMLEtBQU8sR0FDcEMsR0FBSXFnRCxFQUFXcDFFLE9BQ1gsT0FBT28xRSxFQUVYLE1BQU1sNkQsRUFBT3JaLEtBQUtnMUUsb0JBQ1o3NUMsRUFBUW43QixLQUFLbzBFLHFCQU9uQixPQUxJYixFQURBbDZELEVBQUtsYixRQUFVZzlCLEVBQU1oOUIsT0FDUjZCLEtBQUsrc0IsVUFBVTFULEVBQUt3bEIsT0FBTzFELElBRTNCOWhCLEVBQUtsYixPQUFTa2IsRUFBTzhoQixFQUV0Q280QyxFQUFhdnpFLEtBQUswK0IsT0FBT3hMLElBQU1xZ0QsRUFDeEJBLENBQ1gsQ0FDSCxrQkFBQXNCLENBQW1CdnlFLEdBQ1osT0FBUSxHQUFZdEMsS0FBS3MyRSxPQUFRaDBFLEdBQVN0QyxLQUFLdTJFLFNBQVd2MkUsS0FBS3cyRSxXQUNuRSxDQUNILGdCQUFBdnpDLENBQWlCM29CLEdBQ1YsTUFBTWk3RCxFQUFVdjFFLEtBQUsrekUsU0FDZm4yQixFQUFVNTlDLEtBQUs2OUMsbUJBQW1CdmpDLEdBQVNpN0QsRUFBUTdrRCxPQUFTNmtELEVBQVE3ckUsSUFDMUUsT0FBTyxHQUFZMUosS0FBS3MyRSxPQUFRMTRCLEVBQVU1OUMsS0FBS3cyRSxZQUFjeDJFLEtBQUt1MkUsU0FBUyxFQUMvRSxFQUdKLElBQUkzaEUsR0FBc0I3VyxPQUFPcytCLE9BQU8sQ0FDeEN3TixVQUFXLEtBQ1g2aEMsY0FBZUEsR0FDZnVDLFlBQWFBLEdBQ2JRLGlCQUFrQkEsR0FDbEJpQixrQkFBbUJBLEdBQ25CaUUsVUFBV0EsR0FDWDBDLGdCQUFpQkEsS0FHakIsTUFBTU0sR0FBZ0IsQ0FDbEIvc0MsR0FDQSxHQUNBbjFCLEdBQ0FHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGF2ZW5kZXItbWVkaWNhbC8uL25vZGVfbW9kdWxlcy9Aa3Vya2xlL2NvbG9yL2Rpc3QvY29sb3IuZXNtLmpzIiwid2VicGFjazovL2xhdmVuZGVyLW1lZGljYWwvLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvZGlzdC9jaHVua3MvaGVscGVycy5zZWdtZW50LmpzIiwid2VicGFjazovL2xhdmVuZGVyLW1lZGljYWwvLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvZGlzdC9jaGFydC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBrdXJrbGUvY29sb3IgdjAuMy4yXG4gKiBodHRwczovL2dpdGh1Yi5jb20va3Vya2xlL2NvbG9yI3JlYWRtZVxuICogKGMpIDIwMjMgSnVra2EgS3Vya2VsYVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKi9cbmZ1bmN0aW9uIHJvdW5kKHYpIHtcbiAgcmV0dXJuIHYgKyAwLjUgfCAwO1xufVxuY29uc3QgbGltID0gKHYsIGwsIGgpID0+IE1hdGgubWF4KE1hdGgubWluKHYsIGgpLCBsKTtcbmZ1bmN0aW9uIHAyYih2KSB7XG4gIHJldHVybiBsaW0ocm91bmQodiAqIDIuNTUpLCAwLCAyNTUpO1xufVxuZnVuY3Rpb24gYjJwKHYpIHtcbiAgcmV0dXJuIGxpbShyb3VuZCh2IC8gMi41NSksIDAsIDEwMCk7XG59XG5mdW5jdGlvbiBuMmIodikge1xuICByZXR1cm4gbGltKHJvdW5kKHYgKiAyNTUpLCAwLCAyNTUpO1xufVxuZnVuY3Rpb24gYjJuKHYpIHtcbiAgcmV0dXJuIGxpbShyb3VuZCh2IC8gMi41NSkgLyAxMDAsIDAsIDEpO1xufVxuZnVuY3Rpb24gbjJwKHYpIHtcbiAgcmV0dXJuIGxpbShyb3VuZCh2ICogMTAwKSwgMCwgMTAwKTtcbn1cblxuY29uc3QgbWFwJDEgPSB7MDogMCwgMTogMSwgMjogMiwgMzogMywgNDogNCwgNTogNSwgNjogNiwgNzogNywgODogOCwgOTogOSwgQTogMTAsIEI6IDExLCBDOiAxMiwgRDogMTMsIEU6IDE0LCBGOiAxNSwgYTogMTAsIGI6IDExLCBjOiAxMiwgZDogMTMsIGU6IDE0LCBmOiAxNX07XG5jb25zdCBoZXggPSBbLi4uJzAxMjM0NTY3ODlBQkNERUYnXTtcbmNvbnN0IGgxID0gYiA9PiBoZXhbYiAmIDB4Rl07XG5jb25zdCBoMiA9IGIgPT4gaGV4WyhiICYgMHhGMCkgPj4gNF0gKyBoZXhbYiAmIDB4Rl07XG5jb25zdCBlcSA9IGIgPT4gKChiICYgMHhGMCkgPj4gNCkgPT09IChiICYgMHhGKTtcbmNvbnN0IGlzU2hvcnQgPSB2ID0+IGVxKHYucikgJiYgZXEodi5nKSAmJiBlcSh2LmIpICYmIGVxKHYuYSk7XG5mdW5jdGlvbiBoZXhQYXJzZShzdHIpIHtcbiAgdmFyIGxlbiA9IHN0ci5sZW5ndGg7XG4gIHZhciByZXQ7XG4gIGlmIChzdHJbMF0gPT09ICcjJykge1xuICAgIGlmIChsZW4gPT09IDQgfHwgbGVuID09PSA1KSB7XG4gICAgICByZXQgPSB7XG4gICAgICAgIHI6IDI1NSAmIG1hcCQxW3N0clsxXV0gKiAxNyxcbiAgICAgICAgZzogMjU1ICYgbWFwJDFbc3RyWzJdXSAqIDE3LFxuICAgICAgICBiOiAyNTUgJiBtYXAkMVtzdHJbM11dICogMTcsXG4gICAgICAgIGE6IGxlbiA9PT0gNSA/IG1hcCQxW3N0cls0XV0gKiAxNyA6IDI1NVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGxlbiA9PT0gNyB8fCBsZW4gPT09IDkpIHtcbiAgICAgIHJldCA9IHtcbiAgICAgICAgcjogbWFwJDFbc3RyWzFdXSA8PCA0IHwgbWFwJDFbc3RyWzJdXSxcbiAgICAgICAgZzogbWFwJDFbc3RyWzNdXSA8PCA0IHwgbWFwJDFbc3RyWzRdXSxcbiAgICAgICAgYjogbWFwJDFbc3RyWzVdXSA8PCA0IHwgbWFwJDFbc3RyWzZdXSxcbiAgICAgICAgYTogbGVuID09PSA5ID8gKG1hcCQxW3N0cls3XV0gPDwgNCB8IG1hcCQxW3N0cls4XV0pIDogMjU1XG4gICAgICB9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmV0O1xufVxuY29uc3QgYWxwaGEgPSAoYSwgZikgPT4gYSA8IDI1NSA/IGYoYSkgOiAnJztcbmZ1bmN0aW9uIGhleFN0cmluZyh2KSB7XG4gIHZhciBmID0gaXNTaG9ydCh2KSA/IGgxIDogaDI7XG4gIHJldHVybiB2XG4gICAgPyAnIycgKyBmKHYucikgKyBmKHYuZykgKyBmKHYuYikgKyBhbHBoYSh2LmEsIGYpXG4gICAgOiB1bmRlZmluZWQ7XG59XG5cbmNvbnN0IEhVRV9SRSA9IC9eKGhzbGE/fGh3Ynxoc3YpXFwoXFxzKihbLSsuZVxcZF0rKSg/OmRlZyk/W1xccyxdKyhbLSsuZVxcZF0rKSVbXFxzLF0rKFstKy5lXFxkXSspJSg/OltcXHMsXSsoWy0rLmVcXGRdKykoJSk/KT9cXHMqXFwpJC87XG5mdW5jdGlvbiBoc2wycmdibihoLCBzLCBsKSB7XG4gIGNvbnN0IGEgPSBzICogTWF0aC5taW4obCwgMSAtIGwpO1xuICBjb25zdCBmID0gKG4sIGsgPSAobiArIGggLyAzMCkgJSAxMikgPT4gbCAtIGEgKiBNYXRoLm1heChNYXRoLm1pbihrIC0gMywgOSAtIGssIDEpLCAtMSk7XG4gIHJldHVybiBbZigwKSwgZig4KSwgZig0KV07XG59XG5mdW5jdGlvbiBoc3YycmdibihoLCBzLCB2KSB7XG4gIGNvbnN0IGYgPSAobiwgayA9IChuICsgaCAvIDYwKSAlIDYpID0+IHYgLSB2ICogcyAqIE1hdGgubWF4KE1hdGgubWluKGssIDQgLSBrLCAxKSwgMCk7XG4gIHJldHVybiBbZig1KSwgZigzKSwgZigxKV07XG59XG5mdW5jdGlvbiBod2IycmdibihoLCB3LCBiKSB7XG4gIGNvbnN0IHJnYiA9IGhzbDJyZ2JuKGgsIDEsIDAuNSk7XG4gIGxldCBpO1xuICBpZiAodyArIGIgPiAxKSB7XG4gICAgaSA9IDEgLyAodyArIGIpO1xuICAgIHcgKj0gaTtcbiAgICBiICo9IGk7XG4gIH1cbiAgZm9yIChpID0gMDsgaSA8IDM7IGkrKykge1xuICAgIHJnYltpXSAqPSAxIC0gdyAtIGI7XG4gICAgcmdiW2ldICs9IHc7XG4gIH1cbiAgcmV0dXJuIHJnYjtcbn1cbmZ1bmN0aW9uIGh1ZVZhbHVlKHIsIGcsIGIsIGQsIG1heCkge1xuICBpZiAociA9PT0gbWF4KSB7XG4gICAgcmV0dXJuICgoZyAtIGIpIC8gZCkgKyAoZyA8IGIgPyA2IDogMCk7XG4gIH1cbiAgaWYgKGcgPT09IG1heCkge1xuICAgIHJldHVybiAoYiAtIHIpIC8gZCArIDI7XG4gIH1cbiAgcmV0dXJuIChyIC0gZykgLyBkICsgNDtcbn1cbmZ1bmN0aW9uIHJnYjJoc2wodikge1xuICBjb25zdCByYW5nZSA9IDI1NTtcbiAgY29uc3QgciA9IHYuciAvIHJhbmdlO1xuICBjb25zdCBnID0gdi5nIC8gcmFuZ2U7XG4gIGNvbnN0IGIgPSB2LmIgLyByYW5nZTtcbiAgY29uc3QgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG4gIGNvbnN0IG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuICBjb25zdCBsID0gKG1heCArIG1pbikgLyAyO1xuICBsZXQgaCwgcywgZDtcbiAgaWYgKG1heCAhPT0gbWluKSB7XG4gICAgZCA9IG1heCAtIG1pbjtcbiAgICBzID0gbCA+IDAuNSA/IGQgLyAoMiAtIG1heCAtIG1pbikgOiBkIC8gKG1heCArIG1pbik7XG4gICAgaCA9IGh1ZVZhbHVlKHIsIGcsIGIsIGQsIG1heCk7XG4gICAgaCA9IGggKiA2MCArIDAuNTtcbiAgfVxuICByZXR1cm4gW2ggfCAwLCBzIHx8IDAsIGxdO1xufVxuZnVuY3Rpb24gY2FsbG4oZiwgYSwgYiwgYykge1xuICByZXR1cm4gKFxuICAgIEFycmF5LmlzQXJyYXkoYSlcbiAgICAgID8gZihhWzBdLCBhWzFdLCBhWzJdKVxuICAgICAgOiBmKGEsIGIsIGMpXG4gICkubWFwKG4yYik7XG59XG5mdW5jdGlvbiBoc2wycmdiKGgsIHMsIGwpIHtcbiAgcmV0dXJuIGNhbGxuKGhzbDJyZ2JuLCBoLCBzLCBsKTtcbn1cbmZ1bmN0aW9uIGh3YjJyZ2IoaCwgdywgYikge1xuICByZXR1cm4gY2FsbG4oaHdiMnJnYm4sIGgsIHcsIGIpO1xufVxuZnVuY3Rpb24gaHN2MnJnYihoLCBzLCB2KSB7XG4gIHJldHVybiBjYWxsbihoc3YycmdibiwgaCwgcywgdik7XG59XG5mdW5jdGlvbiBodWUoaCkge1xuICByZXR1cm4gKGggJSAzNjAgKyAzNjApICUgMzYwO1xufVxuZnVuY3Rpb24gaHVlUGFyc2Uoc3RyKSB7XG4gIGNvbnN0IG0gPSBIVUVfUkUuZXhlYyhzdHIpO1xuICBsZXQgYSA9IDI1NTtcbiAgbGV0IHY7XG4gIGlmICghbSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAobVs1XSAhPT0gdikge1xuICAgIGEgPSBtWzZdID8gcDJiKCttWzVdKSA6IG4yYigrbVs1XSk7XG4gIH1cbiAgY29uc3QgaCA9IGh1ZSgrbVsyXSk7XG4gIGNvbnN0IHAxID0gK21bM10gLyAxMDA7XG4gIGNvbnN0IHAyID0gK21bNF0gLyAxMDA7XG4gIGlmIChtWzFdID09PSAnaHdiJykge1xuICAgIHYgPSBod2IycmdiKGgsIHAxLCBwMik7XG4gIH0gZWxzZSBpZiAobVsxXSA9PT0gJ2hzdicpIHtcbiAgICB2ID0gaHN2MnJnYihoLCBwMSwgcDIpO1xuICB9IGVsc2Uge1xuICAgIHYgPSBoc2wycmdiKGgsIHAxLCBwMik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICByOiB2WzBdLFxuICAgIGc6IHZbMV0sXG4gICAgYjogdlsyXSxcbiAgICBhOiBhXG4gIH07XG59XG5mdW5jdGlvbiByb3RhdGUodiwgZGVnKSB7XG4gIHZhciBoID0gcmdiMmhzbCh2KTtcbiAgaFswXSA9IGh1ZShoWzBdICsgZGVnKTtcbiAgaCA9IGhzbDJyZ2IoaCk7XG4gIHYuciA9IGhbMF07XG4gIHYuZyA9IGhbMV07XG4gIHYuYiA9IGhbMl07XG59XG5mdW5jdGlvbiBoc2xTdHJpbmcodikge1xuICBpZiAoIXYpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgYSA9IHJnYjJoc2wodik7XG4gIGNvbnN0IGggPSBhWzBdO1xuICBjb25zdCBzID0gbjJwKGFbMV0pO1xuICBjb25zdCBsID0gbjJwKGFbMl0pO1xuICByZXR1cm4gdi5hIDwgMjU1XG4gICAgPyBgaHNsYSgke2h9LCAke3N9JSwgJHtsfSUsICR7YjJuKHYuYSl9KWBcbiAgICA6IGBoc2woJHtofSwgJHtzfSUsICR7bH0lKWA7XG59XG5cbmNvbnN0IG1hcCA9IHtcbiAgeDogJ2RhcmsnLFxuICBaOiAnbGlnaHQnLFxuICBZOiAncmUnLFxuICBYOiAnYmx1JyxcbiAgVzogJ2dyJyxcbiAgVjogJ21lZGl1bScsXG4gIFU6ICdzbGF0ZScsXG4gIEE6ICdlZScsXG4gIFQ6ICdvbCcsXG4gIFM6ICdvcicsXG4gIEI6ICdyYScsXG4gIEM6ICdsYXRlZycsXG4gIEQ6ICdpZ2h0cycsXG4gIFI6ICdpbicsXG4gIFE6ICd0dXJxdW9pcycsXG4gIEU6ICdoaScsXG4gIFA6ICdybycsXG4gIE86ICdhbCcsXG4gIE46ICdsZScsXG4gIE06ICdkZScsXG4gIEw6ICd5ZWxsbycsXG4gIEY6ICdlbicsXG4gIEs6ICdjaCcsXG4gIEc6ICdhcmtzJyxcbiAgSDogJ2VhJyxcbiAgSTogJ2lnaHRnJyxcbiAgSjogJ3doJ1xufTtcbmNvbnN0IG5hbWVzJDEgPSB7XG4gIE9pY2VYZTogJ2YwZjhmZicsXG4gIGFudGlxdWV3RXRlOiAnZmFlYmQ3JyxcbiAgYXF1YTogJ2ZmZmYnLFxuICBhcXVhbWFyUmU6ICc3ZmZmZDQnLFxuICBhenVZOiAnZjBmZmZmJyxcbiAgYmVpZ2U6ICdmNWY1ZGMnLFxuICBiaXNxdWU6ICdmZmU0YzQnLFxuICBibGFjazogJzAnLFxuICBibGFuS2VkT21vbmQ6ICdmZmViY2QnLFxuICBYZTogJ2ZmJyxcbiAgWGV2aVRldDogJzhhMmJlMicsXG4gIGJQd246ICdhNTJhMmEnLFxuICBidXJseXdvb2Q6ICdkZWI4ODcnLFxuICBjYU10WGU6ICc1ZjllYTAnLFxuICBLYXJ0WXVzZTogJzdmZmYwMCcsXG4gIEtvY1RhdGU6ICdkMjY5MWUnLFxuICBjU086ICdmZjdmNTAnLFxuICBjU25mbG93ZXJYZTogJzY0OTVlZCcsXG4gIGNTbnNpbGs6ICdmZmY4ZGMnLFxuICBjcmltc29uOiAnZGMxNDNjJyxcbiAgY3lhbjogJ2ZmZmYnLFxuICB4WGU6ICc4YicsXG4gIHhjeWFuOiAnOGI4YicsXG4gIHhnVE1uUGQ6ICdiODg2MGInLFxuICB4V2F5OiAnYTlhOWE5JyxcbiAgeGdZRjogJzY0MDAnLFxuICB4Z1l5OiAnYTlhOWE5JyxcbiAgeGtoYWtpOiAnYmRiNzZiJyxcbiAgeG1hZ0Z0YTogJzhiMDA4YicsXG4gIHhUaXZlZ1lGOiAnNTU2YjJmJyxcbiAgeFNhbmdlOiAnZmY4YzAwJyxcbiAgeFNjRWQ6ICc5OTMyY2MnLFxuICB4WWQ6ICc4YjAwMDAnLFxuICB4c09tb246ICdlOTk2N2EnLFxuICB4c0hnWUY6ICc4ZmJjOGYnLFxuICB4VVhlOiAnNDgzZDhiJyxcbiAgeFVXYXk6ICcyZjRmNGYnLFxuICB4VWdZeTogJzJmNGY0ZicsXG4gIHhRZTogJ2NlZDEnLFxuICB4dmlUZXQ6ICc5NDAwZDMnLFxuICBkQXBwUms6ICdmZjE0OTMnLFxuICBkQXBza3lYZTogJ2JmZmYnLFxuICBkaW1XYXk6ICc2OTY5NjknLFxuICBkaW1nWXk6ICc2OTY5NjknLFxuICBkb2RnZXJYZTogJzFlOTBmZicsXG4gIGZpWWJyaWNrOiAnYjIyMjIyJyxcbiAgZmxTT3dFdGU6ICdmZmZhZjAnLFxuICBmb1lzdFdBbjogJzIyOGIyMicsXG4gIGZ1S3NpYTogJ2ZmMDBmZicsXG4gIGdhUnNiU286ICdkY2RjZGMnLFxuICBnaG9zdHdFdGU6ICdmOGY4ZmYnLFxuICBnVGQ6ICdmZmQ3MDAnLFxuICBnVE1uUGQ6ICdkYWE1MjAnLFxuICBXYXk6ICc4MDgwODAnLFxuICBnWUY6ICc4MDAwJyxcbiAgZ1lGTHc6ICdhZGZmMmYnLFxuICBnWXk6ICc4MDgwODAnLFxuICBob25leU13OiAnZjBmZmYwJyxcbiAgaG90cFJrOiAnZmY2OWI0JyxcbiAgUmRpYW5ZZDogJ2NkNWM1YycsXG4gIFJkaWdvOiAnNGIwMDgyJyxcbiAgaXZTeTogJ2ZmZmZmMCcsXG4gIGtoYWtpOiAnZjBlNjhjJyxcbiAgbGF2Rk1yOiAnZTZlNmZhJyxcbiAgbGF2Rk1yWHNoOiAnZmZmMGY1JyxcbiAgbGF3bmdZRjogJzdjZmMwMCcsXG4gIE5tb25jRWZmb246ICdmZmZhY2QnLFxuICBaWGU6ICdhZGQ4ZTYnLFxuICBaY1NPOiAnZjA4MDgwJyxcbiAgWmN5YW46ICdlMGZmZmYnLFxuICBaZ1RNblBkTHc6ICdmYWZhZDInLFxuICBaV2F5OiAnZDNkM2QzJyxcbiAgWmdZRjogJzkwZWU5MCcsXG4gIFpnWXk6ICdkM2QzZDMnLFxuICBacFJrOiAnZmZiNmMxJyxcbiAgWnNPbW9uOiAnZmZhMDdhJyxcbiAgWnNIZ1lGOiAnMjBiMmFhJyxcbiAgWnNreVhlOiAnODdjZWZhJyxcbiAgWlVXYXk6ICc3Nzg4OTknLFxuICBaVWdZeTogJzc3ODg5OScsXG4gIFpzdEFsWGU6ICdiMGM0ZGUnLFxuICBaTHc6ICdmZmZmZTAnLFxuICBsaW1lOiAnZmYwMCcsXG4gIGxpbWVnWUY6ICczMmNkMzInLFxuICBsUkY6ICdmYWYwZTYnLFxuICBtYWdGdGE6ICdmZjAwZmYnLFxuICBtYVBvbjogJzgwMDAwMCcsXG4gIFZhcXVhbWFyUmU6ICc2NmNkYWEnLFxuICBWWGU6ICdjZCcsXG4gIFZTY0VkOiAnYmE1NWQzJyxcbiAgVnB1cnBOOiAnOTM3MGRiJyxcbiAgVnNIZ1lGOiAnM2NiMzcxJyxcbiAgVlVYZTogJzdiNjhlZScsXG4gIFZzcHJSZ2dZRjogJ2ZhOWEnLFxuICBWUWU6ICc0OGQxY2MnLFxuICBWdmlUZXRZZDogJ2M3MTU4NScsXG4gIG1pZG5pZ2h0WGU6ICcxOTE5NzAnLFxuICBtUnRjWWFtOiAnZjVmZmZhJyxcbiAgbWlzdHlQc2U6ICdmZmU0ZTEnLFxuICBtb2NjYXNSOiAnZmZlNGI1JyxcbiAgbmF2YWpvd0V0ZTogJ2ZmZGVhZCcsXG4gIG5hdnk6ICc4MCcsXG4gIFRkbGFjZTogJ2ZkZjVlNicsXG4gIFRpdmU6ICc4MDgwMDAnLFxuICBUaXZlZEJiOiAnNmI4ZTIzJyxcbiAgU2FuZ2U6ICdmZmE1MDAnLFxuICBTYW5nZVlkOiAnZmY0NTAwJyxcbiAgU2NFZDogJ2RhNzBkNicsXG4gIHBPZWdUTW5QZDogJ2VlZThhYScsXG4gIHBPZWdZRjogJzk4ZmI5OCcsXG4gIHBPZVFlOiAnYWZlZWVlJyxcbiAgcE9ldmlUZXRZZDogJ2RiNzA5MycsXG4gIHBhcGF5YXdFcDogJ2ZmZWZkNScsXG4gIHBIS3B1ZmY6ICdmZmRhYjknLFxuICBwZXJ1OiAnY2Q4NTNmJyxcbiAgcFJrOiAnZmZjMGNiJyxcbiAgcGx1bTogJ2RkYTBkZCcsXG4gIHBvd01yWGU6ICdiMGUwZTYnLFxuICBwdXJwTjogJzgwMDA4MCcsXG4gIFliZWNjYXB1cnBOOiAnNjYzMzk5JyxcbiAgWWQ6ICdmZjAwMDAnLFxuICBQc3licm93bjogJ2JjOGY4ZicsXG4gIFB5T1hlOiAnNDE2OWUxJyxcbiAgc2FkZE5iUHduOiAnOGI0NTEzJyxcbiAgc09tb246ICdmYTgwNzInLFxuICBzYW5keWJQd246ICdmNGE0NjAnLFxuICBzSGdZRjogJzJlOGI1NycsXG4gIHNIc2hlbGw6ICdmZmY1ZWUnLFxuICBzaUZuYTogJ2EwNTIyZCcsXG4gIHNpbHZlcjogJ2MwYzBjMCcsXG4gIHNreVhlOiAnODdjZWViJyxcbiAgVVhlOiAnNmE1YWNkJyxcbiAgVVdheTogJzcwODA5MCcsXG4gIFVnWXk6ICc3MDgwOTAnLFxuICBzbm93OiAnZmZmYWZhJyxcbiAgc3ByUmdnWUY6ICdmZjdmJyxcbiAgc3RBbFhlOiAnNDY4MmI0JyxcbiAgdGFuOiAnZDJiNDhjJyxcbiAgdGVPOiAnODA4MCcsXG4gIHRFc3ROOiAnZDhiZmQ4JyxcbiAgdG9tYXRvOiAnZmY2MzQ3JyxcbiAgUWU6ICc0MGUwZDAnLFxuICB2aVRldDogJ2VlODJlZScsXG4gIEpIdDogJ2Y1ZGViMycsXG4gIHdFdGU6ICdmZmZmZmYnLFxuICB3RXRlc21va2U6ICdmNWY1ZjUnLFxuICBMdzogJ2ZmZmYwMCcsXG4gIEx3Z1lGOiAnOWFjZDMyJ1xufTtcbmZ1bmN0aW9uIHVucGFjaygpIHtcbiAgY29uc3QgdW5wYWNrZWQgPSB7fTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG5hbWVzJDEpO1xuICBjb25zdCB0a2V5cyA9IE9iamVjdC5rZXlzKG1hcCk7XG4gIGxldCBpLCBqLCBrLCBvaywgbms7XG4gIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgb2sgPSBuayA9IGtleXNbaV07XG4gICAgZm9yIChqID0gMDsgaiA8IHRrZXlzLmxlbmd0aDsgaisrKSB7XG4gICAgICBrID0gdGtleXNbal07XG4gICAgICBuayA9IG5rLnJlcGxhY2UoaywgbWFwW2tdKTtcbiAgICB9XG4gICAgayA9IHBhcnNlSW50KG5hbWVzJDFbb2tdLCAxNik7XG4gICAgdW5wYWNrZWRbbmtdID0gW2sgPj4gMTYgJiAweEZGLCBrID4+IDggJiAweEZGLCBrICYgMHhGRl07XG4gIH1cbiAgcmV0dXJuIHVucGFja2VkO1xufVxuXG5sZXQgbmFtZXM7XG5mdW5jdGlvbiBuYW1lUGFyc2Uoc3RyKSB7XG4gIGlmICghbmFtZXMpIHtcbiAgICBuYW1lcyA9IHVucGFjaygpO1xuICAgIG5hbWVzLnRyYW5zcGFyZW50ID0gWzAsIDAsIDAsIDBdO1xuICB9XG4gIGNvbnN0IGEgPSBuYW1lc1tzdHIudG9Mb3dlckNhc2UoKV07XG4gIHJldHVybiBhICYmIHtcbiAgICByOiBhWzBdLFxuICAgIGc6IGFbMV0sXG4gICAgYjogYVsyXSxcbiAgICBhOiBhLmxlbmd0aCA9PT0gNCA/IGFbM10gOiAyNTVcbiAgfTtcbn1cblxuY29uc3QgUkdCX1JFID0gL15yZ2JhP1xcKFxccyooWy0rLlxcZF0rKSglKT9bXFxzLF0rKFstKy5lXFxkXSspKCUpP1tcXHMsXSsoWy0rLmVcXGRdKykoJSk/KD86W1xccywvXSsoWy0rLmVcXGRdKykoJSk/KT9cXHMqXFwpJC87XG5mdW5jdGlvbiByZ2JQYXJzZShzdHIpIHtcbiAgY29uc3QgbSA9IFJHQl9SRS5leGVjKHN0cik7XG4gIGxldCBhID0gMjU1O1xuICBsZXQgciwgZywgYjtcbiAgaWYgKCFtKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChtWzddICE9PSByKSB7XG4gICAgY29uc3QgdiA9ICttWzddO1xuICAgIGEgPSBtWzhdID8gcDJiKHYpIDogbGltKHYgKiAyNTUsIDAsIDI1NSk7XG4gIH1cbiAgciA9ICttWzFdO1xuICBnID0gK21bM107XG4gIGIgPSArbVs1XTtcbiAgciA9IDI1NSAmIChtWzJdID8gcDJiKHIpIDogbGltKHIsIDAsIDI1NSkpO1xuICBnID0gMjU1ICYgKG1bNF0gPyBwMmIoZykgOiBsaW0oZywgMCwgMjU1KSk7XG4gIGIgPSAyNTUgJiAobVs2XSA/IHAyYihiKSA6IGxpbShiLCAwLCAyNTUpKTtcbiAgcmV0dXJuIHtcbiAgICByOiByLFxuICAgIGc6IGcsXG4gICAgYjogYixcbiAgICBhOiBhXG4gIH07XG59XG5mdW5jdGlvbiByZ2JTdHJpbmcodikge1xuICByZXR1cm4gdiAmJiAoXG4gICAgdi5hIDwgMjU1XG4gICAgICA/IGByZ2JhKCR7di5yfSwgJHt2Lmd9LCAke3YuYn0sICR7YjJuKHYuYSl9KWBcbiAgICAgIDogYHJnYigke3Yucn0sICR7di5nfSwgJHt2LmJ9KWBcbiAgKTtcbn1cblxuY29uc3QgdG8gPSB2ID0+IHYgPD0gMC4wMDMxMzA4ID8gdiAqIDEyLjkyIDogTWF0aC5wb3codiwgMS4wIC8gMi40KSAqIDEuMDU1IC0gMC4wNTU7XG5jb25zdCBmcm9tID0gdiA9PiB2IDw9IDAuMDQwNDUgPyB2IC8gMTIuOTIgOiBNYXRoLnBvdygodiArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xuZnVuY3Rpb24gaW50ZXJwb2xhdGUocmdiMSwgcmdiMiwgdCkge1xuICBjb25zdCByID0gZnJvbShiMm4ocmdiMS5yKSk7XG4gIGNvbnN0IGcgPSBmcm9tKGIybihyZ2IxLmcpKTtcbiAgY29uc3QgYiA9IGZyb20oYjJuKHJnYjEuYikpO1xuICByZXR1cm4ge1xuICAgIHI6IG4yYih0byhyICsgdCAqIChmcm9tKGIybihyZ2IyLnIpKSAtIHIpKSksXG4gICAgZzogbjJiKHRvKGcgKyB0ICogKGZyb20oYjJuKHJnYjIuZykpIC0gZykpKSxcbiAgICBiOiBuMmIodG8oYiArIHQgKiAoZnJvbShiMm4ocmdiMi5iKSkgLSBiKSkpLFxuICAgIGE6IHJnYjEuYSArIHQgKiAocmdiMi5hIC0gcmdiMS5hKVxuICB9O1xufVxuXG5mdW5jdGlvbiBtb2RIU0wodiwgaSwgcmF0aW8pIHtcbiAgaWYgKHYpIHtcbiAgICBsZXQgdG1wID0gcmdiMmhzbCh2KTtcbiAgICB0bXBbaV0gPSBNYXRoLm1heCgwLCBNYXRoLm1pbih0bXBbaV0gKyB0bXBbaV0gKiByYXRpbywgaSA9PT0gMCA/IDM2MCA6IDEpKTtcbiAgICB0bXAgPSBoc2wycmdiKHRtcCk7XG4gICAgdi5yID0gdG1wWzBdO1xuICAgIHYuZyA9IHRtcFsxXTtcbiAgICB2LmIgPSB0bXBbMl07XG4gIH1cbn1cbmZ1bmN0aW9uIGNsb25lKHYsIHByb3RvKSB7XG4gIHJldHVybiB2ID8gT2JqZWN0LmFzc2lnbihwcm90byB8fCB7fSwgdikgOiB2O1xufVxuZnVuY3Rpb24gZnJvbU9iamVjdChpbnB1dCkge1xuICB2YXIgdiA9IHtyOiAwLCBnOiAwLCBiOiAwLCBhOiAyNTV9O1xuICBpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICBpZiAoaW5wdXQubGVuZ3RoID49IDMpIHtcbiAgICAgIHYgPSB7cjogaW5wdXRbMF0sIGc6IGlucHV0WzFdLCBiOiBpbnB1dFsyXSwgYTogMjU1fTtcbiAgICAgIGlmIChpbnB1dC5sZW5ndGggPiAzKSB7XG4gICAgICAgIHYuYSA9IG4yYihpbnB1dFszXSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHYgPSBjbG9uZShpbnB1dCwge3I6IDAsIGc6IDAsIGI6IDAsIGE6IDF9KTtcbiAgICB2LmEgPSBuMmIodi5hKTtcbiAgfVxuICByZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIGZ1bmN0aW9uUGFyc2Uoc3RyKSB7XG4gIGlmIChzdHIuY2hhckF0KDApID09PSAncicpIHtcbiAgICByZXR1cm4gcmdiUGFyc2Uoc3RyKTtcbiAgfVxuICByZXR1cm4gaHVlUGFyc2Uoc3RyKTtcbn1cbmNsYXNzIENvbG9yIHtcbiAgY29uc3RydWN0b3IoaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBDb2xvcikge1xuICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cbiAgICBjb25zdCB0eXBlID0gdHlwZW9mIGlucHV0O1xuICAgIGxldCB2O1xuICAgIGlmICh0eXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgdiA9IGZyb21PYmplY3QoaW5wdXQpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHYgPSBoZXhQYXJzZShpbnB1dCkgfHwgbmFtZVBhcnNlKGlucHV0KSB8fCBmdW5jdGlvblBhcnNlKGlucHV0KTtcbiAgICB9XG4gICAgdGhpcy5fcmdiID0gdjtcbiAgICB0aGlzLl92YWxpZCA9ICEhdjtcbiAgfVxuICBnZXQgdmFsaWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbGlkO1xuICB9XG4gIGdldCByZ2IoKSB7XG4gICAgdmFyIHYgPSBjbG9uZSh0aGlzLl9yZ2IpO1xuICAgIGlmICh2KSB7XG4gICAgICB2LmEgPSBiMm4odi5hKTtcbiAgICB9XG4gICAgcmV0dXJuIHY7XG4gIH1cbiAgc2V0IHJnYihvYmopIHtcbiAgICB0aGlzLl9yZ2IgPSBmcm9tT2JqZWN0KG9iaik7XG4gIH1cbiAgcmdiU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl92YWxpZCA/IHJnYlN0cmluZyh0aGlzLl9yZ2IpIDogdW5kZWZpbmVkO1xuICB9XG4gIGhleFN0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsaWQgPyBoZXhTdHJpbmcodGhpcy5fcmdiKSA6IHVuZGVmaW5lZDtcbiAgfVxuICBoc2xTdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbGlkID8gaHNsU3RyaW5nKHRoaXMuX3JnYikgOiB1bmRlZmluZWQ7XG4gIH1cbiAgbWl4KGNvbG9yLCB3ZWlnaHQpIHtcbiAgICBpZiAoY29sb3IpIHtcbiAgICAgIGNvbnN0IGMxID0gdGhpcy5yZ2I7XG4gICAgICBjb25zdCBjMiA9IGNvbG9yLnJnYjtcbiAgICAgIGxldCB3MjtcbiAgICAgIGNvbnN0IHAgPSB3ZWlnaHQgPT09IHcyID8gMC41IDogd2VpZ2h0O1xuICAgICAgY29uc3QgdyA9IDIgKiBwIC0gMTtcbiAgICAgIGNvbnN0IGEgPSBjMS5hIC0gYzIuYTtcbiAgICAgIGNvbnN0IHcxID0gKCh3ICogYSA9PT0gLTEgPyB3IDogKHcgKyBhKSAvICgxICsgdyAqIGEpKSArIDEpIC8gMi4wO1xuICAgICAgdzIgPSAxIC0gdzE7XG4gICAgICBjMS5yID0gMHhGRiAmIHcxICogYzEuciArIHcyICogYzIuciArIDAuNTtcbiAgICAgIGMxLmcgPSAweEZGICYgdzEgKiBjMS5nICsgdzIgKiBjMi5nICsgMC41O1xuICAgICAgYzEuYiA9IDB4RkYgJiB3MSAqIGMxLmIgKyB3MiAqIGMyLmIgKyAwLjU7XG4gICAgICBjMS5hID0gcCAqIGMxLmEgKyAoMSAtIHApICogYzIuYTtcbiAgICAgIHRoaXMucmdiID0gYzE7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGludGVycG9sYXRlKGNvbG9yLCB0KSB7XG4gICAgaWYgKGNvbG9yKSB7XG4gICAgICB0aGlzLl9yZ2IgPSBpbnRlcnBvbGF0ZSh0aGlzLl9yZ2IsIGNvbG9yLl9yZ2IsIHQpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IENvbG9yKHRoaXMucmdiKTtcbiAgfVxuICBhbHBoYShhKSB7XG4gICAgdGhpcy5fcmdiLmEgPSBuMmIoYSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgY2xlYXJlcihyYXRpbykge1xuICAgIGNvbnN0IHJnYiA9IHRoaXMuX3JnYjtcbiAgICByZ2IuYSAqPSAxIC0gcmF0aW87XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZ3JleXNjYWxlKCkge1xuICAgIGNvbnN0IHJnYiA9IHRoaXMuX3JnYjtcbiAgICBjb25zdCB2YWwgPSByb3VuZChyZ2IuciAqIDAuMyArIHJnYi5nICogMC41OSArIHJnYi5iICogMC4xMSk7XG4gICAgcmdiLnIgPSByZ2IuZyA9IHJnYi5iID0gdmFsO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIG9wYXF1ZXIocmF0aW8pIHtcbiAgICBjb25zdCByZ2IgPSB0aGlzLl9yZ2I7XG4gICAgcmdiLmEgKj0gMSArIHJhdGlvO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIG5lZ2F0ZSgpIHtcbiAgICBjb25zdCB2ID0gdGhpcy5fcmdiO1xuICAgIHYuciA9IDI1NSAtIHYucjtcbiAgICB2LmcgPSAyNTUgLSB2Lmc7XG4gICAgdi5iID0gMjU1IC0gdi5iO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGxpZ2h0ZW4ocmF0aW8pIHtcbiAgICBtb2RIU0wodGhpcy5fcmdiLCAyLCByYXRpbyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZGFya2VuKHJhdGlvKSB7XG4gICAgbW9kSFNMKHRoaXMuX3JnYiwgMiwgLXJhdGlvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBzYXR1cmF0ZShyYXRpbykge1xuICAgIG1vZEhTTCh0aGlzLl9yZ2IsIDEsIHJhdGlvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBkZXNhdHVyYXRlKHJhdGlvKSB7XG4gICAgbW9kSFNMKHRoaXMuX3JnYiwgMSwgLXJhdGlvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICByb3RhdGUoZGVnKSB7XG4gICAgcm90YXRlKHRoaXMuX3JnYiwgZGVnKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG5mdW5jdGlvbiBpbmRleF9lc20oaW5wdXQpIHtcbiAgcmV0dXJuIG5ldyBDb2xvcihpbnB1dCk7XG59XG5cbmV4cG9ydCB7IENvbG9yLCBiMm4sIGIycCwgaW5kZXhfZXNtIGFzIGRlZmF1bHQsIGhleFBhcnNlLCBoZXhTdHJpbmcsIGhzbDJyZ2IsIGhzbFN0cmluZywgaHN2MnJnYiwgaHVlUGFyc2UsIGh3YjJyZ2IsIGxpbSwgbjJiLCBuMnAsIG5hbWVQYXJzZSwgcDJiLCByZ2IyaHNsLCByZ2JQYXJzZSwgcmdiU3RyaW5nLCByb3RhdGUsIHJvdW5kIH07XG4iLCIvKiFcbiAqIENoYXJ0LmpzIHY0LjIuMVxuICogaHR0cHM6Ly93d3cuY2hhcnRqcy5vcmdcbiAqIChjKSAyMDIzIENoYXJ0LmpzIENvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKi9cbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnQGt1cmtsZS9jb2xvcic7XG5cbi8qKlxuICogQG5hbWVzcGFjZSBDaGFydC5oZWxwZXJzXG4gKi8gLyoqXG4gKiBBbiBlbXB0eSBmdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkLCBmb3IgZXhhbXBsZSwgZm9yIG9wdGlvbmFsIGNhbGxiYWNrLlxuICovIGZ1bmN0aW9uIG5vb3AoKSB7XG4vKiBub29wICovIH1cbi8qKlxuICogUmV0dXJucyBhIHVuaXF1ZSBpZCwgc2VxdWVudGlhbGx5IGdlbmVyYXRlZCBmcm9tIGEgZ2xvYmFsIHZhcmlhYmxlLlxuICovIGNvbnN0IHVpZCA9ICgoKT0+e1xuICAgIGxldCBpZCA9IDA7XG4gICAgcmV0dXJuICgpPT5pZCsrO1xufSkoKTtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGB2YWx1ZWAgaXMgbmVpdGhlciBudWxsIG5vciB1bmRlZmluZWQsIGVsc2UgcmV0dXJucyBmYWxzZS5cbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byB0ZXN0LlxuICogQHNpbmNlIDIuNy4wXG4gKi8gZnVuY3Rpb24gaXNOdWxsT3JVbmRlZih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSAoaW5jbHVkaW5nIHR5cGVkIGFycmF5cyksIGVsc2UgcmV0dXJucyBmYWxzZS5cbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byB0ZXN0LlxuICogQGZ1bmN0aW9uXG4gKi8gZnVuY3Rpb24gaXNBcnJheSh2YWx1ZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5ICYmIEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCB0eXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICBpZiAodHlwZS5zbGljZSgwLCA3KSA9PT0gJ1tvYmplY3QnICYmIHR5cGUuc2xpY2UoLTYpID09PSAnQXJyYXldJykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QgKGV4Y2x1ZGluZyBudWxsKSwgZWxzZSByZXR1cm5zIGZhbHNlLlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIHRlc3QuXG4gKiBAc2luY2UgMi43LjBcbiAqLyBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBPYmplY3RdJztcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGB2YWx1ZWAgaXMgYSBmaW5pdGUgbnVtYmVyLCBlbHNlIHJldHVybnMgZmFsc2VcbiAqIEBwYXJhbSB2YWx1ZSAgLSBUaGUgdmFsdWUgdG8gdGVzdC5cbiAqLyBmdW5jdGlvbiBpc051bWJlckZpbml0ZSh2YWx1ZSkge1xuICAgIHJldHVybiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB2YWx1ZSBpbnN0YW5jZW9mIE51bWJlcikgJiYgaXNGaW5pdGUoK3ZhbHVlKTtcbn1cbi8qKlxuICogUmV0dXJucyBgdmFsdWVgIGlmIGZpbml0ZSwgZWxzZSByZXR1cm5zIGBkZWZhdWx0VmFsdWVgLlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIHJldHVybiBpZiBkZWZpbmVkLlxuICogQHBhcmFtIGRlZmF1bHRWYWx1ZSAtIFRoZSB2YWx1ZSB0byByZXR1cm4gaWYgYHZhbHVlYCBpcyBub3QgZmluaXRlLlxuICovIGZ1bmN0aW9uIGZpbml0ZU9yRGVmYXVsdCh2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgcmV0dXJuIGlzTnVtYmVyRmluaXRlKHZhbHVlKSA/IHZhbHVlIDogZGVmYXVsdFZhbHVlO1xufVxuLyoqXG4gKiBSZXR1cm5zIGB2YWx1ZWAgaWYgZGVmaW5lZCwgZWxzZSByZXR1cm5zIGBkZWZhdWx0VmFsdWVgLlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIHJldHVybiBpZiBkZWZpbmVkLlxuICogQHBhcmFtIGRlZmF1bHRWYWx1ZSAtIFRoZSB2YWx1ZSB0byByZXR1cm4gaWYgYHZhbHVlYCBpcyB1bmRlZmluZWQuXG4gKi8gZnVuY3Rpb24gdmFsdWVPckRlZmF1bHQodmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdFZhbHVlIDogdmFsdWU7XG59XG5jb25zdCB0b1BlcmNlbnRhZ2UgPSAodmFsdWUsIGRpbWVuc2lvbik9PnR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUuZW5kc1dpdGgoJyUnKSA/IHBhcnNlRmxvYXQodmFsdWUpIC8gMTAwIDogK3ZhbHVlIC8gZGltZW5zaW9uO1xuY29uc3QgdG9EaW1lbnNpb24gPSAodmFsdWUsIGRpbWVuc2lvbik9PnR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUuZW5kc1dpdGgoJyUnKSA/IHBhcnNlRmxvYXQodmFsdWUpIC8gMTAwICogZGltZW5zaW9uIDogK3ZhbHVlO1xuLyoqXG4gKiBDYWxscyBgZm5gIHdpdGggdGhlIGdpdmVuIGBhcmdzYCBpbiB0aGUgc2NvcGUgZGVmaW5lZCBieSBgdGhpc0FyZ2AgYW5kIHJldHVybnMgdGhlXG4gKiB2YWx1ZSByZXR1cm5lZCBieSBgZm5gLiBJZiBgZm5gIGlzIG5vdCBhIGZ1bmN0aW9uLCB0aGlzIG1ldGhvZCByZXR1cm5zIHVuZGVmaW5lZC5cbiAqIEBwYXJhbSBmbiAtIFRoZSBmdW5jdGlvbiB0byBjYWxsLlxuICogQHBhcmFtIGFyZ3MgLSBUaGUgYXJndW1lbnRzIHdpdGggd2hpY2ggYGZuYCBzaG91bGQgYmUgY2FsbGVkLlxuICogQHBhcmFtIFt0aGlzQXJnXSAtIFRoZSB2YWx1ZSBvZiBgdGhpc2AgcHJvdmlkZWQgZm9yIHRoZSBjYWxsIHRvIGBmbmAuXG4gKi8gZnVuY3Rpb24gY2FsbGJhY2soZm4sIGFyZ3MsIHRoaXNBcmcpIHtcbiAgICBpZiAoZm4gJiYgdHlwZW9mIGZuLmNhbGwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGVhY2gobG9vcGFibGUsIGZuLCB0aGlzQXJnLCByZXZlcnNlKSB7XG4gICAgbGV0IGksIGxlbiwga2V5cztcbiAgICBpZiAoaXNBcnJheShsb29wYWJsZSkpIHtcbiAgICAgICAgbGVuID0gbG9vcGFibGUubGVuZ3RoO1xuICAgICAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICAgICAgZm9yKGkgPSBsZW4gLSAxOyBpID49IDA7IGktLSl7XG4gICAgICAgICAgICAgICAgZm4uY2FsbCh0aGlzQXJnLCBsb29wYWJsZVtpXSwgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBsZW47IGkrKyl7XG4gICAgICAgICAgICAgICAgZm4uY2FsbCh0aGlzQXJnLCBsb29wYWJsZVtpXSwgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGxvb3BhYmxlKSkge1xuICAgICAgICBrZXlzID0gT2JqZWN0LmtleXMobG9vcGFibGUpO1xuICAgICAgICBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgbGVuOyBpKyspe1xuICAgICAgICAgICAgZm4uY2FsbCh0aGlzQXJnLCBsb29wYWJsZVtrZXlzW2ldXSwga2V5c1tpXSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgYGEwYCBhbmQgYGExYCBhcnJheXMgaGF2ZSB0aGUgc2FtZSBjb250ZW50LCBlbHNlIHJldHVybnMgZmFsc2UuXG4gKiBAcGFyYW0gYTAgLSBUaGUgYXJyYXkgdG8gY29tcGFyZVxuICogQHBhcmFtIGExIC0gVGhlIGFycmF5IHRvIGNvbXBhcmVcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2VsZW1lbnRzRXF1YWwoYTAsIGExKSB7XG4gICAgbGV0IGksIGlsZW4sIHYwLCB2MTtcbiAgICBpZiAoIWEwIHx8ICFhMSB8fCBhMC5sZW5ndGggIT09IGExLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvcihpID0gMCwgaWxlbiA9IGEwLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIHYwID0gYTBbaV07XG4gICAgICAgIHYxID0gYTFbaV07XG4gICAgICAgIGlmICh2MC5kYXRhc2V0SW5kZXggIT09IHYxLmRhdGFzZXRJbmRleCB8fCB2MC5pbmRleCAhPT0gdjEuaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8qKlxuICogUmV0dXJucyBhIGRlZXAgY29weSBvZiBgc291cmNlYCB3aXRob3V0IGtlZXBpbmcgcmVmZXJlbmNlcyBvbiBvYmplY3RzIGFuZCBhcnJheXMuXG4gKiBAcGFyYW0gc291cmNlIC0gVGhlIHZhbHVlIHRvIGNsb25lLlxuICovIGZ1bmN0aW9uIGNsb25lKHNvdXJjZSkge1xuICAgIGlmIChpc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5tYXAoY2xvbmUpO1xuICAgIH1cbiAgICBpZiAoaXNPYmplY3Qoc291cmNlKSkge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgICAgICAgY29uc3Qga2xlbiA9IGtleXMubGVuZ3RoO1xuICAgICAgICBsZXQgayA9IDA7XG4gICAgICAgIGZvcig7IGsgPCBrbGVuOyArK2spe1xuICAgICAgICAgICAgdGFyZ2V0W2tleXNba11dID0gY2xvbmUoc291cmNlW2tleXNba11dKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xufVxuZnVuY3Rpb24gaXNWYWxpZEtleShrZXkpIHtcbiAgICByZXR1cm4gW1xuICAgICAgICAnX19wcm90b19fJyxcbiAgICAgICAgJ3Byb3RvdHlwZScsXG4gICAgICAgICdjb25zdHJ1Y3RvcidcbiAgICBdLmluZGV4T2Yoa2V5KSA9PT0gLTE7XG59XG4vKipcbiAqIFRoZSBkZWZhdWx0IG1lcmdlciB3aGVuIENoYXJ0LmhlbHBlcnMubWVyZ2UgaXMgY2FsbGVkIHdpdGhvdXQgbWVyZ2VyIG9wdGlvbi5cbiAqIE5vdGUoU0IpOiBhbHNvIHVzZWQgYnkgbWVyZ2VDb25maWcgYW5kIG1lcmdlU2NhbGVDb25maWcgYXMgZmFsbGJhY2suXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9tZXJnZXIoa2V5LCB0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuICAgIGlmICghaXNWYWxpZEtleShrZXkpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdHZhbCA9IHRhcmdldFtrZXldO1xuICAgIGNvbnN0IHN2YWwgPSBzb3VyY2Vba2V5XTtcbiAgICBpZiAoaXNPYmplY3QodHZhbCkgJiYgaXNPYmplY3Qoc3ZhbCkpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11c2UtYmVmb3JlLWRlZmluZVxuICAgICAgICBtZXJnZSh0dmFsLCBzdmFsLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXRba2V5XSA9IGNsb25lKHN2YWwpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgc291cmNlcyA9IGlzQXJyYXkoc291cmNlKSA/IHNvdXJjZSA6IFtcbiAgICAgICAgc291cmNlXG4gICAgXTtcbiAgICBjb25zdCBpbGVuID0gc291cmNlcy5sZW5ndGg7XG4gICAgaWYgKCFpc09iamVjdCh0YXJnZXQpKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIGNvbnN0IG1lcmdlciA9IG9wdGlvbnMubWVyZ2VyIHx8IF9tZXJnZXI7XG4gICAgbGV0IGN1cnJlbnQ7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGN1cnJlbnQgPSBzb3VyY2VzW2ldO1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGN1cnJlbnQpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoY3VycmVudCk7XG4gICAgICAgIGZvcihsZXQgayA9IDAsIGtsZW4gPSBrZXlzLmxlbmd0aDsgayA8IGtsZW47ICsrayl7XG4gICAgICAgICAgICBtZXJnZXIoa2V5c1trXSwgdGFyZ2V0LCBjdXJyZW50LCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gbWVyZ2VJZih0YXJnZXQsIHNvdXJjZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgICByZXR1cm4gbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIHtcbiAgICAgICAgbWVyZ2VyOiBfbWVyZ2VySWZcbiAgICB9KTtcbn1cbi8qKlxuICogTWVyZ2VzIHNvdXJjZVtrZXldIGluIHRhcmdldFtrZXldIG9ubHkgaWYgdGFyZ2V0W2tleV0gaXMgdW5kZWZpbmVkLlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfbWVyZ2VySWYoa2V5LCB0YXJnZXQsIHNvdXJjZSkge1xuICAgIGlmICghaXNWYWxpZEtleShrZXkpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdHZhbCA9IHRhcmdldFtrZXldO1xuICAgIGNvbnN0IHN2YWwgPSBzb3VyY2Vba2V5XTtcbiAgICBpZiAoaXNPYmplY3QodHZhbCkgJiYgaXNPYmplY3Qoc3ZhbCkpIHtcbiAgICAgICAgbWVyZ2VJZih0dmFsLCBzdmFsKTtcbiAgICB9IGVsc2UgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGFyZ2V0LCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gY2xvbmUoc3ZhbCk7XG4gICAgfVxufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9kZXByZWNhdGVkKHNjb3BlLCB2YWx1ZSwgcHJldmlvdXMsIGN1cnJlbnQpIHtcbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zb2xlLndhcm4oc2NvcGUgKyAnOiBcIicgKyBwcmV2aW91cyArICdcIiBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIFwiJyArIGN1cnJlbnQgKyAnXCIgaW5zdGVhZCcpO1xuICAgIH1cbn1cbi8vIHJlc29sdmVPYmplY3RLZXkgcmVzb2x2ZXIgY2FjaGVcbmNvbnN0IGtleVJlc29sdmVycyA9IHtcbiAgICAvLyBDaGFydC5oZWxwZXJzLmNvcmUgcmVzb2x2ZU9iamVjdEtleSBzaG91bGQgcmVzb2x2ZSBlbXB0eSBrZXkgdG8gcm9vdCBvYmplY3RcbiAgICAnJzogKHYpPT52LFxuICAgIC8vIGRlZmF1bHQgcmVzb2x2ZXJzXG4gICAgeDogKG8pPT5vLngsXG4gICAgeTogKG8pPT5vLnlcbn07XG4vKipcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX3NwbGl0S2V5KGtleSkge1xuICAgIGNvbnN0IHBhcnRzID0ga2V5LnNwbGl0KCcuJyk7XG4gICAgY29uc3Qga2V5cyA9IFtdO1xuICAgIGxldCB0bXAgPSAnJztcbiAgICBmb3IgKGNvbnN0IHBhcnQgb2YgcGFydHMpe1xuICAgICAgICB0bXAgKz0gcGFydDtcbiAgICAgICAgaWYgKHRtcC5lbmRzV2l0aCgnXFxcXCcpKSB7XG4gICAgICAgICAgICB0bXAgPSB0bXAuc2xpY2UoMCwgLTEpICsgJy4nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAga2V5cy5wdXNoKHRtcCk7XG4gICAgICAgICAgICB0bXAgPSAnJztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ga2V5cztcbn1cbmZ1bmN0aW9uIF9nZXRLZXlSZXNvbHZlcihrZXkpIHtcbiAgICBjb25zdCBrZXlzID0gX3NwbGl0S2V5KGtleSk7XG4gICAgcmV0dXJuIChvYmopPT57XG4gICAgICAgIGZvciAoY29uc3QgayBvZiBrZXlzKXtcbiAgICAgICAgICAgIGlmIChrID09PSAnJykge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2JqID0gb2JqICYmIG9ialtrXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH07XG59XG5mdW5jdGlvbiByZXNvbHZlT2JqZWN0S2V5KG9iaiwga2V5KSB7XG4gICAgY29uc3QgcmVzb2x2ZXIgPSBrZXlSZXNvbHZlcnNba2V5XSB8fCAoa2V5UmVzb2x2ZXJzW2tleV0gPSBfZ2V0S2V5UmVzb2x2ZXIoa2V5KSk7XG4gICAgcmV0dXJuIHJlc29sdmVyKG9iaik7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2NhcGl0YWxpemUoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcbn1cbmNvbnN0IGRlZmluZWQgPSAodmFsdWUpPT50eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnO1xuY29uc3QgaXNGdW5jdGlvbiA9ICh2YWx1ZSk9PnR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbi8vIEFkYXB0ZWQgZnJvbSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMTEyODg1NS9jb21wYXJpbmctZWNtYTYtc2V0cy1mb3ItZXF1YWxpdHkjMzExMjkzODRcbmNvbnN0IHNldHNFcXVhbCA9IChhLCBiKT0+e1xuICAgIGlmIChhLnNpemUgIT09IGIuc2l6ZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAoY29uc3QgaXRlbSBvZiBhKXtcbiAgICAgICAgaWYgKCFiLmhhcyhpdGVtKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufTtcbi8qKlxuICogQHBhcmFtIGUgLSBUaGUgZXZlbnRcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2lzQ2xpY2tFdmVudChlKSB7XG4gICAgcmV0dXJuIGUudHlwZSA9PT0gJ21vdXNldXAnIHx8IGUudHlwZSA9PT0gJ2NsaWNrJyB8fCBlLnR5cGUgPT09ICdjb250ZXh0bWVudSc7XG59XG5cbi8qKlxuICogQGFsaWFzIENoYXJ0LmhlbHBlcnMubWF0aFxuICogQG5hbWVzcGFjZVxuICovIGNvbnN0IFBJID0gTWF0aC5QSTtcbmNvbnN0IFRBVSA9IDIgKiBQSTtcbmNvbnN0IFBJVEFVID0gVEFVICsgUEk7XG5jb25zdCBJTkZJTklUWSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbmNvbnN0IFJBRF9QRVJfREVHID0gUEkgLyAxODA7XG5jb25zdCBIQUxGX1BJID0gUEkgLyAyO1xuY29uc3QgUVVBUlRFUl9QSSA9IFBJIC8gNDtcbmNvbnN0IFRXT19USElSRFNfUEkgPSBQSSAqIDIgLyAzO1xuY29uc3QgbG9nMTAgPSBNYXRoLmxvZzEwO1xuY29uc3Qgc2lnbiA9IE1hdGguc2lnbjtcbmZ1bmN0aW9uIGFsbW9zdEVxdWFscyh4LCB5LCBlcHNpbG9uKSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKHggLSB5KSA8IGVwc2lsb247XG59XG4vKipcbiAqIEltcGxlbWVudGF0aW9uIG9mIHRoZSBuaWNlIG51bWJlciBhbGdvcml0aG0gdXNlZCBpbiBkZXRlcm1pbmluZyB3aGVyZSBheGlzIGxhYmVscyB3aWxsIGdvXG4gKi8gZnVuY3Rpb24gbmljZU51bShyYW5nZSkge1xuICAgIGNvbnN0IHJvdW5kZWRSYW5nZSA9IE1hdGgucm91bmQocmFuZ2UpO1xuICAgIHJhbmdlID0gYWxtb3N0RXF1YWxzKHJhbmdlLCByb3VuZGVkUmFuZ2UsIHJhbmdlIC8gMTAwMCkgPyByb3VuZGVkUmFuZ2UgOiByYW5nZTtcbiAgICBjb25zdCBuaWNlUmFuZ2UgPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihsb2cxMChyYW5nZSkpKTtcbiAgICBjb25zdCBmcmFjdGlvbiA9IHJhbmdlIC8gbmljZVJhbmdlO1xuICAgIGNvbnN0IG5pY2VGcmFjdGlvbiA9IGZyYWN0aW9uIDw9IDEgPyAxIDogZnJhY3Rpb24gPD0gMiA/IDIgOiBmcmFjdGlvbiA8PSA1ID8gNSA6IDEwO1xuICAgIHJldHVybiBuaWNlRnJhY3Rpb24gKiBuaWNlUmFuZ2U7XG59XG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgb2YgZmFjdG9ycyBzb3J0ZWQgZnJvbSAxIHRvIHNxcnQodmFsdWUpXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9mYWN0b3JpemUodmFsdWUpIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBjb25zdCBzcXJ0ID0gTWF0aC5zcXJ0KHZhbHVlKTtcbiAgICBsZXQgaTtcbiAgICBmb3IoaSA9IDE7IGkgPCBzcXJ0OyBpKyspe1xuICAgICAgICBpZiAodmFsdWUgJSBpID09PSAwKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChpKTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlIC8gaSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNxcnQgPT09IChzcXJ0IHwgMCkpIHtcbiAgICAgICAgcmVzdWx0LnB1c2goc3FydCk7XG4gICAgfVxuICAgIHJlc3VsdC5zb3J0KChhLCBiKT0+YSAtIGIpLnBvcCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBpc051bWJlcihuKSB7XG4gICAgcmV0dXJuICFpc05hTihwYXJzZUZsb2F0KG4pKSAmJiBpc0Zpbml0ZShuKTtcbn1cbmZ1bmN0aW9uIGFsbW9zdFdob2xlKHgsIGVwc2lsb24pIHtcbiAgICBjb25zdCByb3VuZGVkID0gTWF0aC5yb3VuZCh4KTtcbiAgICByZXR1cm4gcm91bmRlZCAtIGVwc2lsb24gPD0geCAmJiByb3VuZGVkICsgZXBzaWxvbiA+PSB4O1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9zZXRNaW5BbmRNYXhCeUtleShhcnJheSwgdGFyZ2V0LCBwcm9wZXJ0eSkge1xuICAgIGxldCBpLCBpbGVuLCB2YWx1ZTtcbiAgICBmb3IoaSA9IDAsIGlsZW4gPSBhcnJheS5sZW5ndGg7IGkgPCBpbGVuOyBpKyspe1xuICAgICAgICB2YWx1ZSA9IGFycmF5W2ldW3Byb3BlcnR5XTtcbiAgICAgICAgaWYgKCFpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRhcmdldC5taW4gPSBNYXRoLm1pbih0YXJnZXQubWluLCB2YWx1ZSk7XG4gICAgICAgICAgICB0YXJnZXQubWF4ID0gTWF0aC5tYXgodGFyZ2V0Lm1heCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gdG9SYWRpYW5zKGRlZ3JlZXMpIHtcbiAgICByZXR1cm4gZGVncmVlcyAqIChQSSAvIDE4MCk7XG59XG5mdW5jdGlvbiB0b0RlZ3JlZXMocmFkaWFucykge1xuICAgIHJldHVybiByYWRpYW5zICogKDE4MCAvIFBJKTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzXG4gKiBpLmUuIHRoZSBudW1iZXIgb2YgZGlnaXRzIGFmdGVyIHRoZSBkZWNpbWFsIHBvaW50LCBvZiB0aGUgdmFsdWUgb2YgdGhpcyBOdW1iZXIuXG4gKiBAcGFyYW0geCAtIEEgbnVtYmVyLlxuICogQHJldHVybnMgVGhlIG51bWJlciBvZiBkZWNpbWFsIHBsYWNlcy5cbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2RlY2ltYWxQbGFjZXMoeCkge1xuICAgIGlmICghaXNOdW1iZXJGaW5pdGUoeCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgZSA9IDE7XG4gICAgbGV0IHAgPSAwO1xuICAgIHdoaWxlKE1hdGgucm91bmQoeCAqIGUpIC8gZSAhPT0geCl7XG4gICAgICAgIGUgKj0gMTA7XG4gICAgICAgIHArKztcbiAgICB9XG4gICAgcmV0dXJuIHA7XG59XG4vLyBHZXRzIHRoZSBhbmdsZSBmcm9tIHZlcnRpY2FsIHVwcmlnaHQgdG8gdGhlIHBvaW50IGFib3V0IGEgY2VudHJlLlxuZnVuY3Rpb24gZ2V0QW5nbGVGcm9tUG9pbnQoY2VudHJlUG9pbnQsIGFuZ2xlUG9pbnQpIHtcbiAgICBjb25zdCBkaXN0YW5jZUZyb21YQ2VudGVyID0gYW5nbGVQb2ludC54IC0gY2VudHJlUG9pbnQueDtcbiAgICBjb25zdCBkaXN0YW5jZUZyb21ZQ2VudGVyID0gYW5nbGVQb2ludC55IC0gY2VudHJlUG9pbnQueTtcbiAgICBjb25zdCByYWRpYWxEaXN0YW5jZUZyb21DZW50ZXIgPSBNYXRoLnNxcnQoZGlzdGFuY2VGcm9tWENlbnRlciAqIGRpc3RhbmNlRnJvbVhDZW50ZXIgKyBkaXN0YW5jZUZyb21ZQ2VudGVyICogZGlzdGFuY2VGcm9tWUNlbnRlcik7XG4gICAgbGV0IGFuZ2xlID0gTWF0aC5hdGFuMihkaXN0YW5jZUZyb21ZQ2VudGVyLCBkaXN0YW5jZUZyb21YQ2VudGVyKTtcbiAgICBpZiAoYW5nbGUgPCAtMC41ICogUEkpIHtcbiAgICAgICAgYW5nbGUgKz0gVEFVOyAvLyBtYWtlIHN1cmUgdGhlIHJldHVybmVkIGFuZ2xlIGlzIGluIHRoZSByYW5nZSBvZiAoLVBJLzIsIDNQSS8yXVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBhbmdsZSxcbiAgICAgICAgZGlzdGFuY2U6IHJhZGlhbERpc3RhbmNlRnJvbUNlbnRlclxuICAgIH07XG59XG5mdW5jdGlvbiBkaXN0YW5jZUJldHdlZW5Qb2ludHMocHQxLCBwdDIpIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHB0Mi54IC0gcHQxLngsIDIpICsgTWF0aC5wb3cocHQyLnkgLSBwdDEueSwgMikpO1xufVxuLyoqXG4gKiBTaG9ydGVzdCBkaXN0YW5jZSBiZXR3ZWVuIGFuZ2xlcywgaW4gZWl0aGVyIGRpcmVjdGlvbi5cbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2FuZ2xlRGlmZihhLCBiKSB7XG4gICAgcmV0dXJuIChhIC0gYiArIFBJVEFVKSAlIFRBVSAtIFBJO1xufVxuLyoqXG4gKiBOb3JtYWxpemUgYW5nbGUgdG8gYmUgYmV0d2VlbiAwIGFuZCAyKlBJXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9ub3JtYWxpemVBbmdsZShhKSB7XG4gICAgcmV0dXJuIChhICUgVEFVICsgVEFVKSAlIFRBVTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfYW5nbGVCZXR3ZWVuKGFuZ2xlLCBzdGFydCwgZW5kLCBzYW1lQW5nbGVJc0Z1bGxDaXJjbGUpIHtcbiAgICBjb25zdCBhID0gX25vcm1hbGl6ZUFuZ2xlKGFuZ2xlKTtcbiAgICBjb25zdCBzID0gX25vcm1hbGl6ZUFuZ2xlKHN0YXJ0KTtcbiAgICBjb25zdCBlID0gX25vcm1hbGl6ZUFuZ2xlKGVuZCk7XG4gICAgY29uc3QgYW5nbGVUb1N0YXJ0ID0gX25vcm1hbGl6ZUFuZ2xlKHMgLSBhKTtcbiAgICBjb25zdCBhbmdsZVRvRW5kID0gX25vcm1hbGl6ZUFuZ2xlKGUgLSBhKTtcbiAgICBjb25zdCBzdGFydFRvQW5nbGUgPSBfbm9ybWFsaXplQW5nbGUoYSAtIHMpO1xuICAgIGNvbnN0IGVuZFRvQW5nbGUgPSBfbm9ybWFsaXplQW5nbGUoYSAtIGUpO1xuICAgIHJldHVybiBhID09PSBzIHx8IGEgPT09IGUgfHwgc2FtZUFuZ2xlSXNGdWxsQ2lyY2xlICYmIHMgPT09IGUgfHwgYW5nbGVUb1N0YXJ0ID4gYW5nbGVUb0VuZCAmJiBzdGFydFRvQW5nbGUgPCBlbmRUb0FuZ2xlO1xufVxuLyoqXG4gKiBMaW1pdCBgdmFsdWVgIGJldHdlZW4gYG1pbmAgYW5kIGBtYXhgXG4gKiBAcGFyYW0gdmFsdWVcbiAqIEBwYXJhbSBtaW5cbiAqIEBwYXJhbSBtYXhcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2xpbWl0VmFsdWUodmFsdWUsIG1pbiwgbWF4KSB7XG4gICAgcmV0dXJuIE1hdGgubWF4KG1pbiwgTWF0aC5taW4obWF4LCB2YWx1ZSkpO1xufVxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2ludDE2UmFuZ2UodmFsdWUpIHtcbiAgICByZXR1cm4gX2xpbWl0VmFsdWUodmFsdWUsIC0zMjc2OCwgMzI3NjcpO1xufVxuLyoqXG4gKiBAcGFyYW0gdmFsdWVcbiAqIEBwYXJhbSBzdGFydFxuICogQHBhcmFtIGVuZFxuICogQHBhcmFtIFtlcHNpbG9uXVxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfaXNCZXR3ZWVuKHZhbHVlLCBzdGFydCwgZW5kLCBlcHNpbG9uID0gMWUtNikge1xuICAgIHJldHVybiB2YWx1ZSA+PSBNYXRoLm1pbihzdGFydCwgZW5kKSAtIGVwc2lsb24gJiYgdmFsdWUgPD0gTWF0aC5tYXgoc3RhcnQsIGVuZCkgKyBlcHNpbG9uO1xufVxuXG5mdW5jdGlvbiBfbG9va3VwKHRhYmxlLCB2YWx1ZSwgY21wKSB7XG4gICAgY21wID0gY21wIHx8ICgoaW5kZXgpPT50YWJsZVtpbmRleF0gPCB2YWx1ZSk7XG4gICAgbGV0IGhpID0gdGFibGUubGVuZ3RoIC0gMTtcbiAgICBsZXQgbG8gPSAwO1xuICAgIGxldCBtaWQ7XG4gICAgd2hpbGUoaGkgLSBsbyA+IDEpe1xuICAgICAgICBtaWQgPSBsbyArIGhpID4+IDE7XG4gICAgICAgIGlmIChjbXAobWlkKSkge1xuICAgICAgICAgICAgbG8gPSBtaWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoaSA9IG1pZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBsbyxcbiAgICAgICAgaGlcbiAgICB9O1xufVxuLyoqXG4gKiBCaW5hcnkgc2VhcmNoXG4gKiBAcGFyYW0gdGFibGUgLSB0aGUgdGFibGUgc2VhcmNoLiBtdXN0IGJlIHNvcnRlZCFcbiAqIEBwYXJhbSBrZXkgLSBwcm9wZXJ0eSBuYW1lIGZvciB0aGUgdmFsdWUgaW4gZWFjaCBlbnRyeVxuICogQHBhcmFtIHZhbHVlIC0gdmFsdWUgdG8gZmluZFxuICogQHBhcmFtIGxhc3QgLSBsb29rdXAgbGFzdCBpbmRleFxuICogQHByaXZhdGVcbiAqLyBjb25zdCBfbG9va3VwQnlLZXkgPSAodGFibGUsIGtleSwgdmFsdWUsIGxhc3QpPT5fbG9va3VwKHRhYmxlLCB2YWx1ZSwgbGFzdCA/IChpbmRleCk9PntcbiAgICAgICAgY29uc3QgdGkgPSB0YWJsZVtpbmRleF1ba2V5XTtcbiAgICAgICAgcmV0dXJuIHRpIDwgdmFsdWUgfHwgdGkgPT09IHZhbHVlICYmIHRhYmxlW2luZGV4ICsgMV1ba2V5XSA9PT0gdmFsdWU7XG4gICAgfSA6IChpbmRleCk9PnRhYmxlW2luZGV4XVtrZXldIDwgdmFsdWUpO1xuLyoqXG4gKiBSZXZlcnNlIGJpbmFyeSBzZWFyY2hcbiAqIEBwYXJhbSB0YWJsZSAtIHRoZSB0YWJsZSBzZWFyY2guIG11c3QgYmUgc29ydGVkIVxuICogQHBhcmFtIGtleSAtIHByb3BlcnR5IG5hbWUgZm9yIHRoZSB2YWx1ZSBpbiBlYWNoIGVudHJ5XG4gKiBAcGFyYW0gdmFsdWUgLSB2YWx1ZSB0byBmaW5kXG4gKiBAcHJpdmF0ZVxuICovIGNvbnN0IF9ybG9va3VwQnlLZXkgPSAodGFibGUsIGtleSwgdmFsdWUpPT5fbG9va3VwKHRhYmxlLCB2YWx1ZSwgKGluZGV4KT0+dGFibGVbaW5kZXhdW2tleV0gPj0gdmFsdWUpO1xuLyoqXG4gKiBSZXR1cm4gc3Vic2V0IG9mIGB2YWx1ZXNgIGJldHdlZW4gYG1pbmAgYW5kIGBtYXhgIGluY2x1c2l2ZS5cbiAqIFZhbHVlcyBhcmUgYXNzdW1lZCB0byBiZSBpbiBzb3J0ZWQgb3JkZXIuXG4gKiBAcGFyYW0gdmFsdWVzIC0gc29ydGVkIGFycmF5IG9mIHZhbHVlc1xuICogQHBhcmFtIG1pbiAtIG1pbiB2YWx1ZVxuICogQHBhcmFtIG1heCAtIG1heCB2YWx1ZVxuICovIGZ1bmN0aW9uIF9maWx0ZXJCZXR3ZWVuKHZhbHVlcywgbWluLCBtYXgpIHtcbiAgICBsZXQgc3RhcnQgPSAwO1xuICAgIGxldCBlbmQgPSB2YWx1ZXMubGVuZ3RoO1xuICAgIHdoaWxlKHN0YXJ0IDwgZW5kICYmIHZhbHVlc1tzdGFydF0gPCBtaW4pe1xuICAgICAgICBzdGFydCsrO1xuICAgIH1cbiAgICB3aGlsZShlbmQgPiBzdGFydCAmJiB2YWx1ZXNbZW5kIC0gMV0gPiBtYXgpe1xuICAgICAgICBlbmQtLTtcbiAgICB9XG4gICAgcmV0dXJuIHN0YXJ0ID4gMCB8fCBlbmQgPCB2YWx1ZXMubGVuZ3RoID8gdmFsdWVzLnNsaWNlKHN0YXJ0LCBlbmQpIDogdmFsdWVzO1xufVxuY29uc3QgYXJyYXlFdmVudHMgPSBbXG4gICAgJ3B1c2gnLFxuICAgICdwb3AnLFxuICAgICdzaGlmdCcsXG4gICAgJ3NwbGljZScsXG4gICAgJ3Vuc2hpZnQnXG5dO1xuZnVuY3Rpb24gbGlzdGVuQXJyYXlFdmVudHMoYXJyYXksIGxpc3RlbmVyKSB7XG4gICAgaWYgKGFycmF5Ll9jaGFydGpzKSB7XG4gICAgICAgIGFycmF5Ll9jaGFydGpzLmxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYXJyYXksICdfY2hhcnRqcycsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgIGxpc3RlbmVyczogW1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyXG4gICAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBhcnJheUV2ZW50cy5mb3JFYWNoKChrZXkpPT57XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdfb25EYXRhJyArIF9jYXBpdGFsaXplKGtleSk7XG4gICAgICAgIGNvbnN0IGJhc2UgPSBhcnJheVtrZXldO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYXJyYXksIGtleSwge1xuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICB2YWx1ZSAoLi4uYXJncykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IGJhc2UuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICAgICAgYXJyYXkuX2NoYXJ0anMubGlzdGVuZXJzLmZvckVhY2goKG9iamVjdCk9PntcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvYmplY3RbbWV0aG9kXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0W21ldGhvZF0oLi4uYXJncyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHVubGlzdGVuQXJyYXlFdmVudHMoYXJyYXksIGxpc3RlbmVyKSB7XG4gICAgY29uc3Qgc3R1YiA9IGFycmF5Ll9jaGFydGpzO1xuICAgIGlmICghc3R1Yikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGxpc3RlbmVycyA9IHN0dWIubGlzdGVuZXJzO1xuICAgIGNvbnN0IGluZGV4ID0gbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICAgIGlmIChsaXN0ZW5lcnMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGFycmF5RXZlbnRzLmZvckVhY2goKGtleSk9PntcbiAgICAgICAgZGVsZXRlIGFycmF5W2tleV07XG4gICAgfSk7XG4gICAgZGVsZXRlIGFycmF5Ll9jaGFydGpzO1xufVxuLyoqXG4gKiBAcGFyYW0gaXRlbXNcbiAqLyBmdW5jdGlvbiBfYXJyYXlVbmlxdWUoaXRlbXMpIHtcbiAgICBjb25zdCBzZXQgPSBuZXcgU2V0KCk7XG4gICAgbGV0IGksIGlsZW47XG4gICAgZm9yKGkgPSAwLCBpbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgc2V0LmFkZChpdGVtc1tpXSk7XG4gICAgfVxuICAgIGlmIChzZXQuc2l6ZSA9PT0gaWxlbikge1xuICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgfVxuICAgIHJldHVybiBBcnJheS5mcm9tKHNldCk7XG59XG5cbmZ1bmN0aW9uIGZvbnRTdHJpbmcocGl4ZWxTaXplLCBmb250U3R5bGUsIGZvbnRGYW1pbHkpIHtcbiAgICByZXR1cm4gZm9udFN0eWxlICsgJyAnICsgcGl4ZWxTaXplICsgJ3B4ICcgKyBmb250RmFtaWx5O1xufVxuLyoqXG4qIFJlcXVlc3QgYW5pbWF0aW9uIHBvbHlmaWxsXG4qLyBjb25zdCByZXF1ZXN0QW5pbUZyYW1lID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xufSgpO1xuLyoqXG4gKiBUaHJvdHRsZXMgY2FsbGluZyBgZm5gIG9uY2UgcGVyIGFuaW1hdGlvbiBmcmFtZVxuICogTGF0ZXN0IGFyZ3VtZW50cyBhcmUgdXNlZCBvbiB0aGUgYWN0dWFsIGNhbGxcbiAqLyBmdW5jdGlvbiB0aHJvdHRsZWQoZm4sIHRoaXNBcmcpIHtcbiAgICBsZXQgYXJnc1RvVXNlID0gW107XG4gICAgbGV0IHRpY2tpbmcgPSBmYWxzZTtcbiAgICByZXR1cm4gZnVuY3Rpb24oLi4uYXJncykge1xuICAgICAgICAvLyBTYXZlIHRoZSBhcmdzIGZvciB1c2UgbGF0ZXJcbiAgICAgICAgYXJnc1RvVXNlID0gYXJncztcbiAgICAgICAgaWYgKCF0aWNraW5nKSB7XG4gICAgICAgICAgICB0aWNraW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHJlcXVlc3RBbmltRnJhbWUuY2FsbCh3aW5kb3csICgpPT57XG4gICAgICAgICAgICAgICAgdGlja2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3NUb1VzZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG59XG4vKipcbiAqIERlYm91bmNlcyBjYWxsaW5nIGBmbmAgZm9yIGBkZWxheWAgbXNcbiAqLyBmdW5jdGlvbiBkZWJvdW5jZShmbiwgZGVsYXkpIHtcbiAgICBsZXQgdGltZW91dDtcbiAgICByZXR1cm4gZnVuY3Rpb24oLi4uYXJncykge1xuICAgICAgICBpZiAoZGVsYXkpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZuLCBkZWxheSwgYXJncyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmbi5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVsYXk7XG4gICAgfTtcbn1cbi8qKlxuICogQ29udmVydHMgJ3N0YXJ0JyB0byAnbGVmdCcsICdlbmQnIHRvICdyaWdodCcgYW5kIG90aGVycyB0byAnY2VudGVyJ1xuICogQHByaXZhdGVcbiAqLyBjb25zdCBfdG9MZWZ0UmlnaHRDZW50ZXIgPSAoYWxpZ24pPT5hbGlnbiA9PT0gJ3N0YXJ0JyA/ICdsZWZ0JyA6IGFsaWduID09PSAnZW5kJyA/ICdyaWdodCcgOiAnY2VudGVyJztcbi8qKlxuICogUmV0dXJucyBgc3RhcnRgLCBgZW5kYCBvciBgKHN0YXJ0ICsgZW5kKSAvIDJgIGRlcGVuZGluZyBvbiBgYWxpZ25gLiBEZWZhdWx0cyB0byBgY2VudGVyYFxuICogQHByaXZhdGVcbiAqLyBjb25zdCBfYWxpZ25TdGFydEVuZCA9IChhbGlnbiwgc3RhcnQsIGVuZCk9PmFsaWduID09PSAnc3RhcnQnID8gc3RhcnQgOiBhbGlnbiA9PT0gJ2VuZCcgPyBlbmQgOiAoc3RhcnQgKyBlbmQpIC8gMjtcbi8qKlxuICogUmV0dXJucyBgbGVmdGAsIGByaWdodGAgb3IgYChsZWZ0ICsgcmlnaHQpIC8gMmAgZGVwZW5kaW5nIG9uIGBhbGlnbmAuIERlZmF1bHRzIHRvIGBsZWZ0YFxuICogQHByaXZhdGVcbiAqLyBjb25zdCBfdGV4dFggPSAoYWxpZ24sIGxlZnQsIHJpZ2h0LCBydGwpPT57XG4gICAgY29uc3QgY2hlY2sgPSBydGwgPyAnbGVmdCcgOiAncmlnaHQnO1xuICAgIHJldHVybiBhbGlnbiA9PT0gY2hlY2sgPyByaWdodCA6IGFsaWduID09PSAnY2VudGVyJyA/IChsZWZ0ICsgcmlnaHQpIC8gMiA6IGxlZnQ7XG59O1xuLyoqXG4gKiBSZXR1cm4gc3RhcnQgYW5kIGNvdW50IG9mIHZpc2libGUgcG9pbnRzLlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfZ2V0U3RhcnRBbmRDb3VudE9mVmlzaWJsZVBvaW50cyhtZXRhLCBwb2ludHMsIGFuaW1hdGlvbnNEaXNhYmxlZCkge1xuICAgIGNvbnN0IHBvaW50Q291bnQgPSBwb2ludHMubGVuZ3RoO1xuICAgIGxldCBzdGFydCA9IDA7XG4gICAgbGV0IGNvdW50ID0gcG9pbnRDb3VudDtcbiAgICBpZiAobWV0YS5fc29ydGVkKSB7XG4gICAgICAgIGNvbnN0IHsgaVNjYWxlICwgX3BhcnNlZCAgfSA9IG1ldGE7XG4gICAgICAgIGNvbnN0IGF4aXMgPSBpU2NhbGUuYXhpcztcbiAgICAgICAgY29uc3QgeyBtaW4gLCBtYXggLCBtaW5EZWZpbmVkICwgbWF4RGVmaW5lZCAgfSA9IGlTY2FsZS5nZXRVc2VyQm91bmRzKCk7XG4gICAgICAgIGlmIChtaW5EZWZpbmVkKSB7XG4gICAgICAgICAgICBzdGFydCA9IF9saW1pdFZhbHVlKE1hdGgubWluKC8vIEB0cy1leHBlY3QtZXJyb3IgTmVlZCB0byB0eXBlIF9wYXJzZWRcbiAgICAgICAgICAgIF9sb29rdXBCeUtleShfcGFyc2VkLCBpU2NhbGUuYXhpcywgbWluKS5sbywgLy8gQHRzLWV4cGVjdC1lcnJvciBOZWVkIHRvIGZpeCB0eXBlcyBvbiBfbG9va3VwQnlLZXlcbiAgICAgICAgICAgIGFuaW1hdGlvbnNEaXNhYmxlZCA/IHBvaW50Q291bnQgOiBfbG9va3VwQnlLZXkocG9pbnRzLCBheGlzLCBpU2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShtaW4pKS5sbyksIDAsIHBvaW50Q291bnQgLSAxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF4RGVmaW5lZCkge1xuICAgICAgICAgICAgY291bnQgPSBfbGltaXRWYWx1ZShNYXRoLm1heCgvLyBAdHMtZXhwZWN0LWVycm9yIE5lZWQgdG8gdHlwZSBfcGFyc2VkXG4gICAgICAgICAgICBfbG9va3VwQnlLZXkoX3BhcnNlZCwgaVNjYWxlLmF4aXMsIG1heCwgdHJ1ZSkuaGkgKyAxLCAvLyBAdHMtZXhwZWN0LWVycm9yIE5lZWQgdG8gZml4IHR5cGVzIG9uIF9sb29rdXBCeUtleVxuICAgICAgICAgICAgYW5pbWF0aW9uc0Rpc2FibGVkID8gMCA6IF9sb29rdXBCeUtleShwb2ludHMsIGF4aXMsIGlTY2FsZS5nZXRQaXhlbEZvclZhbHVlKG1heCksIHRydWUpLmhpICsgMSksIHN0YXJ0LCBwb2ludENvdW50KSAtIHN0YXJ0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY291bnQgPSBwb2ludENvdW50IC0gc3RhcnQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIGNvdW50XG4gICAgfTtcbn1cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBzY2FsZSByYW5nZXMgaGF2ZSBjaGFuZ2VkLlxuICogQHBhcmFtIHtvYmplY3R9IG1ldGEgLSBkYXRhc2V0IG1ldGEuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX3NjYWxlUmFuZ2VzQ2hhbmdlZChtZXRhKSB7XG4gICAgY29uc3QgeyB4U2NhbGUgLCB5U2NhbGUgLCBfc2NhbGVSYW5nZXMgIH0gPSBtZXRhO1xuICAgIGNvbnN0IG5ld1JhbmdlcyA9IHtcbiAgICAgICAgeG1pbjogeFNjYWxlLm1pbixcbiAgICAgICAgeG1heDogeFNjYWxlLm1heCxcbiAgICAgICAgeW1pbjogeVNjYWxlLm1pbixcbiAgICAgICAgeW1heDogeVNjYWxlLm1heFxuICAgIH07XG4gICAgaWYgKCFfc2NhbGVSYW5nZXMpIHtcbiAgICAgICAgbWV0YS5fc2NhbGVSYW5nZXMgPSBuZXdSYW5nZXM7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBjaGFuZ2VkID0gX3NjYWxlUmFuZ2VzLnhtaW4gIT09IHhTY2FsZS5taW4gfHwgX3NjYWxlUmFuZ2VzLnhtYXggIT09IHhTY2FsZS5tYXggfHwgX3NjYWxlUmFuZ2VzLnltaW4gIT09IHlTY2FsZS5taW4gfHwgX3NjYWxlUmFuZ2VzLnltYXggIT09IHlTY2FsZS5tYXg7XG4gICAgT2JqZWN0LmFzc2lnbihfc2NhbGVSYW5nZXMsIG5ld1Jhbmdlcyk7XG4gICAgcmV0dXJuIGNoYW5nZWQ7XG59XG5cbmNvbnN0IGF0RWRnZSA9ICh0KT0+dCA9PT0gMCB8fCB0ID09PSAxO1xuY29uc3QgZWxhc3RpY0luID0gKHQsIHMsIHApPT4tKE1hdGgucG93KDIsIDEwICogKHQgLT0gMSkpICogTWF0aC5zaW4oKHQgLSBzKSAqIFRBVSAvIHApKTtcbmNvbnN0IGVsYXN0aWNPdXQgPSAodCwgcywgcCk9Pk1hdGgucG93KDIsIC0xMCAqIHQpICogTWF0aC5zaW4oKHQgLSBzKSAqIFRBVSAvIHApICsgMTtcbi8qKlxuICogRWFzaW5nIGZ1bmN0aW9ucyBhZGFwdGVkIGZyb20gUm9iZXJ0IFBlbm5lcidzIGVhc2luZyBlcXVhdGlvbnMuXG4gKiBAbmFtZXNwYWNlIENoYXJ0LmhlbHBlcnMuZWFzaW5nLmVmZmVjdHNcbiAqIEBzZWUgaHR0cDovL3d3dy5yb2JlcnRwZW5uZXIuY29tL2Vhc2luZy9cbiAqLyBjb25zdCBlZmZlY3RzID0ge1xuICAgIGxpbmVhcjogKHQpPT50LFxuICAgIGVhc2VJblF1YWQ6ICh0KT0+dCAqIHQsXG4gICAgZWFzZU91dFF1YWQ6ICh0KT0+LXQgKiAodCAtIDIpLFxuICAgIGVhc2VJbk91dFF1YWQ6ICh0KT0+KHQgLz0gMC41KSA8IDEgPyAwLjUgKiB0ICogdCA6IC0wLjUgKiAoLS10ICogKHQgLSAyKSAtIDEpLFxuICAgIGVhc2VJbkN1YmljOiAodCk9PnQgKiB0ICogdCxcbiAgICBlYXNlT3V0Q3ViaWM6ICh0KT0+KHQgLT0gMSkgKiB0ICogdCArIDEsXG4gICAgZWFzZUluT3V0Q3ViaWM6ICh0KT0+KHQgLz0gMC41KSA8IDEgPyAwLjUgKiB0ICogdCAqIHQgOiAwLjUgKiAoKHQgLT0gMikgKiB0ICogdCArIDIpLFxuICAgIGVhc2VJblF1YXJ0OiAodCk9PnQgKiB0ICogdCAqIHQsXG4gICAgZWFzZU91dFF1YXJ0OiAodCk9Pi0oKHQgLT0gMSkgKiB0ICogdCAqIHQgLSAxKSxcbiAgICBlYXNlSW5PdXRRdWFydDogKHQpPT4odCAvPSAwLjUpIDwgMSA/IDAuNSAqIHQgKiB0ICogdCAqIHQgOiAtMC41ICogKCh0IC09IDIpICogdCAqIHQgKiB0IC0gMiksXG4gICAgZWFzZUluUXVpbnQ6ICh0KT0+dCAqIHQgKiB0ICogdCAqIHQsXG4gICAgZWFzZU91dFF1aW50OiAodCk9Pih0IC09IDEpICogdCAqIHQgKiB0ICogdCArIDEsXG4gICAgZWFzZUluT3V0UXVpbnQ6ICh0KT0+KHQgLz0gMC41KSA8IDEgPyAwLjUgKiB0ICogdCAqIHQgKiB0ICogdCA6IDAuNSAqICgodCAtPSAyKSAqIHQgKiB0ICogdCAqIHQgKyAyKSxcbiAgICBlYXNlSW5TaW5lOiAodCk9Pi1NYXRoLmNvcyh0ICogSEFMRl9QSSkgKyAxLFxuICAgIGVhc2VPdXRTaW5lOiAodCk9Pk1hdGguc2luKHQgKiBIQUxGX1BJKSxcbiAgICBlYXNlSW5PdXRTaW5lOiAodCk9Pi0wLjUgKiAoTWF0aC5jb3MoUEkgKiB0KSAtIDEpLFxuICAgIGVhc2VJbkV4cG86ICh0KT0+dCA9PT0gMCA/IDAgOiBNYXRoLnBvdygyLCAxMCAqICh0IC0gMSkpLFxuICAgIGVhc2VPdXRFeHBvOiAodCk9PnQgPT09IDEgPyAxIDogLU1hdGgucG93KDIsIC0xMCAqIHQpICsgMSxcbiAgICBlYXNlSW5PdXRFeHBvOiAodCk9PmF0RWRnZSh0KSA/IHQgOiB0IDwgMC41ID8gMC41ICogTWF0aC5wb3coMiwgMTAgKiAodCAqIDIgLSAxKSkgOiAwLjUgKiAoLU1hdGgucG93KDIsIC0xMCAqICh0ICogMiAtIDEpKSArIDIpLFxuICAgIGVhc2VJbkNpcmM6ICh0KT0+dCA+PSAxID8gdCA6IC0oTWF0aC5zcXJ0KDEgLSB0ICogdCkgLSAxKSxcbiAgICBlYXNlT3V0Q2lyYzogKHQpPT5NYXRoLnNxcnQoMSAtICh0IC09IDEpICogdCksXG4gICAgZWFzZUluT3V0Q2lyYzogKHQpPT4odCAvPSAwLjUpIDwgMSA/IC0wLjUgKiAoTWF0aC5zcXJ0KDEgLSB0ICogdCkgLSAxKSA6IDAuNSAqIChNYXRoLnNxcnQoMSAtICh0IC09IDIpICogdCkgKyAxKSxcbiAgICBlYXNlSW5FbGFzdGljOiAodCk9PmF0RWRnZSh0KSA/IHQgOiBlbGFzdGljSW4odCwgMC4wNzUsIDAuMyksXG4gICAgZWFzZU91dEVsYXN0aWM6ICh0KT0+YXRFZGdlKHQpID8gdCA6IGVsYXN0aWNPdXQodCwgMC4wNzUsIDAuMyksXG4gICAgZWFzZUluT3V0RWxhc3RpYyAodCkge1xuICAgICAgICBjb25zdCBzID0gMC4xMTI1O1xuICAgICAgICBjb25zdCBwID0gMC40NTtcbiAgICAgICAgcmV0dXJuIGF0RWRnZSh0KSA/IHQgOiB0IDwgMC41ID8gMC41ICogZWxhc3RpY0luKHQgKiAyLCBzLCBwKSA6IDAuNSArIDAuNSAqIGVsYXN0aWNPdXQodCAqIDIgLSAxLCBzLCBwKTtcbiAgICB9LFxuICAgIGVhc2VJbkJhY2sgKHQpIHtcbiAgICAgICAgY29uc3QgcyA9IDEuNzAxNTg7XG4gICAgICAgIHJldHVybiB0ICogdCAqICgocyArIDEpICogdCAtIHMpO1xuICAgIH0sXG4gICAgZWFzZU91dEJhY2sgKHQpIHtcbiAgICAgICAgY29uc3QgcyA9IDEuNzAxNTg7XG4gICAgICAgIHJldHVybiAodCAtPSAxKSAqIHQgKiAoKHMgKyAxKSAqIHQgKyBzKSArIDE7XG4gICAgfSxcbiAgICBlYXNlSW5PdXRCYWNrICh0KSB7XG4gICAgICAgIGxldCBzID0gMS43MDE1ODtcbiAgICAgICAgaWYgKCh0IC89IDAuNSkgPCAxKSB7XG4gICAgICAgICAgICByZXR1cm4gMC41ICogKHQgKiB0ICogKCgocyAqPSAxLjUyNSkgKyAxKSAqIHQgLSBzKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDAuNSAqICgodCAtPSAyKSAqIHQgKiAoKChzICo9IDEuNTI1KSArIDEpICogdCArIHMpICsgMik7XG4gICAgfSxcbiAgICBlYXNlSW5Cb3VuY2U6ICh0KT0+MSAtIGVmZmVjdHMuZWFzZU91dEJvdW5jZSgxIC0gdCksXG4gICAgZWFzZU91dEJvdW5jZSAodCkge1xuICAgICAgICBjb25zdCBtID0gNy41NjI1O1xuICAgICAgICBjb25zdCBkID0gMi43NTtcbiAgICAgICAgaWYgKHQgPCAxIC8gZCkge1xuICAgICAgICAgICAgcmV0dXJuIG0gKiB0ICogdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodCA8IDIgLyBkKSB7XG4gICAgICAgICAgICByZXR1cm4gbSAqICh0IC09IDEuNSAvIGQpICogdCArIDAuNzU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHQgPCAyLjUgLyBkKSB7XG4gICAgICAgICAgICByZXR1cm4gbSAqICh0IC09IDIuMjUgLyBkKSAqIHQgKyAwLjkzNzU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG0gKiAodCAtPSAyLjYyNSAvIGQpICogdCArIDAuOTg0Mzc1O1xuICAgIH0sXG4gICAgZWFzZUluT3V0Qm91bmNlOiAodCk9PnQgPCAwLjUgPyBlZmZlY3RzLmVhc2VJbkJvdW5jZSh0ICogMikgKiAwLjUgOiBlZmZlY3RzLmVhc2VPdXRCb3VuY2UodCAqIDIgLSAxKSAqIDAuNSArIDAuNVxufTtcblxuZnVuY3Rpb24gaXNQYXR0ZXJuT3JHcmFkaWVudCh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGNvbnN0IHR5cGUgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgICByZXR1cm4gdHlwZSA9PT0gJ1tvYmplY3QgQ2FudmFzUGF0dGVybl0nIHx8IHR5cGUgPT09ICdbb2JqZWN0IENhbnZhc0dyYWRpZW50XSc7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGNvbG9yKHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzUGF0dGVybk9yR3JhZGllbnQodmFsdWUpID8gdmFsdWUgOiBuZXcgQ29sb3IodmFsdWUpO1xufVxuZnVuY3Rpb24gZ2V0SG92ZXJDb2xvcih2YWx1ZSkge1xuICAgIHJldHVybiBpc1BhdHRlcm5PckdyYWRpZW50KHZhbHVlKSA/IHZhbHVlIDogbmV3IENvbG9yKHZhbHVlKS5zYXR1cmF0ZSgwLjUpLmRhcmtlbigwLjEpLmhleFN0cmluZygpO1xufVxuXG5jb25zdCBudW1iZXJzID0gW1xuICAgICd4JyxcbiAgICAneScsXG4gICAgJ2JvcmRlcldpZHRoJyxcbiAgICAncmFkaXVzJyxcbiAgICAndGVuc2lvbidcbl07XG5jb25zdCBjb2xvcnMgPSBbXG4gICAgJ2NvbG9yJyxcbiAgICAnYm9yZGVyQ29sb3InLFxuICAgICdiYWNrZ3JvdW5kQ29sb3InXG5dO1xuZnVuY3Rpb24gYXBwbHlBbmltYXRpb25zRGVmYXVsdHMoZGVmYXVsdHMpIHtcbiAgICBkZWZhdWx0cy5zZXQoJ2FuaW1hdGlvbicsIHtcbiAgICAgICAgZGVsYXk6IHVuZGVmaW5lZCxcbiAgICAgICAgZHVyYXRpb246IDEwMDAsXG4gICAgICAgIGVhc2luZzogJ2Vhc2VPdXRRdWFydCcsXG4gICAgICAgIGZuOiB1bmRlZmluZWQsXG4gICAgICAgIGZyb206IHVuZGVmaW5lZCxcbiAgICAgICAgbG9vcDogdW5kZWZpbmVkLFxuICAgICAgICB0bzogdW5kZWZpbmVkLFxuICAgICAgICB0eXBlOiB1bmRlZmluZWRcbiAgICB9KTtcbiAgICBkZWZhdWx0cy5kZXNjcmliZSgnYW5pbWF0aW9uJywge1xuICAgICAgICBfZmFsbGJhY2s6IGZhbHNlLFxuICAgICAgICBfaW5kZXhhYmxlOiBmYWxzZSxcbiAgICAgICAgX3NjcmlwdGFibGU6IChuYW1lKT0+bmFtZSAhPT0gJ29uUHJvZ3Jlc3MnICYmIG5hbWUgIT09ICdvbkNvbXBsZXRlJyAmJiBuYW1lICE9PSAnZm4nXG4gICAgfSk7XG4gICAgZGVmYXVsdHMuc2V0KCdhbmltYXRpb25zJywge1xuICAgICAgICBjb2xvcnM6IHtcbiAgICAgICAgICAgIHR5cGU6ICdjb2xvcicsXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiBjb2xvcnNcbiAgICAgICAgfSxcbiAgICAgICAgbnVtYmVyczoge1xuICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiBudW1iZXJzXG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBkZWZhdWx0cy5kZXNjcmliZSgnYW5pbWF0aW9ucycsIHtcbiAgICAgICAgX2ZhbGxiYWNrOiAnYW5pbWF0aW9uJ1xuICAgIH0pO1xuICAgIGRlZmF1bHRzLnNldCgndHJhbnNpdGlvbnMnLCB7XG4gICAgICAgIGFjdGl2ZToge1xuICAgICAgICAgICAgYW5pbWF0aW9uOiB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDQwMFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZXNpemU6IHtcbiAgICAgICAgICAgIGFuaW1hdGlvbjoge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNob3c6IHtcbiAgICAgICAgICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBjb2xvcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbTogJ3RyYW5zcGFyZW50J1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdmlzaWJsZToge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAwXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBoaWRlOiB7XG4gICAgICAgICAgICBhbmltYXRpb25zOiB7XG4gICAgICAgICAgICAgICAgY29sb3JzOiB7XG4gICAgICAgICAgICAgICAgICAgIHRvOiAndHJhbnNwYXJlbnQnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB2aXNpYmxlOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgICAgICAgICAgICAgICAgZWFzaW5nOiAnbGluZWFyJyxcbiAgICAgICAgICAgICAgICAgICAgZm46ICh2KT0+diB8IDBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gYXBwbHlMYXlvdXRzRGVmYXVsdHMoZGVmYXVsdHMpIHtcbiAgICBkZWZhdWx0cy5zZXQoJ2xheW91dCcsIHtcbiAgICAgICAgYXV0b1BhZGRpbmc6IHRydWUsXG4gICAgICAgIHBhZGRpbmc6IHtcbiAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICAgICAgbGVmdDogMFxuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmNvbnN0IGludGxDYWNoZSA9IG5ldyBNYXAoKTtcbmZ1bmN0aW9uIGdldE51bWJlckZvcm1hdChsb2NhbGUsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBjb25zdCBjYWNoZUtleSA9IGxvY2FsZSArIEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpO1xuICAgIGxldCBmb3JtYXR0ZXIgPSBpbnRsQ2FjaGUuZ2V0KGNhY2hlS2V5KTtcbiAgICBpZiAoIWZvcm1hdHRlcikge1xuICAgICAgICBmb3JtYXR0ZXIgPSBuZXcgSW50bC5OdW1iZXJGb3JtYXQobG9jYWxlLCBvcHRpb25zKTtcbiAgICAgICAgaW50bENhY2hlLnNldChjYWNoZUtleSwgZm9ybWF0dGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIGZvcm1hdHRlcjtcbn1cbmZ1bmN0aW9uIGZvcm1hdE51bWJlcihudW0sIGxvY2FsZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBnZXROdW1iZXJGb3JtYXQobG9jYWxlLCBvcHRpb25zKS5mb3JtYXQobnVtKTtcbn1cblxuY29uc3QgZm9ybWF0dGVycyA9IHtcbiB2YWx1ZXMgKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKSA/ICB2YWx1ZSA6ICcnICsgdmFsdWU7XG4gICAgfSxcbiBudW1lcmljICh0aWNrVmFsdWUsIGluZGV4LCB0aWNrcykge1xuICAgICAgICBpZiAodGlja1ZhbHVlID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gJzAnO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxvY2FsZSA9IHRoaXMuY2hhcnQub3B0aW9ucy5sb2NhbGU7XG4gICAgICAgIGxldCBub3RhdGlvbjtcbiAgICAgICAgbGV0IGRlbHRhID0gdGlja1ZhbHVlO1xuICAgICAgICBpZiAodGlja3MubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgY29uc3QgbWF4VGljayA9IE1hdGgubWF4KE1hdGguYWJzKHRpY2tzWzBdLnZhbHVlKSwgTWF0aC5hYnModGlja3NbdGlja3MubGVuZ3RoIC0gMV0udmFsdWUpKTtcbiAgICAgICAgICAgIGlmIChtYXhUaWNrIDwgMWUtNCB8fCBtYXhUaWNrID4gMWUrMTUpIHtcbiAgICAgICAgICAgICAgICBub3RhdGlvbiA9ICdzY2llbnRpZmljJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlbHRhID0gY2FsY3VsYXRlRGVsdGEodGlja1ZhbHVlLCB0aWNrcyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbG9nRGVsdGEgPSBsb2cxMChNYXRoLmFicyhkZWx0YSkpO1xuICAgICAgICBjb25zdCBudW1EZWNpbWFsID0gTWF0aC5tYXgoTWF0aC5taW4oLTEgKiBNYXRoLmZsb29yKGxvZ0RlbHRhKSwgMjApLCAwKTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIG5vdGF0aW9uLFxuICAgICAgICAgICAgbWluaW11bUZyYWN0aW9uRGlnaXRzOiBudW1EZWNpbWFsLFxuICAgICAgICAgICAgbWF4aW11bUZyYWN0aW9uRGlnaXRzOiBudW1EZWNpbWFsXG4gICAgICAgIH07XG4gICAgICAgIE9iamVjdC5hc3NpZ24ob3B0aW9ucywgdGhpcy5vcHRpb25zLnRpY2tzLmZvcm1hdCk7XG4gICAgICAgIHJldHVybiBmb3JtYXROdW1iZXIodGlja1ZhbHVlLCBsb2NhbGUsIG9wdGlvbnMpO1xuICAgIH0sXG4gbG9nYXJpdGhtaWMgKHRpY2tWYWx1ZSwgaW5kZXgsIHRpY2tzKSB7XG4gICAgICAgIGlmICh0aWNrVmFsdWUgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAnMCc7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVtYWluID0gdGlja3NbaW5kZXhdLnNpZ25pZmljYW5kIHx8IHRpY2tWYWx1ZSAvIE1hdGgucG93KDEwLCBNYXRoLmZsb29yKGxvZzEwKHRpY2tWYWx1ZSkpKTtcbiAgICAgICAgaWYgKFtcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDE1XG4gICAgICAgIF0uaW5jbHVkZXMocmVtYWluKSB8fCBpbmRleCA+IDAuOCAqIHRpY2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdHRlcnMubnVtZXJpYy5jYWxsKHRoaXMsIHRpY2tWYWx1ZSwgaW5kZXgsIHRpY2tzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxufTtcbmZ1bmN0aW9uIGNhbGN1bGF0ZURlbHRhKHRpY2tWYWx1ZSwgdGlja3MpIHtcbiAgICBsZXQgZGVsdGEgPSB0aWNrcy5sZW5ndGggPiAzID8gdGlja3NbMl0udmFsdWUgLSB0aWNrc1sxXS52YWx1ZSA6IHRpY2tzWzFdLnZhbHVlIC0gdGlja3NbMF0udmFsdWU7XG4gICAgaWYgKE1hdGguYWJzKGRlbHRhKSA+PSAxICYmIHRpY2tWYWx1ZSAhPT0gTWF0aC5mbG9vcih0aWNrVmFsdWUpKSB7XG4gICAgICAgIGRlbHRhID0gdGlja1ZhbHVlIC0gTWF0aC5mbG9vcih0aWNrVmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gZGVsdGE7XG59XG4gdmFyIFRpY2tzID0ge1xuICAgIGZvcm1hdHRlcnNcbn07XG5cbmZ1bmN0aW9uIGFwcGx5U2NhbGVEZWZhdWx0cyhkZWZhdWx0cykge1xuICAgIGRlZmF1bHRzLnNldCgnc2NhbGUnLCB7XG4gICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgIG9mZnNldDogZmFsc2UsXG4gICAgICAgIHJldmVyc2U6IGZhbHNlLFxuICAgICAgICBiZWdpbkF0WmVybzogZmFsc2UsXG4gYm91bmRzOiAndGlja3MnLFxuIGdyYWNlOiAwLFxuICAgICAgICBncmlkOiB7XG4gICAgICAgICAgICBkaXNwbGF5OiB0cnVlLFxuICAgICAgICAgICAgbGluZVdpZHRoOiAxLFxuICAgICAgICAgICAgZHJhd09uQ2hhcnRBcmVhOiB0cnVlLFxuICAgICAgICAgICAgZHJhd1RpY2tzOiB0cnVlLFxuICAgICAgICAgICAgdGlja0xlbmd0aDogOCxcbiAgICAgICAgICAgIHRpY2tXaWR0aDogKF9jdHgsIG9wdGlvbnMpPT5vcHRpb25zLmxpbmVXaWR0aCxcbiAgICAgICAgICAgIHRpY2tDb2xvcjogKF9jdHgsIG9wdGlvbnMpPT5vcHRpb25zLmNvbG9yLFxuICAgICAgICAgICAgb2Zmc2V0OiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBib3JkZXI6IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgICAgICBkYXNoOiBbXSxcbiAgICAgICAgICAgIGRhc2hPZmZzZXQ6IDAuMCxcbiAgICAgICAgICAgIHdpZHRoOiAxXG4gICAgICAgIH0sXG4gICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgICAgICAgIHRleHQ6ICcnLFxuICAgICAgICAgICAgcGFkZGluZzoge1xuICAgICAgICAgICAgICAgIHRvcDogNCxcbiAgICAgICAgICAgICAgICBib3R0b206IDRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgIG1pblJvdGF0aW9uOiAwLFxuICAgICAgICAgICAgbWF4Um90YXRpb246IDUwLFxuICAgICAgICAgICAgbWlycm9yOiBmYWxzZSxcbiAgICAgICAgICAgIHRleHRTdHJva2VXaWR0aDogMCxcbiAgICAgICAgICAgIHRleHRTdHJva2VDb2xvcjogJycsXG4gICAgICAgICAgICBwYWRkaW5nOiAzLFxuICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgICAgIGF1dG9Ta2lwOiB0cnVlLFxuICAgICAgICAgICAgYXV0b1NraXBQYWRkaW5nOiAzLFxuICAgICAgICAgICAgbGFiZWxPZmZzZXQ6IDAsXG4gICAgICAgICAgICBjYWxsYmFjazogVGlja3MuZm9ybWF0dGVycy52YWx1ZXMsXG4gICAgICAgICAgICBtaW5vcjoge30sXG4gICAgICAgICAgICBtYWpvcjoge30sXG4gICAgICAgICAgICBhbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgICBjcm9zc0FsaWduOiAnbmVhcicsXG4gICAgICAgICAgICBzaG93TGFiZWxCYWNrZHJvcDogZmFsc2UsXG4gICAgICAgICAgICBiYWNrZHJvcENvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjc1KScsXG4gICAgICAgICAgICBiYWNrZHJvcFBhZGRpbmc6IDJcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGRlZmF1bHRzLnJvdXRlKCdzY2FsZS50aWNrcycsICdjb2xvcicsICcnLCAnY29sb3InKTtcbiAgICBkZWZhdWx0cy5yb3V0ZSgnc2NhbGUuZ3JpZCcsICdjb2xvcicsICcnLCAnYm9yZGVyQ29sb3InKTtcbiAgICBkZWZhdWx0cy5yb3V0ZSgnc2NhbGUuYm9yZGVyJywgJ2NvbG9yJywgJycsICdib3JkZXJDb2xvcicpO1xuICAgIGRlZmF1bHRzLnJvdXRlKCdzY2FsZS50aXRsZScsICdjb2xvcicsICcnLCAnY29sb3InKTtcbiAgICBkZWZhdWx0cy5kZXNjcmliZSgnc2NhbGUnLCB7XG4gICAgICAgIF9mYWxsYmFjazogZmFsc2UsXG4gICAgICAgIF9zY3JpcHRhYmxlOiAobmFtZSk9PiFuYW1lLnN0YXJ0c1dpdGgoJ2JlZm9yZScpICYmICFuYW1lLnN0YXJ0c1dpdGgoJ2FmdGVyJykgJiYgbmFtZSAhPT0gJ2NhbGxiYWNrJyAmJiBuYW1lICE9PSAncGFyc2VyJyxcbiAgICAgICAgX2luZGV4YWJsZTogKG5hbWUpPT5uYW1lICE9PSAnYm9yZGVyRGFzaCcgJiYgbmFtZSAhPT0gJ3RpY2tCb3JkZXJEYXNoJyAmJiBuYW1lICE9PSAnZGFzaCdcbiAgICB9KTtcbiAgICBkZWZhdWx0cy5kZXNjcmliZSgnc2NhbGVzJywge1xuICAgICAgICBfZmFsbGJhY2s6ICdzY2FsZSdcbiAgICB9KTtcbiAgICBkZWZhdWx0cy5kZXNjcmliZSgnc2NhbGUudGlja3MnLCB7XG4gICAgICAgIF9zY3JpcHRhYmxlOiAobmFtZSk9Pm5hbWUgIT09ICdiYWNrZHJvcFBhZGRpbmcnICYmIG5hbWUgIT09ICdjYWxsYmFjaycsXG4gICAgICAgIF9pbmRleGFibGU6IChuYW1lKT0+bmFtZSAhPT0gJ2JhY2tkcm9wUGFkZGluZydcbiAgICB9KTtcbn1cblxuY29uc3Qgb3ZlcnJpZGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBmdW5jdGlvbiBnZXRTY29wZSQxKG5vZGUsIGtleSkge1xuICAgIGlmICgha2V5KSB7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgICBjb25zdCBrZXlzID0ga2V5LnNwbGl0KCcuJyk7XG4gICAgZm9yKGxldCBpID0gMCwgbiA9IGtleXMubGVuZ3RoOyBpIDwgbjsgKytpKXtcbiAgICAgICAgY29uc3QgayA9IGtleXNbaV07XG4gICAgICAgIG5vZGUgPSBub2RlW2tdIHx8IChub2RlW2tdID0gT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gICAgfVxuICAgIHJldHVybiBub2RlO1xufVxuZnVuY3Rpb24gc2V0KHJvb3QsIHNjb3BlLCB2YWx1ZXMpIHtcbiAgICBpZiAodHlwZW9mIHNjb3BlID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gbWVyZ2UoZ2V0U2NvcGUkMShyb290LCBzY29wZSksIHZhbHVlcyk7XG4gICAgfVxuICAgIHJldHVybiBtZXJnZShnZXRTY29wZSQxKHJvb3QsICcnKSwgc2NvcGUpO1xufVxuIGNsYXNzIERlZmF1bHRzIHtcbiAgICBjb25zdHJ1Y3RvcihfZGVzY3JpcHRvcnMsIF9hcHBsaWVycyl7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmJhY2tncm91bmRDb2xvciA9ICdyZ2JhKDAsMCwwLDAuMSknO1xuICAgICAgICB0aGlzLmJvcmRlckNvbG9yID0gJ3JnYmEoMCwwLDAsMC4xKSc7XG4gICAgICAgIHRoaXMuY29sb3IgPSAnIzY2Nic7XG4gICAgICAgIHRoaXMuZGF0YXNldHMgPSB7fTtcbiAgICAgICAgdGhpcy5kZXZpY2VQaXhlbFJhdGlvID0gKGNvbnRleHQpPT5jb250ZXh0LmNoYXJ0LnBsYXRmb3JtLmdldERldmljZVBpeGVsUmF0aW8oKTtcbiAgICAgICAgdGhpcy5lbGVtZW50cyA9IHt9O1xuICAgICAgICB0aGlzLmV2ZW50cyA9IFtcbiAgICAgICAgICAgICdtb3VzZW1vdmUnLFxuICAgICAgICAgICAgJ21vdXNlb3V0JyxcbiAgICAgICAgICAgICdjbGljaycsXG4gICAgICAgICAgICAndG91Y2hzdGFydCcsXG4gICAgICAgICAgICAndG91Y2htb3ZlJ1xuICAgICAgICBdO1xuICAgICAgICB0aGlzLmZvbnQgPSB7XG4gICAgICAgICAgICBmYW1pbHk6IFwiJ0hlbHZldGljYSBOZXVlJywgJ0hlbHZldGljYScsICdBcmlhbCcsIHNhbnMtc2VyaWZcIixcbiAgICAgICAgICAgIHNpemU6IDEyLFxuICAgICAgICAgICAgc3R5bGU6ICdub3JtYWwnLFxuICAgICAgICAgICAgbGluZUhlaWdodDogMS4yLFxuICAgICAgICAgICAgd2VpZ2h0OiBudWxsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaG92ZXIgPSB7fTtcbiAgICAgICAgdGhpcy5ob3ZlckJhY2tncm91bmRDb2xvciA9IChjdHgsIG9wdGlvbnMpPT5nZXRIb3ZlckNvbG9yKG9wdGlvbnMuYmFja2dyb3VuZENvbG9yKTtcbiAgICAgICAgdGhpcy5ob3ZlckJvcmRlckNvbG9yID0gKGN0eCwgb3B0aW9ucyk9PmdldEhvdmVyQ29sb3Iob3B0aW9ucy5ib3JkZXJDb2xvcik7XG4gICAgICAgIHRoaXMuaG92ZXJDb2xvciA9IChjdHgsIG9wdGlvbnMpPT5nZXRIb3ZlckNvbG9yKG9wdGlvbnMuY29sb3IpO1xuICAgICAgICB0aGlzLmluZGV4QXhpcyA9ICd4JztcbiAgICAgICAgdGhpcy5pbnRlcmFjdGlvbiA9IHtcbiAgICAgICAgICAgIG1vZGU6ICduZWFyZXN0JyxcbiAgICAgICAgICAgIGludGVyc2VjdDogdHJ1ZSxcbiAgICAgICAgICAgIGluY2x1ZGVJbnZpc2libGU6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubWFpbnRhaW5Bc3BlY3RSYXRpbyA9IHRydWU7XG4gICAgICAgIHRoaXMub25Ib3ZlciA9IG51bGw7XG4gICAgICAgIHRoaXMub25DbGljayA9IG51bGw7XG4gICAgICAgIHRoaXMucGFyc2luZyA9IHRydWU7XG4gICAgICAgIHRoaXMucGx1Z2lucyA9IHt9O1xuICAgICAgICB0aGlzLnJlc3BvbnNpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLnNjYWxlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnNjYWxlcyA9IHt9O1xuICAgICAgICB0aGlzLnNob3dMaW5lID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kcmF3QWN0aXZlRWxlbWVudHNPblRvcCA9IHRydWU7XG4gICAgICAgIHRoaXMuZGVzY3JpYmUoX2Rlc2NyaXB0b3JzKTtcbiAgICAgICAgdGhpcy5hcHBseShfYXBwbGllcnMpO1xuICAgIH1cbiBzZXQoc2NvcGUsIHZhbHVlcykge1xuICAgICAgICByZXR1cm4gc2V0KHRoaXMsIHNjb3BlLCB2YWx1ZXMpO1xuICAgIH1cbiBnZXQoc2NvcGUpIHtcbiAgICAgICAgcmV0dXJuIGdldFNjb3BlJDEodGhpcywgc2NvcGUpO1xuICAgIH1cbiBkZXNjcmliZShzY29wZSwgdmFsdWVzKSB7XG4gICAgICAgIHJldHVybiBzZXQoZGVzY3JpcHRvcnMsIHNjb3BlLCB2YWx1ZXMpO1xuICAgIH1cbiAgICBvdmVycmlkZShzY29wZSwgdmFsdWVzKSB7XG4gICAgICAgIHJldHVybiBzZXQob3ZlcnJpZGVzLCBzY29wZSwgdmFsdWVzKTtcbiAgICB9XG4gcm91dGUoc2NvcGUsIG5hbWUsIHRhcmdldFNjb3BlLCB0YXJnZXROYW1lKSB7XG4gICAgICAgIGNvbnN0IHNjb3BlT2JqZWN0ID0gZ2V0U2NvcGUkMSh0aGlzLCBzY29wZSk7XG4gICAgICAgIGNvbnN0IHRhcmdldFNjb3BlT2JqZWN0ID0gZ2V0U2NvcGUkMSh0aGlzLCB0YXJnZXRTY29wZSk7XG4gICAgICAgIGNvbnN0IHByaXZhdGVOYW1lID0gJ18nICsgbmFtZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoc2NvcGVPYmplY3QsIHtcbiAgICAgICAgICAgIFtwcml2YXRlTmFtZV06IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogc2NvcGVPYmplY3RbbmFtZV0sXG4gICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbbmFtZV06IHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGdldCAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsID0gdGhpc1twcml2YXRlTmFtZV07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IHRhcmdldFNjb3BlT2JqZWN0W3RhcmdldE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNPYmplY3QobG9jYWwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgdGFyZ2V0LCBsb2NhbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlT3JEZWZhdWx0KGxvY2FsLCB0YXJnZXQpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0ICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzW3ByaXZhdGVOYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFwcGx5KGFwcGxpZXJzKSB7XG4gICAgICAgIGFwcGxpZXJzLmZvckVhY2goKGFwcGx5KT0+YXBwbHkodGhpcykpO1xuICAgIH1cbn1cbnZhciBkZWZhdWx0cyA9IC8qICNfX1BVUkVfXyAqLyBuZXcgRGVmYXVsdHMoe1xuICAgIF9zY3JpcHRhYmxlOiAobmFtZSk9PiFuYW1lLnN0YXJ0c1dpdGgoJ29uJyksXG4gICAgX2luZGV4YWJsZTogKG5hbWUpPT5uYW1lICE9PSAnZXZlbnRzJyxcbiAgICBob3Zlcjoge1xuICAgICAgICBfZmFsbGJhY2s6ICdpbnRlcmFjdGlvbidcbiAgICB9LFxuICAgIGludGVyYWN0aW9uOiB7XG4gICAgICAgIF9zY3JpcHRhYmxlOiBmYWxzZSxcbiAgICAgICAgX2luZGV4YWJsZTogZmFsc2VcbiAgICB9XG59LCBbXG4gICAgYXBwbHlBbmltYXRpb25zRGVmYXVsdHMsXG4gICAgYXBwbHlMYXlvdXRzRGVmYXVsdHMsXG4gICAgYXBwbHlTY2FsZURlZmF1bHRzXG5dKTtcblxuZnVuY3Rpb24gdG9Gb250U3RyaW5nKGZvbnQpIHtcbiAgICBpZiAoIWZvbnQgfHwgaXNOdWxsT3JVbmRlZihmb250LnNpemUpIHx8IGlzTnVsbE9yVW5kZWYoZm9udC5mYW1pbHkpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gKGZvbnQuc3R5bGUgPyBmb250LnN0eWxlICsgJyAnIDogJycpICsgKGZvbnQud2VpZ2h0ID8gZm9udC53ZWlnaHQgKyAnICcgOiAnJykgKyBmb250LnNpemUgKyAncHggJyArIGZvbnQuZmFtaWx5O1xufVxuIGZ1bmN0aW9uIF9tZWFzdXJlVGV4dChjdHgsIGRhdGEsIGdjLCBsb25nZXN0LCBzdHJpbmcpIHtcbiAgICBsZXQgdGV4dFdpZHRoID0gZGF0YVtzdHJpbmddO1xuICAgIGlmICghdGV4dFdpZHRoKSB7XG4gICAgICAgIHRleHRXaWR0aCA9IGRhdGFbc3RyaW5nXSA9IGN0eC5tZWFzdXJlVGV4dChzdHJpbmcpLndpZHRoO1xuICAgICAgICBnYy5wdXNoKHN0cmluZyk7XG4gICAgfVxuICAgIGlmICh0ZXh0V2lkdGggPiBsb25nZXN0KSB7XG4gICAgICAgIGxvbmdlc3QgPSB0ZXh0V2lkdGg7XG4gICAgfVxuICAgIHJldHVybiBsb25nZXN0O1xufVxuIGZ1bmN0aW9uIF9sb25nZXN0VGV4dChjdHgsIGZvbnQsIGFycmF5T2ZUaGluZ3MsIGNhY2hlKSB7XG4gICAgY2FjaGUgPSBjYWNoZSB8fCB7fTtcbiAgICBsZXQgZGF0YSA9IGNhY2hlLmRhdGEgPSBjYWNoZS5kYXRhIHx8IHt9O1xuICAgIGxldCBnYyA9IGNhY2hlLmdhcmJhZ2VDb2xsZWN0ID0gY2FjaGUuZ2FyYmFnZUNvbGxlY3QgfHwgW107XG4gICAgaWYgKGNhY2hlLmZvbnQgIT09IGZvbnQpIHtcbiAgICAgICAgZGF0YSA9IGNhY2hlLmRhdGEgPSB7fTtcbiAgICAgICAgZ2MgPSBjYWNoZS5nYXJiYWdlQ29sbGVjdCA9IFtdO1xuICAgICAgICBjYWNoZS5mb250ID0gZm9udDtcbiAgICB9XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHguZm9udCA9IGZvbnQ7XG4gICAgbGV0IGxvbmdlc3QgPSAwO1xuICAgIGNvbnN0IGlsZW4gPSBhcnJheU9mVGhpbmdzLmxlbmd0aDtcbiAgICBsZXQgaSwgaiwgamxlbiwgdGhpbmcsIG5lc3RlZFRoaW5nO1xuICAgIGZvcihpID0gMDsgaSA8IGlsZW47IGkrKyl7XG4gICAgICAgIHRoaW5nID0gYXJyYXlPZlRoaW5nc1tpXTtcbiAgICAgICAgaWYgKHRoaW5nICE9PSB1bmRlZmluZWQgJiYgdGhpbmcgIT09IG51bGwgJiYgaXNBcnJheSh0aGluZykgIT09IHRydWUpIHtcbiAgICAgICAgICAgIGxvbmdlc3QgPSBfbWVhc3VyZVRleHQoY3R4LCBkYXRhLCBnYywgbG9uZ2VzdCwgdGhpbmcpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkodGhpbmcpKSB7XG4gICAgICAgICAgICBmb3IoaiA9IDAsIGpsZW4gPSB0aGluZy5sZW5ndGg7IGogPCBqbGVuOyBqKyspe1xuICAgICAgICAgICAgICAgIG5lc3RlZFRoaW5nID0gdGhpbmdbal07XG4gICAgICAgICAgICAgICAgaWYgKG5lc3RlZFRoaW5nICE9PSB1bmRlZmluZWQgJiYgbmVzdGVkVGhpbmcgIT09IG51bGwgJiYgIWlzQXJyYXkobmVzdGVkVGhpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvbmdlc3QgPSBfbWVhc3VyZVRleHQoY3R4LCBkYXRhLCBnYywgbG9uZ2VzdCwgbmVzdGVkVGhpbmcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjdHgucmVzdG9yZSgpO1xuICAgIGNvbnN0IGdjTGVuID0gZ2MubGVuZ3RoIC8gMjtcbiAgICBpZiAoZ2NMZW4gPiBhcnJheU9mVGhpbmdzLmxlbmd0aCkge1xuICAgICAgICBmb3IoaSA9IDA7IGkgPCBnY0xlbjsgaSsrKXtcbiAgICAgICAgICAgIGRlbGV0ZSBkYXRhW2djW2ldXTtcbiAgICAgICAgfVxuICAgICAgICBnYy5zcGxpY2UoMCwgZ2NMZW4pO1xuICAgIH1cbiAgICByZXR1cm4gbG9uZ2VzdDtcbn1cbiBmdW5jdGlvbiBfYWxpZ25QaXhlbChjaGFydCwgcGl4ZWwsIHdpZHRoKSB7XG4gICAgY29uc3QgZGV2aWNlUGl4ZWxSYXRpbyA9IGNoYXJ0LmN1cnJlbnREZXZpY2VQaXhlbFJhdGlvO1xuICAgIGNvbnN0IGhhbGZXaWR0aCA9IHdpZHRoICE9PSAwID8gTWF0aC5tYXgod2lkdGggLyAyLCAwLjUpIDogMDtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCgocGl4ZWwgLSBoYWxmV2lkdGgpICogZGV2aWNlUGl4ZWxSYXRpbykgLyBkZXZpY2VQaXhlbFJhdGlvICsgaGFsZldpZHRoO1xufVxuIGZ1bmN0aW9uIGNsZWFyQ2FudmFzKGNhbnZhcywgY3R4KSB7XG4gICAgY3R4ID0gY3R4IHx8IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4LnJlc2V0VHJhbnNmb3JtKCk7XG4gICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgIGN0eC5yZXN0b3JlKCk7XG59XG5mdW5jdGlvbiBkcmF3UG9pbnQoY3R4LCBvcHRpb25zLCB4LCB5KSB7XG4gICAgZHJhd1BvaW50TGVnZW5kKGN0eCwgb3B0aW9ucywgeCwgeSwgbnVsbCk7XG59XG5mdW5jdGlvbiBkcmF3UG9pbnRMZWdlbmQoY3R4LCBvcHRpb25zLCB4LCB5LCB3KSB7XG4gICAgbGV0IHR5cGUsIHhPZmZzZXQsIHlPZmZzZXQsIHNpemUsIGNvcm5lclJhZGl1cywgd2lkdGgsIHhPZmZzZXRXLCB5T2Zmc2V0VztcbiAgICBjb25zdCBzdHlsZSA9IG9wdGlvbnMucG9pbnRTdHlsZTtcbiAgICBjb25zdCByb3RhdGlvbiA9IG9wdGlvbnMucm90YXRpb247XG4gICAgY29uc3QgcmFkaXVzID0gb3B0aW9ucy5yYWRpdXM7XG4gICAgbGV0IHJhZCA9IChyb3RhdGlvbiB8fCAwKSAqIFJBRF9QRVJfREVHO1xuICAgIGlmIChzdHlsZSAmJiB0eXBlb2Ygc3R5bGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHR5cGUgPSBzdHlsZS50b1N0cmluZygpO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ1tvYmplY3QgSFRNTEltYWdlRWxlbWVudF0nIHx8IHR5cGUgPT09ICdbb2JqZWN0IEhUTUxDYW52YXNFbGVtZW50XScpIHtcbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICBjdHgudHJhbnNsYXRlKHgsIHkpO1xuICAgICAgICAgICAgY3R4LnJvdGF0ZShyYWQpO1xuICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShzdHlsZSwgLXN0eWxlLndpZHRoIC8gMiwgLXN0eWxlLmhlaWdodCAvIDIsIHN0eWxlLndpZHRoLCBzdHlsZS5oZWlnaHQpO1xuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNOYU4ocmFkaXVzKSB8fCByYWRpdXMgPD0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBzd2l0Y2goc3R5bGUpe1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgaWYgKHcpIHtcbiAgICAgICAgICAgICAgICBjdHguZWxsaXBzZSh4LCB5LCB3IC8gMiwgcmFkaXVzLCAwLCAwLCBUQVUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjdHguYXJjKHgsIHksIHJhZGl1cywgMCwgVEFVKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd0cmlhbmdsZSc6XG4gICAgICAgICAgICB3aWR0aCA9IHcgPyB3IC8gMiA6IHJhZGl1cztcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oeCArIE1hdGguc2luKHJhZCkgKiB3aWR0aCwgeSAtIE1hdGguY29zKHJhZCkgKiByYWRpdXMpO1xuICAgICAgICAgICAgcmFkICs9IFRXT19USElSRFNfUEk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHggKyBNYXRoLnNpbihyYWQpICogd2lkdGgsIHkgLSBNYXRoLmNvcyhyYWQpICogcmFkaXVzKTtcbiAgICAgICAgICAgIHJhZCArPSBUV09fVEhJUkRTX1BJO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4ICsgTWF0aC5zaW4ocmFkKSAqIHdpZHRoLCB5IC0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cyk7XG4gICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncmVjdFJvdW5kZWQnOlxuICAgICAgICAgICAgY29ybmVyUmFkaXVzID0gcmFkaXVzICogMC41MTY7XG4gICAgICAgICAgICBzaXplID0gcmFkaXVzIC0gY29ybmVyUmFkaXVzO1xuICAgICAgICAgICAgeE9mZnNldCA9IE1hdGguY29zKHJhZCArIFFVQVJURVJfUEkpICogc2l6ZTtcbiAgICAgICAgICAgIHhPZmZzZXRXID0gTWF0aC5jb3MocmFkICsgUVVBUlRFUl9QSSkgKiAodyA/IHcgLyAyIC0gY29ybmVyUmFkaXVzIDogc2l6ZSk7XG4gICAgICAgICAgICB5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkICsgUVVBUlRFUl9QSSkgKiBzaXplO1xuICAgICAgICAgICAgeU9mZnNldFcgPSBNYXRoLnNpbihyYWQgKyBRVUFSVEVSX1BJKSAqICh3ID8gdyAvIDIgLSBjb3JuZXJSYWRpdXMgOiBzaXplKTtcbiAgICAgICAgICAgIGN0eC5hcmMoeCAtIHhPZmZzZXRXLCB5IC0geU9mZnNldCwgY29ybmVyUmFkaXVzLCByYWQgLSBQSSwgcmFkIC0gSEFMRl9QSSk7XG4gICAgICAgICAgICBjdHguYXJjKHggKyB5T2Zmc2V0VywgeSAtIHhPZmZzZXQsIGNvcm5lclJhZGl1cywgcmFkIC0gSEFMRl9QSSwgcmFkKTtcbiAgICAgICAgICAgIGN0eC5hcmMoeCArIHhPZmZzZXRXLCB5ICsgeU9mZnNldCwgY29ybmVyUmFkaXVzLCByYWQsIHJhZCArIEhBTEZfUEkpO1xuICAgICAgICAgICAgY3R4LmFyYyh4IC0geU9mZnNldFcsIHkgKyB4T2Zmc2V0LCBjb3JuZXJSYWRpdXMsIHJhZCArIEhBTEZfUEksIHJhZCArIFBJKTtcbiAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdyZWN0JzpcbiAgICAgICAgICAgIGlmICghcm90YXRpb24pIHtcbiAgICAgICAgICAgICAgICBzaXplID0gTWF0aC5TUVJUMV8yICogcmFkaXVzO1xuICAgICAgICAgICAgICAgIHdpZHRoID0gdyA/IHcgLyAyIDogc2l6ZTtcbiAgICAgICAgICAgICAgICBjdHgucmVjdCh4IC0gd2lkdGgsIHkgLSBzaXplLCAyICogd2lkdGgsIDIgKiBzaXplKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJhZCArPSBRVUFSVEVSX1BJO1xuICAgICAgICAgY2FzZSAncmVjdFJvdCc6XG4gICAgICAgICAgICB4T2Zmc2V0VyA9IE1hdGguY29zKHJhZCkgKiAodyA/IHcgLyAyIDogcmFkaXVzKTtcbiAgICAgICAgICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgICAgICAgICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgICAgICAgICB5T2Zmc2V0VyA9IE1hdGguc2luKHJhZCkgKiAodyA/IHcgLyAyIDogcmFkaXVzKTtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXRXLCB5IC0geU9mZnNldCk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHggKyB5T2Zmc2V0VywgeSAtIHhPZmZzZXQpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4ICsgeE9mZnNldFcsIHkgKyB5T2Zmc2V0KTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCAtIHlPZmZzZXRXLCB5ICsgeE9mZnNldCk7XG4gICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnY3Jvc3NSb3QnOlxuICAgICAgICAgICAgcmFkICs9IFFVQVJURVJfUEk7XG4gICAgICAgICBjYXNlICdjcm9zcyc6XG4gICAgICAgICAgICB4T2Zmc2V0VyA9IE1hdGguY29zKHJhZCkgKiAodyA/IHcgLyAyIDogcmFkaXVzKTtcbiAgICAgICAgICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgICAgICAgICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgICAgICAgICB5T2Zmc2V0VyA9IE1hdGguc2luKHJhZCkgKiAodyA/IHcgLyAyIDogcmFkaXVzKTtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXRXLCB5IC0geU9mZnNldCk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHggKyB4T2Zmc2V0VywgeSArIHlPZmZzZXQpO1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyh4ICsgeU9mZnNldFcsIHkgLSB4T2Zmc2V0KTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCAtIHlPZmZzZXRXLCB5ICsgeE9mZnNldCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnc3Rhcic6XG4gICAgICAgICAgICB4T2Zmc2V0VyA9IE1hdGguY29zKHJhZCkgKiAodyA/IHcgLyAyIDogcmFkaXVzKTtcbiAgICAgICAgICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgICAgICAgICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgICAgICAgICB5T2Zmc2V0VyA9IE1hdGguc2luKHJhZCkgKiAodyA/IHcgLyAyIDogcmFkaXVzKTtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXRXLCB5IC0geU9mZnNldCk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHggKyB4T2Zmc2V0VywgeSArIHlPZmZzZXQpO1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyh4ICsgeU9mZnNldFcsIHkgLSB4T2Zmc2V0KTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCAtIHlPZmZzZXRXLCB5ICsgeE9mZnNldCk7XG4gICAgICAgICAgICByYWQgKz0gUVVBUlRFUl9QSTtcbiAgICAgICAgICAgIHhPZmZzZXRXID0gTWF0aC5jb3MocmFkKSAqICh3ID8gdyAvIDIgOiByYWRpdXMpO1xuICAgICAgICAgICAgeE9mZnNldCA9IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG4gICAgICAgICAgICB5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkKSAqIHJhZGl1cztcbiAgICAgICAgICAgIHlPZmZzZXRXID0gTWF0aC5zaW4ocmFkKSAqICh3ID8gdyAvIDIgOiByYWRpdXMpO1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyh4IC0geE9mZnNldFcsIHkgLSB5T2Zmc2V0KTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCArIHhPZmZzZXRXLCB5ICsgeU9mZnNldCk7XG4gICAgICAgICAgICBjdHgubW92ZVRvKHggKyB5T2Zmc2V0VywgeSAtIHhPZmZzZXQpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4IC0geU9mZnNldFcsIHkgKyB4T2Zmc2V0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdsaW5lJzpcbiAgICAgICAgICAgIHhPZmZzZXQgPSB3ID8gdyAvIDIgOiBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgICAgICAgICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgICAgICAgICBjdHgubW92ZVRvKHggLSB4T2Zmc2V0LCB5IC0geU9mZnNldCk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHggKyB4T2Zmc2V0LCB5ICsgeU9mZnNldCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZGFzaCc6XG4gICAgICAgICAgICBjdHgubW92ZVRvKHgsIHkpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4ICsgTWF0aC5jb3MocmFkKSAqICh3ID8gdyAvIDIgOiByYWRpdXMpLCB5ICsgTWF0aC5zaW4ocmFkKSAqIHJhZGl1cyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBmYWxzZTpcbiAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjdHguZmlsbCgpO1xuICAgIGlmIChvcHRpb25zLmJvcmRlcldpZHRoID4gMCkge1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgfVxufVxuIGZ1bmN0aW9uIF9pc1BvaW50SW5BcmVhKHBvaW50LCBhcmVhLCBtYXJnaW4pIHtcbiAgICBtYXJnaW4gPSBtYXJnaW4gfHwgMC41O1xuICAgIHJldHVybiAhYXJlYSB8fCBwb2ludCAmJiBwb2ludC54ID4gYXJlYS5sZWZ0IC0gbWFyZ2luICYmIHBvaW50LnggPCBhcmVhLnJpZ2h0ICsgbWFyZ2luICYmIHBvaW50LnkgPiBhcmVhLnRvcCAtIG1hcmdpbiAmJiBwb2ludC55IDwgYXJlYS5ib3R0b20gKyBtYXJnaW47XG59XG5mdW5jdGlvbiBjbGlwQXJlYShjdHgsIGFyZWEpIHtcbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHgucmVjdChhcmVhLmxlZnQsIGFyZWEudG9wLCBhcmVhLnJpZ2h0IC0gYXJlYS5sZWZ0LCBhcmVhLmJvdHRvbSAtIGFyZWEudG9wKTtcbiAgICBjdHguY2xpcCgpO1xufVxuZnVuY3Rpb24gdW5jbGlwQXJlYShjdHgpIHtcbiAgICBjdHgucmVzdG9yZSgpO1xufVxuIGZ1bmN0aW9uIF9zdGVwcGVkTGluZVRvKGN0eCwgcHJldmlvdXMsIHRhcmdldCwgZmxpcCwgbW9kZSkge1xuICAgIGlmICghcHJldmlvdXMpIHtcbiAgICAgICAgcmV0dXJuIGN0eC5saW5lVG8odGFyZ2V0LngsIHRhcmdldC55KTtcbiAgICB9XG4gICAgaWYgKG1vZGUgPT09ICdtaWRkbGUnKSB7XG4gICAgICAgIGNvbnN0IG1pZHBvaW50ID0gKHByZXZpb3VzLnggKyB0YXJnZXQueCkgLyAyLjA7XG4gICAgICAgIGN0eC5saW5lVG8obWlkcG9pbnQsIHByZXZpb3VzLnkpO1xuICAgICAgICBjdHgubGluZVRvKG1pZHBvaW50LCB0YXJnZXQueSk7XG4gICAgfSBlbHNlIGlmIChtb2RlID09PSAnYWZ0ZXInICE9PSAhIWZsaXApIHtcbiAgICAgICAgY3R4LmxpbmVUbyhwcmV2aW91cy54LCB0YXJnZXQueSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY3R4LmxpbmVUbyh0YXJnZXQueCwgcHJldmlvdXMueSk7XG4gICAgfVxuICAgIGN0eC5saW5lVG8odGFyZ2V0LngsIHRhcmdldC55KTtcbn1cbiBmdW5jdGlvbiBfYmV6aWVyQ3VydmVUbyhjdHgsIHByZXZpb3VzLCB0YXJnZXQsIGZsaXApIHtcbiAgICBpZiAoIXByZXZpb3VzKSB7XG4gICAgICAgIHJldHVybiBjdHgubGluZVRvKHRhcmdldC54LCB0YXJnZXQueSk7XG4gICAgfVxuICAgIGN0eC5iZXppZXJDdXJ2ZVRvKGZsaXAgPyBwcmV2aW91cy5jcDF4IDogcHJldmlvdXMuY3AyeCwgZmxpcCA/IHByZXZpb3VzLmNwMXkgOiBwcmV2aW91cy5jcDJ5LCBmbGlwID8gdGFyZ2V0LmNwMnggOiB0YXJnZXQuY3AxeCwgZmxpcCA/IHRhcmdldC5jcDJ5IDogdGFyZ2V0LmNwMXksIHRhcmdldC54LCB0YXJnZXQueSk7XG59XG4gZnVuY3Rpb24gcmVuZGVyVGV4dChjdHgsIHRleHQsIHgsIHksIGZvbnQsIG9wdHMgPSB7fSkge1xuICAgIGNvbnN0IGxpbmVzID0gaXNBcnJheSh0ZXh0KSA/IHRleHQgOiBbXG4gICAgICAgIHRleHRcbiAgICBdO1xuICAgIGNvbnN0IHN0cm9rZSA9IG9wdHMuc3Ryb2tlV2lkdGggPiAwICYmIG9wdHMuc3Ryb2tlQ29sb3IgIT09ICcnO1xuICAgIGxldCBpLCBsaW5lO1xuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4LmZvbnQgPSBmb250LnN0cmluZztcbiAgICBzZXRSZW5kZXJPcHRzKGN0eCwgb3B0cyk7XG4gICAgZm9yKGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyArK2kpe1xuICAgICAgICBsaW5lID0gbGluZXNbaV07XG4gICAgICAgIGlmIChvcHRzLmJhY2tkcm9wKSB7XG4gICAgICAgICAgICBkcmF3QmFja2Ryb3AoY3R4LCBvcHRzLmJhY2tkcm9wKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3Ryb2tlKSB7XG4gICAgICAgICAgICBpZiAob3B0cy5zdHJva2VDb2xvcikge1xuICAgICAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IG9wdHMuc3Ryb2tlQ29sb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWYob3B0cy5zdHJva2VXaWR0aCkpIHtcbiAgICAgICAgICAgICAgICBjdHgubGluZVdpZHRoID0gb3B0cy5zdHJva2VXaWR0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN0eC5zdHJva2VUZXh0KGxpbmUsIHgsIHksIG9wdHMubWF4V2lkdGgpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5maWxsVGV4dChsaW5lLCB4LCB5LCBvcHRzLm1heFdpZHRoKTtcbiAgICAgICAgZGVjb3JhdGVUZXh0KGN0eCwgeCwgeSwgbGluZSwgb3B0cyk7XG4gICAgICAgIHkgKz0gZm9udC5saW5lSGVpZ2h0O1xuICAgIH1cbiAgICBjdHgucmVzdG9yZSgpO1xufVxuZnVuY3Rpb24gc2V0UmVuZGVyT3B0cyhjdHgsIG9wdHMpIHtcbiAgICBpZiAob3B0cy50cmFuc2xhdGlvbikge1xuICAgICAgICBjdHgudHJhbnNsYXRlKG9wdHMudHJhbnNsYXRpb25bMF0sIG9wdHMudHJhbnNsYXRpb25bMV0pO1xuICAgIH1cbiAgICBpZiAoIWlzTnVsbE9yVW5kZWYob3B0cy5yb3RhdGlvbikpIHtcbiAgICAgICAgY3R4LnJvdGF0ZShvcHRzLnJvdGF0aW9uKTtcbiAgICB9XG4gICAgaWYgKG9wdHMuY29sb3IpIHtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdHMuY29sb3I7XG4gICAgfVxuICAgIGlmIChvcHRzLnRleHRBbGlnbikge1xuICAgICAgICBjdHgudGV4dEFsaWduID0gb3B0cy50ZXh0QWxpZ247XG4gICAgfVxuICAgIGlmIChvcHRzLnRleHRCYXNlbGluZSkge1xuICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gb3B0cy50ZXh0QmFzZWxpbmU7XG4gICAgfVxufVxuZnVuY3Rpb24gZGVjb3JhdGVUZXh0KGN0eCwgeCwgeSwgbGluZSwgb3B0cykge1xuICAgIGlmIChvcHRzLnN0cmlrZXRocm91Z2ggfHwgb3B0cy51bmRlcmxpbmUpIHtcbiBjb25zdCBtZXRyaWNzID0gY3R4Lm1lYXN1cmVUZXh0KGxpbmUpO1xuICAgICAgICBjb25zdCBsZWZ0ID0geCAtIG1ldHJpY3MuYWN0dWFsQm91bmRpbmdCb3hMZWZ0O1xuICAgICAgICBjb25zdCByaWdodCA9IHggKyBtZXRyaWNzLmFjdHVhbEJvdW5kaW5nQm94UmlnaHQ7XG4gICAgICAgIGNvbnN0IHRvcCA9IHkgLSBtZXRyaWNzLmFjdHVhbEJvdW5kaW5nQm94QXNjZW50O1xuICAgICAgICBjb25zdCBib3R0b20gPSB5ICsgbWV0cmljcy5hY3R1YWxCb3VuZGluZ0JveERlc2NlbnQ7XG4gICAgICAgIGNvbnN0IHlEZWNvcmF0aW9uID0gb3B0cy5zdHJpa2V0aHJvdWdoID8gKHRvcCArIGJvdHRvbSkgLyAyIDogYm90dG9tO1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBjdHguZmlsbFN0eWxlO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSBvcHRzLmRlY29yYXRpb25XaWR0aCB8fCAyO1xuICAgICAgICBjdHgubW92ZVRvKGxlZnQsIHlEZWNvcmF0aW9uKTtcbiAgICAgICAgY3R4LmxpbmVUbyhyaWdodCwgeURlY29yYXRpb24pO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gZHJhd0JhY2tkcm9wKGN0eCwgb3B0cykge1xuICAgIGNvbnN0IG9sZENvbG9yID0gY3R4LmZpbGxTdHlsZTtcbiAgICBjdHguZmlsbFN0eWxlID0gb3B0cy5jb2xvcjtcbiAgICBjdHguZmlsbFJlY3Qob3B0cy5sZWZ0LCBvcHRzLnRvcCwgb3B0cy53aWR0aCwgb3B0cy5oZWlnaHQpO1xuICAgIGN0eC5maWxsU3R5bGUgPSBvbGRDb2xvcjtcbn1cbiBmdW5jdGlvbiBhZGRSb3VuZGVkUmVjdFBhdGgoY3R4LCByZWN0KSB7XG4gICAgY29uc3QgeyB4ICwgeSAsIHcgLCBoICwgcmFkaXVzICB9ID0gcmVjdDtcbiAgICBjdHguYXJjKHggKyByYWRpdXMudG9wTGVmdCwgeSArIHJhZGl1cy50b3BMZWZ0LCByYWRpdXMudG9wTGVmdCwgLUhBTEZfUEksIFBJLCB0cnVlKTtcbiAgICBjdHgubGluZVRvKHgsIHkgKyBoIC0gcmFkaXVzLmJvdHRvbUxlZnQpO1xuICAgIGN0eC5hcmMoeCArIHJhZGl1cy5ib3R0b21MZWZ0LCB5ICsgaCAtIHJhZGl1cy5ib3R0b21MZWZ0LCByYWRpdXMuYm90dG9tTGVmdCwgUEksIEhBTEZfUEksIHRydWUpO1xuICAgIGN0eC5saW5lVG8oeCArIHcgLSByYWRpdXMuYm90dG9tUmlnaHQsIHkgKyBoKTtcbiAgICBjdHguYXJjKHggKyB3IC0gcmFkaXVzLmJvdHRvbVJpZ2h0LCB5ICsgaCAtIHJhZGl1cy5ib3R0b21SaWdodCwgcmFkaXVzLmJvdHRvbVJpZ2h0LCBIQUxGX1BJLCAwLCB0cnVlKTtcbiAgICBjdHgubGluZVRvKHggKyB3LCB5ICsgcmFkaXVzLnRvcFJpZ2h0KTtcbiAgICBjdHguYXJjKHggKyB3IC0gcmFkaXVzLnRvcFJpZ2h0LCB5ICsgcmFkaXVzLnRvcFJpZ2h0LCByYWRpdXMudG9wUmlnaHQsIDAsIC1IQUxGX1BJLCB0cnVlKTtcbiAgICBjdHgubGluZVRvKHggKyByYWRpdXMudG9wTGVmdCwgeSk7XG59XG5cbmNvbnN0IExJTkVfSEVJR0hUID0gL14obm9ybWFsfChcXGQrKD86XFwuXFxkKyk/KShweHxlbXwlKT8pJC87XG5jb25zdCBGT05UX1NUWUxFID0gL14obm9ybWFsfGl0YWxpY3xpbml0aWFsfGluaGVyaXR8dW5zZXR8KG9ibGlxdWUoIC0/WzAtOV0/WzAtOV1kZWcpPykpJC87XG4vKipcbiAqIEBhbGlhcyBDaGFydC5oZWxwZXJzLm9wdGlvbnNcbiAqIEBuYW1lc3BhY2VcbiAqLyAvKipcbiAqIENvbnZlcnRzIHRoZSBnaXZlbiBsaW5lIGhlaWdodCBgdmFsdWVgIGluIHBpeGVscyBmb3IgYSBzcGVjaWZpYyBmb250IGBzaXplYC5cbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSBsaW5lSGVpZ2h0IHRvIHBhcnNlIChlZy4gMS42LCAnMTRweCcsICc3NSUnLCAnMS42ZW0nKS5cbiAqIEBwYXJhbSBzaXplIC0gVGhlIGZvbnQgc2l6ZSAoaW4gcGl4ZWxzKSB1c2VkIHRvIHJlc29sdmUgcmVsYXRpdmUgYHZhbHVlYC5cbiAqIEByZXR1cm5zIFRoZSBlZmZlY3RpdmUgbGluZSBoZWlnaHQgaW4gcGl4ZWxzIChzaXplICogMS4yIGlmIHZhbHVlIGlzIGludmFsaWQpLlxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbGluZS1oZWlnaHRcbiAqIEBzaW5jZSAyLjcuMFxuICovIGZ1bmN0aW9uIHRvTGluZUhlaWdodCh2YWx1ZSwgc2l6ZSkge1xuICAgIGNvbnN0IG1hdGNoZXMgPSAoJycgKyB2YWx1ZSkubWF0Y2goTElORV9IRUlHSFQpO1xuICAgIGlmICghbWF0Y2hlcyB8fCBtYXRjaGVzWzFdID09PSAnbm9ybWFsJykge1xuICAgICAgICByZXR1cm4gc2l6ZSAqIDEuMjtcbiAgICB9XG4gICAgdmFsdWUgPSArbWF0Y2hlc1syXTtcbiAgICBzd2l0Y2gobWF0Y2hlc1szXSl7XG4gICAgICAgIGNhc2UgJ3B4JzpcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgY2FzZSAnJSc6XG4gICAgICAgICAgICB2YWx1ZSAvPSAxMDA7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHNpemUgKiB2YWx1ZTtcbn1cbmNvbnN0IG51bWJlck9yWmVybyA9ICh2KT0+K3YgfHwgMDtcbmZ1bmN0aW9uIF9yZWFkVmFsdWVUb1Byb3BzKHZhbHVlLCBwcm9wcykge1xuICAgIGNvbnN0IHJldCA9IHt9O1xuICAgIGNvbnN0IG9ialByb3BzID0gaXNPYmplY3QocHJvcHMpO1xuICAgIGNvbnN0IGtleXMgPSBvYmpQcm9wcyA/IE9iamVjdC5rZXlzKHByb3BzKSA6IHByb3BzO1xuICAgIGNvbnN0IHJlYWQgPSBpc09iamVjdCh2YWx1ZSkgPyBvYmpQcm9wcyA/IChwcm9wKT0+dmFsdWVPckRlZmF1bHQodmFsdWVbcHJvcF0sIHZhbHVlW3Byb3BzW3Byb3BdXSkgOiAocHJvcCk9PnZhbHVlW3Byb3BdIDogKCk9PnZhbHVlO1xuICAgIGZvciAoY29uc3QgcHJvcCBvZiBrZXlzKXtcbiAgICAgICAgcmV0W3Byb3BdID0gbnVtYmVyT3JaZXJvKHJlYWQocHJvcCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufVxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gdmFsdWUgaW50byBhIFRSQkwgb2JqZWN0LlxuICogQHBhcmFtIHZhbHVlIC0gSWYgYSBudW1iZXIsIHNldCB0aGUgdmFsdWUgdG8gYWxsIFRSQkwgY29tcG9uZW50LFxuICogIGVsc2UsIGlmIGFuIG9iamVjdCwgdXNlIGRlZmluZWQgcHJvcGVydGllcyBhbmQgc2V0cyB1bmRlZmluZWQgb25lcyB0byAwLlxuICogIHggLyB5IGFyZSBzaG9ydGhhbmRzIGZvciBzYW1lIHZhbHVlIGZvciBsZWZ0L3JpZ2h0IGFuZCB0b3AvYm90dG9tLlxuICogQHJldHVybnMgVGhlIHBhZGRpbmcgdmFsdWVzICh0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnQpXG4gKiBAc2luY2UgMy4wLjBcbiAqLyBmdW5jdGlvbiB0b1RSQkwodmFsdWUpIHtcbiAgICByZXR1cm4gX3JlYWRWYWx1ZVRvUHJvcHModmFsdWUsIHtcbiAgICAgICAgdG9wOiAneScsXG4gICAgICAgIHJpZ2h0OiAneCcsXG4gICAgICAgIGJvdHRvbTogJ3knLFxuICAgICAgICBsZWZ0OiAneCdcbiAgICB9KTtcbn1cbi8qKlxuICogQ29udmVydHMgdGhlIGdpdmVuIHZhbHVlIGludG8gYSBUUkJMIGNvcm5lcnMgb2JqZWN0IChzaW1pbGFyIHdpdGggY3NzIGJvcmRlci1yYWRpdXMpLlxuICogQHBhcmFtIHZhbHVlIC0gSWYgYSBudW1iZXIsIHNldCB0aGUgdmFsdWUgdG8gYWxsIFRSQkwgY29ybmVyIGNvbXBvbmVudHMsXG4gKiAgZWxzZSwgaWYgYW4gb2JqZWN0LCB1c2UgZGVmaW5lZCBwcm9wZXJ0aWVzIGFuZCBzZXRzIHVuZGVmaW5lZCBvbmVzIHRvIDAuXG4gKiBAcmV0dXJucyBUaGUgVFJCTCBjb3JuZXIgdmFsdWVzICh0b3BMZWZ0LCB0b3BSaWdodCwgYm90dG9tTGVmdCwgYm90dG9tUmlnaHQpXG4gKiBAc2luY2UgMy4wLjBcbiAqLyBmdW5jdGlvbiB0b1RSQkxDb3JuZXJzKHZhbHVlKSB7XG4gICAgcmV0dXJuIF9yZWFkVmFsdWVUb1Byb3BzKHZhbHVlLCBbXG4gICAgICAgICd0b3BMZWZ0JyxcbiAgICAgICAgJ3RvcFJpZ2h0JyxcbiAgICAgICAgJ2JvdHRvbUxlZnQnLFxuICAgICAgICAnYm90dG9tUmlnaHQnXG4gICAgXSk7XG59XG4vKipcbiAqIENvbnZlcnRzIHRoZSBnaXZlbiB2YWx1ZSBpbnRvIGEgcGFkZGluZyBvYmplY3Qgd2l0aCBwcmUtY29tcHV0ZWQgd2lkdGgvaGVpZ2h0LlxuICogQHBhcmFtIHZhbHVlIC0gSWYgYSBudW1iZXIsIHNldCB0aGUgdmFsdWUgdG8gYWxsIFRSQkwgY29tcG9uZW50LFxuICogIGVsc2UsIGlmIGFuIG9iamVjdCwgdXNlIGRlZmluZWQgcHJvcGVydGllcyBhbmQgc2V0cyB1bmRlZmluZWQgb25lcyB0byAwLlxuICogIHggLyB5IGFyZSBzaG9ydGhhbmRzIGZvciBzYW1lIHZhbHVlIGZvciBsZWZ0L3JpZ2h0IGFuZCB0b3AvYm90dG9tLlxuICogQHJldHVybnMgVGhlIHBhZGRpbmcgdmFsdWVzICh0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnQsIHdpZHRoLCBoZWlnaHQpXG4gKiBAc2luY2UgMi43LjBcbiAqLyBmdW5jdGlvbiB0b1BhZGRpbmcodmFsdWUpIHtcbiAgICBjb25zdCBvYmogPSB0b1RSQkwodmFsdWUpO1xuICAgIG9iai53aWR0aCA9IG9iai5sZWZ0ICsgb2JqLnJpZ2h0O1xuICAgIG9iai5oZWlnaHQgPSBvYmoudG9wICsgb2JqLmJvdHRvbTtcbiAgICByZXR1cm4gb2JqO1xufVxuLyoqXG4gKiBQYXJzZXMgZm9udCBvcHRpb25zIGFuZCByZXR1cm5zIHRoZSBmb250IG9iamVjdC5cbiAqIEBwYXJhbSBvcHRpb25zIC0gQSBvYmplY3QgdGhhdCBjb250YWlucyBmb250IG9wdGlvbnMgdG8gYmUgcGFyc2VkLlxuICogQHBhcmFtIGZhbGxiYWNrIC0gQSBvYmplY3QgdGhhdCBjb250YWlucyBmYWxsYmFjayBmb250IG9wdGlvbnMuXG4gKiBAcmV0dXJuIFRoZSBmb250IG9iamVjdC5cbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gdG9Gb250KG9wdGlvbnMsIGZhbGxiYWNrKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgZmFsbGJhY2sgPSBmYWxsYmFjayB8fCBkZWZhdWx0cy5mb250O1xuICAgIGxldCBzaXplID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy5zaXplLCBmYWxsYmFjay5zaXplKTtcbiAgICBpZiAodHlwZW9mIHNpemUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHNpemUgPSBwYXJzZUludChzaXplLCAxMCk7XG4gICAgfVxuICAgIGxldCBzdHlsZSA9IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMuc3R5bGUsIGZhbGxiYWNrLnN0eWxlKTtcbiAgICBpZiAoc3R5bGUgJiYgISgnJyArIHN0eWxlKS5tYXRjaChGT05UX1NUWUxFKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0ludmFsaWQgZm9udCBzdHlsZSBzcGVjaWZpZWQ6IFwiJyArIHN0eWxlICsgJ1wiJyk7XG4gICAgICAgIHN0eWxlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBjb25zdCBmb250ID0ge1xuICAgICAgICBmYW1pbHk6IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMuZmFtaWx5LCBmYWxsYmFjay5mYW1pbHkpLFxuICAgICAgICBsaW5lSGVpZ2h0OiB0b0xpbmVIZWlnaHQodmFsdWVPckRlZmF1bHQob3B0aW9ucy5saW5lSGVpZ2h0LCBmYWxsYmFjay5saW5lSGVpZ2h0KSwgc2l6ZSksXG4gICAgICAgIHNpemUsXG4gICAgICAgIHN0eWxlLFxuICAgICAgICB3ZWlnaHQ6IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMud2VpZ2h0LCBmYWxsYmFjay53ZWlnaHQpLFxuICAgICAgICBzdHJpbmc6ICcnXG4gICAgfTtcbiAgICBmb250LnN0cmluZyA9IHRvRm9udFN0cmluZyhmb250KTtcbiAgICByZXR1cm4gZm9udDtcbn1cbi8qKlxuICogRXZhbHVhdGVzIHRoZSBnaXZlbiBgaW5wdXRzYCBzZXF1ZW50aWFsbHkgYW5kIHJldHVybnMgdGhlIGZpcnN0IGRlZmluZWQgdmFsdWUuXG4gKiBAcGFyYW0gaW5wdXRzIC0gQW4gYXJyYXkgb2YgdmFsdWVzLCBmYWxsaW5nIGJhY2sgdG8gdGhlIGxhc3QgdmFsdWUuXG4gKiBAcGFyYW0gY29udGV4dCAtIElmIGRlZmluZWQgYW5kIHRoZSBjdXJyZW50IHZhbHVlIGlzIGEgZnVuY3Rpb24sIHRoZSB2YWx1ZVxuICogaXMgY2FsbGVkIHdpdGggYGNvbnRleHRgIGFzIGZpcnN0IGFyZ3VtZW50IGFuZCB0aGUgcmVzdWx0IGJlY29tZXMgdGhlIG5ldyBpbnB1dC5cbiAqIEBwYXJhbSBpbmRleCAtIElmIGRlZmluZWQgYW5kIHRoZSBjdXJyZW50IHZhbHVlIGlzIGFuIGFycmF5LCB0aGUgdmFsdWVcbiAqIGF0IGBpbmRleGAgYmVjb21lIHRoZSBuZXcgaW5wdXQuXG4gKiBAcGFyYW0gaW5mbyAtIG9iamVjdCB0byByZXR1cm4gaW5mb3JtYXRpb24gYWJvdXQgcmVzb2x1dGlvbiBpblxuICogQHBhcmFtIGluZm8uY2FjaGVhYmxlIC0gV2lsbCBiZSBzZXQgdG8gYGZhbHNlYCBpZiBvcHRpb24gaXMgbm90IGNhY2hlYWJsZS5cbiAqIEBzaW5jZSAyLjcuMFxuICovIGZ1bmN0aW9uIHJlc29sdmUoaW5wdXRzLCBjb250ZXh0LCBpbmRleCwgaW5mbykge1xuICAgIGxldCBjYWNoZWFibGUgPSB0cnVlO1xuICAgIGxldCBpLCBpbGVuLCB2YWx1ZTtcbiAgICBmb3IoaSA9IDAsIGlsZW4gPSBpbnB1dHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgdmFsdWUgPSBpbnB1dHNbaV07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29udGV4dCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZShjb250ZXh0KTtcbiAgICAgICAgICAgIGNhY2hlYWJsZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbmRleCAhPT0gdW5kZWZpbmVkICYmIGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlW2luZGV4ICUgdmFsdWUubGVuZ3RoXTtcbiAgICAgICAgICAgIGNhY2hlYWJsZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoaW5mbyAmJiAhY2FjaGVhYmxlKSB7XG4gICAgICAgICAgICAgICAgaW5mby5jYWNoZWFibGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQHBhcmFtIG1pbm1heFxuICogQHBhcmFtIGdyYWNlXG4gKiBAcGFyYW0gYmVnaW5BdFplcm9cbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2FkZEdyYWNlKG1pbm1heCwgZ3JhY2UsIGJlZ2luQXRaZXJvKSB7XG4gICAgY29uc3QgeyBtaW4gLCBtYXggIH0gPSBtaW5tYXg7XG4gICAgY29uc3QgY2hhbmdlID0gdG9EaW1lbnNpb24oZ3JhY2UsIChtYXggLSBtaW4pIC8gMik7XG4gICAgY29uc3Qga2VlcFplcm8gPSAodmFsdWUsIGFkZCk9PmJlZ2luQXRaZXJvICYmIHZhbHVlID09PSAwID8gMCA6IHZhbHVlICsgYWRkO1xuICAgIHJldHVybiB7XG4gICAgICAgIG1pbjoga2VlcFplcm8obWluLCAtTWF0aC5hYnMoY2hhbmdlKSksXG4gICAgICAgIG1heDoga2VlcFplcm8obWF4LCBjaGFuZ2UpXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNvbnRleHQocGFyZW50Q29udGV4dCwgY29udGV4dCkge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUocGFyZW50Q29udGV4dCksIGNvbnRleHQpO1xufVxuXG5mdW5jdGlvbiBfY3JlYXRlUmVzb2x2ZXIoc2NvcGVzLCBwcmVmaXhlcyA9IFtcbiAgICAnJ1xuXSwgcm9vdFNjb3BlcyA9IHNjb3BlcywgZmFsbGJhY2ssIGdldFRhcmdldCA9ICgpPT5zY29wZXNbMF0pIHtcbiAgICBpZiAoIWRlZmluZWQoZmFsbGJhY2spKSB7XG4gICAgICAgIGZhbGxiYWNrID0gX3Jlc29sdmUoJ19mYWxsYmFjaycsIHNjb3Blcyk7XG4gICAgfVxuICAgIGNvbnN0IGNhY2hlID0ge1xuICAgICAgICBbU3ltYm9sLnRvU3RyaW5nVGFnXTogJ09iamVjdCcsXG4gICAgICAgIF9jYWNoZWFibGU6IHRydWUsXG4gICAgICAgIF9zY29wZXM6IHNjb3BlcyxcbiAgICAgICAgX3Jvb3RTY29wZXM6IHJvb3RTY29wZXMsXG4gICAgICAgIF9mYWxsYmFjazogZmFsbGJhY2ssXG4gICAgICAgIF9nZXRUYXJnZXQ6IGdldFRhcmdldCxcbiAgICAgICAgb3ZlcnJpZGU6IChzY29wZSk9Pl9jcmVhdGVSZXNvbHZlcihbXG4gICAgICAgICAgICAgICAgc2NvcGUsXG4gICAgICAgICAgICAgICAgLi4uc2NvcGVzXG4gICAgICAgICAgICBdLCBwcmVmaXhlcywgcm9vdFNjb3BlcywgZmFsbGJhY2spXG4gICAgfTtcbiAgICByZXR1cm4gbmV3IFByb3h5KGNhY2hlLCB7XG4gZGVsZXRlUHJvcGVydHkgKHRhcmdldCwgcHJvcCkge1xuICAgICAgICAgICAgZGVsZXRlIHRhcmdldFtwcm9wXTtcbiAgICAgICAgICAgIGRlbGV0ZSB0YXJnZXQuX2tleXM7XG4gICAgICAgICAgICBkZWxldGUgc2NvcGVzWzBdW3Byb3BdO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG4gZ2V0ICh0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgICAgIHJldHVybiBfY2FjaGVkKHRhcmdldCwgcHJvcCwgKCk9Pl9yZXNvbHZlV2l0aFByZWZpeGVzKHByb3AsIHByZWZpeGVzLCBzY29wZXMsIHRhcmdldCkpO1xuICAgICAgICB9LFxuIGdldE93blByb3BlcnR5RGVzY3JpcHRvciAodGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0Ll9zY29wZXNbMF0sIHByb3ApO1xuICAgICAgICB9LFxuIGdldFByb3RvdHlwZU9mICgpIHtcbiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHNjb3Blc1swXSk7XG4gICAgICAgIH0sXG4gaGFzICh0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRLZXlzRnJvbUFsbFNjb3Blcyh0YXJnZXQpLmluY2x1ZGVzKHByb3ApO1xuICAgICAgICB9LFxuIG93bktleXMgKHRhcmdldCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldEtleXNGcm9tQWxsU2NvcGVzKHRhcmdldCk7XG4gICAgICAgIH0sXG4gc2V0ICh0YXJnZXQsIHByb3AsIHZhbHVlKSB7XG4gICAgICAgICAgICBjb25zdCBzdG9yYWdlID0gdGFyZ2V0Ll9zdG9yYWdlIHx8ICh0YXJnZXQuX3N0b3JhZ2UgPSBnZXRUYXJnZXQoKSk7XG4gICAgICAgICAgICB0YXJnZXRbcHJvcF0gPSBzdG9yYWdlW3Byb3BdID0gdmFsdWU7XG4gICAgICAgICAgICBkZWxldGUgdGFyZ2V0Ll9rZXlzO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbiBmdW5jdGlvbiBfYXR0YWNoQ29udGV4dChwcm94eSwgY29udGV4dCwgc3ViUHJveHksIGRlc2NyaXB0b3JEZWZhdWx0cykge1xuICAgIGNvbnN0IGNhY2hlID0ge1xuICAgICAgICBfY2FjaGVhYmxlOiBmYWxzZSxcbiAgICAgICAgX3Byb3h5OiBwcm94eSxcbiAgICAgICAgX2NvbnRleHQ6IGNvbnRleHQsXG4gICAgICAgIF9zdWJQcm94eTogc3ViUHJveHksXG4gICAgICAgIF9zdGFjazogbmV3IFNldCgpLFxuICAgICAgICBfZGVzY3JpcHRvcnM6IF9kZXNjcmlwdG9ycyhwcm94eSwgZGVzY3JpcHRvckRlZmF1bHRzKSxcbiAgICAgICAgc2V0Q29udGV4dDogKGN0eCk9Pl9hdHRhY2hDb250ZXh0KHByb3h5LCBjdHgsIHN1YlByb3h5LCBkZXNjcmlwdG9yRGVmYXVsdHMpLFxuICAgICAgICBvdmVycmlkZTogKHNjb3BlKT0+X2F0dGFjaENvbnRleHQocHJveHkub3ZlcnJpZGUoc2NvcGUpLCBjb250ZXh0LCBzdWJQcm94eSwgZGVzY3JpcHRvckRlZmF1bHRzKVxuICAgIH07XG4gICAgcmV0dXJuIG5ldyBQcm94eShjYWNoZSwge1xuIGRlbGV0ZVByb3BlcnR5ICh0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0YXJnZXRbcHJvcF07XG4gICAgICAgICAgICBkZWxldGUgcHJveHlbcHJvcF07XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiBnZXQgKHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBfY2FjaGVkKHRhcmdldCwgcHJvcCwgKCk9Pl9yZXNvbHZlV2l0aENvbnRleHQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikpO1xuICAgICAgICB9LFxuIGdldE93blByb3BlcnR5RGVzY3JpcHRvciAodGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0Ll9kZXNjcmlwdG9ycy5hbGxLZXlzID8gUmVmbGVjdC5oYXMocHJveHksIHByb3ApID8ge1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICB9IDogdW5kZWZpbmVkIDogUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocHJveHksIHByb3ApO1xuICAgICAgICB9LFxuIGdldFByb3RvdHlwZU9mICgpIHtcbiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHByb3h5KTtcbiAgICAgICAgfSxcbiBoYXMgKHRhcmdldCwgcHJvcCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuaGFzKHByb3h5LCBwcm9wKTtcbiAgICAgICAgfSxcbiBvd25LZXlzICgpIHtcbiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0Lm93bktleXMocHJveHkpO1xuICAgICAgICB9LFxuIHNldCAodGFyZ2V0LCBwcm9wLCB2YWx1ZSkge1xuICAgICAgICAgICAgcHJveHlbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIGRlbGV0ZSB0YXJnZXRbcHJvcF07XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuIGZ1bmN0aW9uIF9kZXNjcmlwdG9ycyhwcm94eSwgZGVmYXVsdHMgPSB7XG4gICAgc2NyaXB0YWJsZTogdHJ1ZSxcbiAgICBpbmRleGFibGU6IHRydWVcbn0pIHtcbiAgICBjb25zdCB7IF9zY3JpcHRhYmxlID1kZWZhdWx0cy5zY3JpcHRhYmxlICwgX2luZGV4YWJsZSA9ZGVmYXVsdHMuaW5kZXhhYmxlICwgX2FsbEtleXMgPWRlZmF1bHRzLmFsbEtleXMgIH0gPSBwcm94eTtcbiAgICByZXR1cm4ge1xuICAgICAgICBhbGxLZXlzOiBfYWxsS2V5cyxcbiAgICAgICAgc2NyaXB0YWJsZTogX3NjcmlwdGFibGUsXG4gICAgICAgIGluZGV4YWJsZTogX2luZGV4YWJsZSxcbiAgICAgICAgaXNTY3JpcHRhYmxlOiBpc0Z1bmN0aW9uKF9zY3JpcHRhYmxlKSA/IF9zY3JpcHRhYmxlIDogKCk9Pl9zY3JpcHRhYmxlLFxuICAgICAgICBpc0luZGV4YWJsZTogaXNGdW5jdGlvbihfaW5kZXhhYmxlKSA/IF9pbmRleGFibGUgOiAoKT0+X2luZGV4YWJsZVxuICAgIH07XG59XG5jb25zdCByZWFkS2V5ID0gKHByZWZpeCwgbmFtZSk9PnByZWZpeCA/IHByZWZpeCArIF9jYXBpdGFsaXplKG5hbWUpIDogbmFtZTtcbmNvbnN0IG5lZWRzU3ViUmVzb2x2ZXIgPSAocHJvcCwgdmFsdWUpPT5pc09iamVjdCh2YWx1ZSkgJiYgcHJvcCAhPT0gJ2FkYXB0ZXJzJyAmJiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKSA9PT0gbnVsbCB8fCB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KTtcbmZ1bmN0aW9uIF9jYWNoZWQodGFyZ2V0LCBwcm9wLCByZXNvbHZlKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIHByb3ApKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXRbcHJvcF07XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlID0gcmVzb2x2ZSgpO1xuICAgIHRhcmdldFtwcm9wXSA9IHZhbHVlO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIF9yZXNvbHZlV2l0aENvbnRleHQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xuICAgIGNvbnN0IHsgX3Byb3h5ICwgX2NvbnRleHQgLCBfc3ViUHJveHkgLCBfZGVzY3JpcHRvcnM6IGRlc2NyaXB0b3JzICB9ID0gdGFyZ2V0O1xuICAgIGxldCB2YWx1ZSA9IF9wcm94eVtwcm9wXTtcbiAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkgJiYgZGVzY3JpcHRvcnMuaXNTY3JpcHRhYmxlKHByb3ApKSB7XG4gICAgICAgIHZhbHVlID0gX3Jlc29sdmVTY3JpcHRhYmxlKHByb3AsIHZhbHVlLCB0YXJnZXQsIHJlY2VpdmVyKTtcbiAgICB9XG4gICAgaWYgKGlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCkge1xuICAgICAgICB2YWx1ZSA9IF9yZXNvbHZlQXJyYXkocHJvcCwgdmFsdWUsIHRhcmdldCwgZGVzY3JpcHRvcnMuaXNJbmRleGFibGUpO1xuICAgIH1cbiAgICBpZiAobmVlZHNTdWJSZXNvbHZlcihwcm9wLCB2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSBfYXR0YWNoQ29udGV4dCh2YWx1ZSwgX2NvbnRleHQsIF9zdWJQcm94eSAmJiBfc3ViUHJveHlbcHJvcF0sIGRlc2NyaXB0b3JzKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gX3Jlc29sdmVTY3JpcHRhYmxlKHByb3AsIHZhbHVlLCB0YXJnZXQsIHJlY2VpdmVyKSB7XG4gICAgY29uc3QgeyBfcHJveHkgLCBfY29udGV4dCAsIF9zdWJQcm94eSAsIF9zdGFjayAgfSA9IHRhcmdldDtcbiAgICBpZiAoX3N0YWNrLmhhcyhwcm9wKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlY3Vyc2lvbiBkZXRlY3RlZDogJyArIEFycmF5LmZyb20oX3N0YWNrKS5qb2luKCctPicpICsgJy0+JyArIHByb3ApO1xuICAgIH1cbiAgICBfc3RhY2suYWRkKHByb3ApO1xuICAgIHZhbHVlID0gdmFsdWUoX2NvbnRleHQsIF9zdWJQcm94eSB8fCByZWNlaXZlcik7XG4gICAgX3N0YWNrLmRlbGV0ZShwcm9wKTtcbiAgICBpZiAobmVlZHNTdWJSZXNvbHZlcihwcm9wLCB2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSBjcmVhdGVTdWJSZXNvbHZlcihfcHJveHkuX3Njb3BlcywgX3Byb3h5LCBwcm9wLCB2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIF9yZXNvbHZlQXJyYXkocHJvcCwgdmFsdWUsIHRhcmdldCwgaXNJbmRleGFibGUpIHtcbiAgICBjb25zdCB7IF9wcm94eSAsIF9jb250ZXh0ICwgX3N1YlByb3h5ICwgX2Rlc2NyaXB0b3JzOiBkZXNjcmlwdG9ycyAgfSA9IHRhcmdldDtcbiAgICBpZiAoZGVmaW5lZChfY29udGV4dC5pbmRleCkgJiYgaXNJbmRleGFibGUocHJvcCkpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZVtfY29udGV4dC5pbmRleCAlIHZhbHVlLmxlbmd0aF07XG4gICAgfSBlbHNlIGlmIChpc09iamVjdCh2YWx1ZVswXSkpIHtcbiAgICAgICAgY29uc3QgYXJyID0gdmFsdWU7XG4gICAgICAgIGNvbnN0IHNjb3BlcyA9IF9wcm94eS5fc2NvcGVzLmZpbHRlcigocyk9PnMgIT09IGFycik7XG4gICAgICAgIHZhbHVlID0gW107XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBhcnIpe1xuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZXIgPSBjcmVhdGVTdWJSZXNvbHZlcihzY29wZXMsIF9wcm94eSwgcHJvcCwgaXRlbSk7XG4gICAgICAgICAgICB2YWx1ZS5wdXNoKF9hdHRhY2hDb250ZXh0KHJlc29sdmVyLCBfY29udGV4dCwgX3N1YlByb3h5ICYmIF9zdWJQcm94eVtwcm9wXSwgZGVzY3JpcHRvcnMpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiByZXNvbHZlRmFsbGJhY2soZmFsbGJhY2ssIHByb3AsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oZmFsbGJhY2spID8gZmFsbGJhY2socHJvcCwgdmFsdWUpIDogZmFsbGJhY2s7XG59XG5jb25zdCBnZXRTY29wZSA9IChrZXksIHBhcmVudCk9PmtleSA9PT0gdHJ1ZSA/IHBhcmVudCA6IHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnID8gcmVzb2x2ZU9iamVjdEtleShwYXJlbnQsIGtleSkgOiB1bmRlZmluZWQ7XG5mdW5jdGlvbiBhZGRTY29wZXMoc2V0LCBwYXJlbnRTY29wZXMsIGtleSwgcGFyZW50RmFsbGJhY2ssIHZhbHVlKSB7XG4gICAgZm9yIChjb25zdCBwYXJlbnQgb2YgcGFyZW50U2NvcGVzKXtcbiAgICAgICAgY29uc3Qgc2NvcGUgPSBnZXRTY29wZShrZXksIHBhcmVudCk7XG4gICAgICAgIGlmIChzY29wZSkge1xuICAgICAgICAgICAgc2V0LmFkZChzY29wZSk7XG4gICAgICAgICAgICBjb25zdCBmYWxsYmFjayA9IHJlc29sdmVGYWxsYmFjayhzY29wZS5fZmFsbGJhY2ssIGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgaWYgKGRlZmluZWQoZmFsbGJhY2spICYmIGZhbGxiYWNrICE9PSBrZXkgJiYgZmFsbGJhY2sgIT09IHBhcmVudEZhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbGxiYWNrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHNjb3BlID09PSBmYWxzZSAmJiBkZWZpbmVkKHBhcmVudEZhbGxiYWNrKSAmJiBrZXkgIT09IHBhcmVudEZhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBjcmVhdGVTdWJSZXNvbHZlcihwYXJlbnRTY29wZXMsIHJlc29sdmVyLCBwcm9wLCB2YWx1ZSkge1xuICAgIGNvbnN0IHJvb3RTY29wZXMgPSByZXNvbHZlci5fcm9vdFNjb3BlcztcbiAgICBjb25zdCBmYWxsYmFjayA9IHJlc29sdmVGYWxsYmFjayhyZXNvbHZlci5fZmFsbGJhY2ssIHByb3AsIHZhbHVlKTtcbiAgICBjb25zdCBhbGxTY29wZXMgPSBbXG4gICAgICAgIC4uLnBhcmVudFNjb3BlcyxcbiAgICAgICAgLi4ucm9vdFNjb3Blc1xuICAgIF07XG4gICAgY29uc3Qgc2V0ID0gbmV3IFNldCgpO1xuICAgIHNldC5hZGQodmFsdWUpO1xuICAgIGxldCBrZXkgPSBhZGRTY29wZXNGcm9tS2V5KHNldCwgYWxsU2NvcGVzLCBwcm9wLCBmYWxsYmFjayB8fCBwcm9wLCB2YWx1ZSk7XG4gICAgaWYgKGtleSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChkZWZpbmVkKGZhbGxiYWNrKSAmJiBmYWxsYmFjayAhPT0gcHJvcCkge1xuICAgICAgICBrZXkgPSBhZGRTY29wZXNGcm9tS2V5KHNldCwgYWxsU2NvcGVzLCBmYWxsYmFjaywga2V5LCB2YWx1ZSk7XG4gICAgICAgIGlmIChrZXkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gX2NyZWF0ZVJlc29sdmVyKEFycmF5LmZyb20oc2V0KSwgW1xuICAgICAgICAnJ1xuICAgIF0sIHJvb3RTY29wZXMsIGZhbGxiYWNrLCAoKT0+c3ViR2V0VGFyZ2V0KHJlc29sdmVyLCBwcm9wLCB2YWx1ZSkpO1xufVxuZnVuY3Rpb24gYWRkU2NvcGVzRnJvbUtleShzZXQsIGFsbFNjb3Blcywga2V5LCBmYWxsYmFjaywgaXRlbSkge1xuICAgIHdoaWxlKGtleSl7XG4gICAgICAgIGtleSA9IGFkZFNjb3BlcyhzZXQsIGFsbFNjb3Blcywga2V5LCBmYWxsYmFjaywgaXRlbSk7XG4gICAgfVxuICAgIHJldHVybiBrZXk7XG59XG5mdW5jdGlvbiBzdWJHZXRUYXJnZXQocmVzb2x2ZXIsIHByb3AsIHZhbHVlKSB7XG4gICAgY29uc3QgcGFyZW50ID0gcmVzb2x2ZXIuX2dldFRhcmdldCgpO1xuICAgIGlmICghKHByb3AgaW4gcGFyZW50KSkge1xuICAgICAgICBwYXJlbnRbcHJvcF0gPSB7fTtcbiAgICB9XG4gICAgY29uc3QgdGFyZ2V0ID0gcGFyZW50W3Byb3BdO1xuICAgIGlmIChpc0FycmF5KHRhcmdldCkgJiYgaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldCB8fCB7fTtcbn1cbmZ1bmN0aW9uIF9yZXNvbHZlV2l0aFByZWZpeGVzKHByb3AsIHByZWZpeGVzLCBzY29wZXMsIHByb3h5KSB7XG4gICAgbGV0IHZhbHVlO1xuICAgIGZvciAoY29uc3QgcHJlZml4IG9mIHByZWZpeGVzKXtcbiAgICAgICAgdmFsdWUgPSBfcmVzb2x2ZShyZWFkS2V5KHByZWZpeCwgcHJvcCksIHNjb3Blcyk7XG4gICAgICAgIGlmIChkZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5lZWRzU3ViUmVzb2x2ZXIocHJvcCwgdmFsdWUpID8gY3JlYXRlU3ViUmVzb2x2ZXIoc2NvcGVzLCBwcm94eSwgcHJvcCwgdmFsdWUpIDogdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBfcmVzb2x2ZShrZXksIHNjb3Blcykge1xuICAgIGZvciAoY29uc3Qgc2NvcGUgb2Ygc2NvcGVzKXtcbiAgICAgICAgaWYgKCFzY29wZSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWUgPSBzY29wZVtrZXldO1xuICAgICAgICBpZiAoZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGdldEtleXNGcm9tQWxsU2NvcGVzKHRhcmdldCkge1xuICAgIGxldCBrZXlzID0gdGFyZ2V0Ll9rZXlzO1xuICAgIGlmICgha2V5cykge1xuICAgICAgICBrZXlzID0gdGFyZ2V0Ll9rZXlzID0gcmVzb2x2ZUtleXNGcm9tQWxsU2NvcGVzKHRhcmdldC5fc2NvcGVzKTtcbiAgICB9XG4gICAgcmV0dXJuIGtleXM7XG59XG5mdW5jdGlvbiByZXNvbHZlS2V5c0Zyb21BbGxTY29wZXMoc2NvcGVzKSB7XG4gICAgY29uc3Qgc2V0ID0gbmV3IFNldCgpO1xuICAgIGZvciAoY29uc3Qgc2NvcGUgb2Ygc2NvcGVzKXtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoc2NvcGUpLmZpbHRlcigoayk9PiFrLnN0YXJ0c1dpdGgoJ18nKSkpe1xuICAgICAgICAgICAgc2V0LmFkZChrZXkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBBcnJheS5mcm9tKHNldCk7XG59XG5mdW5jdGlvbiBfcGFyc2VPYmplY3REYXRhUmFkaWFsU2NhbGUobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgY29uc3QgeyBpU2NhbGUgIH0gPSBtZXRhO1xuICAgIGNvbnN0IHsga2V5ID0ncicgIH0gPSB0aGlzLl9wYXJzaW5nO1xuICAgIGNvbnN0IHBhcnNlZCA9IG5ldyBBcnJheShjb3VudCk7XG4gICAgbGV0IGksIGlsZW4sIGluZGV4LCBpdGVtO1xuICAgIGZvcihpID0gMCwgaWxlbiA9IGNvdW50OyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgaW5kZXggPSBpICsgc3RhcnQ7XG4gICAgICAgIGl0ZW0gPSBkYXRhW2luZGV4XTtcbiAgICAgICAgcGFyc2VkW2ldID0ge1xuICAgICAgICAgICAgcjogaVNjYWxlLnBhcnNlKHJlc29sdmVPYmplY3RLZXkoaXRlbSwga2V5KSwgaW5kZXgpXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBwYXJzZWQ7XG59XG5cbmNvbnN0IEVQU0lMT04gPSBOdW1iZXIuRVBTSUxPTiB8fCAxZS0xNDtcbmNvbnN0IGdldFBvaW50ID0gKHBvaW50cywgaSk9PmkgPCBwb2ludHMubGVuZ3RoICYmICFwb2ludHNbaV0uc2tpcCAmJiBwb2ludHNbaV07XG5jb25zdCBnZXRWYWx1ZUF4aXMgPSAoaW5kZXhBeGlzKT0+aW5kZXhBeGlzID09PSAneCcgPyAneScgOiAneCc7XG5mdW5jdGlvbiBzcGxpbmVDdXJ2ZShmaXJzdFBvaW50LCBtaWRkbGVQb2ludCwgYWZ0ZXJQb2ludCwgdCkge1xuICAgIC8vIFByb3BzIHRvIFJvYiBTcGVuY2VyIGF0IHNjYWxlZCBpbm5vdmF0aW9uIGZvciBoaXMgcG9zdCBvbiBzcGxpbmluZyBiZXR3ZWVuIHBvaW50c1xuICAgIC8vIGh0dHA6Ly9zY2FsZWRpbm5vdmF0aW9uLmNvbS9hbmFseXRpY3Mvc3BsaW5lcy9hYm91dFNwbGluZXMuaHRtbFxuICAgIC8vIFRoaXMgZnVuY3Rpb24gbXVzdCBhbHNvIHJlc3BlY3QgXCJza2lwcGVkXCIgcG9pbnRzXG4gICAgY29uc3QgcHJldmlvdXMgPSBmaXJzdFBvaW50LnNraXAgPyBtaWRkbGVQb2ludCA6IGZpcnN0UG9pbnQ7XG4gICAgY29uc3QgY3VycmVudCA9IG1pZGRsZVBvaW50O1xuICAgIGNvbnN0IG5leHQgPSBhZnRlclBvaW50LnNraXAgPyBtaWRkbGVQb2ludCA6IGFmdGVyUG9pbnQ7XG4gICAgY29uc3QgZDAxID0gZGlzdGFuY2VCZXR3ZWVuUG9pbnRzKGN1cnJlbnQsIHByZXZpb3VzKTtcbiAgICBjb25zdCBkMTIgPSBkaXN0YW5jZUJldHdlZW5Qb2ludHMobmV4dCwgY3VycmVudCk7XG4gICAgbGV0IHMwMSA9IGQwMSAvIChkMDEgKyBkMTIpO1xuICAgIGxldCBzMTIgPSBkMTIgLyAoZDAxICsgZDEyKTtcbiAgICAvLyBJZiBhbGwgcG9pbnRzIGFyZSB0aGUgc2FtZSwgczAxICYgczAyIHdpbGwgYmUgaW5mXG4gICAgczAxID0gaXNOYU4oczAxKSA/IDAgOiBzMDE7XG4gICAgczEyID0gaXNOYU4oczEyKSA/IDAgOiBzMTI7XG4gICAgY29uc3QgZmEgPSB0ICogczAxOyAvLyBzY2FsaW5nIGZhY3RvciBmb3IgdHJpYW5nbGUgVGFcbiAgICBjb25zdCBmYiA9IHQgKiBzMTI7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcHJldmlvdXM6IHtcbiAgICAgICAgICAgIHg6IGN1cnJlbnQueCAtIGZhICogKG5leHQueCAtIHByZXZpb3VzLngpLFxuICAgICAgICAgICAgeTogY3VycmVudC55IC0gZmEgKiAobmV4dC55IC0gcHJldmlvdXMueSlcbiAgICAgICAgfSxcbiAgICAgICAgbmV4dDoge1xuICAgICAgICAgICAgeDogY3VycmVudC54ICsgZmIgKiAobmV4dC54IC0gcHJldmlvdXMueCksXG4gICAgICAgICAgICB5OiBjdXJyZW50LnkgKyBmYiAqIChuZXh0LnkgLSBwcmV2aW91cy55KVxuICAgICAgICB9XG4gICAgfTtcbn1cbi8qKlxuICogQWRqdXN0IHRhbmdlbnRzIHRvIGVuc3VyZSBtb25vdG9uaWMgcHJvcGVydGllc1xuICovIGZ1bmN0aW9uIG1vbm90b25lQWRqdXN0KHBvaW50cywgZGVsdGFLLCBtSykge1xuICAgIGNvbnN0IHBvaW50c0xlbiA9IHBvaW50cy5sZW5ndGg7XG4gICAgbGV0IGFscGhhSywgYmV0YUssIHRhdUssIHNxdWFyZWRNYWduaXR1ZGUsIHBvaW50Q3VycmVudDtcbiAgICBsZXQgcG9pbnRBZnRlciA9IGdldFBvaW50KHBvaW50cywgMCk7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHBvaW50c0xlbiAtIDE7ICsraSl7XG4gICAgICAgIHBvaW50Q3VycmVudCA9IHBvaW50QWZ0ZXI7XG4gICAgICAgIHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIGkgKyAxKTtcbiAgICAgICAgaWYgKCFwb2ludEN1cnJlbnQgfHwgIXBvaW50QWZ0ZXIpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhbG1vc3RFcXVhbHMoZGVsdGFLW2ldLCAwLCBFUFNJTE9OKSkge1xuICAgICAgICAgICAgbUtbaV0gPSBtS1tpICsgMV0gPSAwO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgYWxwaGFLID0gbUtbaV0gLyBkZWx0YUtbaV07XG4gICAgICAgIGJldGFLID0gbUtbaSArIDFdIC8gZGVsdGFLW2ldO1xuICAgICAgICBzcXVhcmVkTWFnbml0dWRlID0gTWF0aC5wb3coYWxwaGFLLCAyKSArIE1hdGgucG93KGJldGFLLCAyKTtcbiAgICAgICAgaWYgKHNxdWFyZWRNYWduaXR1ZGUgPD0gOSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdGF1SyA9IDMgLyBNYXRoLnNxcnQoc3F1YXJlZE1hZ25pdHVkZSk7XG4gICAgICAgIG1LW2ldID0gYWxwaGFLICogdGF1SyAqIGRlbHRhS1tpXTtcbiAgICAgICAgbUtbaSArIDFdID0gYmV0YUsgKiB0YXVLICogZGVsdGFLW2ldO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG1vbm90b25lQ29tcHV0ZShwb2ludHMsIG1LLCBpbmRleEF4aXMgPSAneCcpIHtcbiAgICBjb25zdCB2YWx1ZUF4aXMgPSBnZXRWYWx1ZUF4aXMoaW5kZXhBeGlzKTtcbiAgICBjb25zdCBwb2ludHNMZW4gPSBwb2ludHMubGVuZ3RoO1xuICAgIGxldCBkZWx0YSwgcG9pbnRCZWZvcmUsIHBvaW50Q3VycmVudDtcbiAgICBsZXQgcG9pbnRBZnRlciA9IGdldFBvaW50KHBvaW50cywgMCk7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHBvaW50c0xlbjsgKytpKXtcbiAgICAgICAgcG9pbnRCZWZvcmUgPSBwb2ludEN1cnJlbnQ7XG4gICAgICAgIHBvaW50Q3VycmVudCA9IHBvaW50QWZ0ZXI7XG4gICAgICAgIHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIGkgKyAxKTtcbiAgICAgICAgaWYgKCFwb2ludEN1cnJlbnQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGlQaXhlbCA9IHBvaW50Q3VycmVudFtpbmRleEF4aXNdO1xuICAgICAgICBjb25zdCB2UGl4ZWwgPSBwb2ludEN1cnJlbnRbdmFsdWVBeGlzXTtcbiAgICAgICAgaWYgKHBvaW50QmVmb3JlKSB7XG4gICAgICAgICAgICBkZWx0YSA9IChpUGl4ZWwgLSBwb2ludEJlZm9yZVtpbmRleEF4aXNdKSAvIDM7XG4gICAgICAgICAgICBwb2ludEN1cnJlbnRbYGNwMSR7aW5kZXhBeGlzfWBdID0gaVBpeGVsIC0gZGVsdGE7XG4gICAgICAgICAgICBwb2ludEN1cnJlbnRbYGNwMSR7dmFsdWVBeGlzfWBdID0gdlBpeGVsIC0gZGVsdGEgKiBtS1tpXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9pbnRBZnRlcikge1xuICAgICAgICAgICAgZGVsdGEgPSAocG9pbnRBZnRlcltpbmRleEF4aXNdIC0gaVBpeGVsKSAvIDM7XG4gICAgICAgICAgICBwb2ludEN1cnJlbnRbYGNwMiR7aW5kZXhBeGlzfWBdID0gaVBpeGVsICsgZGVsdGE7XG4gICAgICAgICAgICBwb2ludEN1cnJlbnRbYGNwMiR7dmFsdWVBeGlzfWBdID0gdlBpeGVsICsgZGVsdGEgKiBtS1tpXTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBjYWxjdWxhdGVzIELDqXppZXIgY29udHJvbCBwb2ludHMgaW4gYSBzaW1pbGFyIHdheSB0aGFuIHxzcGxpbmVDdXJ2ZXwsXG4gKiBidXQgcHJlc2VydmVzIG1vbm90b25pY2l0eSBvZiB0aGUgcHJvdmlkZWQgZGF0YSBhbmQgZW5zdXJlcyBubyBsb2NhbCBleHRyZW11bXMgYXJlIGFkZGVkXG4gKiBiZXR3ZWVuIHRoZSBkYXRhc2V0IGRpc2NyZXRlIHBvaW50cyBkdWUgdG8gdGhlIGludGVycG9sYXRpb24uXG4gKiBTZWUgOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Nb25vdG9uZV9jdWJpY19pbnRlcnBvbGF0aW9uXG4gKi8gZnVuY3Rpb24gc3BsaW5lQ3VydmVNb25vdG9uZShwb2ludHMsIGluZGV4QXhpcyA9ICd4Jykge1xuICAgIGNvbnN0IHZhbHVlQXhpcyA9IGdldFZhbHVlQXhpcyhpbmRleEF4aXMpO1xuICAgIGNvbnN0IHBvaW50c0xlbiA9IHBvaW50cy5sZW5ndGg7XG4gICAgY29uc3QgZGVsdGFLID0gQXJyYXkocG9pbnRzTGVuKS5maWxsKDApO1xuICAgIGNvbnN0IG1LID0gQXJyYXkocG9pbnRzTGVuKTtcbiAgICAvLyBDYWxjdWxhdGUgc2xvcGVzIChkZWx0YUspIGFuZCBpbml0aWFsaXplIHRhbmdlbnRzIChtSylcbiAgICBsZXQgaSwgcG9pbnRCZWZvcmUsIHBvaW50Q3VycmVudDtcbiAgICBsZXQgcG9pbnRBZnRlciA9IGdldFBvaW50KHBvaW50cywgMCk7XG4gICAgZm9yKGkgPSAwOyBpIDwgcG9pbnRzTGVuOyArK2kpe1xuICAgICAgICBwb2ludEJlZm9yZSA9IHBvaW50Q3VycmVudDtcbiAgICAgICAgcG9pbnRDdXJyZW50ID0gcG9pbnRBZnRlcjtcbiAgICAgICAgcG9pbnRBZnRlciA9IGdldFBvaW50KHBvaW50cywgaSArIDEpO1xuICAgICAgICBpZiAoIXBvaW50Q3VycmVudCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvaW50QWZ0ZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHNsb3BlRGVsdGEgPSBwb2ludEFmdGVyW2luZGV4QXhpc10gLSBwb2ludEN1cnJlbnRbaW5kZXhBeGlzXTtcbiAgICAgICAgICAgIC8vIEluIHRoZSBjYXNlIG9mIHR3byBwb2ludHMgdGhhdCBhcHBlYXIgYXQgdGhlIHNhbWUgeCBwaXhlbCwgc2xvcGVEZWx0YVggaXMgMFxuICAgICAgICAgICAgZGVsdGFLW2ldID0gc2xvcGVEZWx0YSAhPT0gMCA/IChwb2ludEFmdGVyW3ZhbHVlQXhpc10gLSBwb2ludEN1cnJlbnRbdmFsdWVBeGlzXSkgLyBzbG9wZURlbHRhIDogMDtcbiAgICAgICAgfVxuICAgICAgICBtS1tpXSA9ICFwb2ludEJlZm9yZSA/IGRlbHRhS1tpXSA6ICFwb2ludEFmdGVyID8gZGVsdGFLW2kgLSAxXSA6IHNpZ24oZGVsdGFLW2kgLSAxXSkgIT09IHNpZ24oZGVsdGFLW2ldKSA/IDAgOiAoZGVsdGFLW2kgLSAxXSArIGRlbHRhS1tpXSkgLyAyO1xuICAgIH1cbiAgICBtb25vdG9uZUFkanVzdChwb2ludHMsIGRlbHRhSywgbUspO1xuICAgIG1vbm90b25lQ29tcHV0ZShwb2ludHMsIG1LLCBpbmRleEF4aXMpO1xufVxuZnVuY3Rpb24gY2FwQ29udHJvbFBvaW50KHB0LCBtaW4sIG1heCkge1xuICAgIHJldHVybiBNYXRoLm1heChNYXRoLm1pbihwdCwgbWF4KSwgbWluKTtcbn1cbmZ1bmN0aW9uIGNhcEJlemllclBvaW50cyhwb2ludHMsIGFyZWEpIHtcbiAgICBsZXQgaSwgaWxlbiwgcG9pbnQsIGluQXJlYSwgaW5BcmVhUHJldjtcbiAgICBsZXQgaW5BcmVhTmV4dCA9IF9pc1BvaW50SW5BcmVhKHBvaW50c1swXSwgYXJlYSk7XG4gICAgZm9yKGkgPSAwLCBpbGVuID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGluQXJlYVByZXYgPSBpbkFyZWE7XG4gICAgICAgIGluQXJlYSA9IGluQXJlYU5leHQ7XG4gICAgICAgIGluQXJlYU5leHQgPSBpIDwgaWxlbiAtIDEgJiYgX2lzUG9pbnRJbkFyZWEocG9pbnRzW2kgKyAxXSwgYXJlYSk7XG4gICAgICAgIGlmICghaW5BcmVhKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgICAgaWYgKGluQXJlYVByZXYpIHtcbiAgICAgICAgICAgIHBvaW50LmNwMXggPSBjYXBDb250cm9sUG9pbnQocG9pbnQuY3AxeCwgYXJlYS5sZWZ0LCBhcmVhLnJpZ2h0KTtcbiAgICAgICAgICAgIHBvaW50LmNwMXkgPSBjYXBDb250cm9sUG9pbnQocG9pbnQuY3AxeSwgYXJlYS50b3AsIGFyZWEuYm90dG9tKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5BcmVhTmV4dCkge1xuICAgICAgICAgICAgcG9pbnQuY3AyeCA9IGNhcENvbnRyb2xQb2ludChwb2ludC5jcDJ4LCBhcmVhLmxlZnQsIGFyZWEucmlnaHQpO1xuICAgICAgICAgICAgcG9pbnQuY3AyeSA9IGNhcENvbnRyb2xQb2ludChwb2ludC5jcDJ5LCBhcmVhLnRvcCwgYXJlYS5ib3R0b20pO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF91cGRhdGVCZXppZXJDb250cm9sUG9pbnRzKHBvaW50cywgb3B0aW9ucywgYXJlYSwgbG9vcCwgaW5kZXhBeGlzKSB7XG4gICAgbGV0IGksIGlsZW4sIHBvaW50LCBjb250cm9sUG9pbnRzO1xuICAgIC8vIE9ubHkgY29uc2lkZXIgcG9pbnRzIHRoYXQgYXJlIGRyYXduIGluIGNhc2UgdGhlIHNwYW5HYXBzIG9wdGlvbiBpcyB1c2VkXG4gICAgaWYgKG9wdGlvbnMuc3BhbkdhcHMpIHtcbiAgICAgICAgcG9pbnRzID0gcG9pbnRzLmZpbHRlcigocHQpPT4hcHQuc2tpcCk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmN1YmljSW50ZXJwb2xhdGlvbk1vZGUgPT09ICdtb25vdG9uZScpIHtcbiAgICAgICAgc3BsaW5lQ3VydmVNb25vdG9uZShwb2ludHMsIGluZGV4QXhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHByZXYgPSBsb29wID8gcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXSA6IHBvaW50c1swXTtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgICAgICAgIGNvbnRyb2xQb2ludHMgPSBzcGxpbmVDdXJ2ZShwcmV2LCBwb2ludCwgcG9pbnRzW01hdGgubWluKGkgKyAxLCBpbGVuIC0gKGxvb3AgPyAwIDogMSkpICUgaWxlbl0sIG9wdGlvbnMudGVuc2lvbik7XG4gICAgICAgICAgICBwb2ludC5jcDF4ID0gY29udHJvbFBvaW50cy5wcmV2aW91cy54O1xuICAgICAgICAgICAgcG9pbnQuY3AxeSA9IGNvbnRyb2xQb2ludHMucHJldmlvdXMueTtcbiAgICAgICAgICAgIHBvaW50LmNwMnggPSBjb250cm9sUG9pbnRzLm5leHQueDtcbiAgICAgICAgICAgIHBvaW50LmNwMnkgPSBjb250cm9sUG9pbnRzLm5leHQueTtcbiAgICAgICAgICAgIHByZXYgPSBwb2ludDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAob3B0aW9ucy5jYXBCZXppZXJQb2ludHMpIHtcbiAgICAgICAgY2FwQmV6aWVyUG9pbnRzKHBvaW50cywgYXJlYSk7XG4gICAgfVxufVxuXG4vKipcbiAqIE5vdGU6IHR5cGVkZWZzIGFyZSBhdXRvLWV4cG9ydGVkLCBzbyB1c2UgYSBtYWRlLXVwIGBkb21gIG5hbWVzcGFjZSB3aGVyZVxuICogbmVjZXNzYXJ5IHRvIGF2b2lkIGR1cGxpY2F0ZXMgd2l0aCBgZXhwb3J0ICogZnJvbSAnLi9oZWxwZXJzYDsgc2VlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzQ2MDExXG4gKiBAdHlwZWRlZiB7IGltcG9ydCgnLi4vY29yZS9jb3JlLmNvbnRyb2xsZXIuanMnKS5kZWZhdWx0IH0gZG9tLkNoYXJ0XG4gKiBAdHlwZWRlZiB7IGltcG9ydCgnLi4vLi4vdHlwZXMnKS5DaGFydEV2ZW50IH0gQ2hhcnRFdmVudFxuICovIC8qKlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfaXNEb21TdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCc7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2dldFBhcmVudE5vZGUoZG9tTm9kZSkge1xuICAgIGxldCBwYXJlbnQgPSBkb21Ob2RlLnBhcmVudE5vZGU7XG4gICAgaWYgKHBhcmVudCAmJiBwYXJlbnQudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgU2hhZG93Um9vdF0nKSB7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5ob3N0O1xuICAgIH1cbiAgICByZXR1cm4gcGFyZW50O1xufVxuLyoqXG4gKiBjb252ZXJ0IG1heC13aWR0aC9tYXgtaGVpZ2h0IHZhbHVlcyB0aGF0IG1heSBiZSBwZXJjZW50YWdlcyBpbnRvIGEgbnVtYmVyXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIHBhcnNlTWF4U3R5bGUoc3R5bGVWYWx1ZSwgbm9kZSwgcGFyZW50UHJvcGVydHkpIHtcbiAgICBsZXQgdmFsdWVJblBpeGVscztcbiAgICBpZiAodHlwZW9mIHN0eWxlVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhbHVlSW5QaXhlbHMgPSBwYXJzZUludChzdHlsZVZhbHVlLCAxMCk7XG4gICAgICAgIGlmIChzdHlsZVZhbHVlLmluZGV4T2YoJyUnKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIC8vIHBlcmNlbnRhZ2UgKiBzaXplIGluIGRpbWVuc2lvblxuICAgICAgICAgICAgdmFsdWVJblBpeGVscyA9IHZhbHVlSW5QaXhlbHMgLyAxMDAgKiBub2RlLnBhcmVudE5vZGVbcGFyZW50UHJvcGVydHldO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWVJblBpeGVscyA9IHN0eWxlVmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZUluUGl4ZWxzO1xufVxuY29uc3QgZ2V0Q29tcHV0ZWRTdHlsZSA9IChlbGVtZW50KT0+ZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgbnVsbCk7XG5mdW5jdGlvbiBnZXRTdHlsZShlbCwgcHJvcGVydHkpIHtcbiAgICByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZShlbCkuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSk7XG59XG5jb25zdCBwb3NpdGlvbnMgPSBbXG4gICAgJ3RvcCcsXG4gICAgJ3JpZ2h0JyxcbiAgICAnYm90dG9tJyxcbiAgICAnbGVmdCdcbl07XG5mdW5jdGlvbiBnZXRQb3NpdGlvbmVkU3R5bGUoc3R5bGVzLCBzdHlsZSwgc3VmZml4KSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgc3VmZml4ID0gc3VmZml4ID8gJy0nICsgc3VmZml4IDogJyc7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IDQ7IGkrKyl7XG4gICAgICAgIGNvbnN0IHBvcyA9IHBvc2l0aW9uc1tpXTtcbiAgICAgICAgcmVzdWx0W3Bvc10gPSBwYXJzZUZsb2F0KHN0eWxlc1tzdHlsZSArICctJyArIHBvcyArIHN1ZmZpeF0pIHx8IDA7XG4gICAgfVxuICAgIHJlc3VsdC53aWR0aCA9IHJlc3VsdC5sZWZ0ICsgcmVzdWx0LnJpZ2h0O1xuICAgIHJlc3VsdC5oZWlnaHQgPSByZXN1bHQudG9wICsgcmVzdWx0LmJvdHRvbTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuY29uc3QgdXNlT2Zmc2V0UG9zID0gKHgsIHksIHRhcmdldCk9Pih4ID4gMCB8fCB5ID4gMCkgJiYgKCF0YXJnZXQgfHwgIXRhcmdldC5zaGFkb3dSb290KTtcbi8qKlxuICogQHBhcmFtIGVcbiAqIEBwYXJhbSBjYW52YXNcbiAqIEByZXR1cm5zIENhbnZhcyBwb3NpdGlvblxuICovIGZ1bmN0aW9uIGdldENhbnZhc1Bvc2l0aW9uKGUsIGNhbnZhcykge1xuICAgIGNvbnN0IHRvdWNoZXMgPSBlLnRvdWNoZXM7XG4gICAgY29uc3Qgc291cmNlID0gdG91Y2hlcyAmJiB0b3VjaGVzLmxlbmd0aCA/IHRvdWNoZXNbMF0gOiBlO1xuICAgIGNvbnN0IHsgb2Zmc2V0WCAsIG9mZnNldFkgIH0gPSBzb3VyY2U7XG4gICAgbGV0IGJveCA9IGZhbHNlO1xuICAgIGxldCB4LCB5O1xuICAgIGlmICh1c2VPZmZzZXRQb3Mob2Zmc2V0WCwgb2Zmc2V0WSwgZS50YXJnZXQpKSB7XG4gICAgICAgIHggPSBvZmZzZXRYO1xuICAgICAgICB5ID0gb2Zmc2V0WTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCByZWN0ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICB4ID0gc291cmNlLmNsaWVudFggLSByZWN0LmxlZnQ7XG4gICAgICAgIHkgPSBzb3VyY2UuY2xpZW50WSAtIHJlY3QudG9wO1xuICAgICAgICBib3ggPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICB4LFxuICAgICAgICB5LFxuICAgICAgICBib3hcbiAgICB9O1xufVxuLyoqXG4gKiBHZXRzIGFuIGV2ZW50J3MgeCwgeSBjb29yZGluYXRlcywgcmVsYXRpdmUgdG8gdGhlIGNoYXJ0IGFyZWFcbiAqIEBwYXJhbSBldmVudFxuICogQHBhcmFtIGNoYXJ0XG4gKiBAcmV0dXJucyB4IGFuZCB5IGNvb3JkaW5hdGVzIG9mIHRoZSBldmVudFxuICovIGZ1bmN0aW9uIGdldFJlbGF0aXZlUG9zaXRpb24oZXZlbnQsIGNoYXJ0KSB7XG4gICAgaWYgKCduYXRpdmUnIGluIGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICB9XG4gICAgY29uc3QgeyBjYW52YXMgLCBjdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyAgfSA9IGNoYXJ0O1xuICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShjYW52YXMpO1xuICAgIGNvbnN0IGJvcmRlckJveCA9IHN0eWxlLmJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnO1xuICAgIGNvbnN0IHBhZGRpbmdzID0gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlLCAncGFkZGluZycpO1xuICAgIGNvbnN0IGJvcmRlcnMgPSBnZXRQb3NpdGlvbmVkU3R5bGUoc3R5bGUsICdib3JkZXInLCAnd2lkdGgnKTtcbiAgICBjb25zdCB7IHggLCB5ICwgYm94ICB9ID0gZ2V0Q2FudmFzUG9zaXRpb24oZXZlbnQsIGNhbnZhcyk7XG4gICAgY29uc3QgeE9mZnNldCA9IHBhZGRpbmdzLmxlZnQgKyAoYm94ICYmIGJvcmRlcnMubGVmdCk7XG4gICAgY29uc3QgeU9mZnNldCA9IHBhZGRpbmdzLnRvcCArIChib3ggJiYgYm9yZGVycy50b3ApO1xuICAgIGxldCB7IHdpZHRoICwgaGVpZ2h0ICB9ID0gY2hhcnQ7XG4gICAgaWYgKGJvcmRlckJveCkge1xuICAgICAgICB3aWR0aCAtPSBwYWRkaW5ncy53aWR0aCArIGJvcmRlcnMud2lkdGg7XG4gICAgICAgIGhlaWdodCAtPSBwYWRkaW5ncy5oZWlnaHQgKyBib3JkZXJzLmhlaWdodDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogTWF0aC5yb3VuZCgoeCAtIHhPZmZzZXQpIC8gd2lkdGggKiBjYW52YXMud2lkdGggLyBjdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyksXG4gICAgICAgIHk6IE1hdGgucm91bmQoKHkgLSB5T2Zmc2V0KSAvIGhlaWdodCAqIGNhbnZhcy5oZWlnaHQgLyBjdXJyZW50RGV2aWNlUGl4ZWxSYXRpbylcbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0Q29udGFpbmVyU2l6ZShjYW52YXMsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICBsZXQgbWF4V2lkdGgsIG1heEhlaWdodDtcbiAgICBpZiAod2lkdGggPT09IHVuZGVmaW5lZCB8fCBoZWlnaHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBfZ2V0UGFyZW50Tm9kZShjYW52YXMpO1xuICAgICAgICBpZiAoIWNvbnRhaW5lcikge1xuICAgICAgICAgICAgd2lkdGggPSBjYW52YXMuY2xpZW50V2lkdGg7XG4gICAgICAgICAgICBoZWlnaHQgPSBjYW52YXMuY2xpZW50SGVpZ2h0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcmVjdCA9IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsgLy8gdGhpcyBpcyB0aGUgYm9yZGVyIGJveCBvZiB0aGUgY29udGFpbmVyXG4gICAgICAgICAgICBjb25zdCBjb250YWluZXJTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoY29udGFpbmVyKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lckJvcmRlciA9IGdldFBvc2l0aW9uZWRTdHlsZShjb250YWluZXJTdHlsZSwgJ2JvcmRlcicsICd3aWR0aCcpO1xuICAgICAgICAgICAgY29uc3QgY29udGFpbmVyUGFkZGluZyA9IGdldFBvc2l0aW9uZWRTdHlsZShjb250YWluZXJTdHlsZSwgJ3BhZGRpbmcnKTtcbiAgICAgICAgICAgIHdpZHRoID0gcmVjdC53aWR0aCAtIGNvbnRhaW5lclBhZGRpbmcud2lkdGggLSBjb250YWluZXJCb3JkZXIud2lkdGg7XG4gICAgICAgICAgICBoZWlnaHQgPSByZWN0LmhlaWdodCAtIGNvbnRhaW5lclBhZGRpbmcuaGVpZ2h0IC0gY29udGFpbmVyQm9yZGVyLmhlaWdodDtcbiAgICAgICAgICAgIG1heFdpZHRoID0gcGFyc2VNYXhTdHlsZShjb250YWluZXJTdHlsZS5tYXhXaWR0aCwgY29udGFpbmVyLCAnY2xpZW50V2lkdGgnKTtcbiAgICAgICAgICAgIG1heEhlaWdodCA9IHBhcnNlTWF4U3R5bGUoY29udGFpbmVyU3R5bGUubWF4SGVpZ2h0LCBjb250YWluZXIsICdjbGllbnRIZWlnaHQnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aCxcbiAgICAgICAgaGVpZ2h0LFxuICAgICAgICBtYXhXaWR0aDogbWF4V2lkdGggfHwgSU5GSU5JVFksXG4gICAgICAgIG1heEhlaWdodDogbWF4SGVpZ2h0IHx8IElORklOSVRZXG4gICAgfTtcbn1cbmNvbnN0IHJvdW5kMSA9ICh2KT0+TWF0aC5yb3VuZCh2ICogMTApIC8gMTA7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuZnVuY3Rpb24gZ2V0TWF4aW11bVNpemUoY2FudmFzLCBiYldpZHRoLCBiYkhlaWdodCwgYXNwZWN0UmF0aW8pIHtcbiAgICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoY2FudmFzKTtcbiAgICBjb25zdCBtYXJnaW5zID0gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlLCAnbWFyZ2luJyk7XG4gICAgY29uc3QgbWF4V2lkdGggPSBwYXJzZU1heFN0eWxlKHN0eWxlLm1heFdpZHRoLCBjYW52YXMsICdjbGllbnRXaWR0aCcpIHx8IElORklOSVRZO1xuICAgIGNvbnN0IG1heEhlaWdodCA9IHBhcnNlTWF4U3R5bGUoc3R5bGUubWF4SGVpZ2h0LCBjYW52YXMsICdjbGllbnRIZWlnaHQnKSB8fCBJTkZJTklUWTtcbiAgICBjb25zdCBjb250YWluZXJTaXplID0gZ2V0Q29udGFpbmVyU2l6ZShjYW52YXMsIGJiV2lkdGgsIGJiSGVpZ2h0KTtcbiAgICBsZXQgeyB3aWR0aCAsIGhlaWdodCAgfSA9IGNvbnRhaW5lclNpemU7XG4gICAgaWYgKHN0eWxlLmJveFNpemluZyA9PT0gJ2NvbnRlbnQtYm94Jykge1xuICAgICAgICBjb25zdCBib3JkZXJzID0gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlLCAnYm9yZGVyJywgJ3dpZHRoJyk7XG4gICAgICAgIGNvbnN0IHBhZGRpbmdzID0gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlLCAncGFkZGluZycpO1xuICAgICAgICB3aWR0aCAtPSBwYWRkaW5ncy53aWR0aCArIGJvcmRlcnMud2lkdGg7XG4gICAgICAgIGhlaWdodCAtPSBwYWRkaW5ncy5oZWlnaHQgKyBib3JkZXJzLmhlaWdodDtcbiAgICB9XG4gICAgd2lkdGggPSBNYXRoLm1heCgwLCB3aWR0aCAtIG1hcmdpbnMud2lkdGgpO1xuICAgIGhlaWdodCA9IE1hdGgubWF4KDAsIGFzcGVjdFJhdGlvID8gd2lkdGggLyBhc3BlY3RSYXRpbyA6IGhlaWdodCAtIG1hcmdpbnMuaGVpZ2h0KTtcbiAgICB3aWR0aCA9IHJvdW5kMShNYXRoLm1pbih3aWR0aCwgbWF4V2lkdGgsIGNvbnRhaW5lclNpemUubWF4V2lkdGgpKTtcbiAgICBoZWlnaHQgPSByb3VuZDEoTWF0aC5taW4oaGVpZ2h0LCBtYXhIZWlnaHQsIGNvbnRhaW5lclNpemUubWF4SGVpZ2h0KSk7XG4gICAgaWYgKHdpZHRoICYmICFoZWlnaHQpIHtcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzQ2NTlcbiAgICAgICAgLy8gSWYgdGhlIGNhbnZhcyBoYXMgd2lkdGgsIGJ1dCBubyBoZWlnaHQsIGRlZmF1bHQgdG8gYXNwZWN0UmF0aW8gb2YgMiAoY2FudmFzIGRlZmF1bHQpXG4gICAgICAgIGhlaWdodCA9IHJvdW5kMSh3aWR0aCAvIDIpO1xuICAgIH1cbiAgICBjb25zdCBtYWludGFpbkhlaWdodCA9IGJiV2lkdGggIT09IHVuZGVmaW5lZCB8fCBiYkhlaWdodCAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChtYWludGFpbkhlaWdodCAmJiBhc3BlY3RSYXRpbyAmJiBjb250YWluZXJTaXplLmhlaWdodCAmJiBoZWlnaHQgPiBjb250YWluZXJTaXplLmhlaWdodCkge1xuICAgICAgICBoZWlnaHQgPSBjb250YWluZXJTaXplLmhlaWdodDtcbiAgICAgICAgd2lkdGggPSByb3VuZDEoTWF0aC5mbG9vcihoZWlnaHQgKiBhc3BlY3RSYXRpbykpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aCxcbiAgICAgICAgaGVpZ2h0XG4gICAgfTtcbn1cbi8qKlxuICogQHBhcmFtIGNoYXJ0XG4gKiBAcGFyYW0gZm9yY2VSYXRpb1xuICogQHBhcmFtIGZvcmNlU3R5bGVcbiAqIEByZXR1cm5zIFRydWUgaWYgdGhlIGNhbnZhcyBjb250ZXh0IHNpemUgb3IgdHJhbnNmb3JtYXRpb24gaGFzIGNoYW5nZWQuXG4gKi8gZnVuY3Rpb24gcmV0aW5hU2NhbGUoY2hhcnQsIGZvcmNlUmF0aW8sIGZvcmNlU3R5bGUpIHtcbiAgICBjb25zdCBwaXhlbFJhdGlvID0gZm9yY2VSYXRpbyB8fCAxO1xuICAgIGNvbnN0IGRldmljZUhlaWdodCA9IE1hdGguZmxvb3IoY2hhcnQuaGVpZ2h0ICogcGl4ZWxSYXRpbyk7XG4gICAgY29uc3QgZGV2aWNlV2lkdGggPSBNYXRoLmZsb29yKGNoYXJ0LndpZHRoICogcGl4ZWxSYXRpbyk7XG4gICAgY2hhcnQuaGVpZ2h0ID0gTWF0aC5mbG9vcihjaGFydC5oZWlnaHQpO1xuICAgIGNoYXJ0LndpZHRoID0gTWF0aC5mbG9vcihjaGFydC53aWR0aCk7XG4gICAgY29uc3QgY2FudmFzID0gY2hhcnQuY2FudmFzO1xuICAgIC8vIElmIG5vIHN0eWxlIGhhcyBiZWVuIHNldCBvbiB0aGUgY2FudmFzLCB0aGUgcmVuZGVyIHNpemUgaXMgdXNlZCBhcyBkaXNwbGF5IHNpemUsXG4gICAgLy8gbWFraW5nIHRoZSBjaGFydCB2aXN1YWxseSBiaWdnZXIsIHNvIGxldCdzIGVuZm9yY2UgaXQgdG8gdGhlIFwiY29ycmVjdFwiIHZhbHVlcy5cbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzM1NzVcbiAgICBpZiAoY2FudmFzLnN0eWxlICYmIChmb3JjZVN0eWxlIHx8ICFjYW52YXMuc3R5bGUuaGVpZ2h0ICYmICFjYW52YXMuc3R5bGUud2lkdGgpKSB7XG4gICAgICAgIGNhbnZhcy5zdHlsZS5oZWlnaHQgPSBgJHtjaGFydC5oZWlnaHR9cHhgO1xuICAgICAgICBjYW52YXMuc3R5bGUud2lkdGggPSBgJHtjaGFydC53aWR0aH1weGA7XG4gICAgfVxuICAgIGlmIChjaGFydC5jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyAhPT0gcGl4ZWxSYXRpbyB8fCBjYW52YXMuaGVpZ2h0ICE9PSBkZXZpY2VIZWlnaHQgfHwgY2FudmFzLndpZHRoICE9PSBkZXZpY2VXaWR0aCkge1xuICAgICAgICBjaGFydC5jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyA9IHBpeGVsUmF0aW87XG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBkZXZpY2VIZWlnaHQ7XG4gICAgICAgIGNhbnZhcy53aWR0aCA9IGRldmljZVdpZHRoO1xuICAgICAgICBjaGFydC5jdHguc2V0VHJhbnNmb3JtKHBpeGVsUmF0aW8sIDAsIDAsIHBpeGVsUmF0aW8sIDAsIDApO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBEZXRlY3RzIHN1cHBvcnQgZm9yIG9wdGlvbnMgb2JqZWN0IGFyZ3VtZW50IGluIGFkZEV2ZW50TGlzdGVuZXIuXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRXZlbnRUYXJnZXQvYWRkRXZlbnRMaXN0ZW5lciNTYWZlbHlfZGV0ZWN0aW5nX29wdGlvbl9zdXBwb3J0XG4gKiBAcHJpdmF0ZVxuICovIGNvbnN0IHN1cHBvcnRzRXZlbnRMaXN0ZW5lck9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgICBsZXQgcGFzc2l2ZVN1cHBvcnRlZCA9IGZhbHNlO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBnZXQgcGFzc2l2ZSAoKSB7XG4gICAgICAgICAgICAgICAgcGFzc2l2ZVN1cHBvcnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdCcsIG51bGwsIG9wdGlvbnMpO1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndGVzdCcsIG51bGwsIG9wdGlvbnMpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBjb250aW51ZSByZWdhcmRsZXNzIG9mIGVycm9yXG4gICAgfVxuICAgIHJldHVybiBwYXNzaXZlU3VwcG9ydGVkO1xufSgpO1xuLyoqXG4gKiBUaGUgXCJ1c2VkXCIgc2l6ZSBpcyB0aGUgZmluYWwgdmFsdWUgb2YgYSBkaW1lbnNpb24gcHJvcGVydHkgYWZ0ZXIgYWxsIGNhbGN1bGF0aW9ucyBoYXZlXG4gKiBiZWVuIHBlcmZvcm1lZC4gVGhpcyBtZXRob2QgdXNlcyB0aGUgY29tcHV0ZWQgc3R5bGUgb2YgYGVsZW1lbnRgIGJ1dCByZXR1cm5zIHVuZGVmaW5lZFxuICogaWYgdGhlIGNvbXB1dGVkIHN0eWxlIGlzIG5vdCBleHByZXNzZWQgaW4gcGl4ZWxzLiBUaGF0IGNhbiBoYXBwZW4gaW4gc29tZSBjYXNlcyB3aGVyZVxuICogYGVsZW1lbnRgIGhhcyBhIHNpemUgcmVsYXRpdmUgdG8gaXRzIHBhcmVudCBhbmQgdGhpcyBsYXN0IG9uZSBpcyBub3QgeWV0IGRpc3BsYXllZCxcbiAqIGZvciBleGFtcGxlIGJlY2F1c2Ugb2YgYGRpc3BsYXk6IG5vbmVgIG9uIGEgcGFyZW50IG5vZGUuXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy91c2VkX3ZhbHVlXG4gKiBAcmV0dXJucyBTaXplIGluIHBpeGVscyBvciB1bmRlZmluZWQgaWYgdW5rbm93bi5cbiAqLyBmdW5jdGlvbiByZWFkVXNlZFNpemUoZWxlbWVudCwgcHJvcGVydHkpIHtcbiAgICBjb25zdCB2YWx1ZSA9IGdldFN0eWxlKGVsZW1lbnQsIHByb3BlcnR5KTtcbiAgICBjb25zdCBtYXRjaGVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goL14oXFxkKykoXFwuXFxkKyk/cHgkLyk7XG4gICAgcmV0dXJuIG1hdGNoZXMgPyArbWF0Y2hlc1sxXSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9wb2ludEluTGluZShwMSwgcDIsIHQsIG1vZGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiBwMS54ICsgdCAqIChwMi54IC0gcDEueCksXG4gICAgICAgIHk6IHAxLnkgKyB0ICogKHAyLnkgLSBwMS55KVxuICAgIH07XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX3N0ZXBwZWRJbnRlcnBvbGF0aW9uKHAxLCBwMiwgdCwgbW9kZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHg6IHAxLnggKyB0ICogKHAyLnggLSBwMS54KSxcbiAgICAgICAgeTogbW9kZSA9PT0gJ21pZGRsZScgPyB0IDwgMC41ID8gcDEueSA6IHAyLnkgOiBtb2RlID09PSAnYWZ0ZXInID8gdCA8IDEgPyBwMS55IDogcDIueSA6IHQgPiAwID8gcDIueSA6IHAxLnlcbiAgICB9O1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9iZXppZXJJbnRlcnBvbGF0aW9uKHAxLCBwMiwgdCwgbW9kZSkge1xuICAgIGNvbnN0IGNwMSA9IHtcbiAgICAgICAgeDogcDEuY3AyeCxcbiAgICAgICAgeTogcDEuY3AyeVxuICAgIH07XG4gICAgY29uc3QgY3AyID0ge1xuICAgICAgICB4OiBwMi5jcDF4LFxuICAgICAgICB5OiBwMi5jcDF5XG4gICAgfTtcbiAgICBjb25zdCBhID0gX3BvaW50SW5MaW5lKHAxLCBjcDEsIHQpO1xuICAgIGNvbnN0IGIgPSBfcG9pbnRJbkxpbmUoY3AxLCBjcDIsIHQpO1xuICAgIGNvbnN0IGMgPSBfcG9pbnRJbkxpbmUoY3AyLCBwMiwgdCk7XG4gICAgY29uc3QgZCA9IF9wb2ludEluTGluZShhLCBiLCB0KTtcbiAgICBjb25zdCBlID0gX3BvaW50SW5MaW5lKGIsIGMsIHQpO1xuICAgIHJldHVybiBfcG9pbnRJbkxpbmUoZCwgZSwgdCk7XG59XG5cbmNvbnN0IGdldFJpZ2h0VG9MZWZ0QWRhcHRlciA9IGZ1bmN0aW9uKHJlY3RYLCB3aWR0aCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHggKHgpIHtcbiAgICAgICAgICAgIHJldHVybiByZWN0WCArIHJlY3RYICsgd2lkdGggLSB4O1xuICAgICAgICB9LFxuICAgICAgICBzZXRXaWR0aCAodykge1xuICAgICAgICAgICAgd2lkdGggPSB3O1xuICAgICAgICB9LFxuICAgICAgICB0ZXh0QWxpZ24gKGFsaWduKSB7XG4gICAgICAgICAgICBpZiAoYWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFsaWduO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFsaWduID09PSAncmlnaHQnID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICAgICAgfSxcbiAgICAgICAgeFBsdXMgKHgsIHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4geCAtIHZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBsZWZ0Rm9yTHRyICh4LCBpdGVtV2lkdGgpIHtcbiAgICAgICAgICAgIHJldHVybiB4IC0gaXRlbVdpZHRoO1xuICAgICAgICB9XG4gICAgfTtcbn07XG5jb25zdCBnZXRMZWZ0VG9SaWdodEFkYXB0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4ICh4KSB7XG4gICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0V2lkdGggKHcpIHt9LFxuICAgICAgICB0ZXh0QWxpZ24gKGFsaWduKSB7XG4gICAgICAgICAgICByZXR1cm4gYWxpZ247XG4gICAgICAgIH0sXG4gICAgICAgIHhQbHVzICh4LCB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHggKyB2YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgbGVmdEZvckx0ciAoeCwgX2l0ZW1XaWR0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgIH1cbiAgICB9O1xufTtcbmZ1bmN0aW9uIGdldFJ0bEFkYXB0ZXIocnRsLCByZWN0WCwgd2lkdGgpIHtcbiAgICByZXR1cm4gcnRsID8gZ2V0UmlnaHRUb0xlZnRBZGFwdGVyKHJlY3RYLCB3aWR0aCkgOiBnZXRMZWZ0VG9SaWdodEFkYXB0ZXIoKTtcbn1cbmZ1bmN0aW9uIG92ZXJyaWRlVGV4dERpcmVjdGlvbihjdHgsIGRpcmVjdGlvbikge1xuICAgIGxldCBzdHlsZSwgb3JpZ2luYWw7XG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gJ2x0cicgfHwgZGlyZWN0aW9uID09PSAncnRsJykge1xuICAgICAgICBzdHlsZSA9IGN0eC5jYW52YXMuc3R5bGU7XG4gICAgICAgIG9yaWdpbmFsID0gW1xuICAgICAgICAgICAgc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnZGlyZWN0aW9uJyksXG4gICAgICAgICAgICBzdHlsZS5nZXRQcm9wZXJ0eVByaW9yaXR5KCdkaXJlY3Rpb24nKVxuICAgICAgICBdO1xuICAgICAgICBzdHlsZS5zZXRQcm9wZXJ0eSgnZGlyZWN0aW9uJywgZGlyZWN0aW9uLCAnaW1wb3J0YW50Jyk7XG4gICAgICAgIGN0eC5wcmV2VGV4dERpcmVjdGlvbiA9IG9yaWdpbmFsO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHJlc3RvcmVUZXh0RGlyZWN0aW9uKGN0eCwgb3JpZ2luYWwpIHtcbiAgICBpZiAob3JpZ2luYWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBkZWxldGUgY3R4LnByZXZUZXh0RGlyZWN0aW9uO1xuICAgICAgICBjdHguY2FudmFzLnN0eWxlLnNldFByb3BlcnR5KCdkaXJlY3Rpb24nLCBvcmlnaW5hbFswXSwgb3JpZ2luYWxbMV0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcHJvcGVydHlGbihwcm9wZXJ0eSkge1xuICAgIGlmIChwcm9wZXJ0eSA9PT0gJ2FuZ2xlJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYmV0d2VlbjogX2FuZ2xlQmV0d2VlbixcbiAgICAgICAgICAgIGNvbXBhcmU6IF9hbmdsZURpZmYsXG4gICAgICAgICAgICBub3JtYWxpemU6IF9ub3JtYWxpemVBbmdsZVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBiZXR3ZWVuOiBfaXNCZXR3ZWVuLFxuICAgICAgICBjb21wYXJlOiAoYSwgYik9PmEgLSBiLFxuICAgICAgICBub3JtYWxpemU6ICh4KT0+eFxuICAgIH07XG59XG5mdW5jdGlvbiBub3JtYWxpemVTZWdtZW50KHsgc3RhcnQgLCBlbmQgLCBjb3VudCAsIGxvb3AgLCBzdHlsZSAgfSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0OiBzdGFydCAlIGNvdW50LFxuICAgICAgICBlbmQ6IGVuZCAlIGNvdW50LFxuICAgICAgICBsb29wOiBsb29wICYmIChlbmQgLSBzdGFydCArIDEpICUgY291bnQgPT09IDAsXG4gICAgICAgIHN0eWxlXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdldFNlZ21lbnQoc2VnbWVudCwgcG9pbnRzLCBib3VuZHMpIHtcbiAgICBjb25zdCB7IHByb3BlcnR5ICwgc3RhcnQ6IHN0YXJ0Qm91bmQgLCBlbmQ6IGVuZEJvdW5kICB9ID0gYm91bmRzO1xuICAgIGNvbnN0IHsgYmV0d2VlbiAsIG5vcm1hbGl6ZSAgfSA9IHByb3BlcnR5Rm4ocHJvcGVydHkpO1xuICAgIGNvbnN0IGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgICBsZXQgeyBzdGFydCAsIGVuZCAsIGxvb3AgIH0gPSBzZWdtZW50O1xuICAgIGxldCBpLCBpbGVuO1xuICAgIGlmIChsb29wKSB7XG4gICAgICAgIHN0YXJ0ICs9IGNvdW50O1xuICAgICAgICBlbmQgKz0gY291bnQ7XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IGNvdW50OyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIGlmICghYmV0d2Vlbihub3JtYWxpemUocG9pbnRzW3N0YXJ0ICUgY291bnRdW3Byb3BlcnR5XSksIHN0YXJ0Qm91bmQsIGVuZEJvdW5kKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhcnQtLTtcbiAgICAgICAgICAgIGVuZC0tO1xuICAgICAgICB9XG4gICAgICAgIHN0YXJ0ICU9IGNvdW50O1xuICAgICAgICBlbmQgJT0gY291bnQ7XG4gICAgfVxuICAgIGlmIChlbmQgPCBzdGFydCkge1xuICAgICAgICBlbmQgKz0gY291bnQ7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBlbmQsXG4gICAgICAgIGxvb3AsXG4gICAgICAgIHN0eWxlOiBzZWdtZW50LnN0eWxlXG4gICAgfTtcbn1cbiBmdW5jdGlvbiBfYm91bmRTZWdtZW50KHNlZ21lbnQsIHBvaW50cywgYm91bmRzKSB7XG4gICAgaWYgKCFib3VuZHMpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHNlZ21lbnRcbiAgICAgICAgXTtcbiAgICB9XG4gICAgY29uc3QgeyBwcm9wZXJ0eSAsIHN0YXJ0OiBzdGFydEJvdW5kICwgZW5kOiBlbmRCb3VuZCAgfSA9IGJvdW5kcztcbiAgICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgY29uc3QgeyBjb21wYXJlICwgYmV0d2VlbiAsIG5vcm1hbGl6ZSAgfSA9IHByb3BlcnR5Rm4ocHJvcGVydHkpO1xuICAgIGNvbnN0IHsgc3RhcnQgLCBlbmQgLCBsb29wICwgc3R5bGUgIH0gPSBnZXRTZWdtZW50KHNlZ21lbnQsIHBvaW50cywgYm91bmRzKTtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBsZXQgaW5zaWRlID0gZmFsc2U7XG4gICAgbGV0IHN1YlN0YXJ0ID0gbnVsbDtcbiAgICBsZXQgdmFsdWUsIHBvaW50LCBwcmV2VmFsdWU7XG4gICAgY29uc3Qgc3RhcnRJc0JlZm9yZSA9ICgpPT5iZXR3ZWVuKHN0YXJ0Qm91bmQsIHByZXZWYWx1ZSwgdmFsdWUpICYmIGNvbXBhcmUoc3RhcnRCb3VuZCwgcHJldlZhbHVlKSAhPT0gMDtcbiAgICBjb25zdCBlbmRJc0JlZm9yZSA9ICgpPT5jb21wYXJlKGVuZEJvdW5kLCB2YWx1ZSkgPT09IDAgfHwgYmV0d2VlbihlbmRCb3VuZCwgcHJldlZhbHVlLCB2YWx1ZSk7XG4gICAgY29uc3Qgc2hvdWxkU3RhcnQgPSAoKT0+aW5zaWRlIHx8IHN0YXJ0SXNCZWZvcmUoKTtcbiAgICBjb25zdCBzaG91bGRTdG9wID0gKCk9PiFpbnNpZGUgfHwgZW5kSXNCZWZvcmUoKTtcbiAgICBmb3IobGV0IGkgPSBzdGFydCwgcHJldiA9IHN0YXJ0OyBpIDw9IGVuZDsgKytpKXtcbiAgICAgICAgcG9pbnQgPSBwb2ludHNbaSAlIGNvdW50XTtcbiAgICAgICAgaWYgKHBvaW50LnNraXApIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlID0gbm9ybWFsaXplKHBvaW50W3Byb3BlcnR5XSk7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gcHJldlZhbHVlKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpbnNpZGUgPSBiZXR3ZWVuKHZhbHVlLCBzdGFydEJvdW5kLCBlbmRCb3VuZCk7XG4gICAgICAgIGlmIChzdWJTdGFydCA9PT0gbnVsbCAmJiBzaG91bGRTdGFydCgpKSB7XG4gICAgICAgICAgICBzdWJTdGFydCA9IGNvbXBhcmUodmFsdWUsIHN0YXJ0Qm91bmQpID09PSAwID8gaSA6IHByZXY7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN1YlN0YXJ0ICE9PSBudWxsICYmIHNob3VsZFN0b3AoKSkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gobm9ybWFsaXplU2VnbWVudCh7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IHN1YlN0YXJ0LFxuICAgICAgICAgICAgICAgIGVuZDogaSxcbiAgICAgICAgICAgICAgICBsb29wLFxuICAgICAgICAgICAgICAgIGNvdW50LFxuICAgICAgICAgICAgICAgIHN0eWxlXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBzdWJTdGFydCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcHJldiA9IGk7XG4gICAgICAgIHByZXZWYWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBpZiAoc3ViU3RhcnQgIT09IG51bGwpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gobm9ybWFsaXplU2VnbWVudCh7XG4gICAgICAgICAgICBzdGFydDogc3ViU3RhcnQsXG4gICAgICAgICAgICBlbmQsXG4gICAgICAgICAgICBsb29wLFxuICAgICAgICAgICAgY291bnQsXG4gICAgICAgICAgICBzdHlsZVxuICAgICAgICB9KSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4gZnVuY3Rpb24gX2JvdW5kU2VnbWVudHMobGluZSwgYm91bmRzKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgY29uc3Qgc2VnbWVudHMgPSBsaW5lLnNlZ21lbnRzO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGNvbnN0IHN1YiA9IF9ib3VuZFNlZ21lbnQoc2VnbWVudHNbaV0sIGxpbmUucG9pbnRzLCBib3VuZHMpO1xuICAgICAgICBpZiAoc3ViLmxlbmd0aCkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goLi4uc3ViKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIGZ1bmN0aW9uIGZpbmRTdGFydEFuZEVuZChwb2ludHMsIGNvdW50LCBsb29wLCBzcGFuR2Fwcykge1xuICAgIGxldCBzdGFydCA9IDA7XG4gICAgbGV0IGVuZCA9IGNvdW50IC0gMTtcbiAgICBpZiAobG9vcCAmJiAhc3BhbkdhcHMpIHtcbiAgICAgICAgd2hpbGUoc3RhcnQgPCBjb3VudCAmJiAhcG9pbnRzW3N0YXJ0XS5za2lwKXtcbiAgICAgICAgICAgIHN0YXJ0Kys7XG4gICAgICAgIH1cbiAgICB9XG4gICAgd2hpbGUoc3RhcnQgPCBjb3VudCAmJiBwb2ludHNbc3RhcnRdLnNraXApe1xuICAgICAgICBzdGFydCsrO1xuICAgIH1cbiAgICBzdGFydCAlPSBjb3VudDtcbiAgICBpZiAobG9vcCkge1xuICAgICAgICBlbmQgKz0gc3RhcnQ7XG4gICAgfVxuICAgIHdoaWxlKGVuZCA+IHN0YXJ0ICYmIHBvaW50c1tlbmQgJSBjb3VudF0uc2tpcCl7XG4gICAgICAgIGVuZC0tO1xuICAgIH1cbiAgICBlbmQgJT0gY291bnQ7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIGVuZFxuICAgIH07XG59XG4gZnVuY3Rpb24gc29saWRTZWdtZW50cyhwb2ludHMsIHN0YXJ0LCBtYXgsIGxvb3ApIHtcbiAgICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgbGV0IGxhc3QgPSBzdGFydDtcbiAgICBsZXQgcHJldiA9IHBvaW50c1tzdGFydF07XG4gICAgbGV0IGVuZDtcbiAgICBmb3IoZW5kID0gc3RhcnQgKyAxOyBlbmQgPD0gbWF4OyArK2VuZCl7XG4gICAgICAgIGNvbnN0IGN1ciA9IHBvaW50c1tlbmQgJSBjb3VudF07XG4gICAgICAgIGlmIChjdXIuc2tpcCB8fCBjdXIuc3RvcCkge1xuICAgICAgICAgICAgaWYgKCFwcmV2LnNraXApIHtcbiAgICAgICAgICAgICAgICBsb29wID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBzdGFydDogc3RhcnQgJSBjb3VudCxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiAoZW5kIC0gMSkgJSBjb3VudCxcbiAgICAgICAgICAgICAgICAgICAgbG9vcFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHN0YXJ0ID0gbGFzdCA9IGN1ci5zdG9wID8gZW5kIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxhc3QgPSBlbmQ7XG4gICAgICAgICAgICBpZiAocHJldi5za2lwKSB7XG4gICAgICAgICAgICAgICAgc3RhcnQgPSBlbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHJldiA9IGN1cjtcbiAgICB9XG4gICAgaWYgKGxhc3QgIT09IG51bGwpIHtcbiAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0ICUgY291bnQsXG4gICAgICAgICAgICBlbmQ6IGxhc3QgJSBjb3VudCxcbiAgICAgICAgICAgIGxvb3BcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4gZnVuY3Rpb24gX2NvbXB1dGVTZWdtZW50cyhsaW5lLCBzZWdtZW50T3B0aW9ucykge1xuICAgIGNvbnN0IHBvaW50cyA9IGxpbmUucG9pbnRzO1xuICAgIGNvbnN0IHNwYW5HYXBzID0gbGluZS5vcHRpb25zLnNwYW5HYXBzO1xuICAgIGNvbnN0IGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgICBpZiAoIWNvdW50KSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgY29uc3QgbG9vcCA9ICEhbGluZS5fbG9vcDtcbiAgICBjb25zdCB7IHN0YXJ0ICwgZW5kICB9ID0gZmluZFN0YXJ0QW5kRW5kKHBvaW50cywgY291bnQsIGxvb3AsIHNwYW5HYXBzKTtcbiAgICBpZiAoc3BhbkdhcHMgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIHNwbGl0QnlTdHlsZXMobGluZSwgW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXJ0LFxuICAgICAgICAgICAgICAgIGVuZCxcbiAgICAgICAgICAgICAgICBsb29wXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sIHBvaW50cywgc2VnbWVudE9wdGlvbnMpO1xuICAgIH1cbiAgICBjb25zdCBtYXggPSBlbmQgPCBzdGFydCA/IGVuZCArIGNvdW50IDogZW5kO1xuICAgIGNvbnN0IGNvbXBsZXRlTG9vcCA9ICEhbGluZS5fZnVsbExvb3AgJiYgc3RhcnQgPT09IDAgJiYgZW5kID09PSBjb3VudCAtIDE7XG4gICAgcmV0dXJuIHNwbGl0QnlTdHlsZXMobGluZSwgc29saWRTZWdtZW50cyhwb2ludHMsIHN0YXJ0LCBtYXgsIGNvbXBsZXRlTG9vcCksIHBvaW50cywgc2VnbWVudE9wdGlvbnMpO1xufVxuIGZ1bmN0aW9uIHNwbGl0QnlTdHlsZXMobGluZSwgc2VnbWVudHMsIHBvaW50cywgc2VnbWVudE9wdGlvbnMpIHtcbiAgICBpZiAoIXNlZ21lbnRPcHRpb25zIHx8ICFzZWdtZW50T3B0aW9ucy5zZXRDb250ZXh0IHx8ICFwb2ludHMpIHtcbiAgICAgICAgcmV0dXJuIHNlZ21lbnRzO1xuICAgIH1cbiAgICByZXR1cm4gZG9TcGxpdEJ5U3R5bGVzKGxpbmUsIHNlZ21lbnRzLCBwb2ludHMsIHNlZ21lbnRPcHRpb25zKTtcbn1cbiBmdW5jdGlvbiBkb1NwbGl0QnlTdHlsZXMobGluZSwgc2VnbWVudHMsIHBvaW50cywgc2VnbWVudE9wdGlvbnMpIHtcbiAgICBjb25zdCBjaGFydENvbnRleHQgPSBsaW5lLl9jaGFydC5nZXRDb250ZXh0KCk7XG4gICAgY29uc3QgYmFzZVN0eWxlID0gcmVhZFN0eWxlKGxpbmUub3B0aW9ucyk7XG4gICAgY29uc3QgeyBfZGF0YXNldEluZGV4OiBkYXRhc2V0SW5kZXggLCBvcHRpb25zOiB7IHNwYW5HYXBzICB9ICB9ID0gbGluZTtcbiAgICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgbGV0IHByZXZTdHlsZSA9IGJhc2VTdHlsZTtcbiAgICBsZXQgc3RhcnQgPSBzZWdtZW50c1swXS5zdGFydDtcbiAgICBsZXQgaSA9IHN0YXJ0O1xuICAgIGZ1bmN0aW9uIGFkZFN0eWxlKHMsIGUsIGwsIHN0KSB7XG4gICAgICAgIGNvbnN0IGRpciA9IHNwYW5HYXBzID8gLTEgOiAxO1xuICAgICAgICBpZiAocyA9PT0gZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHMgKz0gY291bnQ7XG4gICAgICAgIHdoaWxlKHBvaW50c1tzICUgY291bnRdLnNraXApe1xuICAgICAgICAgICAgcyAtPSBkaXI7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUocG9pbnRzW2UgJSBjb3VudF0uc2tpcCl7XG4gICAgICAgICAgICBlICs9IGRpcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocyAlIGNvdW50ICE9PSBlICUgY291bnQpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICBzdGFydDogcyAlIGNvdW50LFxuICAgICAgICAgICAgICAgIGVuZDogZSAlIGNvdW50LFxuICAgICAgICAgICAgICAgIGxvb3A6IGwsXG4gICAgICAgICAgICAgICAgc3R5bGU6IHN0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHByZXZTdHlsZSA9IHN0O1xuICAgICAgICAgICAgc3RhcnQgPSBlICUgY291bnQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBzZWdtZW50IG9mIHNlZ21lbnRzKXtcbiAgICAgICAgc3RhcnQgPSBzcGFuR2FwcyA/IHN0YXJ0IDogc2VnbWVudC5zdGFydDtcbiAgICAgICAgbGV0IHByZXYgPSBwb2ludHNbc3RhcnQgJSBjb3VudF07XG4gICAgICAgIGxldCBzdHlsZTtcbiAgICAgICAgZm9yKGkgPSBzdGFydCArIDE7IGkgPD0gc2VnbWVudC5lbmQ7IGkrKyl7XG4gICAgICAgICAgICBjb25zdCBwdCA9IHBvaW50c1tpICUgY291bnRdO1xuICAgICAgICAgICAgc3R5bGUgPSByZWFkU3R5bGUoc2VnbWVudE9wdGlvbnMuc2V0Q29udGV4dChjcmVhdGVDb250ZXh0KGNoYXJ0Q29udGV4dCwge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdzZWdtZW50JyxcbiAgICAgICAgICAgICAgICBwMDogcHJldixcbiAgICAgICAgICAgICAgICBwMTogcHQsXG4gICAgICAgICAgICAgICAgcDBEYXRhSW5kZXg6IChpIC0gMSkgJSBjb3VudCxcbiAgICAgICAgICAgICAgICBwMURhdGFJbmRleDogaSAlIGNvdW50LFxuICAgICAgICAgICAgICAgIGRhdGFzZXRJbmRleFxuICAgICAgICAgICAgfSkpKTtcbiAgICAgICAgICAgIGlmIChzdHlsZUNoYW5nZWQoc3R5bGUsIHByZXZTdHlsZSkpIHtcbiAgICAgICAgICAgICAgICBhZGRTdHlsZShzdGFydCwgaSAtIDEsIHNlZ21lbnQubG9vcCwgcHJldlN0eWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByZXYgPSBwdDtcbiAgICAgICAgICAgIHByZXZTdHlsZSA9IHN0eWxlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFydCA8IGkgLSAxKSB7XG4gICAgICAgICAgICBhZGRTdHlsZShzdGFydCwgaSAtIDEsIHNlZ21lbnQubG9vcCwgcHJldlN0eWxlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gcmVhZFN0eWxlKG9wdGlvbnMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICBib3JkZXJDYXBTdHlsZTogb3B0aW9ucy5ib3JkZXJDYXBTdHlsZSxcbiAgICAgICAgYm9yZGVyRGFzaDogb3B0aW9ucy5ib3JkZXJEYXNoLFxuICAgICAgICBib3JkZXJEYXNoT2Zmc2V0OiBvcHRpb25zLmJvcmRlckRhc2hPZmZzZXQsXG4gICAgICAgIGJvcmRlckpvaW5TdHlsZTogb3B0aW9ucy5ib3JkZXJKb2luU3R5bGUsXG4gICAgICAgIGJvcmRlcldpZHRoOiBvcHRpb25zLmJvcmRlcldpZHRoLFxuICAgICAgICBib3JkZXJDb2xvcjogb3B0aW9ucy5ib3JkZXJDb2xvclxuICAgIH07XG59XG5mdW5jdGlvbiBzdHlsZUNoYW5nZWQoc3R5bGUsIHByZXZTdHlsZSkge1xuICAgIHJldHVybiBwcmV2U3R5bGUgJiYgSlNPTi5zdHJpbmdpZnkoc3R5bGUpICE9PSBKU09OLnN0cmluZ2lmeShwcmV2U3R5bGUpO1xufVxuXG5leHBvcnQgeyB1bmNsaXBBcmVhIGFzICQsIF9ybG9va3VwQnlLZXkgYXMgQSwgX2xvb2t1cEJ5S2V5IGFzIEIsIF9pc1BvaW50SW5BcmVhIGFzIEMsIGdldEFuZ2xlRnJvbVBvaW50IGFzIEQsIHRvUGFkZGluZyBhcyBFLCBlYWNoIGFzIEYsIGdldE1heGltdW1TaXplIGFzIEcsIEhBTEZfUEkgYXMgSCwgX2dldFBhcmVudE5vZGUgYXMgSSwgcmVhZFVzZWRTaXplIGFzIEosIHN1cHBvcnRzRXZlbnRMaXN0ZW5lck9wdGlvbnMgYXMgSywgdGhyb3R0bGVkIGFzIEwsIF9pc0RvbVN1cHBvcnRlZCBhcyBNLCBfZmFjdG9yaXplIGFzIE4sIGZpbml0ZU9yRGVmYXVsdCBhcyBPLCBQSSBhcyBQLCBjYWxsYmFjayBhcyBRLCBfYWRkR3JhY2UgYXMgUiwgX2xpbWl0VmFsdWUgYXMgUywgVEFVIGFzIFQsIHRvRGVncmVlcyBhcyBVLCBfbWVhc3VyZVRleHQgYXMgViwgX2ludDE2UmFuZ2UgYXMgVywgX2FsaWduUGl4ZWwgYXMgWCwgY2xpcEFyZWEgYXMgWSwgcmVuZGVyVGV4dCBhcyBaLCBfYXJyYXlVbmlxdWUgYXMgXywgcmVzb2x2ZSBhcyBhLCBmb250U3RyaW5nIGFzIGEkLCB0b0ZvbnQgYXMgYTAsIF90b0xlZnRSaWdodENlbnRlciBhcyBhMSwgX2FsaWduU3RhcnRFbmQgYXMgYTIsIG92ZXJyaWRlcyBhcyBhMywgbWVyZ2UgYXMgYTQsIF9jYXBpdGFsaXplIGFzIGE1LCBkZXNjcmlwdG9ycyBhcyBhNiwgaXNGdW5jdGlvbiBhcyBhNywgX2F0dGFjaENvbnRleHQgYXMgYTgsIF9jcmVhdGVSZXNvbHZlciBhcyBhOSwgb3ZlcnJpZGVUZXh0RGlyZWN0aW9uIGFzIGFBLCBfdGV4dFggYXMgYUIsIHJlc3RvcmVUZXh0RGlyZWN0aW9uIGFzIGFDLCBkcmF3UG9pbnRMZWdlbmQgYXMgYUQsIGRpc3RhbmNlQmV0d2VlblBvaW50cyBhcyBhRSwgbm9vcCBhcyBhRiwgX3NldE1pbkFuZE1heEJ5S2V5IGFzIGFHLCBuaWNlTnVtIGFzIGFILCBhbG1vc3RXaG9sZSBhcyBhSSwgYWxtb3N0RXF1YWxzIGFzIGFKLCBfZGVjaW1hbFBsYWNlcyBhcyBhSywgVGlja3MgYXMgYUwsIGxvZzEwIGFzIGFNLCBfbG9uZ2VzdFRleHQgYXMgYU4sIF9maWx0ZXJCZXR3ZWVuIGFzIGFPLCBfbG9va3VwIGFzIGFQLCBpc1BhdHRlcm5PckdyYWRpZW50IGFzIGFRLCBnZXRIb3ZlckNvbG9yIGFzIGFSLCBjbG9uZSBhcyBhUywgX21lcmdlciBhcyBhVCwgX21lcmdlcklmIGFzIGFVLCBfZGVwcmVjYXRlZCBhcyBhViwgX3NwbGl0S2V5IGFzIGFXLCB0b0ZvbnRTdHJpbmcgYXMgYVgsIHNwbGluZUN1cnZlIGFzIGFZLCBzcGxpbmVDdXJ2ZU1vbm90b25lIGFzIGFaLCBnZXRTdHlsZSBhcyBhXywgX2Rlc2NyaXB0b3JzIGFzIGFhLCBtZXJnZUlmIGFzIGFiLCB1aWQgYXMgYWMsIGRlYm91bmNlIGFzIGFkLCByZXRpbmFTY2FsZSBhcyBhZSwgY2xlYXJDYW52YXMgYXMgYWYsIHNldHNFcXVhbCBhcyBhZywgX2VsZW1lbnRzRXF1YWwgYXMgYWgsIF9pc0NsaWNrRXZlbnQgYXMgYWksIF9pc0JldHdlZW4gYXMgYWosIF9yZWFkVmFsdWVUb1Byb3BzIGFzIGFrLCBfdXBkYXRlQmV6aWVyQ29udHJvbFBvaW50cyBhcyBhbCwgX2NvbXB1dGVTZWdtZW50cyBhcyBhbSwgX2JvdW5kU2VnbWVudHMgYXMgYW4sIF9zdGVwcGVkSW50ZXJwb2xhdGlvbiBhcyBhbywgX2JlemllckludGVycG9sYXRpb24gYXMgYXAsIF9wb2ludEluTGluZSBhcyBhcSwgX3N0ZXBwZWRMaW5lVG8gYXMgYXIsIF9iZXppZXJDdXJ2ZVRvIGFzIGFzLCBkcmF3UG9pbnQgYXMgYXQsIGFkZFJvdW5kZWRSZWN0UGF0aCBhcyBhdSwgdG9UUkJMIGFzIGF2LCB0b1RSQkxDb3JuZXJzIGFzIGF3LCBfYm91bmRTZWdtZW50IGFzIGF4LCBfbm9ybWFsaXplQW5nbGUgYXMgYXksIGdldFJ0bEFkYXB0ZXIgYXMgYXosIGlzQXJyYXkgYXMgYiwgdG9MaW5lSGVpZ2h0IGFzIGIwLCBQSVRBVSBhcyBiMSwgSU5GSU5JVFkgYXMgYjIsIFJBRF9QRVJfREVHIGFzIGIzLCBRVUFSVEVSX1BJIGFzIGI0LCBUV09fVEhJUkRTX1BJIGFzIGI1LCBfYW5nbGVEaWZmIGFzIGI2LCBjb2xvciBhcyBjLCBkZWZhdWx0cyBhcyBkLCBlZmZlY3RzIGFzIGUsIHJlc29sdmVPYmplY3RLZXkgYXMgZiwgaXNOdW1iZXJGaW5pdGUgYXMgZywgZGVmaW5lZCBhcyBoLCBpc09iamVjdCBhcyBpLCBjcmVhdGVDb250ZXh0IGFzIGosIGlzTnVsbE9yVW5kZWYgYXMgaywgbGlzdGVuQXJyYXlFdmVudHMgYXMgbCwgdG9QZXJjZW50YWdlIGFzIG0sIHRvRGltZW5zaW9uIGFzIG4sIGZvcm1hdE51bWJlciBhcyBvLCBfYW5nbGVCZXR3ZWVuIGFzIHAsIF9nZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzIGFzIHEsIHJlcXVlc3RBbmltRnJhbWUgYXMgciwgc2lnbiBhcyBzLCB0b1JhZGlhbnMgYXMgdCwgdW5saXN0ZW5BcnJheUV2ZW50cyBhcyB1LCB2YWx1ZU9yRGVmYXVsdCBhcyB2LCBfc2NhbGVSYW5nZXNDaGFuZ2VkIGFzIHcsIGlzTnVtYmVyIGFzIHgsIF9wYXJzZU9iamVjdERhdGFSYWRpYWxTY2FsZSBhcyB5LCBnZXRSZWxhdGl2ZVBvc2l0aW9uIGFzIHogfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlbHBlcnMuc2VnbWVudC5qcy5tYXBcbiIsIi8qIVxuICogQ2hhcnQuanMgdjQuMi4xXG4gKiBodHRwczovL3d3dy5jaGFydGpzLm9yZ1xuICogKGMpIDIwMjMgQ2hhcnQuanMgQ29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgciBhcyByZXF1ZXN0QW5pbUZyYW1lLCBhIGFzIHJlc29sdmUsIGUgYXMgZWZmZWN0cywgYyBhcyBjb2xvciwgaSBhcyBpc09iamVjdCwgZCBhcyBkZWZhdWx0cywgYiBhcyBpc0FycmF5LCB2IGFzIHZhbHVlT3JEZWZhdWx0LCB1IGFzIHVubGlzdGVuQXJyYXlFdmVudHMsIGwgYXMgbGlzdGVuQXJyYXlFdmVudHMsIGYgYXMgcmVzb2x2ZU9iamVjdEtleSwgZyBhcyBpc051bWJlckZpbml0ZSwgaCBhcyBkZWZpbmVkLCBzIGFzIHNpZ24sIGogYXMgY3JlYXRlQ29udGV4dCwgayBhcyBpc051bGxPclVuZGVmLCBfIGFzIF9hcnJheVVuaXF1ZSwgdCBhcyB0b1JhZGlhbnMsIG0gYXMgdG9QZXJjZW50YWdlLCBuIGFzIHRvRGltZW5zaW9uLCBUIGFzIFRBVSwgbyBhcyBmb3JtYXROdW1iZXIsIHAgYXMgX2FuZ2xlQmV0d2VlbiwgSCBhcyBIQUxGX1BJLCBQIGFzIFBJLCBxIGFzIF9nZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzLCB3IGFzIF9zY2FsZVJhbmdlc0NoYW5nZWQsIHggYXMgaXNOdW1iZXIsIHkgYXMgX3BhcnNlT2JqZWN0RGF0YVJhZGlhbFNjYWxlLCB6IGFzIGdldFJlbGF0aXZlUG9zaXRpb24sIEEgYXMgX3Jsb29rdXBCeUtleSwgQiBhcyBfbG9va3VwQnlLZXksIEMgYXMgX2lzUG9pbnRJbkFyZWEsIEQgYXMgZ2V0QW5nbGVGcm9tUG9pbnQsIEUgYXMgdG9QYWRkaW5nLCBGIGFzIGVhY2gsIEcgYXMgZ2V0TWF4aW11bVNpemUsIEkgYXMgX2dldFBhcmVudE5vZGUsIEogYXMgcmVhZFVzZWRTaXplLCBLIGFzIHN1cHBvcnRzRXZlbnRMaXN0ZW5lck9wdGlvbnMsIEwgYXMgdGhyb3R0bGVkLCBNIGFzIF9pc0RvbVN1cHBvcnRlZCwgTiBhcyBfZmFjdG9yaXplLCBPIGFzIGZpbml0ZU9yRGVmYXVsdCwgUSBhcyBjYWxsYmFjaywgUiBhcyBfYWRkR3JhY2UsIFMgYXMgX2xpbWl0VmFsdWUsIFUgYXMgdG9EZWdyZWVzLCBWIGFzIF9tZWFzdXJlVGV4dCwgVyBhcyBfaW50MTZSYW5nZSwgWCBhcyBfYWxpZ25QaXhlbCwgWSBhcyBjbGlwQXJlYSwgWiBhcyByZW5kZXJUZXh0LCAkIGFzIHVuY2xpcEFyZWEsIGEwIGFzIHRvRm9udCwgYTEgYXMgX3RvTGVmdFJpZ2h0Q2VudGVyLCBhMiBhcyBfYWxpZ25TdGFydEVuZCwgYTMgYXMgb3ZlcnJpZGVzLCBhNCBhcyBtZXJnZSwgYTUgYXMgX2NhcGl0YWxpemUsIGE2IGFzIGRlc2NyaXB0b3JzLCBhNyBhcyBpc0Z1bmN0aW9uLCBhOCBhcyBfYXR0YWNoQ29udGV4dCwgYTkgYXMgX2NyZWF0ZVJlc29sdmVyLCBhYSBhcyBfZGVzY3JpcHRvcnMsIGFiIGFzIG1lcmdlSWYsIGFjIGFzIHVpZCwgYWQgYXMgZGVib3VuY2UsIGFlIGFzIHJldGluYVNjYWxlLCBhZiBhcyBjbGVhckNhbnZhcywgYWcgYXMgc2V0c0VxdWFsLCBhaCBhcyBfZWxlbWVudHNFcXVhbCwgYWkgYXMgX2lzQ2xpY2tFdmVudCwgYWogYXMgX2lzQmV0d2VlbiwgYWsgYXMgX3JlYWRWYWx1ZVRvUHJvcHMsIGFsIGFzIF91cGRhdGVCZXppZXJDb250cm9sUG9pbnRzLCBhbSBhcyBfY29tcHV0ZVNlZ21lbnRzLCBhbiBhcyBfYm91bmRTZWdtZW50cywgYW8gYXMgX3N0ZXBwZWRJbnRlcnBvbGF0aW9uLCBhcCBhcyBfYmV6aWVySW50ZXJwb2xhdGlvbiwgYXEgYXMgX3BvaW50SW5MaW5lLCBhciBhcyBfc3RlcHBlZExpbmVUbywgYXMgYXMgX2JlemllckN1cnZlVG8sIGF0IGFzIGRyYXdQb2ludCwgYXUgYXMgYWRkUm91bmRlZFJlY3RQYXRoLCBhdiBhcyB0b1RSQkwsIGF3IGFzIHRvVFJCTENvcm5lcnMsIGF4IGFzIF9ib3VuZFNlZ21lbnQsIGF5IGFzIF9ub3JtYWxpemVBbmdsZSwgYXogYXMgZ2V0UnRsQWRhcHRlciwgYUEgYXMgb3ZlcnJpZGVUZXh0RGlyZWN0aW9uLCBhQiBhcyBfdGV4dFgsIGFDIGFzIHJlc3RvcmVUZXh0RGlyZWN0aW9uLCBhRCBhcyBkcmF3UG9pbnRMZWdlbmQsIGFFIGFzIGRpc3RhbmNlQmV0d2VlblBvaW50cywgYUYgYXMgbm9vcCwgYUcgYXMgX3NldE1pbkFuZE1heEJ5S2V5LCBhSCBhcyBuaWNlTnVtLCBhSSBhcyBhbG1vc3RXaG9sZSwgYUogYXMgYWxtb3N0RXF1YWxzLCBhSyBhcyBfZGVjaW1hbFBsYWNlcywgYUwgYXMgVGlja3MsIGFNIGFzIGxvZzEwLCBhTiBhcyBfbG9uZ2VzdFRleHQsIGFPIGFzIF9maWx0ZXJCZXR3ZWVuLCBhUCBhcyBfbG9va3VwIH0gZnJvbSAnLi9jaHVua3MvaGVscGVycy5zZWdtZW50LmpzJztcbmV4cG9ydCB7IGFMIGFzIFRpY2tzLCBkIGFzIGRlZmF1bHRzIH0gZnJvbSAnLi9jaHVua3MvaGVscGVycy5zZWdtZW50LmpzJztcbmltcG9ydCAnQGt1cmtsZS9jb2xvcic7XG5cbmNsYXNzIEFuaW1hdG9yIHtcbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICB0aGlzLl9yZXF1ZXN0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fY2hhcnRzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLl9ydW5uaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2xhc3REYXRlID0gdW5kZWZpbmVkO1xuICAgIH1cbiBfbm90aWZ5KGNoYXJ0LCBhbmltcywgZGF0ZSwgdHlwZSkge1xuICAgICAgICBjb25zdCBjYWxsYmFja3MgPSBhbmltcy5saXN0ZW5lcnNbdHlwZV07XG4gICAgICAgIGNvbnN0IG51bVN0ZXBzID0gYW5pbXMuZHVyYXRpb247XG4gICAgICAgIGNhbGxiYWNrcy5mb3JFYWNoKChmbik9PmZuKHtcbiAgICAgICAgICAgICAgICBjaGFydCxcbiAgICAgICAgICAgICAgICBpbml0aWFsOiBhbmltcy5pbml0aWFsLFxuICAgICAgICAgICAgICAgIG51bVN0ZXBzLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRTdGVwOiBNYXRoLm1pbihkYXRlIC0gYW5pbXMuc3RhcnQsIG51bVN0ZXBzKVxuICAgICAgICAgICAgfSkpO1xuICAgIH1cbiBfcmVmcmVzaCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3JlcXVlc3QpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9ydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcmVxdWVzdCA9IHJlcXVlc3RBbmltRnJhbWUuY2FsbCh3aW5kb3csICgpPT57XG4gICAgICAgICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICAgICAgICAgIHRoaXMuX3JlcXVlc3QgPSBudWxsO1xuICAgICAgICAgICAgaWYgKHRoaXMuX3J1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWZyZXNoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiBfdXBkYXRlKGRhdGUgPSBEYXRlLm5vdygpKSB7XG4gICAgICAgIGxldCByZW1haW5pbmcgPSAwO1xuICAgICAgICB0aGlzLl9jaGFydHMuZm9yRWFjaCgoYW5pbXMsIGNoYXJ0KT0+e1xuICAgICAgICAgICAgaWYgKCFhbmltcy5ydW5uaW5nIHx8ICFhbmltcy5pdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBpdGVtcyA9IGFuaW1zLml0ZW1zO1xuICAgICAgICAgICAgbGV0IGkgPSBpdGVtcy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgbGV0IGRyYXcgPSBmYWxzZTtcbiAgICAgICAgICAgIGxldCBpdGVtO1xuICAgICAgICAgICAgZm9yKDsgaSA+PSAwOyAtLWkpe1xuICAgICAgICAgICAgICAgIGl0ZW0gPSBpdGVtc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5fYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLl90b3RhbCA+IGFuaW1zLmR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltcy5kdXJhdGlvbiA9IGl0ZW0uX3RvdGFsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0udGljayhkYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgZHJhdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbXNbaV0gPSBpdGVtc1tpdGVtcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMucG9wKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRyYXcpIHtcbiAgICAgICAgICAgICAgICBjaGFydC5kcmF3KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbm90aWZ5KGNoYXJ0LCBhbmltcywgZGF0ZSwgJ3Byb2dyZXNzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGFuaW1zLnJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9ub3RpZnkoY2hhcnQsIGFuaW1zLCBkYXRlLCAnY29tcGxldGUnKTtcbiAgICAgICAgICAgICAgICBhbmltcy5pbml0aWFsID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZW1haW5pbmcgKz0gaXRlbXMubGVuZ3RoO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fbGFzdERhdGUgPSBkYXRlO1xuICAgICAgICBpZiAocmVtYWluaW5nID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9ydW5uaW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gX2dldEFuaW1zKGNoYXJ0KSB7XG4gICAgICAgIGNvbnN0IGNoYXJ0cyA9IHRoaXMuX2NoYXJ0cztcbiAgICAgICAgbGV0IGFuaW1zID0gY2hhcnRzLmdldChjaGFydCk7XG4gICAgICAgIGlmICghYW5pbXMpIHtcbiAgICAgICAgICAgIGFuaW1zID0ge1xuICAgICAgICAgICAgICAgIHJ1bm5pbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGluaXRpYWw6IHRydWUsXG4gICAgICAgICAgICAgICAgaXRlbXM6IFtdLFxuICAgICAgICAgICAgICAgIGxpc3RlbmVyczoge1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogW10sXG4gICAgICAgICAgICAgICAgICAgIHByb2dyZXNzOiBbXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjaGFydHMuc2V0KGNoYXJ0LCBhbmltcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFuaW1zO1xuICAgIH1cbiBsaXN0ZW4oY2hhcnQsIGV2ZW50LCBjYikge1xuICAgICAgICB0aGlzLl9nZXRBbmltcyhjaGFydCkubGlzdGVuZXJzW2V2ZW50XS5wdXNoKGNiKTtcbiAgICB9XG4gYWRkKGNoYXJ0LCBpdGVtcykge1xuICAgICAgICBpZiAoIWl0ZW1zIHx8ICFpdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9nZXRBbmltcyhjaGFydCkuaXRlbXMucHVzaCguLi5pdGVtcyk7XG4gICAgfVxuIGhhcyhjaGFydCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0QW5pbXMoY2hhcnQpLml0ZW1zLmxlbmd0aCA+IDA7XG4gICAgfVxuIHN0YXJ0KGNoYXJ0KSB7XG4gICAgICAgIGNvbnN0IGFuaW1zID0gdGhpcy5fY2hhcnRzLmdldChjaGFydCk7XG4gICAgICAgIGlmICghYW5pbXMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBhbmltcy5ydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgYW5pbXMuc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgICAgICBhbmltcy5kdXJhdGlvbiA9IGFuaW1zLml0ZW1zLnJlZHVjZSgoYWNjLCBjdXIpPT5NYXRoLm1heChhY2MsIGN1ci5fZHVyYXRpb24pLCAwKTtcbiAgICAgICAgdGhpcy5fcmVmcmVzaCgpO1xuICAgIH1cbiAgICBydW5uaW5nKGNoYXJ0KSB7XG4gICAgICAgIGlmICghdGhpcy5fcnVubmluZykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFuaW1zID0gdGhpcy5fY2hhcnRzLmdldChjaGFydCk7XG4gICAgICAgIGlmICghYW5pbXMgfHwgIWFuaW1zLnJ1bm5pbmcgfHwgIWFuaW1zLml0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiBzdG9wKGNoYXJ0KSB7XG4gICAgICAgIGNvbnN0IGFuaW1zID0gdGhpcy5fY2hhcnRzLmdldChjaGFydCk7XG4gICAgICAgIGlmICghYW5pbXMgfHwgIWFuaW1zLml0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gYW5pbXMuaXRlbXM7XG4gICAgICAgIGxldCBpID0gaXRlbXMubGVuZ3RoIC0gMTtcbiAgICAgICAgZm9yKDsgaSA+PSAwOyAtLWkpe1xuICAgICAgICAgICAgaXRlbXNbaV0uY2FuY2VsKCk7XG4gICAgICAgIH1cbiAgICAgICAgYW5pbXMuaXRlbXMgPSBbXTtcbiAgICAgICAgdGhpcy5fbm90aWZ5KGNoYXJ0LCBhbmltcywgRGF0ZS5ub3coKSwgJ2NvbXBsZXRlJyk7XG4gICAgfVxuIHJlbW92ZShjaGFydCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2hhcnRzLmRlbGV0ZShjaGFydCk7XG4gICAgfVxufVxudmFyIGFuaW1hdG9yID0gLyogI19fUFVSRV9fICovIG5ldyBBbmltYXRvcigpO1xuXG5jb25zdCB0cmFuc3BhcmVudCA9ICd0cmFuc3BhcmVudCc7XG5jb25zdCBpbnRlcnBvbGF0b3JzID0ge1xuICAgIGJvb2xlYW4gKGZyb20sIHRvLCBmYWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGZhY3RvciA+IDAuNSA/IHRvIDogZnJvbTtcbiAgICB9LFxuIGNvbG9yIChmcm9tLCB0bywgZmFjdG9yKSB7XG4gICAgICAgIGNvbnN0IGMwID0gY29sb3IoZnJvbSB8fCB0cmFuc3BhcmVudCk7XG4gICAgICAgIGNvbnN0IGMxID0gYzAudmFsaWQgJiYgY29sb3IodG8gfHwgdHJhbnNwYXJlbnQpO1xuICAgICAgICByZXR1cm4gYzEgJiYgYzEudmFsaWQgPyBjMS5taXgoYzAsIGZhY3RvcikuaGV4U3RyaW5nKCkgOiB0bztcbiAgICB9LFxuICAgIG51bWJlciAoZnJvbSwgdG8sIGZhY3Rvcikge1xuICAgICAgICByZXR1cm4gZnJvbSArICh0byAtIGZyb20pICogZmFjdG9yO1xuICAgIH1cbn07XG5jbGFzcyBBbmltYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNmZywgdGFyZ2V0LCBwcm9wLCB0byl7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IHRhcmdldFtwcm9wXTtcbiAgICAgICAgdG8gPSByZXNvbHZlKFtcbiAgICAgICAgICAgIGNmZy50byxcbiAgICAgICAgICAgIHRvLFxuICAgICAgICAgICAgY3VycmVudFZhbHVlLFxuICAgICAgICAgICAgY2ZnLmZyb21cbiAgICAgICAgXSk7XG4gICAgICAgIGNvbnN0IGZyb20gPSByZXNvbHZlKFtcbiAgICAgICAgICAgIGNmZy5mcm9tLFxuICAgICAgICAgICAgY3VycmVudFZhbHVlLFxuICAgICAgICAgICAgdG9cbiAgICAgICAgXSk7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuX2ZuID0gY2ZnLmZuIHx8IGludGVycG9sYXRvcnNbY2ZnLnR5cGUgfHwgdHlwZW9mIGZyb21dO1xuICAgICAgICB0aGlzLl9lYXNpbmcgPSBlZmZlY3RzW2NmZy5lYXNpbmddIHx8IGVmZmVjdHMubGluZWFyO1xuICAgICAgICB0aGlzLl9zdGFydCA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSArIChjZmcuZGVsYXkgfHwgMCkpO1xuICAgICAgICB0aGlzLl9kdXJhdGlvbiA9IHRoaXMuX3RvdGFsID0gTWF0aC5mbG9vcihjZmcuZHVyYXRpb24pO1xuICAgICAgICB0aGlzLl9sb29wID0gISFjZmcubG9vcDtcbiAgICAgICAgdGhpcy5fdGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICB0aGlzLl9wcm9wID0gcHJvcDtcbiAgICAgICAgdGhpcy5fZnJvbSA9IGZyb207XG4gICAgICAgIHRoaXMuX3RvID0gdG87XG4gICAgICAgIHRoaXMuX3Byb21pc2VzID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBhY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmU7XG4gICAgfVxuICAgIHVwZGF0ZShjZmcsIHRvLCBkYXRlKSB7XG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeShmYWxzZSk7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50VmFsdWUgPSB0aGlzLl90YXJnZXRbdGhpcy5fcHJvcF07XG4gICAgICAgICAgICBjb25zdCBlbGFwc2VkID0gZGF0ZSAtIHRoaXMuX3N0YXJ0O1xuICAgICAgICAgICAgY29uc3QgcmVtYWluID0gdGhpcy5fZHVyYXRpb24gLSBlbGFwc2VkO1xuICAgICAgICAgICAgdGhpcy5fc3RhcnQgPSBkYXRlO1xuICAgICAgICAgICAgdGhpcy5fZHVyYXRpb24gPSBNYXRoLmZsb29yKE1hdGgubWF4KHJlbWFpbiwgY2ZnLmR1cmF0aW9uKSk7XG4gICAgICAgICAgICB0aGlzLl90b3RhbCArPSBlbGFwc2VkO1xuICAgICAgICAgICAgdGhpcy5fbG9vcCA9ICEhY2ZnLmxvb3A7XG4gICAgICAgICAgICB0aGlzLl90byA9IHJlc29sdmUoW1xuICAgICAgICAgICAgICAgIGNmZy50byxcbiAgICAgICAgICAgICAgICB0byxcbiAgICAgICAgICAgICAgICBjdXJyZW50VmFsdWUsXG4gICAgICAgICAgICAgICAgY2ZnLmZyb21cbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgdGhpcy5fZnJvbSA9IHJlc29sdmUoW1xuICAgICAgICAgICAgICAgIGNmZy5mcm9tLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSxcbiAgICAgICAgICAgICAgICB0b1xuICAgICAgICAgICAgXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2FuY2VsKCkge1xuICAgICAgICBpZiAodGhpcy5fYWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLnRpY2soRGF0ZS5ub3coKSk7XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeShmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGljayhkYXRlKSB7XG4gICAgICAgIGNvbnN0IGVsYXBzZWQgPSBkYXRlIC0gdGhpcy5fc3RhcnQ7XG4gICAgICAgIGNvbnN0IGR1cmF0aW9uID0gdGhpcy5fZHVyYXRpb247XG4gICAgICAgIGNvbnN0IHByb3AgPSB0aGlzLl9wcm9wO1xuICAgICAgICBjb25zdCBmcm9tID0gdGhpcy5fZnJvbTtcbiAgICAgICAgY29uc3QgbG9vcCA9IHRoaXMuX2xvb3A7XG4gICAgICAgIGNvbnN0IHRvID0gdGhpcy5fdG87XG4gICAgICAgIGxldCBmYWN0b3I7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IGZyb20gIT09IHRvICYmIChsb29wIHx8IGVsYXBzZWQgPCBkdXJhdGlvbik7XG4gICAgICAgIGlmICghdGhpcy5fYWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLl90YXJnZXRbcHJvcF0gPSB0bztcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeSh0cnVlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxhcHNlZCA8IDApIHtcbiAgICAgICAgICAgIHRoaXMuX3RhcmdldFtwcm9wXSA9IGZyb207XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZmFjdG9yID0gZWxhcHNlZCAvIGR1cmF0aW9uICUgMjtcbiAgICAgICAgZmFjdG9yID0gbG9vcCAmJiBmYWN0b3IgPiAxID8gMiAtIGZhY3RvciA6IGZhY3RvcjtcbiAgICAgICAgZmFjdG9yID0gdGhpcy5fZWFzaW5nKE1hdGgubWluKDEsIE1hdGgubWF4KDAsIGZhY3RvcikpKTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0W3Byb3BdID0gdGhpcy5fZm4oZnJvbSwgdG8sIGZhY3Rvcik7XG4gICAgfVxuICAgIHdhaXQoKSB7XG4gICAgICAgIGNvbnN0IHByb21pc2VzID0gdGhpcy5fcHJvbWlzZXMgfHwgKHRoaXMuX3Byb21pc2VzID0gW10pO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlcywgcmVqKT0+e1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgcmVzLFxuICAgICAgICAgICAgICAgIHJlalxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfbm90aWZ5KHJlc29sdmVkKSB7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IHJlc29sdmVkID8gJ3JlcycgOiAncmVqJztcbiAgICAgICAgY29uc3QgcHJvbWlzZXMgPSB0aGlzLl9wcm9taXNlcyB8fCBbXTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHByb21pc2VzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIHByb21pc2VzW2ldW21ldGhvZF0oKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuY2xhc3MgQW5pbWF0aW9ucyB7XG4gICAgY29uc3RydWN0b3IoY2hhcnQsIGNvbmZpZyl7XG4gICAgICAgIHRoaXMuX2NoYXJ0ID0gY2hhcnQ7XG4gICAgICAgIHRoaXMuX3Byb3BlcnRpZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuY29uZmlndXJlKGNvbmZpZyk7XG4gICAgfVxuICAgIGNvbmZpZ3VyZShjb25maWcpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChjb25maWcpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYW5pbWF0aW9uT3B0aW9ucyA9IE9iamVjdC5rZXlzKGRlZmF1bHRzLmFuaW1hdGlvbik7XG4gICAgICAgIGNvbnN0IGFuaW1hdGVkUHJvcHMgPSB0aGlzLl9wcm9wZXJ0aWVzO1xuICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhjb25maWcpLmZvckVhY2goKGtleSk9PntcbiAgICAgICAgICAgIGNvbnN0IGNmZyA9IGNvbmZpZ1trZXldO1xuICAgICAgICAgICAgaWYgKCFpc09iamVjdChjZmcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZWQgPSB7fTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgb3B0aW9uIG9mIGFuaW1hdGlvbk9wdGlvbnMpe1xuICAgICAgICAgICAgICAgIHJlc29sdmVkW29wdGlvbl0gPSBjZmdbb3B0aW9uXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIChpc0FycmF5KGNmZy5wcm9wZXJ0aWVzKSAmJiBjZmcucHJvcGVydGllcyB8fCBbXG4gICAgICAgICAgICAgICAga2V5XG4gICAgICAgICAgICBdKS5mb3JFYWNoKChwcm9wKT0+e1xuICAgICAgICAgICAgICAgIGlmIChwcm9wID09PSBrZXkgfHwgIWFuaW1hdGVkUHJvcHMuaGFzKHByb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGVkUHJvcHMuc2V0KHByb3AsIHJlc29sdmVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuIF9hbmltYXRlT3B0aW9ucyh0YXJnZXQsIHZhbHVlcykge1xuICAgICAgICBjb25zdCBuZXdPcHRpb25zID0gdmFsdWVzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSByZXNvbHZlVGFyZ2V0T3B0aW9ucyh0YXJnZXQsIG5ld09wdGlvbnMpO1xuICAgICAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhbmltYXRpb25zID0gdGhpcy5fY3JlYXRlQW5pbWF0aW9ucyhvcHRpb25zLCBuZXdPcHRpb25zKTtcbiAgICAgICAgaWYgKG5ld09wdGlvbnMuJHNoYXJlZCkge1xuICAgICAgICAgICAgYXdhaXRBbGwodGFyZ2V0Lm9wdGlvbnMuJGFuaW1hdGlvbnMsIG5ld09wdGlvbnMpLnRoZW4oKCk9PntcbiAgICAgICAgICAgICAgICB0YXJnZXQub3B0aW9ucyA9IG5ld09wdGlvbnM7XG4gICAgICAgICAgICB9LCAoKT0+e1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbnM7XG4gICAgfVxuIF9jcmVhdGVBbmltYXRpb25zKHRhcmdldCwgdmFsdWVzKSB7XG4gICAgICAgIGNvbnN0IGFuaW1hdGVkUHJvcHMgPSB0aGlzLl9wcm9wZXJ0aWVzO1xuICAgICAgICBjb25zdCBhbmltYXRpb25zID0gW107XG4gICAgICAgIGNvbnN0IHJ1bm5pbmcgPSB0YXJnZXQuJGFuaW1hdGlvbnMgfHwgKHRhcmdldC4kYW5pbWF0aW9ucyA9IHt9KTtcbiAgICAgICAgY29uc3QgcHJvcHMgPSBPYmplY3Qua2V5cyh2YWx1ZXMpO1xuICAgICAgICBjb25zdCBkYXRlID0gRGF0ZS5ub3coKTtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGZvcihpID0gcHJvcHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpe1xuICAgICAgICAgICAgY29uc3QgcHJvcCA9IHByb3BzW2ldO1xuICAgICAgICAgICAgaWYgKHByb3AuY2hhckF0KDApID09PSAnJCcpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcm9wID09PSAnb3B0aW9ucycpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb25zLnB1c2goLi4udGhpcy5fYW5pbWF0ZU9wdGlvbnModGFyZ2V0LCB2YWx1ZXMpKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVzW3Byb3BdO1xuICAgICAgICAgICAgbGV0IGFuaW1hdGlvbiA9IHJ1bm5pbmdbcHJvcF07XG4gICAgICAgICAgICBjb25zdCBjZmcgPSBhbmltYXRlZFByb3BzLmdldChwcm9wKTtcbiAgICAgICAgICAgIGlmIChhbmltYXRpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAoY2ZnICYmIGFuaW1hdGlvbi5hY3RpdmUoKSkge1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24udXBkYXRlKGNmZywgdmFsdWUsIGRhdGUpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24uY2FuY2VsKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFjZmcgfHwgIWNmZy5kdXJhdGlvbikge1xuICAgICAgICAgICAgICAgIHRhcmdldFtwcm9wXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcnVubmluZ1twcm9wXSA9IGFuaW1hdGlvbiA9IG5ldyBBbmltYXRpb24oY2ZnLCB0YXJnZXQsIHByb3AsIHZhbHVlKTtcbiAgICAgICAgICAgIGFuaW1hdGlvbnMucHVzaChhbmltYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbmltYXRpb25zO1xuICAgIH1cbiB1cGRhdGUodGFyZ2V0LCB2YWx1ZXMpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Byb3BlcnRpZXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHZhbHVlcyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYW5pbWF0aW9ucyA9IHRoaXMuX2NyZWF0ZUFuaW1hdGlvbnModGFyZ2V0LCB2YWx1ZXMpO1xuICAgICAgICBpZiAoYW5pbWF0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGFuaW1hdG9yLmFkZCh0aGlzLl9jaGFydCwgYW5pbWF0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGF3YWl0QWxsKGFuaW1hdGlvbnMsIHByb3BlcnRpZXMpIHtcbiAgICBjb25zdCBydW5uaW5nID0gW107XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHByb3BlcnRpZXMpO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgY29uc3QgYW5pbSA9IGFuaW1hdGlvbnNba2V5c1tpXV07XG4gICAgICAgIGlmIChhbmltICYmIGFuaW0uYWN0aXZlKCkpIHtcbiAgICAgICAgICAgIHJ1bm5pbmcucHVzaChhbmltLndhaXQoKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHJ1bm5pbmcpO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVRhcmdldE9wdGlvbnModGFyZ2V0LCBuZXdPcHRpb25zKSB7XG4gICAgaWYgKCFuZXdPcHRpb25zKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IG9wdGlvbnMgPSB0YXJnZXQub3B0aW9ucztcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgdGFyZ2V0Lm9wdGlvbnMgPSBuZXdPcHRpb25zO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChvcHRpb25zLiRzaGFyZWQpIHtcbiAgICAgICAgdGFyZ2V0Lm9wdGlvbnMgPSBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucywge1xuICAgICAgICAgICAgJHNoYXJlZDogZmFsc2UsXG4gICAgICAgICAgICAkYW5pbWF0aW9uczoge31cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zO1xufVxuXG5mdW5jdGlvbiBzY2FsZUNsaXAoc2NhbGUsIGFsbG93ZWRPdmVyZmxvdykge1xuICAgIGNvbnN0IG9wdHMgPSBzY2FsZSAmJiBzY2FsZS5vcHRpb25zIHx8IHt9O1xuICAgIGNvbnN0IHJldmVyc2UgPSBvcHRzLnJldmVyc2U7XG4gICAgY29uc3QgbWluID0gb3B0cy5taW4gPT09IHVuZGVmaW5lZCA/IGFsbG93ZWRPdmVyZmxvdyA6IDA7XG4gICAgY29uc3QgbWF4ID0gb3B0cy5tYXggPT09IHVuZGVmaW5lZCA/IGFsbG93ZWRPdmVyZmxvdyA6IDA7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQ6IHJldmVyc2UgPyBtYXggOiBtaW4sXG4gICAgICAgIGVuZDogcmV2ZXJzZSA/IG1pbiA6IG1heFxuICAgIH07XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xpcCh4U2NhbGUsIHlTY2FsZSwgYWxsb3dlZE92ZXJmbG93KSB7XG4gICAgaWYgKGFsbG93ZWRPdmVyZmxvdyA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCB4ID0gc2NhbGVDbGlwKHhTY2FsZSwgYWxsb3dlZE92ZXJmbG93KTtcbiAgICBjb25zdCB5ID0gc2NhbGVDbGlwKHlTY2FsZSwgYWxsb3dlZE92ZXJmbG93KTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IHkuZW5kLFxuICAgICAgICByaWdodDogeC5lbmQsXG4gICAgICAgIGJvdHRvbTogeS5zdGFydCxcbiAgICAgICAgbGVmdDogeC5zdGFydFxuICAgIH07XG59XG5mdW5jdGlvbiB0b0NsaXAodmFsdWUpIHtcbiAgICBsZXQgdCwgciwgYiwgbDtcbiAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHQgPSB2YWx1ZS50b3A7XG4gICAgICAgIHIgPSB2YWx1ZS5yaWdodDtcbiAgICAgICAgYiA9IHZhbHVlLmJvdHRvbTtcbiAgICAgICAgbCA9IHZhbHVlLmxlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdCA9IHIgPSBiID0gbCA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IHQsXG4gICAgICAgIHJpZ2h0OiByLFxuICAgICAgICBib3R0b206IGIsXG4gICAgICAgIGxlZnQ6IGwsXG4gICAgICAgIGRpc2FibGVkOiB2YWx1ZSA9PT0gZmFsc2VcbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0U29ydGVkRGF0YXNldEluZGljZXMoY2hhcnQsIGZpbHRlclZpc2libGUpIHtcbiAgICBjb25zdCBrZXlzID0gW107XG4gICAgY29uc3QgbWV0YXNldHMgPSBjaGFydC5fZ2V0U29ydGVkRGF0YXNldE1ldGFzKGZpbHRlclZpc2libGUpO1xuICAgIGxldCBpLCBpbGVuO1xuICAgIGZvcihpID0gMCwgaWxlbiA9IG1ldGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGtleXMucHVzaChtZXRhc2V0c1tpXS5pbmRleCk7XG4gICAgfVxuICAgIHJldHVybiBrZXlzO1xufVxuZnVuY3Rpb24gYXBwbHlTdGFjayhzdGFjaywgdmFsdWUsIGRzSW5kZXgsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IGtleXMgPSBzdGFjay5rZXlzO1xuICAgIGNvbnN0IHNpbmdsZU1vZGUgPSBvcHRpb25zLm1vZGUgPT09ICdzaW5nbGUnO1xuICAgIGxldCBpLCBpbGVuLCBkYXRhc2V0SW5kZXgsIG90aGVyVmFsdWU7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yKGkgPSAwLCBpbGVuID0ga2V5cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBkYXRhc2V0SW5kZXggPSAra2V5c1tpXTtcbiAgICAgICAgaWYgKGRhdGFzZXRJbmRleCA9PT0gZHNJbmRleCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYWxsKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBvdGhlclZhbHVlID0gc3RhY2sudmFsdWVzW2RhdGFzZXRJbmRleF07XG4gICAgICAgIGlmIChpc051bWJlckZpbml0ZShvdGhlclZhbHVlKSAmJiAoc2luZ2xlTW9kZSB8fCB2YWx1ZSA9PT0gMCB8fCBzaWduKHZhbHVlKSA9PT0gc2lnbihvdGhlclZhbHVlKSkpIHtcbiAgICAgICAgICAgIHZhbHVlICs9IG90aGVyVmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gY29udmVydE9iamVjdERhdGFUb0FycmF5KGRhdGEpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gICAgY29uc3QgYWRhdGEgPSBuZXcgQXJyYXkoa2V5cy5sZW5ndGgpO1xuICAgIGxldCBpLCBpbGVuLCBrZXk7XG4gICAgZm9yKGkgPSAwLCBpbGVuID0ga2V5cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICBhZGF0YVtpXSA9IHtcbiAgICAgICAgICAgIHg6IGtleSxcbiAgICAgICAgICAgIHk6IGRhdGFba2V5XVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gYWRhdGE7XG59XG5mdW5jdGlvbiBpc1N0YWNrZWQoc2NhbGUsIG1ldGEpIHtcbiAgICBjb25zdCBzdGFja2VkID0gc2NhbGUgJiYgc2NhbGUub3B0aW9ucy5zdGFja2VkO1xuICAgIHJldHVybiBzdGFja2VkIHx8IHN0YWNrZWQgPT09IHVuZGVmaW5lZCAmJiBtZXRhLnN0YWNrICE9PSB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBnZXRTdGFja0tleShpbmRleFNjYWxlLCB2YWx1ZVNjYWxlLCBtZXRhKSB7XG4gICAgcmV0dXJuIGAke2luZGV4U2NhbGUuaWR9LiR7dmFsdWVTY2FsZS5pZH0uJHttZXRhLnN0YWNrIHx8IG1ldGEudHlwZX1gO1xufVxuZnVuY3Rpb24gZ2V0VXNlckJvdW5kcyhzY2FsZSkge1xuICAgIGNvbnN0IHsgbWluICwgbWF4ICwgbWluRGVmaW5lZCAsIG1heERlZmluZWQgIH0gPSBzY2FsZS5nZXRVc2VyQm91bmRzKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWluOiBtaW5EZWZpbmVkID8gbWluIDogTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZLFxuICAgICAgICBtYXg6IG1heERlZmluZWQgPyBtYXggOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFlcbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0T3JDcmVhdGVTdGFjayhzdGFja3MsIHN0YWNrS2V5LCBpbmRleFZhbHVlKSB7XG4gICAgY29uc3Qgc3ViU3RhY2sgPSBzdGFja3Nbc3RhY2tLZXldIHx8IChzdGFja3Nbc3RhY2tLZXldID0ge30pO1xuICAgIHJldHVybiBzdWJTdGFja1tpbmRleFZhbHVlXSB8fCAoc3ViU3RhY2tbaW5kZXhWYWx1ZV0gPSB7fSk7XG59XG5mdW5jdGlvbiBnZXRMYXN0SW5kZXhJblN0YWNrKHN0YWNrLCB2U2NhbGUsIHBvc2l0aXZlLCB0eXBlKSB7XG4gICAgZm9yIChjb25zdCBtZXRhIG9mIHZTY2FsZS5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcyh0eXBlKS5yZXZlcnNlKCkpe1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHN0YWNrW21ldGEuaW5kZXhdO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgdmFsdWUgPiAwIHx8ICFwb3NpdGl2ZSAmJiB2YWx1ZSA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBtZXRhLmluZGV4O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gdXBkYXRlU3RhY2tzKGNvbnRyb2xsZXIsIHBhcnNlZCkge1xuICAgIGNvbnN0IHsgY2hhcnQgLCBfY2FjaGVkTWV0YTogbWV0YSAgfSA9IGNvbnRyb2xsZXI7XG4gICAgY29uc3Qgc3RhY2tzID0gY2hhcnQuX3N0YWNrcyB8fCAoY2hhcnQuX3N0YWNrcyA9IHt9KTtcbiAgICBjb25zdCB7IGlTY2FsZSAsIHZTY2FsZSAsIGluZGV4OiBkYXRhc2V0SW5kZXggIH0gPSBtZXRhO1xuICAgIGNvbnN0IGlBeGlzID0gaVNjYWxlLmF4aXM7XG4gICAgY29uc3QgdkF4aXMgPSB2U2NhbGUuYXhpcztcbiAgICBjb25zdCBrZXkgPSBnZXRTdGFja0tleShpU2NhbGUsIHZTY2FsZSwgbWV0YSk7XG4gICAgY29uc3QgaWxlbiA9IHBhcnNlZC5sZW5ndGg7XG4gICAgbGV0IHN0YWNrO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBjb25zdCBpdGVtID0gcGFyc2VkW2ldO1xuICAgICAgICBjb25zdCB7IFtpQXhpc106IGluZGV4ICwgW3ZBeGlzXTogdmFsdWUgIH0gPSBpdGVtO1xuICAgICAgICBjb25zdCBpdGVtU3RhY2tzID0gaXRlbS5fc3RhY2tzIHx8IChpdGVtLl9zdGFja3MgPSB7fSk7XG4gICAgICAgIHN0YWNrID0gaXRlbVN0YWNrc1t2QXhpc10gPSBnZXRPckNyZWF0ZVN0YWNrKHN0YWNrcywga2V5LCBpbmRleCk7XG4gICAgICAgIHN0YWNrW2RhdGFzZXRJbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgc3RhY2suX3RvcCA9IGdldExhc3RJbmRleEluU3RhY2soc3RhY2ssIHZTY2FsZSwgdHJ1ZSwgbWV0YS50eXBlKTtcbiAgICAgICAgc3RhY2suX2JvdHRvbSA9IGdldExhc3RJbmRleEluU3RhY2soc3RhY2ssIHZTY2FsZSwgZmFsc2UsIG1ldGEudHlwZSk7XG4gICAgICAgIGNvbnN0IHZpc3VhbFZhbHVlcyA9IHN0YWNrLl92aXN1YWxWYWx1ZXMgfHwgKHN0YWNrLl92aXN1YWxWYWx1ZXMgPSB7fSk7XG4gICAgICAgIHZpc3VhbFZhbHVlc1tkYXRhc2V0SW5kZXhdID0gdmFsdWU7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0Rmlyc3RTY2FsZUlkKGNoYXJ0LCBheGlzKSB7XG4gICAgY29uc3Qgc2NhbGVzID0gY2hhcnQuc2NhbGVzO1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhzY2FsZXMpLmZpbHRlcigoa2V5KT0+c2NhbGVzW2tleV0uYXhpcyA9PT0gYXhpcykuc2hpZnQoKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZURhdGFzZXRDb250ZXh0KHBhcmVudCwgaW5kZXgpIHtcbiAgICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsIHtcbiAgICAgICAgYWN0aXZlOiBmYWxzZSxcbiAgICAgICAgZGF0YXNldDogdW5kZWZpbmVkLFxuICAgICAgICBkYXRhc2V0SW5kZXg6IGluZGV4LFxuICAgICAgICBpbmRleCxcbiAgICAgICAgbW9kZTogJ2RlZmF1bHQnLFxuICAgICAgICB0eXBlOiAnZGF0YXNldCdcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZURhdGFDb250ZXh0KHBhcmVudCwgaW5kZXgsIGVsZW1lbnQpIHtcbiAgICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsIHtcbiAgICAgICAgYWN0aXZlOiBmYWxzZSxcbiAgICAgICAgZGF0YUluZGV4OiBpbmRleCxcbiAgICAgICAgcGFyc2VkOiB1bmRlZmluZWQsXG4gICAgICAgIHJhdzogdW5kZWZpbmVkLFxuICAgICAgICBlbGVtZW50LFxuICAgICAgICBpbmRleCxcbiAgICAgICAgbW9kZTogJ2RlZmF1bHQnLFxuICAgICAgICB0eXBlOiAnZGF0YSdcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGNsZWFyU3RhY2tzKG1ldGEsIGl0ZW1zKSB7XG4gICAgY29uc3QgZGF0YXNldEluZGV4ID0gbWV0YS5jb250cm9sbGVyLmluZGV4O1xuICAgIGNvbnN0IGF4aXMgPSBtZXRhLnZTY2FsZSAmJiBtZXRhLnZTY2FsZS5heGlzO1xuICAgIGlmICghYXhpcykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGl0ZW1zID0gaXRlbXMgfHwgbWV0YS5fcGFyc2VkO1xuICAgIGZvciAoY29uc3QgcGFyc2VkIG9mIGl0ZW1zKXtcbiAgICAgICAgY29uc3Qgc3RhY2tzID0gcGFyc2VkLl9zdGFja3M7XG4gICAgICAgIGlmICghc3RhY2tzIHx8IHN0YWNrc1theGlzXSA9PT0gdW5kZWZpbmVkIHx8IHN0YWNrc1theGlzXVtkYXRhc2V0SW5kZXhdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgc3RhY2tzW2F4aXNdW2RhdGFzZXRJbmRleF07XG4gICAgICAgIGlmIChzdGFja3NbYXhpc10uX3Zpc3VhbFZhbHVlcyAhPT0gdW5kZWZpbmVkICYmIHN0YWNrc1theGlzXS5fdmlzdWFsVmFsdWVzW2RhdGFzZXRJbmRleF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZGVsZXRlIHN0YWNrc1theGlzXS5fdmlzdWFsVmFsdWVzW2RhdGFzZXRJbmRleF07XG4gICAgICAgIH1cbiAgICB9XG59XG5jb25zdCBpc0RpcmVjdFVwZGF0ZU1vZGUgPSAobW9kZSk9Pm1vZGUgPT09ICdyZXNldCcgfHwgbW9kZSA9PT0gJ25vbmUnO1xuY29uc3QgY2xvbmVJZk5vdFNoYXJlZCA9IChjYWNoZWQsIHNoYXJlZCk9PnNoYXJlZCA/IGNhY2hlZCA6IE9iamVjdC5hc3NpZ24oe30sIGNhY2hlZCk7XG5jb25zdCBjcmVhdGVTdGFjayA9IChjYW5TdGFjaywgbWV0YSwgY2hhcnQpPT5jYW5TdGFjayAmJiAhbWV0YS5oaWRkZW4gJiYgbWV0YS5fc3RhY2tlZCAmJiB7XG4gICAgICAgIGtleXM6IGdldFNvcnRlZERhdGFzZXRJbmRpY2VzKGNoYXJ0LCB0cnVlKSxcbiAgICAgICAgdmFsdWVzOiBudWxsXG4gICAgfTtcbmNsYXNzIERhdGFzZXRDb250cm9sbGVyIHtcbiBzdGF0aWMgZGVmYXVsdHMgPSB7fTtcbiBzdGF0aWMgZGF0YXNldEVsZW1lbnRUeXBlID0gbnVsbDtcbiBzdGF0aWMgZGF0YUVsZW1lbnRUeXBlID0gbnVsbDtcbiBjb25zdHJ1Y3RvcihjaGFydCwgZGF0YXNldEluZGV4KXtcbiAgICAgICAgdGhpcy5jaGFydCA9IGNoYXJ0O1xuICAgICAgICB0aGlzLl9jdHggPSBjaGFydC5jdHg7XG4gICAgICAgIHRoaXMuaW5kZXggPSBkYXRhc2V0SW5kZXg7XG4gICAgICAgIHRoaXMuX2NhY2hlZERhdGFPcHRzID0ge307XG4gICAgICAgIHRoaXMuX2NhY2hlZE1ldGEgPSB0aGlzLmdldE1ldGEoKTtcbiAgICAgICAgdGhpcy5fdHlwZSA9IHRoaXMuX2NhY2hlZE1ldGEudHlwZTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5fcGFyc2luZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9kYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9vYmplY3REYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9zaGFyZWRPcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9kcmF3U3RhcnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2RyYXdDb3VudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc3VwcG9ydHNEZWNpbWF0aW9uID0gZmFsc2U7XG4gICAgICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3N5bmNMaXN0ID0gW107XG4gICAgICAgIHRoaXMuZGF0YXNldEVsZW1lbnRUeXBlID0gbmV3LnRhcmdldC5kYXRhc2V0RWxlbWVudFR5cGU7XG4gICAgICAgIHRoaXMuZGF0YUVsZW1lbnRUeXBlID0gbmV3LnRhcmdldC5kYXRhRWxlbWVudFR5cGU7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xuICAgIH1cbiAgICBpbml0aWFsaXplKCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgdGhpcy5jb25maWd1cmUoKTtcbiAgICAgICAgdGhpcy5saW5rU2NhbGVzKCk7XG4gICAgICAgIG1ldGEuX3N0YWNrZWQgPSBpc1N0YWNrZWQobWV0YS52U2NhbGUsIG1ldGEpO1xuICAgICAgICB0aGlzLmFkZEVsZW1lbnRzKCk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZmlsbCAmJiAhdGhpcy5jaGFydC5pc1BsdWdpbkVuYWJsZWQoJ2ZpbGxlcicpKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJUcmllZCB0byB1c2UgdGhlICdmaWxsJyBvcHRpb24gd2l0aG91dCB0aGUgJ0ZpbGxlcicgcGx1Z2luIGVuYWJsZWQuIFBsZWFzZSBpbXBvcnQgYW5kIHJlZ2lzdGVyIHRoZSAnRmlsbGVyJyBwbHVnaW4gYW5kIG1ha2Ugc3VyZSBpdCBpcyBub3QgZGlzYWJsZWQgaW4gdGhlIG9wdGlvbnNcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlSW5kZXgoZGF0YXNldEluZGV4KSB7XG4gICAgICAgIGlmICh0aGlzLmluZGV4ICE9PSBkYXRhc2V0SW5kZXgpIHtcbiAgICAgICAgICAgIGNsZWFyU3RhY2tzKHRoaXMuX2NhY2hlZE1ldGEpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5kZXggPSBkYXRhc2V0SW5kZXg7XG4gICAgfVxuICAgIGxpbmtTY2FsZXMoKSB7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGRhdGFzZXQgPSB0aGlzLmdldERhdGFzZXQoKTtcbiAgICAgICAgY29uc3QgY2hvb3NlSWQgPSAoYXhpcywgeCwgeSwgcik9PmF4aXMgPT09ICd4JyA/IHggOiBheGlzID09PSAncicgPyByIDogeTtcbiAgICAgICAgY29uc3QgeGlkID0gbWV0YS54QXhpc0lEID0gdmFsdWVPckRlZmF1bHQoZGF0YXNldC54QXhpc0lELCBnZXRGaXJzdFNjYWxlSWQoY2hhcnQsICd4JykpO1xuICAgICAgICBjb25zdCB5aWQgPSBtZXRhLnlBeGlzSUQgPSB2YWx1ZU9yRGVmYXVsdChkYXRhc2V0LnlBeGlzSUQsIGdldEZpcnN0U2NhbGVJZChjaGFydCwgJ3knKSk7XG4gICAgICAgIGNvbnN0IHJpZCA9IG1ldGEuckF4aXNJRCA9IHZhbHVlT3JEZWZhdWx0KGRhdGFzZXQuckF4aXNJRCwgZ2V0Rmlyc3RTY2FsZUlkKGNoYXJ0LCAncicpKTtcbiAgICAgICAgY29uc3QgaW5kZXhBeGlzID0gbWV0YS5pbmRleEF4aXM7XG4gICAgICAgIGNvbnN0IGlpZCA9IG1ldGEuaUF4aXNJRCA9IGNob29zZUlkKGluZGV4QXhpcywgeGlkLCB5aWQsIHJpZCk7XG4gICAgICAgIGNvbnN0IHZpZCA9IG1ldGEudkF4aXNJRCA9IGNob29zZUlkKGluZGV4QXhpcywgeWlkLCB4aWQsIHJpZCk7XG4gICAgICAgIG1ldGEueFNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKHhpZCk7XG4gICAgICAgIG1ldGEueVNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKHlpZCk7XG4gICAgICAgIG1ldGEuclNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKHJpZCk7XG4gICAgICAgIG1ldGEuaVNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKGlpZCk7XG4gICAgICAgIG1ldGEudlNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKHZpZCk7XG4gICAgfVxuICAgIGdldERhdGFzZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbdGhpcy5pbmRleF07XG4gICAgfVxuICAgIGdldE1ldGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJ0LmdldERhdGFzZXRNZXRhKHRoaXMuaW5kZXgpO1xuICAgIH1cbiBnZXRTY2FsZUZvcklkKHNjYWxlSUQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcnQuc2NhbGVzW3NjYWxlSURdO1xuICAgIH1cbiBfZ2V0T3RoZXJTY2FsZShzY2FsZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgcmV0dXJuIHNjYWxlID09PSBtZXRhLmlTY2FsZSA/IG1ldGEudlNjYWxlIDogbWV0YS5pU2NhbGU7XG4gICAgfVxuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLl91cGRhdGUoJ3Jlc2V0Jyk7XG4gICAgfVxuIF9kZXN0cm95KCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgaWYgKHRoaXMuX2RhdGEpIHtcbiAgICAgICAgICAgIHVubGlzdGVuQXJyYXlFdmVudHModGhpcy5fZGF0YSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1ldGEuX3N0YWNrZWQpIHtcbiAgICAgICAgICAgIGNsZWFyU3RhY2tzKG1ldGEpO1xuICAgICAgICB9XG4gICAgfVxuIF9kYXRhQ2hlY2soKSB7XG4gICAgICAgIGNvbnN0IGRhdGFzZXQgPSB0aGlzLmdldERhdGFzZXQoKTtcbiAgICAgICAgY29uc3QgZGF0YSA9IGRhdGFzZXQuZGF0YSB8fCAoZGF0YXNldC5kYXRhID0gW10pO1xuICAgICAgICBjb25zdCBfZGF0YSA9IHRoaXMuX2RhdGE7XG4gICAgICAgIGlmIChpc09iamVjdChkYXRhKSkge1xuICAgICAgICAgICAgdGhpcy5fZGF0YSA9IGNvbnZlcnRPYmplY3REYXRhVG9BcnJheShkYXRhKTtcbiAgICAgICAgfSBlbHNlIGlmIChfZGF0YSAhPT0gZGF0YSkge1xuICAgICAgICAgICAgaWYgKF9kYXRhKSB7XG4gICAgICAgICAgICAgICAgdW5saXN0ZW5BcnJheUV2ZW50cyhfZGF0YSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgICAgICAgICAgY2xlYXJTdGFja3MobWV0YSk7XG4gICAgICAgICAgICAgICAgbWV0YS5fcGFyc2VkID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0YSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuQXJyYXlFdmVudHMoZGF0YSwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9zeW5jTGlzdCA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fZGF0YSA9IGRhdGE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWRkRWxlbWVudHMoKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICB0aGlzLl9kYXRhQ2hlY2soKTtcbiAgICAgICAgaWYgKHRoaXMuZGF0YXNldEVsZW1lbnRUeXBlKSB7XG4gICAgICAgICAgICBtZXRhLmRhdGFzZXQgPSBuZXcgdGhpcy5kYXRhc2V0RWxlbWVudFR5cGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBidWlsZE9yVXBkYXRlRWxlbWVudHMocmVzZXROZXdFbGVtZW50cykge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgZGF0YXNldCA9IHRoaXMuZ2V0RGF0YXNldCgpO1xuICAgICAgICBsZXQgc3RhY2tDaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2RhdGFDaGVjaygpO1xuICAgICAgICBjb25zdCBvbGRTdGFja2VkID0gbWV0YS5fc3RhY2tlZDtcbiAgICAgICAgbWV0YS5fc3RhY2tlZCA9IGlzU3RhY2tlZChtZXRhLnZTY2FsZSwgbWV0YSk7XG4gICAgICAgIGlmIChtZXRhLnN0YWNrICE9PSBkYXRhc2V0LnN0YWNrKSB7XG4gICAgICAgICAgICBzdGFja0NoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgY2xlYXJTdGFja3MobWV0YSk7XG4gICAgICAgICAgICBtZXRhLnN0YWNrID0gZGF0YXNldC5zdGFjaztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZXN5bmNFbGVtZW50cyhyZXNldE5ld0VsZW1lbnRzKTtcbiAgICAgICAgaWYgKHN0YWNrQ2hhbmdlZCB8fCBvbGRTdGFja2VkICE9PSBtZXRhLl9zdGFja2VkKSB7XG4gICAgICAgICAgICB1cGRhdGVTdGFja3ModGhpcywgbWV0YS5fcGFyc2VkKTtcbiAgICAgICAgfVxuICAgIH1cbiBjb25maWd1cmUoKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY2hhcnQuY29uZmlnO1xuICAgICAgICBjb25zdCBzY29wZUtleXMgPSBjb25maWcuZGF0YXNldFNjb3BlS2V5cyh0aGlzLl90eXBlKTtcbiAgICAgICAgY29uc3Qgc2NvcGVzID0gY29uZmlnLmdldE9wdGlvblNjb3Blcyh0aGlzLmdldERhdGFzZXQoKSwgc2NvcGVLZXlzLCB0cnVlKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gY29uZmlnLmNyZWF0ZVJlc29sdmVyKHNjb3BlcywgdGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICB0aGlzLl9wYXJzaW5nID0gdGhpcy5vcHRpb25zLnBhcnNpbmc7XG4gICAgICAgIHRoaXMuX2NhY2hlZERhdGFPcHRzID0ge307XG4gICAgfVxuIHBhcnNlKHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCB7IF9jYWNoZWRNZXRhOiBtZXRhICwgX2RhdGE6IGRhdGEgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IGlTY2FsZSAsIF9zdGFja2VkICB9ID0gbWV0YTtcbiAgICAgICAgY29uc3QgaUF4aXMgPSBpU2NhbGUuYXhpcztcbiAgICAgICAgbGV0IHNvcnRlZCA9IHN0YXJ0ID09PSAwICYmIGNvdW50ID09PSBkYXRhLmxlbmd0aCA/IHRydWUgOiBtZXRhLl9zb3J0ZWQ7XG4gICAgICAgIGxldCBwcmV2ID0gc3RhcnQgPiAwICYmIG1ldGEuX3BhcnNlZFtzdGFydCAtIDFdO1xuICAgICAgICBsZXQgaSwgY3VyLCBwYXJzZWQ7XG4gICAgICAgIGlmICh0aGlzLl9wYXJzaW5nID09PSBmYWxzZSkge1xuICAgICAgICAgICAgbWV0YS5fcGFyc2VkID0gZGF0YTtcbiAgICAgICAgICAgIG1ldGEuX3NvcnRlZCA9IHRydWU7XG4gICAgICAgICAgICBwYXJzZWQgPSBkYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGlzQXJyYXkoZGF0YVtzdGFydF0pKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VkID0gdGhpcy5wYXJzZUFycmF5RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdChkYXRhW3N0YXJ0XSkpIHtcbiAgICAgICAgICAgICAgICBwYXJzZWQgPSB0aGlzLnBhcnNlT2JqZWN0RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXJzZWQgPSB0aGlzLnBhcnNlUHJpbWl0aXZlRGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaXNOb3RJbk9yZGVyQ29tcGFyZWRUb1ByZXYgPSAoKT0+Y3VyW2lBeGlzXSA9PT0gbnVsbCB8fCBwcmV2ICYmIGN1cltpQXhpc10gPCBwcmV2W2lBeGlzXTtcbiAgICAgICAgICAgIGZvcihpID0gMDsgaSA8IGNvdW50OyArK2kpe1xuICAgICAgICAgICAgICAgIG1ldGEuX3BhcnNlZFtpICsgc3RhcnRdID0gY3VyID0gcGFyc2VkW2ldO1xuICAgICAgICAgICAgICAgIGlmIChzb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTm90SW5PcmRlckNvbXBhcmVkVG9QcmV2KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvcnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHByZXYgPSBjdXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWV0YS5fc29ydGVkID0gc29ydGVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfc3RhY2tlZCkge1xuICAgICAgICAgICAgdXBkYXRlU3RhY2tzKHRoaXMsIHBhcnNlZCk7XG4gICAgICAgIH1cbiAgICB9XG4gcGFyc2VQcmltaXRpdmVEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCB7IGlTY2FsZSAsIHZTY2FsZSAgfSA9IG1ldGE7XG4gICAgICAgIGNvbnN0IGlBeGlzID0gaVNjYWxlLmF4aXM7XG4gICAgICAgIGNvbnN0IHZBeGlzID0gdlNjYWxlLmF4aXM7XG4gICAgICAgIGNvbnN0IGxhYmVscyA9IGlTY2FsZS5nZXRMYWJlbHMoKTtcbiAgICAgICAgY29uc3Qgc2luZ2xlU2NhbGUgPSBpU2NhbGUgPT09IHZTY2FsZTtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gbmV3IEFycmF5KGNvdW50KTtcbiAgICAgICAgbGV0IGksIGlsZW4sIGluZGV4O1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBjb3VudDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBpbmRleCA9IGkgKyBzdGFydDtcbiAgICAgICAgICAgIHBhcnNlZFtpXSA9IHtcbiAgICAgICAgICAgICAgICBbaUF4aXNdOiBzaW5nbGVTY2FsZSB8fCBpU2NhbGUucGFyc2UobGFiZWxzW2luZGV4XSwgaW5kZXgpLFxuICAgICAgICAgICAgICAgIFt2QXhpc106IHZTY2FsZS5wYXJzZShkYXRhW2luZGV4XSwgaW5kZXgpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgfVxuIHBhcnNlQXJyYXlEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCB7IHhTY2FsZSAsIHlTY2FsZSAgfSA9IG1ldGE7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IG5ldyBBcnJheShjb3VudCk7XG4gICAgICAgIGxldCBpLCBpbGVuLCBpbmRleCwgaXRlbTtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gY291bnQ7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgaW5kZXggPSBpICsgc3RhcnQ7XG4gICAgICAgICAgICBpdGVtID0gZGF0YVtpbmRleF07XG4gICAgICAgICAgICBwYXJzZWRbaV0gPSB7XG4gICAgICAgICAgICAgICAgeDogeFNjYWxlLnBhcnNlKGl0ZW1bMF0sIGluZGV4KSxcbiAgICAgICAgICAgICAgICB5OiB5U2NhbGUucGFyc2UoaXRlbVsxXSwgaW5kZXgpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgfVxuIHBhcnNlT2JqZWN0RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICAgICAgY29uc3QgeyB4U2NhbGUgLCB5U2NhbGUgIH0gPSBtZXRhO1xuICAgICAgICBjb25zdCB7IHhBeGlzS2V5ID0neCcgLCB5QXhpc0tleSA9J3knICB9ID0gdGhpcy5fcGFyc2luZztcbiAgICAgICAgY29uc3QgcGFyc2VkID0gbmV3IEFycmF5KGNvdW50KTtcbiAgICAgICAgbGV0IGksIGlsZW4sIGluZGV4LCBpdGVtO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBjb3VudDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBpbmRleCA9IGkgKyBzdGFydDtcbiAgICAgICAgICAgIGl0ZW0gPSBkYXRhW2luZGV4XTtcbiAgICAgICAgICAgIHBhcnNlZFtpXSA9IHtcbiAgICAgICAgICAgICAgICB4OiB4U2NhbGUucGFyc2UocmVzb2x2ZU9iamVjdEtleShpdGVtLCB4QXhpc0tleSksIGluZGV4KSxcbiAgICAgICAgICAgICAgICB5OiB5U2NhbGUucGFyc2UocmVzb2x2ZU9iamVjdEtleShpdGVtLCB5QXhpc0tleSksIGluZGV4KVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgIH1cbiBnZXRQYXJzZWQoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZE1ldGEuX3BhcnNlZFtpbmRleF07XG4gICAgfVxuIGdldERhdGFFbGVtZW50KGluZGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jYWNoZWRNZXRhLmRhdGFbaW5kZXhdO1xuICAgIH1cbiBhcHBseVN0YWNrKHNjYWxlLCBwYXJzZWQsIG1vZGUpIHtcbiAgICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBwYXJzZWRbc2NhbGUuYXhpc107XG4gICAgICAgIGNvbnN0IHN0YWNrID0ge1xuICAgICAgICAgICAga2V5czogZ2V0U29ydGVkRGF0YXNldEluZGljZXMoY2hhcnQsIHRydWUpLFxuICAgICAgICAgICAgdmFsdWVzOiBwYXJzZWQuX3N0YWNrc1tzY2FsZS5heGlzXS5fdmlzdWFsVmFsdWVzXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhcHBseVN0YWNrKHN0YWNrLCB2YWx1ZSwgbWV0YS5pbmRleCwge1xuICAgICAgICAgICAgbW9kZVxuICAgICAgICB9KTtcbiAgICB9XG4gdXBkYXRlUmFuZ2VGcm9tUGFyc2VkKHJhbmdlLCBzY2FsZSwgcGFyc2VkLCBzdGFjaykge1xuICAgICAgICBjb25zdCBwYXJzZWRWYWx1ZSA9IHBhcnNlZFtzY2FsZS5heGlzXTtcbiAgICAgICAgbGV0IHZhbHVlID0gcGFyc2VkVmFsdWUgPT09IG51bGwgPyBOYU4gOiBwYXJzZWRWYWx1ZTtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gc3RhY2sgJiYgcGFyc2VkLl9zdGFja3Nbc2NhbGUuYXhpc107XG4gICAgICAgIGlmIChzdGFjayAmJiB2YWx1ZXMpIHtcbiAgICAgICAgICAgIHN0YWNrLnZhbHVlcyA9IHZhbHVlcztcbiAgICAgICAgICAgIHZhbHVlID0gYXBwbHlTdGFjayhzdGFjaywgcGFyc2VkVmFsdWUsIHRoaXMuX2NhY2hlZE1ldGEuaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIHJhbmdlLm1pbiA9IE1hdGgubWluKHJhbmdlLm1pbiwgdmFsdWUpO1xuICAgICAgICByYW5nZS5tYXggPSBNYXRoLm1heChyYW5nZS5tYXgsIHZhbHVlKTtcbiAgICB9XG4gZ2V0TWluTWF4KHNjYWxlLCBjYW5TdGFjaykge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgX3BhcnNlZCA9IG1ldGEuX3BhcnNlZDtcbiAgICAgICAgY29uc3Qgc29ydGVkID0gbWV0YS5fc29ydGVkICYmIHNjYWxlID09PSBtZXRhLmlTY2FsZTtcbiAgICAgICAgY29uc3QgaWxlbiA9IF9wYXJzZWQubGVuZ3RoO1xuICAgICAgICBjb25zdCBvdGhlclNjYWxlID0gdGhpcy5fZ2V0T3RoZXJTY2FsZShzY2FsZSk7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gY3JlYXRlU3RhY2soY2FuU3RhY2ssIG1ldGEsIHRoaXMuY2hhcnQpO1xuICAgICAgICBjb25zdCByYW5nZSA9IHtcbiAgICAgICAgICAgIG1pbjogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxuICAgICAgICAgICAgbWF4OiBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFlcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgeyBtaW46IG90aGVyTWluICwgbWF4OiBvdGhlck1heCAgfSA9IGdldFVzZXJCb3VuZHMob3RoZXJTY2FsZSk7XG4gICAgICAgIGxldCBpLCBwYXJzZWQ7XG4gICAgICAgIGZ1bmN0aW9uIF9za2lwKCkge1xuICAgICAgICAgICAgcGFyc2VkID0gX3BhcnNlZFtpXTtcbiAgICAgICAgICAgIGNvbnN0IG90aGVyVmFsdWUgPSBwYXJzZWRbb3RoZXJTY2FsZS5heGlzXTtcbiAgICAgICAgICAgIHJldHVybiAhaXNOdW1iZXJGaW5pdGUocGFyc2VkW3NjYWxlLmF4aXNdKSB8fCBvdGhlck1pbiA+IG90aGVyVmFsdWUgfHwgb3RoZXJNYXggPCBvdGhlclZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGZvcihpID0gMDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBpZiAoX3NraXAoKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy51cGRhdGVSYW5nZUZyb21QYXJzZWQocmFuZ2UsIHNjYWxlLCBwYXJzZWQsIHN0YWNrKTtcbiAgICAgICAgICAgIGlmIChzb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc29ydGVkKSB7XG4gICAgICAgICAgICBmb3IoaSA9IGlsZW4gLSAxOyBpID49IDA7IC0taSl7XG4gICAgICAgICAgICAgICAgaWYgKF9za2lwKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUmFuZ2VGcm9tUGFyc2VkKHJhbmdlLCBzY2FsZSwgcGFyc2VkLCBzdGFjayk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJhbmdlO1xuICAgIH1cbiAgICBnZXRBbGxQYXJzZWRWYWx1ZXMoc2NhbGUpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gdGhpcy5fY2FjaGVkTWV0YS5fcGFyc2VkO1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICAgICAgbGV0IGksIGlsZW4sIHZhbHVlO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBwYXJzZWQubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIHZhbHVlID0gcGFyc2VkW2ldW3NjYWxlLmF4aXNdO1xuICAgICAgICAgICAgaWYgKGlzTnVtYmVyRmluaXRlKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH1cbiBnZXRNYXhPdmVyZmxvdygpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiBnZXRMYWJlbEFuZFZhbHVlKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBpU2NhbGUgPSBtZXRhLmlTY2FsZTtcbiAgICAgICAgY29uc3QgdlNjYWxlID0gbWV0YS52U2NhbGU7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGluZGV4KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhYmVsOiBpU2NhbGUgPyAnJyArIGlTY2FsZS5nZXRMYWJlbEZvclZhbHVlKHBhcnNlZFtpU2NhbGUuYXhpc10pIDogJycsXG4gICAgICAgICAgICB2YWx1ZTogdlNjYWxlID8gJycgKyB2U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWRbdlNjYWxlLmF4aXNdKSA6ICcnXG4gICAgICAgIH07XG4gICAgfVxuIF91cGRhdGUobW9kZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgdGhpcy51cGRhdGUobW9kZSB8fCAnZGVmYXVsdCcpO1xuICAgICAgICBtZXRhLl9jbGlwID0gdG9DbGlwKHZhbHVlT3JEZWZhdWx0KHRoaXMub3B0aW9ucy5jbGlwLCBkZWZhdWx0Q2xpcChtZXRhLnhTY2FsZSwgbWV0YS55U2NhbGUsIHRoaXMuZ2V0TWF4T3ZlcmZsb3coKSkpKTtcbiAgICB9XG4gdXBkYXRlKG1vZGUpIHt9XG4gICAgZHJhdygpIHtcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fY3R4O1xuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBlbGVtZW50cyA9IG1ldGEuZGF0YSB8fCBbXTtcbiAgICAgICAgY29uc3QgYXJlYSA9IGNoYXJ0LmNoYXJ0QXJlYTtcbiAgICAgICAgY29uc3QgYWN0aXZlID0gW107XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5fZHJhd1N0YXJ0IHx8IDA7XG4gICAgICAgIGNvbnN0IGNvdW50ID0gdGhpcy5fZHJhd0NvdW50IHx8IGVsZW1lbnRzLmxlbmd0aCAtIHN0YXJ0O1xuICAgICAgICBjb25zdCBkcmF3QWN0aXZlRWxlbWVudHNPblRvcCA9IHRoaXMub3B0aW9ucy5kcmF3QWN0aXZlRWxlbWVudHNPblRvcDtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGlmIChtZXRhLmRhdGFzZXQpIHtcbiAgICAgICAgICAgIG1ldGEuZGF0YXNldC5kcmF3KGN0eCwgYXJlYSwgc3RhcnQsIGNvdW50KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IoaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBjb3VudDsgKytpKXtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBlbGVtZW50c1tpXTtcbiAgICAgICAgICAgIGlmIChlbGVtZW50LmhpZGRlbikge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVsZW1lbnQuYWN0aXZlICYmIGRyYXdBY3RpdmVFbGVtZW50c09uVG9wKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlLnB1c2goZWxlbWVudCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuZHJhdyhjdHgsIGFyZWEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvcihpID0gMDsgaSA8IGFjdGl2ZS5sZW5ndGg7ICsraSl7XG4gICAgICAgICAgICBhY3RpdmVbaV0uZHJhdyhjdHgsIGFyZWEpO1xuICAgICAgICB9XG4gICAgfVxuIGdldFN0eWxlKGluZGV4LCBhY3RpdmUpIHtcbiAgICAgICAgY29uc3QgbW9kZSA9IGFjdGl2ZSA/ICdhY3RpdmUnIDogJ2RlZmF1bHQnO1xuICAgICAgICByZXR1cm4gaW5kZXggPT09IHVuZGVmaW5lZCAmJiB0aGlzLl9jYWNoZWRNZXRhLmRhdGFzZXQgPyB0aGlzLnJlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMobW9kZSkgOiB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaW5kZXggfHwgMCwgbW9kZSk7XG4gICAgfVxuIGdldENvbnRleHQoaW5kZXgsIGFjdGl2ZSwgbW9kZSkge1xuICAgICAgICBjb25zdCBkYXRhc2V0ID0gdGhpcy5nZXREYXRhc2V0KCk7XG4gICAgICAgIGxldCBjb250ZXh0O1xuICAgICAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8IHRoaXMuX2NhY2hlZE1ldGEuZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9jYWNoZWRNZXRhLmRhdGFbaW5kZXhdO1xuICAgICAgICAgICAgY29udGV4dCA9IGVsZW1lbnQuJGNvbnRleHQgfHwgKGVsZW1lbnQuJGNvbnRleHQgPSBjcmVhdGVEYXRhQ29udGV4dCh0aGlzLmdldENvbnRleHQoKSwgaW5kZXgsIGVsZW1lbnQpKTtcbiAgICAgICAgICAgIGNvbnRleHQucGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpO1xuICAgICAgICAgICAgY29udGV4dC5yYXcgPSBkYXRhc2V0LmRhdGFbaW5kZXhdO1xuICAgICAgICAgICAgY29udGV4dC5pbmRleCA9IGNvbnRleHQuZGF0YUluZGV4ID0gaW5kZXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb250ZXh0ID0gdGhpcy4kY29udGV4dCB8fCAodGhpcy4kY29udGV4dCA9IGNyZWF0ZURhdGFzZXRDb250ZXh0KHRoaXMuY2hhcnQuZ2V0Q29udGV4dCgpLCB0aGlzLmluZGV4KSk7XG4gICAgICAgICAgICBjb250ZXh0LmRhdGFzZXQgPSBkYXRhc2V0O1xuICAgICAgICAgICAgY29udGV4dC5pbmRleCA9IGNvbnRleHQuZGF0YXNldEluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0LmFjdGl2ZSA9ICEhYWN0aXZlO1xuICAgICAgICBjb250ZXh0Lm1vZGUgPSBtb2RlO1xuICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICB9XG4gcmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9ucyhtb2RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXNvbHZlRWxlbWVudE9wdGlvbnModGhpcy5kYXRhc2V0RWxlbWVudFR5cGUuaWQsIG1vZGUpO1xuICAgIH1cbiByZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGluZGV4LCBtb2RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXNvbHZlRWxlbWVudE9wdGlvbnModGhpcy5kYXRhRWxlbWVudFR5cGUuaWQsIG1vZGUsIGluZGV4KTtcbiAgICB9XG4gX3Jlc29sdmVFbGVtZW50T3B0aW9ucyhlbGVtZW50VHlwZSwgbW9kZSA9ICdkZWZhdWx0JywgaW5kZXgpIHtcbiAgICAgICAgY29uc3QgYWN0aXZlID0gbW9kZSA9PT0gJ2FjdGl2ZSc7XG4gICAgICAgIGNvbnN0IGNhY2hlID0gdGhpcy5fY2FjaGVkRGF0YU9wdHM7XG4gICAgICAgIGNvbnN0IGNhY2hlS2V5ID0gZWxlbWVudFR5cGUgKyAnLScgKyBtb2RlO1xuICAgICAgICBjb25zdCBjYWNoZWQgPSBjYWNoZVtjYWNoZUtleV07XG4gICAgICAgIGNvbnN0IHNoYXJpbmcgPSB0aGlzLmVuYWJsZU9wdGlvblNoYXJpbmcgJiYgZGVmaW5lZChpbmRleCk7XG4gICAgICAgIGlmIChjYWNoZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBjbG9uZUlmTm90U2hhcmVkKGNhY2hlZCwgc2hhcmluZyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5jaGFydC5jb25maWc7XG4gICAgICAgIGNvbnN0IHNjb3BlS2V5cyA9IGNvbmZpZy5kYXRhc2V0RWxlbWVudFNjb3BlS2V5cyh0aGlzLl90eXBlLCBlbGVtZW50VHlwZSk7XG4gICAgICAgIGNvbnN0IHByZWZpeGVzID0gYWN0aXZlID8gW1xuICAgICAgICAgICAgYCR7ZWxlbWVudFR5cGV9SG92ZXJgLFxuICAgICAgICAgICAgJ2hvdmVyJyxcbiAgICAgICAgICAgIGVsZW1lbnRUeXBlLFxuICAgICAgICAgICAgJydcbiAgICAgICAgXSA6IFtcbiAgICAgICAgICAgIGVsZW1lbnRUeXBlLFxuICAgICAgICAgICAgJydcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3Qgc2NvcGVzID0gY29uZmlnLmdldE9wdGlvblNjb3Blcyh0aGlzLmdldERhdGFzZXQoKSwgc2NvcGVLZXlzKTtcbiAgICAgICAgY29uc3QgbmFtZXMgPSBPYmplY3Qua2V5cyhkZWZhdWx0cy5lbGVtZW50c1tlbGVtZW50VHlwZV0pO1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gKCk9PnRoaXMuZ2V0Q29udGV4dChpbmRleCwgYWN0aXZlLCBtb2RlKTtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gY29uZmlnLnJlc29sdmVOYW1lZE9wdGlvbnMoc2NvcGVzLCBuYW1lcywgY29udGV4dCwgcHJlZml4ZXMpO1xuICAgICAgICBpZiAodmFsdWVzLiRzaGFyZWQpIHtcbiAgICAgICAgICAgIHZhbHVlcy4kc2hhcmVkID0gc2hhcmluZztcbiAgICAgICAgICAgIGNhY2hlW2NhY2hlS2V5XSA9IE9iamVjdC5mcmVlemUoY2xvbmVJZk5vdFNoYXJlZCh2YWx1ZXMsIHNoYXJpbmcpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH1cbiBfcmVzb2x2ZUFuaW1hdGlvbnMoaW5kZXgsIHRyYW5zaXRpb24sIGFjdGl2ZSkge1xuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IGNhY2hlID0gdGhpcy5fY2FjaGVkRGF0YU9wdHM7XG4gICAgICAgIGNvbnN0IGNhY2hlS2V5ID0gYGFuaW1hdGlvbi0ke3RyYW5zaXRpb259YDtcbiAgICAgICAgY29uc3QgY2FjaGVkID0gY2FjaGVbY2FjaGVLZXldO1xuICAgICAgICBpZiAoY2FjaGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkO1xuICAgICAgICB9XG4gICAgICAgIGxldCBvcHRpb25zO1xuICAgICAgICBpZiAoY2hhcnQub3B0aW9ucy5hbmltYXRpb24gIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBjb25zdCBjb25maWcgPSB0aGlzLmNoYXJ0LmNvbmZpZztcbiAgICAgICAgICAgIGNvbnN0IHNjb3BlS2V5cyA9IGNvbmZpZy5kYXRhc2V0QW5pbWF0aW9uU2NvcGVLZXlzKHRoaXMuX3R5cGUsIHRyYW5zaXRpb24pO1xuICAgICAgICAgICAgY29uc3Qgc2NvcGVzID0gY29uZmlnLmdldE9wdGlvblNjb3Blcyh0aGlzLmdldERhdGFzZXQoKSwgc2NvcGVLZXlzKTtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBjb25maWcuY3JlYXRlUmVzb2x2ZXIoc2NvcGVzLCB0aGlzLmdldENvbnRleHQoaW5kZXgsIGFjdGl2ZSwgdHJhbnNpdGlvbikpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbnMgPSBuZXcgQW5pbWF0aW9ucyhjaGFydCwgb3B0aW9ucyAmJiBvcHRpb25zLmFuaW1hdGlvbnMpO1xuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLl9jYWNoZWFibGUpIHtcbiAgICAgICAgICAgIGNhY2hlW2NhY2hlS2V5XSA9IE9iamVjdC5mcmVlemUoYW5pbWF0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbnM7XG4gICAgfVxuIGdldFNoYXJlZE9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICBpZiAoIW9wdGlvbnMuJHNoYXJlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9zaGFyZWRPcHRpb25zIHx8ICh0aGlzLl9zaGFyZWRPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucykpO1xuICAgIH1cbiBpbmNsdWRlT3B0aW9ucyhtb2RlLCBzaGFyZWRPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiAhc2hhcmVkT3B0aW9ucyB8fCBpc0RpcmVjdFVwZGF0ZU1vZGUobW9kZSkgfHwgdGhpcy5jaGFydC5fYW5pbWF0aW9uc0Rpc2FibGVkO1xuICAgIH1cbiBfZ2V0U2hhcmVkT3B0aW9ucyhzdGFydCwgbW9kZSkge1xuICAgICAgICBjb25zdCBmaXJzdE9wdHMgPSB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgICAgICBjb25zdCBwcmV2aW91c2x5U2hhcmVkT3B0aW9ucyA9IHRoaXMuX3NoYXJlZE9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHNoYXJlZE9wdGlvbnMgPSB0aGlzLmdldFNoYXJlZE9wdGlvbnMoZmlyc3RPcHRzKTtcbiAgICAgICAgY29uc3QgaW5jbHVkZU9wdGlvbnMgPSB0aGlzLmluY2x1ZGVPcHRpb25zKG1vZGUsIHNoYXJlZE9wdGlvbnMpIHx8IHNoYXJlZE9wdGlvbnMgIT09IHByZXZpb3VzbHlTaGFyZWRPcHRpb25zO1xuICAgICAgICB0aGlzLnVwZGF0ZVNoYXJlZE9wdGlvbnMoc2hhcmVkT3B0aW9ucywgbW9kZSwgZmlyc3RPcHRzKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNoYXJlZE9wdGlvbnMsXG4gICAgICAgICAgICBpbmNsdWRlT3B0aW9uc1xuICAgICAgICB9O1xuICAgIH1cbiB1cGRhdGVFbGVtZW50KGVsZW1lbnQsIGluZGV4LCBwcm9wZXJ0aWVzLCBtb2RlKSB7XG4gICAgICAgIGlmIChpc0RpcmVjdFVwZGF0ZU1vZGUobW9kZSkpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oZWxlbWVudCwgcHJvcGVydGllcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlQW5pbWF0aW9ucyhpbmRleCwgbW9kZSkudXBkYXRlKGVsZW1lbnQsIHByb3BlcnRpZXMpO1xuICAgICAgICB9XG4gICAgfVxuIHVwZGF0ZVNoYXJlZE9wdGlvbnMoc2hhcmVkT3B0aW9ucywgbW9kZSwgbmV3T3B0aW9ucykge1xuICAgICAgICBpZiAoc2hhcmVkT3B0aW9ucyAmJiAhaXNEaXJlY3RVcGRhdGVNb2RlKG1vZGUpKSB7XG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlQW5pbWF0aW9ucyh1bmRlZmluZWQsIG1vZGUpLnVwZGF0ZShzaGFyZWRPcHRpb25zLCBuZXdPcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cbiBfc2V0U3R5bGUoZWxlbWVudCwgaW5kZXgsIG1vZGUsIGFjdGl2ZSkge1xuICAgICAgICBlbGVtZW50LmFjdGl2ZSA9IGFjdGl2ZTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuZ2V0U3R5bGUoaW5kZXgsIGFjdGl2ZSk7XG4gICAgICAgIHRoaXMuX3Jlc29sdmVBbmltYXRpb25zKGluZGV4LCBtb2RlLCBhY3RpdmUpLnVwZGF0ZShlbGVtZW50LCB7XG4gICAgICAgICAgICBvcHRpb25zOiAhYWN0aXZlICYmIHRoaXMuZ2V0U2hhcmVkT3B0aW9ucyhvcHRpb25zKSB8fCBvcHRpb25zXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZW1vdmVIb3ZlclN0eWxlKGVsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXgpIHtcbiAgICAgICAgdGhpcy5fc2V0U3R5bGUoZWxlbWVudCwgaW5kZXgsICdhY3RpdmUnLCBmYWxzZSk7XG4gICAgfVxuICAgIHNldEhvdmVyU3R5bGUoZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleCkge1xuICAgICAgICB0aGlzLl9zZXRTdHlsZShlbGVtZW50LCBpbmRleCwgJ2FjdGl2ZScsIHRydWUpO1xuICAgIH1cbiBfcmVtb3ZlRGF0YXNldEhvdmVyU3R5bGUoKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9jYWNoZWRNZXRhLmRhdGFzZXQ7XG4gICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRTdHlsZShlbGVtZW50LCB1bmRlZmluZWQsICdhY3RpdmUnLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG4gX3NldERhdGFzZXRIb3ZlclN0eWxlKCkge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhc2V0O1xuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5fc2V0U3R5bGUoZWxlbWVudCwgdW5kZWZpbmVkLCAnYWN0aXZlJywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gX3Jlc3luY0VsZW1lbnRzKHJlc2V0TmV3RWxlbWVudHMpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuX2RhdGE7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhO1xuICAgICAgICBmb3IgKGNvbnN0IFttZXRob2QsIGFyZzEsIGFyZzJdIG9mIHRoaXMuX3N5bmNMaXN0KXtcbiAgICAgICAgICAgIHRoaXNbbWV0aG9kXShhcmcxLCBhcmcyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zeW5jTGlzdCA9IFtdO1xuICAgICAgICBjb25zdCBudW1NZXRhID0gZWxlbWVudHMubGVuZ3RoO1xuICAgICAgICBjb25zdCBudW1EYXRhID0gZGF0YS5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGNvdW50ID0gTWF0aC5taW4obnVtRGF0YSwgbnVtTWV0YSk7XG4gICAgICAgIGlmIChjb3VudCkge1xuICAgICAgICAgICAgdGhpcy5wYXJzZSgwLCBjb3VudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG51bURhdGEgPiBudW1NZXRhKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnNlcnRFbGVtZW50cyhudW1NZXRhLCBudW1EYXRhIC0gbnVtTWV0YSwgcmVzZXROZXdFbGVtZW50cyk7XG4gICAgICAgIH0gZWxzZSBpZiAobnVtRGF0YSA8IG51bU1ldGEpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbW92ZUVsZW1lbnRzKG51bURhdGEsIG51bU1ldGEgLSBudW1EYXRhKTtcbiAgICAgICAgfVxuICAgIH1cbiBfaW5zZXJ0RWxlbWVudHMoc3RhcnQsIGNvdW50LCByZXNldE5ld0VsZW1lbnRzID0gdHJ1ZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgZGF0YSA9IG1ldGEuZGF0YTtcbiAgICAgICAgY29uc3QgZW5kID0gc3RhcnQgKyBjb3VudDtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGNvbnN0IG1vdmUgPSAoYXJyKT0+e1xuICAgICAgICAgICAgYXJyLmxlbmd0aCArPSBjb3VudDtcbiAgICAgICAgICAgIGZvcihpID0gYXJyLmxlbmd0aCAtIDE7IGkgPj0gZW5kOyBpLS0pe1xuICAgICAgICAgICAgICAgIGFycltpXSA9IGFycltpIC0gY291bnRdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBtb3ZlKGRhdGEpO1xuICAgICAgICBmb3IoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpe1xuICAgICAgICAgICAgZGF0YVtpXSA9IG5ldyB0aGlzLmRhdGFFbGVtZW50VHlwZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wYXJzaW5nKSB7XG4gICAgICAgICAgICBtb3ZlKG1ldGEuX3BhcnNlZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYXJzZShzdGFydCwgY291bnQpO1xuICAgICAgICBpZiAocmVzZXROZXdFbGVtZW50cykge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50cyhkYXRhLCBzdGFydCwgY291bnQsICdyZXNldCcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZUVsZW1lbnRzKGVsZW1lbnQsIHN0YXJ0LCBjb3VudCwgbW9kZSkge31cbiBfcmVtb3ZlRWxlbWVudHMoc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBpZiAodGhpcy5fcGFyc2luZykge1xuICAgICAgICAgICAgY29uc3QgcmVtb3ZlZCA9IG1ldGEuX3BhcnNlZC5zcGxpY2Uoc3RhcnQsIGNvdW50KTtcbiAgICAgICAgICAgIGlmIChtZXRhLl9zdGFja2VkKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJTdGFja3MobWV0YSwgcmVtb3ZlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbWV0YS5kYXRhLnNwbGljZShzdGFydCwgY291bnQpO1xuICAgIH1cbiBfc3luYyhhcmdzKSB7XG4gICAgICAgIGlmICh0aGlzLl9wYXJzaW5nKSB7XG4gICAgICAgICAgICB0aGlzLl9zeW5jTGlzdC5wdXNoKGFyZ3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgW21ldGhvZCwgYXJnMSwgYXJnMl0gPSBhcmdzO1xuICAgICAgICAgICAgdGhpc1ttZXRob2RdKGFyZzEsIGFyZzIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2hhcnQuX2RhdGFDaGFuZ2VzLnB1c2goW1xuICAgICAgICAgICAgdGhpcy5pbmRleCxcbiAgICAgICAgICAgIC4uLmFyZ3NcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIF9vbkRhdGFQdXNoKCkge1xuICAgICAgICBjb25zdCBjb3VudCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHRoaXMuX3N5bmMoW1xuICAgICAgICAgICAgJ19pbnNlcnRFbGVtZW50cycsXG4gICAgICAgICAgICB0aGlzLmdldERhdGFzZXQoKS5kYXRhLmxlbmd0aCAtIGNvdW50LFxuICAgICAgICAgICAgY291bnRcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIF9vbkRhdGFQb3AoKSB7XG4gICAgICAgIHRoaXMuX3N5bmMoW1xuICAgICAgICAgICAgJ19yZW1vdmVFbGVtZW50cycsXG4gICAgICAgICAgICB0aGlzLl9jYWNoZWRNZXRhLmRhdGEubGVuZ3RoIC0gMSxcbiAgICAgICAgICAgIDFcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIF9vbkRhdGFTaGlmdCgpIHtcbiAgICAgICAgdGhpcy5fc3luYyhbXG4gICAgICAgICAgICAnX3JlbW92ZUVsZW1lbnRzJyxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAxXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBfb25EYXRhU3BsaWNlKHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBpZiAoY291bnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3N5bmMoW1xuICAgICAgICAgICAgICAgICdfcmVtb3ZlRWxlbWVudHMnLFxuICAgICAgICAgICAgICAgIHN0YXJ0LFxuICAgICAgICAgICAgICAgIGNvdW50XG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdDb3VudCA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICAgICAgICBpZiAobmV3Q291bnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3N5bmMoW1xuICAgICAgICAgICAgICAgICdfaW5zZXJ0RWxlbWVudHMnLFxuICAgICAgICAgICAgICAgIHN0YXJ0LFxuICAgICAgICAgICAgICAgIG5ld0NvdW50XG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfb25EYXRhVW5zaGlmdCgpIHtcbiAgICAgICAgdGhpcy5fc3luYyhbXG4gICAgICAgICAgICAnX2luc2VydEVsZW1lbnRzJyxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAgIF0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0QWxsU2NhbGVWYWx1ZXMoc2NhbGUsIHR5cGUpIHtcbiAgICBpZiAoIXNjYWxlLl9jYWNoZS4kYmFyKSB7XG4gICAgICAgIGNvbnN0IHZpc2libGVNZXRhcyA9IHNjYWxlLmdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKHR5cGUpO1xuICAgICAgICBsZXQgdmFsdWVzID0gW107XG4gICAgICAgIGZvcihsZXQgaSA9IDAsIGlsZW4gPSB2aXNpYmxlTWV0YXMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKXtcbiAgICAgICAgICAgIHZhbHVlcyA9IHZhbHVlcy5jb25jYXQodmlzaWJsZU1ldGFzW2ldLmNvbnRyb2xsZXIuZ2V0QWxsUGFyc2VkVmFsdWVzKHNjYWxlKSk7XG4gICAgICAgIH1cbiAgICAgICAgc2NhbGUuX2NhY2hlLiRiYXIgPSBfYXJyYXlVbmlxdWUodmFsdWVzLnNvcnQoKGEsIGIpPT5hIC0gYikpO1xuICAgIH1cbiAgICByZXR1cm4gc2NhbGUuX2NhY2hlLiRiYXI7XG59XG4gZnVuY3Rpb24gY29tcHV0ZU1pblNhbXBsZVNpemUobWV0YSkge1xuICAgIGNvbnN0IHNjYWxlID0gbWV0YS5pU2NhbGU7XG4gICAgY29uc3QgdmFsdWVzID0gZ2V0QWxsU2NhbGVWYWx1ZXMoc2NhbGUsIG1ldGEudHlwZSk7XG4gICAgbGV0IG1pbiA9IHNjYWxlLl9sZW5ndGg7XG4gICAgbGV0IGksIGlsZW4sIGN1cnIsIHByZXY7XG4gICAgY29uc3QgdXBkYXRlTWluQW5kUHJldiA9ICgpPT57XG4gICAgICAgIGlmIChjdXJyID09PSAzMjc2NyB8fCBjdXJyID09PSAtMzI3NjgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVmaW5lZChwcmV2KSkge1xuICAgICAgICAgICAgbWluID0gTWF0aC5taW4obWluLCBNYXRoLmFicyhjdXJyIC0gcHJldikgfHwgbWluKTtcbiAgICAgICAgfVxuICAgICAgICBwcmV2ID0gY3VycjtcbiAgICB9O1xuICAgIGZvcihpID0gMCwgaWxlbiA9IHZhbHVlcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBjdXJyID0gc2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZXNbaV0pO1xuICAgICAgICB1cGRhdGVNaW5BbmRQcmV2KCk7XG4gICAgfVxuICAgIHByZXYgPSB1bmRlZmluZWQ7XG4gICAgZm9yKGkgPSAwLCBpbGVuID0gc2NhbGUudGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgY3VyciA9IHNjYWxlLmdldFBpeGVsRm9yVGljayhpKTtcbiAgICAgICAgdXBkYXRlTWluQW5kUHJldigpO1xuICAgIH1cbiAgICByZXR1cm4gbWluO1xufVxuIGZ1bmN0aW9uIGNvbXB1dGVGaXRDYXRlZ29yeVRyYWl0cyhpbmRleCwgcnVsZXIsIG9wdGlvbnMsIHN0YWNrQ291bnQpIHtcbiAgICBjb25zdCB0aGlja25lc3MgPSBvcHRpb25zLmJhclRoaWNrbmVzcztcbiAgICBsZXQgc2l6ZSwgcmF0aW87XG4gICAgaWYgKGlzTnVsbE9yVW5kZWYodGhpY2tuZXNzKSkge1xuICAgICAgICBzaXplID0gcnVsZXIubWluICogb3B0aW9ucy5jYXRlZ29yeVBlcmNlbnRhZ2U7XG4gICAgICAgIHJhdGlvID0gb3B0aW9ucy5iYXJQZXJjZW50YWdlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNpemUgPSB0aGlja25lc3MgKiBzdGFja0NvdW50O1xuICAgICAgICByYXRpbyA9IDE7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGNodW5rOiBzaXplIC8gc3RhY2tDb3VudCxcbiAgICAgICAgcmF0aW8sXG4gICAgICAgIHN0YXJ0OiBydWxlci5waXhlbHNbaW5kZXhdIC0gc2l6ZSAvIDJcbiAgICB9O1xufVxuIGZ1bmN0aW9uIGNvbXB1dGVGbGV4Q2F0ZWdvcnlUcmFpdHMoaW5kZXgsIHJ1bGVyLCBvcHRpb25zLCBzdGFja0NvdW50KSB7XG4gICAgY29uc3QgcGl4ZWxzID0gcnVsZXIucGl4ZWxzO1xuICAgIGNvbnN0IGN1cnIgPSBwaXhlbHNbaW5kZXhdO1xuICAgIGxldCBwcmV2ID0gaW5kZXggPiAwID8gcGl4ZWxzW2luZGV4IC0gMV0gOiBudWxsO1xuICAgIGxldCBuZXh0ID0gaW5kZXggPCBwaXhlbHMubGVuZ3RoIC0gMSA/IHBpeGVsc1tpbmRleCArIDFdIDogbnVsbDtcbiAgICBjb25zdCBwZXJjZW50ID0gb3B0aW9ucy5jYXRlZ29yeVBlcmNlbnRhZ2U7XG4gICAgaWYgKHByZXYgPT09IG51bGwpIHtcbiAgICAgICAgcHJldiA9IGN1cnIgLSAobmV4dCA9PT0gbnVsbCA/IHJ1bGVyLmVuZCAtIHJ1bGVyLnN0YXJ0IDogbmV4dCAtIGN1cnIpO1xuICAgIH1cbiAgICBpZiAobmV4dCA9PT0gbnVsbCkge1xuICAgICAgICBuZXh0ID0gY3VyciArIGN1cnIgLSBwcmV2O1xuICAgIH1cbiAgICBjb25zdCBzdGFydCA9IGN1cnIgLSAoY3VyciAtIE1hdGgubWluKHByZXYsIG5leHQpKSAvIDIgKiBwZXJjZW50O1xuICAgIGNvbnN0IHNpemUgPSBNYXRoLmFicyhuZXh0IC0gcHJldikgLyAyICogcGVyY2VudDtcbiAgICByZXR1cm4ge1xuICAgICAgICBjaHVuazogc2l6ZSAvIHN0YWNrQ291bnQsXG4gICAgICAgIHJhdGlvOiBvcHRpb25zLmJhclBlcmNlbnRhZ2UsXG4gICAgICAgIHN0YXJ0XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHBhcnNlRmxvYXRCYXIoZW50cnksIGl0ZW0sIHZTY2FsZSwgaSkge1xuICAgIGNvbnN0IHN0YXJ0VmFsdWUgPSB2U2NhbGUucGFyc2UoZW50cnlbMF0sIGkpO1xuICAgIGNvbnN0IGVuZFZhbHVlID0gdlNjYWxlLnBhcnNlKGVudHJ5WzFdLCBpKTtcbiAgICBjb25zdCBtaW4gPSBNYXRoLm1pbihzdGFydFZhbHVlLCBlbmRWYWx1ZSk7XG4gICAgY29uc3QgbWF4ID0gTWF0aC5tYXgoc3RhcnRWYWx1ZSwgZW5kVmFsdWUpO1xuICAgIGxldCBiYXJTdGFydCA9IG1pbjtcbiAgICBsZXQgYmFyRW5kID0gbWF4O1xuICAgIGlmIChNYXRoLmFicyhtaW4pID4gTWF0aC5hYnMobWF4KSkge1xuICAgICAgICBiYXJTdGFydCA9IG1heDtcbiAgICAgICAgYmFyRW5kID0gbWluO1xuICAgIH1cbiAgICBpdGVtW3ZTY2FsZS5heGlzXSA9IGJhckVuZDtcbiAgICBpdGVtLl9jdXN0b20gPSB7XG4gICAgICAgIGJhclN0YXJ0LFxuICAgICAgICBiYXJFbmQsXG4gICAgICAgIHN0YXJ0OiBzdGFydFZhbHVlLFxuICAgICAgICBlbmQ6IGVuZFZhbHVlLFxuICAgICAgICBtaW4sXG4gICAgICAgIG1heFxuICAgIH07XG59XG5mdW5jdGlvbiBwYXJzZVZhbHVlKGVudHJ5LCBpdGVtLCB2U2NhbGUsIGkpIHtcbiAgICBpZiAoaXNBcnJheShlbnRyeSkpIHtcbiAgICAgICAgcGFyc2VGbG9hdEJhcihlbnRyeSwgaXRlbSwgdlNjYWxlLCBpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpdGVtW3ZTY2FsZS5heGlzXSA9IHZTY2FsZS5wYXJzZShlbnRyeSwgaSk7XG4gICAgfVxuICAgIHJldHVybiBpdGVtO1xufVxuZnVuY3Rpb24gcGFyc2VBcnJheU9yUHJpbWl0aXZlKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IGlTY2FsZSA9IG1ldGEuaVNjYWxlO1xuICAgIGNvbnN0IHZTY2FsZSA9IG1ldGEudlNjYWxlO1xuICAgIGNvbnN0IGxhYmVscyA9IGlTY2FsZS5nZXRMYWJlbHMoKTtcbiAgICBjb25zdCBzaW5nbGVTY2FsZSA9IGlTY2FsZSA9PT0gdlNjYWxlO1xuICAgIGNvbnN0IHBhcnNlZCA9IFtdO1xuICAgIGxldCBpLCBpbGVuLCBpdGVtLCBlbnRyeTtcbiAgICBmb3IoaSA9IHN0YXJ0LCBpbGVuID0gc3RhcnQgKyBjb3VudDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGVudHJ5ID0gZGF0YVtpXTtcbiAgICAgICAgaXRlbSA9IHt9O1xuICAgICAgICBpdGVtW2lTY2FsZS5heGlzXSA9IHNpbmdsZVNjYWxlIHx8IGlTY2FsZS5wYXJzZShsYWJlbHNbaV0sIGkpO1xuICAgICAgICBwYXJzZWQucHVzaChwYXJzZVZhbHVlKGVudHJ5LCBpdGVtLCB2U2NhbGUsIGkpKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZDtcbn1cbmZ1bmN0aW9uIGlzRmxvYXRCYXIoY3VzdG9tKSB7XG4gICAgcmV0dXJuIGN1c3RvbSAmJiBjdXN0b20uYmFyU3RhcnQgIT09IHVuZGVmaW5lZCAmJiBjdXN0b20uYmFyRW5kICE9PSB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBiYXJTaWduKHNpemUsIHZTY2FsZSwgYWN0dWFsQmFzZSkge1xuICAgIGlmIChzaXplICE9PSAwKSB7XG4gICAgICAgIHJldHVybiBzaWduKHNpemUpO1xuICAgIH1cbiAgICByZXR1cm4gKHZTY2FsZS5pc0hvcml6b250YWwoKSA/IDEgOiAtMSkgKiAodlNjYWxlLm1pbiA+PSBhY3R1YWxCYXNlID8gMSA6IC0xKTtcbn1cbmZ1bmN0aW9uIGJvcmRlclByb3BzKHByb3BlcnRpZXMpIHtcbiAgICBsZXQgcmV2ZXJzZSwgc3RhcnQsIGVuZCwgdG9wLCBib3R0b207XG4gICAgaWYgKHByb3BlcnRpZXMuaG9yaXpvbnRhbCkge1xuICAgICAgICByZXZlcnNlID0gcHJvcGVydGllcy5iYXNlID4gcHJvcGVydGllcy54O1xuICAgICAgICBzdGFydCA9ICdsZWZ0JztcbiAgICAgICAgZW5kID0gJ3JpZ2h0JztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXZlcnNlID0gcHJvcGVydGllcy5iYXNlIDwgcHJvcGVydGllcy55O1xuICAgICAgICBzdGFydCA9ICdib3R0b20nO1xuICAgICAgICBlbmQgPSAndG9wJztcbiAgICB9XG4gICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgdG9wID0gJ2VuZCc7XG4gICAgICAgIGJvdHRvbSA9ICdzdGFydCc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdG9wID0gJ3N0YXJ0JztcbiAgICAgICAgYm90dG9tID0gJ2VuZCc7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBlbmQsXG4gICAgICAgIHJldmVyc2UsXG4gICAgICAgIHRvcCxcbiAgICAgICAgYm90dG9tXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNldEJvcmRlclNraXBwZWQocHJvcGVydGllcywgb3B0aW9ucywgc3RhY2ssIGluZGV4KSB7XG4gICAgbGV0IGVkZ2UgPSBvcHRpb25zLmJvcmRlclNraXBwZWQ7XG4gICAgY29uc3QgcmVzID0ge307XG4gICAgaWYgKCFlZGdlKSB7XG4gICAgICAgIHByb3BlcnRpZXMuYm9yZGVyU2tpcHBlZCA9IHJlcztcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZWRnZSA9PT0gdHJ1ZSkge1xuICAgICAgICBwcm9wZXJ0aWVzLmJvcmRlclNraXBwZWQgPSB7XG4gICAgICAgICAgICB0b3A6IHRydWUsXG4gICAgICAgICAgICByaWdodDogdHJ1ZSxcbiAgICAgICAgICAgIGJvdHRvbTogdHJ1ZSxcbiAgICAgICAgICAgIGxlZnQ6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7IHN0YXJ0ICwgZW5kICwgcmV2ZXJzZSAsIHRvcCAsIGJvdHRvbSAgfSA9IGJvcmRlclByb3BzKHByb3BlcnRpZXMpO1xuICAgIGlmIChlZGdlID09PSAnbWlkZGxlJyAmJiBzdGFjaykge1xuICAgICAgICBwcm9wZXJ0aWVzLmVuYWJsZUJvcmRlclJhZGl1cyA9IHRydWU7XG4gICAgICAgIGlmICgoc3RhY2suX3RvcCB8fCAwKSA9PT0gaW5kZXgpIHtcbiAgICAgICAgICAgIGVkZ2UgPSB0b3A7XG4gICAgICAgIH0gZWxzZSBpZiAoKHN0YWNrLl9ib3R0b20gfHwgMCkgPT09IGluZGV4KSB7XG4gICAgICAgICAgICBlZGdlID0gYm90dG9tO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzW3BhcnNlRWRnZShib3R0b20sIHN0YXJ0LCBlbmQsIHJldmVyc2UpXSA9IHRydWU7XG4gICAgICAgICAgICBlZGdlID0gdG9wO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlc1twYXJzZUVkZ2UoZWRnZSwgc3RhcnQsIGVuZCwgcmV2ZXJzZSldID0gdHJ1ZTtcbiAgICBwcm9wZXJ0aWVzLmJvcmRlclNraXBwZWQgPSByZXM7XG59XG5mdW5jdGlvbiBwYXJzZUVkZ2UoZWRnZSwgYSwgYiwgcmV2ZXJzZSkge1xuICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgIGVkZ2UgPSBzd2FwKGVkZ2UsIGEsIGIpO1xuICAgICAgICBlZGdlID0gc3RhcnRFbmQoZWRnZSwgYiwgYSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZWRnZSA9IHN0YXJ0RW5kKGVkZ2UsIGEsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZWRnZTtcbn1cbmZ1bmN0aW9uIHN3YXAob3JpZywgdjEsIHYyKSB7XG4gICAgcmV0dXJuIG9yaWcgPT09IHYxID8gdjIgOiBvcmlnID09PSB2MiA/IHYxIDogb3JpZztcbn1cbmZ1bmN0aW9uIHN0YXJ0RW5kKHYsIHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gdiA9PT0gJ3N0YXJ0JyA/IHN0YXJ0IDogdiA9PT0gJ2VuZCcgPyBlbmQgOiB2O1xufVxuZnVuY3Rpb24gc2V0SW5mbGF0ZUFtb3VudChwcm9wZXJ0aWVzLCB7IGluZmxhdGVBbW91bnQgIH0sIHJhdGlvKSB7XG4gICAgcHJvcGVydGllcy5pbmZsYXRlQW1vdW50ID0gaW5mbGF0ZUFtb3VudCA9PT0gJ2F1dG8nID8gcmF0aW8gPT09IDEgPyAwLjMzIDogMCA6IGluZmxhdGVBbW91bnQ7XG59XG5jbGFzcyBCYXJDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICAgIHN0YXRpYyBpZCA9ICdiYXInO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgZGF0YXNldEVsZW1lbnRUeXBlOiBmYWxzZSxcbiAgICAgICAgZGF0YUVsZW1lbnRUeXBlOiAnYmFyJyxcbiAgICAgICAgY2F0ZWdvcnlQZXJjZW50YWdlOiAwLjgsXG4gICAgICAgIGJhclBlcmNlbnRhZ2U6IDAuOSxcbiAgICAgICAgZ3JvdXBlZDogdHJ1ZSxcbiAgICAgICAgYW5pbWF0aW9uczoge1xuICAgICAgICAgICAgbnVtYmVyczoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgJ3gnLFxuICAgICAgICAgICAgICAgICAgICAneScsXG4gICAgICAgICAgICAgICAgICAgICdiYXNlJyxcbiAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJyxcbiAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCdcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuIHN0YXRpYyBvdmVycmlkZXMgPSB7XG4gICAgICAgIHNjYWxlczoge1xuICAgICAgICAgICAgX2luZGV4Xzoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdjYXRlZ29yeScsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiB0cnVlLFxuICAgICAgICAgICAgICAgIGdyaWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF92YWx1ZV86IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbGluZWFyJyxcbiAgICAgICAgICAgICAgICBiZWdpbkF0WmVybzogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiBwYXJzZVByaW1pdGl2ZURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIHJldHVybiBwYXJzZUFycmF5T3JQcmltaXRpdmUobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICB9XG4gcGFyc2VBcnJheURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIHJldHVybiBwYXJzZUFycmF5T3JQcmltaXRpdmUobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICB9XG4gcGFyc2VPYmplY3REYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCB7IGlTY2FsZSAsIHZTY2FsZSAgfSA9IG1ldGE7XG4gICAgICAgIGNvbnN0IHsgeEF4aXNLZXkgPSd4JyAsIHlBeGlzS2V5ID0neScgIH0gPSB0aGlzLl9wYXJzaW5nO1xuICAgICAgICBjb25zdCBpQXhpc0tleSA9IGlTY2FsZS5heGlzID09PSAneCcgPyB4QXhpc0tleSA6IHlBeGlzS2V5O1xuICAgICAgICBjb25zdCB2QXhpc0tleSA9IHZTY2FsZS5heGlzID09PSAneCcgPyB4QXhpc0tleSA6IHlBeGlzS2V5O1xuICAgICAgICBjb25zdCBwYXJzZWQgPSBbXTtcbiAgICAgICAgbGV0IGksIGlsZW4sIGl0ZW0sIG9iajtcbiAgICAgICAgZm9yKGkgPSBzdGFydCwgaWxlbiA9IHN0YXJ0ICsgY291bnQ7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgb2JqID0gZGF0YVtpXTtcbiAgICAgICAgICAgIGl0ZW0gPSB7fTtcbiAgICAgICAgICAgIGl0ZW1baVNjYWxlLmF4aXNdID0gaVNjYWxlLnBhcnNlKHJlc29sdmVPYmplY3RLZXkob2JqLCBpQXhpc0tleSksIGkpO1xuICAgICAgICAgICAgcGFyc2VkLnB1c2gocGFyc2VWYWx1ZShyZXNvbHZlT2JqZWN0S2V5KG9iaiwgdkF4aXNLZXkpLCBpdGVtLCB2U2NhbGUsIGkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgIH1cbiB1cGRhdGVSYW5nZUZyb21QYXJzZWQocmFuZ2UsIHNjYWxlLCBwYXJzZWQsIHN0YWNrKSB7XG4gICAgICAgIHN1cGVyLnVwZGF0ZVJhbmdlRnJvbVBhcnNlZChyYW5nZSwgc2NhbGUsIHBhcnNlZCwgc3RhY2spO1xuICAgICAgICBjb25zdCBjdXN0b20gPSBwYXJzZWQuX2N1c3RvbTtcbiAgICAgICAgaWYgKGN1c3RvbSAmJiBzY2FsZSA9PT0gdGhpcy5fY2FjaGVkTWV0YS52U2NhbGUpIHtcbiAgICAgICAgICAgIHJhbmdlLm1pbiA9IE1hdGgubWluKHJhbmdlLm1pbiwgY3VzdG9tLm1pbik7XG4gICAgICAgICAgICByYW5nZS5tYXggPSBNYXRoLm1heChyYW5nZS5tYXgsIGN1c3RvbS5tYXgpO1xuICAgICAgICB9XG4gICAgfVxuIGdldE1heE92ZXJmbG93KCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gZ2V0TGFiZWxBbmRWYWx1ZShpbmRleCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgeyBpU2NhbGUgLCB2U2NhbGUgIH0gPSBtZXRhO1xuICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgICAgIGNvbnN0IGN1c3RvbSA9IHBhcnNlZC5fY3VzdG9tO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGlzRmxvYXRCYXIoY3VzdG9tKSA/ICdbJyArIGN1c3RvbS5zdGFydCArICcsICcgKyBjdXN0b20uZW5kICsgJ10nIDogJycgKyB2U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWRbdlNjYWxlLmF4aXNdKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhYmVsOiAnJyArIGlTY2FsZS5nZXRMYWJlbEZvclZhbHVlKHBhcnNlZFtpU2NhbGUuYXhpc10pLFxuICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nID0gdHJ1ZTtcbiAgICAgICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgbWV0YS5zdGFjayA9IHRoaXMuZ2V0RGF0YXNldCgpLnN0YWNrO1xuICAgIH1cbiAgICB1cGRhdGUobW9kZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50cyhtZXRhLmRhdGEsIDAsIG1ldGEuZGF0YS5sZW5ndGgsIG1vZGUpO1xuICAgIH1cbiAgICB1cGRhdGVFbGVtZW50cyhiYXJzLCBzdGFydCwgY291bnQsIG1vZGUpIHtcbiAgICAgICAgY29uc3QgcmVzZXQgPSBtb2RlID09PSAncmVzZXQnO1xuICAgICAgICBjb25zdCB7IGluZGV4ICwgX2NhY2hlZE1ldGE6IHsgdlNjYWxlICB9ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgYmFzZSA9IHZTY2FsZS5nZXRCYXNlUGl4ZWwoKTtcbiAgICAgICAgY29uc3QgaG9yaXpvbnRhbCA9IHZTY2FsZS5pc0hvcml6b250YWwoKTtcbiAgICAgICAgY29uc3QgcnVsZXIgPSB0aGlzLl9nZXRSdWxlcigpO1xuICAgICAgICBjb25zdCB7IHNoYXJlZE9wdGlvbnMgLCBpbmNsdWRlT3B0aW9ucyAgfSA9IHRoaXMuX2dldFNoYXJlZE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgICAgICBmb3IobGV0IGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7IGkrKyl7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpKTtcbiAgICAgICAgICAgIGNvbnN0IHZwaXhlbHMgPSByZXNldCB8fCBpc051bGxPclVuZGVmKHBhcnNlZFt2U2NhbGUuYXhpc10pID8ge1xuICAgICAgICAgICAgICAgIGJhc2UsXG4gICAgICAgICAgICAgICAgaGVhZDogYmFzZVxuICAgICAgICAgICAgfSA6IHRoaXMuX2NhbGN1bGF0ZUJhclZhbHVlUGl4ZWxzKGkpO1xuICAgICAgICAgICAgY29uc3QgaXBpeGVscyA9IHRoaXMuX2NhbGN1bGF0ZUJhckluZGV4UGl4ZWxzKGksIHJ1bGVyKTtcbiAgICAgICAgICAgIGNvbnN0IHN0YWNrID0gKHBhcnNlZC5fc3RhY2tzIHx8IHt9KVt2U2NhbGUuYXhpc107XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgICAgIGhvcml6b250YWwsXG4gICAgICAgICAgICAgICAgYmFzZTogdnBpeGVscy5iYXNlLFxuICAgICAgICAgICAgICAgIGVuYWJsZUJvcmRlclJhZGl1czogIXN0YWNrIHx8IGlzRmxvYXRCYXIocGFyc2VkLl9jdXN0b20pIHx8IGluZGV4ID09PSBzdGFjay5fdG9wIHx8IGluZGV4ID09PSBzdGFjay5fYm90dG9tLFxuICAgICAgICAgICAgICAgIHg6IGhvcml6b250YWwgPyB2cGl4ZWxzLmhlYWQgOiBpcGl4ZWxzLmNlbnRlcixcbiAgICAgICAgICAgICAgICB5OiBob3Jpem9udGFsID8gaXBpeGVscy5jZW50ZXIgOiB2cGl4ZWxzLmhlYWQsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBob3Jpem9udGFsID8gaXBpeGVscy5zaXplIDogTWF0aC5hYnModnBpeGVscy5zaXplKSxcbiAgICAgICAgICAgICAgICB3aWR0aDogaG9yaXpvbnRhbCA/IE1hdGguYWJzKHZwaXhlbHMuc2l6ZSkgOiBpcGl4ZWxzLnNpemVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoaW5jbHVkZU9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLm9wdGlvbnMgPSBzaGFyZWRPcHRpb25zIHx8IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpLCBiYXJzW2ldLmFjdGl2ZSA/ICdhY3RpdmUnIDogbW9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBvcHRpb25zID0gcHJvcGVydGllcy5vcHRpb25zIHx8IGJhcnNbaV0ub3B0aW9ucztcbiAgICAgICAgICAgIHNldEJvcmRlclNraXBwZWQocHJvcGVydGllcywgb3B0aW9ucywgc3RhY2ssIGluZGV4KTtcbiAgICAgICAgICAgIHNldEluZmxhdGVBbW91bnQocHJvcGVydGllcywgb3B0aW9ucywgcnVsZXIucmF0aW8pO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50KGJhcnNbaV0sIGksIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgICAgICB9XG4gICAgfVxuIF9nZXRTdGFja3MobGFzdCwgZGF0YUluZGV4KSB7XG4gICAgICAgIGNvbnN0IHsgaVNjYWxlICB9ID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgbWV0YXNldHMgPSBpU2NhbGUuZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXModGhpcy5fdHlwZSkuZmlsdGVyKChtZXRhKT0+bWV0YS5jb250cm9sbGVyLm9wdGlvbnMuZ3JvdXBlZCk7XG4gICAgICAgIGNvbnN0IHN0YWNrZWQgPSBpU2NhbGUub3B0aW9ucy5zdGFja2VkO1xuICAgICAgICBjb25zdCBzdGFja3MgPSBbXTtcbiAgICAgICAgY29uc3Qgc2tpcE51bGwgPSAobWV0YSk9PntcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZCA9IG1ldGEuY29udHJvbGxlci5nZXRQYXJzZWQoZGF0YUluZGV4KTtcbiAgICAgICAgICAgIGNvbnN0IHZhbCA9IHBhcnNlZCAmJiBwYXJzZWRbbWV0YS52U2NhbGUuYXhpc107XG4gICAgICAgICAgICBpZiAoaXNOdWxsT3JVbmRlZih2YWwpIHx8IGlzTmFOKHZhbCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZm9yIChjb25zdCBtZXRhIG9mIG1ldGFzZXRzKXtcbiAgICAgICAgICAgIGlmIChkYXRhSW5kZXggIT09IHVuZGVmaW5lZCAmJiBza2lwTnVsbChtZXRhKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YWNrZWQgPT09IGZhbHNlIHx8IHN0YWNrcy5pbmRleE9mKG1ldGEuc3RhY2spID09PSAtMSB8fCBzdGFja2VkID09PSB1bmRlZmluZWQgJiYgbWV0YS5zdGFjayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgc3RhY2tzLnB1c2gobWV0YS5zdGFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWV0YS5pbmRleCA9PT0gbGFzdCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghc3RhY2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgc3RhY2tzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhY2tzO1xuICAgIH1cbiBfZ2V0U3RhY2tDb3VudChpbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0U3RhY2tzKHVuZGVmaW5lZCwgaW5kZXgpLmxlbmd0aDtcbiAgICB9XG4gX2dldFN0YWNrSW5kZXgoZGF0YXNldEluZGV4LCBuYW1lLCBkYXRhSW5kZXgpIHtcbiAgICAgICAgY29uc3Qgc3RhY2tzID0gdGhpcy5fZ2V0U3RhY2tzKGRhdGFzZXRJbmRleCwgZGF0YUluZGV4KTtcbiAgICAgICAgY29uc3QgaW5kZXggPSBuYW1lICE9PSB1bmRlZmluZWQgPyBzdGFja3MuaW5kZXhPZihuYW1lKSA6IC0xO1xuICAgICAgICByZXR1cm4gaW5kZXggPT09IC0xID8gc3RhY2tzLmxlbmd0aCAtIDEgOiBpbmRleDtcbiAgICB9XG4gX2dldFJ1bGVyKCkge1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgaVNjYWxlID0gbWV0YS5pU2NhbGU7XG4gICAgICAgIGNvbnN0IHBpeGVscyA9IFtdO1xuICAgICAgICBsZXQgaSwgaWxlbjtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gbWV0YS5kYXRhLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBwaXhlbHMucHVzaChpU2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZSh0aGlzLmdldFBhcnNlZChpKVtpU2NhbGUuYXhpc10sIGkpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBiYXJUaGlja25lc3MgPSBvcHRzLmJhclRoaWNrbmVzcztcbiAgICAgICAgY29uc3QgbWluID0gYmFyVGhpY2tuZXNzIHx8IGNvbXB1dGVNaW5TYW1wbGVTaXplKG1ldGEpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWluLFxuICAgICAgICAgICAgcGl4ZWxzLFxuICAgICAgICAgICAgc3RhcnQ6IGlTY2FsZS5fc3RhcnRQaXhlbCxcbiAgICAgICAgICAgIGVuZDogaVNjYWxlLl9lbmRQaXhlbCxcbiAgICAgICAgICAgIHN0YWNrQ291bnQ6IHRoaXMuX2dldFN0YWNrQ291bnQoKSxcbiAgICAgICAgICAgIHNjYWxlOiBpU2NhbGUsXG4gICAgICAgICAgICBncm91cGVkOiBvcHRzLmdyb3VwZWQsXG4gICAgICAgICAgICByYXRpbzogYmFyVGhpY2tuZXNzID8gMSA6IG9wdHMuY2F0ZWdvcnlQZXJjZW50YWdlICogb3B0cy5iYXJQZXJjZW50YWdlXG4gICAgICAgIH07XG4gICAgfVxuIF9jYWxjdWxhdGVCYXJWYWx1ZVBpeGVscyhpbmRleCkge1xuICAgICAgICBjb25zdCB7IF9jYWNoZWRNZXRhOiB7IHZTY2FsZSAsIF9zdGFja2VkICwgaW5kZXg6IGRhdGFzZXRJbmRleCAgfSAsIG9wdGlvbnM6IHsgYmFzZTogYmFzZVZhbHVlICwgbWluQmFyTGVuZ3RoICB9ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgYWN0dWFsQmFzZSA9IGJhc2VWYWx1ZSB8fCAwO1xuICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgICAgIGNvbnN0IGN1c3RvbSA9IHBhcnNlZC5fY3VzdG9tO1xuICAgICAgICBjb25zdCBmbG9hdGluZyA9IGlzRmxvYXRCYXIoY3VzdG9tKTtcbiAgICAgICAgbGV0IHZhbHVlID0gcGFyc2VkW3ZTY2FsZS5heGlzXTtcbiAgICAgICAgbGV0IHN0YXJ0ID0gMDtcbiAgICAgICAgbGV0IGxlbmd0aCA9IF9zdGFja2VkID8gdGhpcy5hcHBseVN0YWNrKHZTY2FsZSwgcGFyc2VkLCBfc3RhY2tlZCkgOiB2YWx1ZTtcbiAgICAgICAgbGV0IGhlYWQsIHNpemU7XG4gICAgICAgIGlmIChsZW5ndGggIT09IHZhbHVlKSB7XG4gICAgICAgICAgICBzdGFydCA9IGxlbmd0aCAtIHZhbHVlO1xuICAgICAgICAgICAgbGVuZ3RoID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZsb2F0aW5nKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGN1c3RvbS5iYXJTdGFydDtcbiAgICAgICAgICAgIGxlbmd0aCA9IGN1c3RvbS5iYXJFbmQgLSBjdXN0b20uYmFyU3RhcnQ7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IDAgJiYgc2lnbih2YWx1ZSkgIT09IHNpZ24oY3VzdG9tLmJhckVuZCkpIHtcbiAgICAgICAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGFydCArPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGFydFZhbHVlID0gIWlzTnVsbE9yVW5kZWYoYmFzZVZhbHVlKSAmJiAhZmxvYXRpbmcgPyBiYXNlVmFsdWUgOiBzdGFydDtcbiAgICAgICAgbGV0IGJhc2UgPSB2U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShzdGFydFZhbHVlKTtcbiAgICAgICAgaWYgKHRoaXMuY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaW5kZXgpKSB7XG4gICAgICAgICAgICBoZWFkID0gdlNjYWxlLmdldFBpeGVsRm9yVmFsdWUoc3RhcnQgKyBsZW5ndGgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGVhZCA9IGJhc2U7XG4gICAgICAgIH1cbiAgICAgICAgc2l6ZSA9IGhlYWQgLSBiYXNlO1xuICAgICAgICBpZiAoTWF0aC5hYnMoc2l6ZSkgPCBtaW5CYXJMZW5ndGgpIHtcbiAgICAgICAgICAgIHNpemUgPSBiYXJTaWduKHNpemUsIHZTY2FsZSwgYWN0dWFsQmFzZSkgKiBtaW5CYXJMZW5ndGg7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IGFjdHVhbEJhc2UpIHtcbiAgICAgICAgICAgICAgICBiYXNlIC09IHNpemUgLyAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc3RhcnRQaXhlbCA9IHZTY2FsZS5nZXRQaXhlbEZvckRlY2ltYWwoMCk7XG4gICAgICAgICAgICBjb25zdCBlbmRQaXhlbCA9IHZTY2FsZS5nZXRQaXhlbEZvckRlY2ltYWwoMSk7XG4gICAgICAgICAgICBjb25zdCBtaW4gPSBNYXRoLm1pbihzdGFydFBpeGVsLCBlbmRQaXhlbCk7XG4gICAgICAgICAgICBjb25zdCBtYXggPSBNYXRoLm1heChzdGFydFBpeGVsLCBlbmRQaXhlbCk7XG4gICAgICAgICAgICBiYXNlID0gTWF0aC5tYXgoTWF0aC5taW4oYmFzZSwgbWF4KSwgbWluKTtcbiAgICAgICAgICAgIGhlYWQgPSBiYXNlICsgc2l6ZTtcbiAgICAgICAgICAgIGlmIChfc3RhY2tlZCAmJiAhZmxvYXRpbmcpIHtcbiAgICAgICAgICAgICAgICBwYXJzZWQuX3N0YWNrc1t2U2NhbGUuYXhpc10uX3Zpc3VhbFZhbHVlc1tkYXRhc2V0SW5kZXhdID0gdlNjYWxlLmdldFZhbHVlRm9yUGl4ZWwoaGVhZCkgLSB2U2NhbGUuZ2V0VmFsdWVGb3JQaXhlbChiYXNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYmFzZSA9PT0gdlNjYWxlLmdldFBpeGVsRm9yVmFsdWUoYWN0dWFsQmFzZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGhhbGZHcmlkID0gc2lnbihzaXplKSAqIHZTY2FsZS5nZXRMaW5lV2lkdGhGb3JWYWx1ZShhY3R1YWxCYXNlKSAvIDI7XG4gICAgICAgICAgICBiYXNlICs9IGhhbGZHcmlkO1xuICAgICAgICAgICAgc2l6ZSAtPSBoYWxmR3JpZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2l6ZSxcbiAgICAgICAgICAgIGJhc2UsXG4gICAgICAgICAgICBoZWFkLFxuICAgICAgICAgICAgY2VudGVyOiBoZWFkICsgc2l6ZSAvIDJcbiAgICAgICAgfTtcbiAgICB9XG4gX2NhbGN1bGF0ZUJhckluZGV4UGl4ZWxzKGluZGV4LCBydWxlcikge1xuICAgICAgICBjb25zdCBzY2FsZSA9IHJ1bGVyLnNjYWxlO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBza2lwTnVsbCA9IG9wdGlvbnMuc2tpcE51bGw7XG4gICAgICAgIGNvbnN0IG1heEJhclRoaWNrbmVzcyA9IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMubWF4QmFyVGhpY2tuZXNzLCBJbmZpbml0eSk7XG4gICAgICAgIGxldCBjZW50ZXIsIHNpemU7XG4gICAgICAgIGlmIChydWxlci5ncm91cGVkKSB7XG4gICAgICAgICAgICBjb25zdCBzdGFja0NvdW50ID0gc2tpcE51bGwgPyB0aGlzLl9nZXRTdGFja0NvdW50KGluZGV4KSA6IHJ1bGVyLnN0YWNrQ291bnQ7XG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IG9wdGlvbnMuYmFyVGhpY2tuZXNzID09PSAnZmxleCcgPyBjb21wdXRlRmxleENhdGVnb3J5VHJhaXRzKGluZGV4LCBydWxlciwgb3B0aW9ucywgc3RhY2tDb3VudCkgOiBjb21wdXRlRml0Q2F0ZWdvcnlUcmFpdHMoaW5kZXgsIHJ1bGVyLCBvcHRpb25zLCBzdGFja0NvdW50KTtcbiAgICAgICAgICAgIGNvbnN0IHN0YWNrSW5kZXggPSB0aGlzLl9nZXRTdGFja0luZGV4KHRoaXMuaW5kZXgsIHRoaXMuX2NhY2hlZE1ldGEuc3RhY2ssIHNraXBOdWxsID8gaW5kZXggOiB1bmRlZmluZWQpO1xuICAgICAgICAgICAgY2VudGVyID0gcmFuZ2Uuc3RhcnQgKyByYW5nZS5jaHVuayAqIHN0YWNrSW5kZXggKyByYW5nZS5jaHVuayAvIDI7XG4gICAgICAgICAgICBzaXplID0gTWF0aC5taW4obWF4QmFyVGhpY2tuZXNzLCByYW5nZS5jaHVuayAqIHJhbmdlLnJhdGlvKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNlbnRlciA9IHNjYWxlLmdldFBpeGVsRm9yVmFsdWUodGhpcy5nZXRQYXJzZWQoaW5kZXgpW3NjYWxlLmF4aXNdLCBpbmRleCk7XG4gICAgICAgICAgICBzaXplID0gTWF0aC5taW4obWF4QmFyVGhpY2tuZXNzLCBydWxlci5taW4gKiBydWxlci5yYXRpbyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJhc2U6IGNlbnRlciAtIHNpemUgLyAyLFxuICAgICAgICAgICAgaGVhZDogY2VudGVyICsgc2l6ZSAvIDIsXG4gICAgICAgICAgICBjZW50ZXIsXG4gICAgICAgICAgICBzaXplXG4gICAgICAgIH07XG4gICAgfVxuICAgIGRyYXcoKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCB2U2NhbGUgPSBtZXRhLnZTY2FsZTtcbiAgICAgICAgY29uc3QgcmVjdHMgPSBtZXRhLmRhdGE7XG4gICAgICAgIGNvbnN0IGlsZW4gPSByZWN0cy5sZW5ndGg7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgZm9yKDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBpZiAodGhpcy5nZXRQYXJzZWQoaSlbdlNjYWxlLmF4aXNdICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVjdHNbaV0uZHJhdyh0aGlzLl9jdHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5jbGFzcyBCdWJibGVDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICAgIHN0YXRpYyBpZCA9ICdidWJibGUnO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgZGF0YXNldEVsZW1lbnRUeXBlOiBmYWxzZSxcbiAgICAgICAgZGF0YUVsZW1lbnRUeXBlOiAncG9pbnQnLFxuICAgICAgICBhbmltYXRpb25zOiB7XG4gICAgICAgICAgICBudW1iZXJzOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgICAgICAgICAgcHJvcGVydGllczogW1xuICAgICAgICAgICAgICAgICAgICAneCcsXG4gICAgICAgICAgICAgICAgICAgICd5JyxcbiAgICAgICAgICAgICAgICAgICAgJ2JvcmRlcldpZHRoJyxcbiAgICAgICAgICAgICAgICAgICAgJ3JhZGl1cydcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuIHN0YXRpYyBvdmVycmlkZXMgPSB7XG4gICAgICAgIHNjYWxlczoge1xuICAgICAgICAgICAgeDoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5lYXInXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeToge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5lYXInXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGluaXRpYWxpemUoKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlT3B0aW9uU2hhcmluZyA9IHRydWU7XG4gICAgICAgIHN1cGVyLmluaXRpYWxpemUoKTtcbiAgICB9XG4gcGFyc2VQcmltaXRpdmVEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCBwYXJzZWQgPSBzdXBlci5wYXJzZVByaW1pdGl2ZURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHBhcnNlZC5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBwYXJzZWRbaV0uX2N1c3RvbSA9IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpICsgc3RhcnQpLnJhZGl1cztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgIH1cbiBwYXJzZUFycmF5RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gc3VwZXIucGFyc2VBcnJheURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHBhcnNlZC5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gZGF0YVtzdGFydCArIGldO1xuICAgICAgICAgICAgcGFyc2VkW2ldLl9jdXN0b20gPSB2YWx1ZU9yRGVmYXVsdChpdGVtWzJdLCB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSArIHN0YXJ0KS5yYWRpdXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgfVxuIHBhcnNlT2JqZWN0RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gc3VwZXIucGFyc2VPYmplY3REYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCk7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBwYXJzZWQubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IGRhdGFbc3RhcnQgKyBpXTtcbiAgICAgICAgICAgIHBhcnNlZFtpXS5fY3VzdG9tID0gdmFsdWVPckRlZmF1bHQoaXRlbSAmJiBpdGVtLnIgJiYgK2l0ZW0uciwgdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGkgKyBzdGFydCkucmFkaXVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgIH1cbiBnZXRNYXhPdmVyZmxvdygpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuX2NhY2hlZE1ldGEuZGF0YTtcbiAgICAgICAgbGV0IG1heCA9IDA7XG4gICAgICAgIGZvcihsZXQgaSA9IGRhdGEubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpe1xuICAgICAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCBkYXRhW2ldLnNpemUodGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGkpKSAvIDIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXggPiAwICYmIG1heDtcbiAgICB9XG4gZ2V0TGFiZWxBbmRWYWx1ZShpbmRleCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgbGFiZWxzID0gdGhpcy5jaGFydC5kYXRhLmxhYmVscyB8fCBbXTtcbiAgICAgICAgY29uc3QgeyB4U2NhbGUgLCB5U2NhbGUgIH0gPSBtZXRhO1xuICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgICAgIGNvbnN0IHggPSB4U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWQueCk7XG4gICAgICAgIGNvbnN0IHkgPSB5U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWQueSk7XG4gICAgICAgIGNvbnN0IHIgPSBwYXJzZWQuX2N1c3RvbTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbHNbaW5kZXhdIHx8ICcnLFxuICAgICAgICAgICAgdmFsdWU6ICcoJyArIHggKyAnLCAnICsgeSArIChyID8gJywgJyArIHIgOiAnJykgKyAnKSdcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdXBkYXRlKG1vZGUpIHtcbiAgICAgICAgY29uc3QgcG9pbnRzID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhO1xuICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnRzKHBvaW50cywgMCwgcG9pbnRzLmxlbmd0aCwgbW9kZSk7XG4gICAgfVxuICAgIHVwZGF0ZUVsZW1lbnRzKHBvaW50cywgc3RhcnQsIGNvdW50LCBtb2RlKSB7XG4gICAgICAgIGNvbnN0IHJlc2V0ID0gbW9kZSA9PT0gJ3Jlc2V0JztcbiAgICAgICAgY29uc3QgeyBpU2NhbGUgLCB2U2NhbGUgIH0gPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCB7IHNoYXJlZE9wdGlvbnMgLCBpbmNsdWRlT3B0aW9ucyAgfSA9IHRoaXMuX2dldFNoYXJlZE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgICAgICBjb25zdCBpQXhpcyA9IGlTY2FsZS5heGlzO1xuICAgICAgICBjb25zdCB2QXhpcyA9IHZTY2FsZS5heGlzO1xuICAgICAgICBmb3IobGV0IGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7IGkrKyl7XG4gICAgICAgICAgICBjb25zdCBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZCA9ICFyZXNldCAmJiB0aGlzLmdldFBhcnNlZChpKTtcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGlQaXhlbCA9IHByb3BlcnRpZXNbaUF4aXNdID0gcmVzZXQgPyBpU2NhbGUuZ2V0UGl4ZWxGb3JEZWNpbWFsKDAuNSkgOiBpU2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShwYXJzZWRbaUF4aXNdKTtcbiAgICAgICAgICAgIGNvbnN0IHZQaXhlbCA9IHByb3BlcnRpZXNbdkF4aXNdID0gcmVzZXQgPyB2U2NhbGUuZ2V0QmFzZVBpeGVsKCkgOiB2U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShwYXJzZWRbdkF4aXNdKTtcbiAgICAgICAgICAgIHByb3BlcnRpZXMuc2tpcCA9IGlzTmFOKGlQaXhlbCkgfHwgaXNOYU4odlBpeGVsKTtcbiAgICAgICAgICAgIGlmIChpbmNsdWRlT3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMub3B0aW9ucyA9IHNoYXJlZE9wdGlvbnMgfHwgdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGksIHBvaW50LmFjdGl2ZSA/ICdhY3RpdmUnIDogbW9kZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXMub3B0aW9ucy5yYWRpdXMgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudXBkYXRlRWxlbWVudChwb2ludCwgaSwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gcmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpbmRleCwgbW9kZSkge1xuICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgICAgIGxldCB2YWx1ZXMgPSBzdXBlci5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGluZGV4LCBtb2RlKTtcbiAgICAgICAgaWYgKHZhbHVlcy4kc2hhcmVkKSB7XG4gICAgICAgICAgICB2YWx1ZXMgPSBPYmplY3QuYXNzaWduKHt9LCB2YWx1ZXMsIHtcbiAgICAgICAgICAgICAgICAkc2hhcmVkOiBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmFkaXVzID0gdmFsdWVzLnJhZGl1cztcbiAgICAgICAgaWYgKG1vZGUgIT09ICdhY3RpdmUnKSB7XG4gICAgICAgICAgICB2YWx1ZXMucmFkaXVzID0gMDtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZXMucmFkaXVzICs9IHZhbHVlT3JEZWZhdWx0KHBhcnNlZCAmJiBwYXJzZWQuX2N1c3RvbSwgcmFkaXVzKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldFJhdGlvQW5kT2Zmc2V0KHJvdGF0aW9uLCBjaXJjdW1mZXJlbmNlLCBjdXRvdXQpIHtcbiAgICBsZXQgcmF0aW9YID0gMTtcbiAgICBsZXQgcmF0aW9ZID0gMTtcbiAgICBsZXQgb2Zmc2V0WCA9IDA7XG4gICAgbGV0IG9mZnNldFkgPSAwO1xuICAgIGlmIChjaXJjdW1mZXJlbmNlIDwgVEFVKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0QW5nbGUgPSByb3RhdGlvbjtcbiAgICAgICAgY29uc3QgZW5kQW5nbGUgPSBzdGFydEFuZ2xlICsgY2lyY3VtZmVyZW5jZTtcbiAgICAgICAgY29uc3Qgc3RhcnRYID0gTWF0aC5jb3Moc3RhcnRBbmdsZSk7XG4gICAgICAgIGNvbnN0IHN0YXJ0WSA9IE1hdGguc2luKHN0YXJ0QW5nbGUpO1xuICAgICAgICBjb25zdCBlbmRYID0gTWF0aC5jb3MoZW5kQW5nbGUpO1xuICAgICAgICBjb25zdCBlbmRZID0gTWF0aC5zaW4oZW5kQW5nbGUpO1xuICAgICAgICBjb25zdCBjYWxjTWF4ID0gKGFuZ2xlLCBhLCBiKT0+X2FuZ2xlQmV0d2VlbihhbmdsZSwgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIHRydWUpID8gMSA6IE1hdGgubWF4KGEsIGEgKiBjdXRvdXQsIGIsIGIgKiBjdXRvdXQpO1xuICAgICAgICBjb25zdCBjYWxjTWluID0gKGFuZ2xlLCBhLCBiKT0+X2FuZ2xlQmV0d2VlbihhbmdsZSwgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIHRydWUpID8gLTEgOiBNYXRoLm1pbihhLCBhICogY3V0b3V0LCBiLCBiICogY3V0b3V0KTtcbiAgICAgICAgY29uc3QgbWF4WCA9IGNhbGNNYXgoMCwgc3RhcnRYLCBlbmRYKTtcbiAgICAgICAgY29uc3QgbWF4WSA9IGNhbGNNYXgoSEFMRl9QSSwgc3RhcnRZLCBlbmRZKTtcbiAgICAgICAgY29uc3QgbWluWCA9IGNhbGNNaW4oUEksIHN0YXJ0WCwgZW5kWCk7XG4gICAgICAgIGNvbnN0IG1pblkgPSBjYWxjTWluKFBJICsgSEFMRl9QSSwgc3RhcnRZLCBlbmRZKTtcbiAgICAgICAgcmF0aW9YID0gKG1heFggLSBtaW5YKSAvIDI7XG4gICAgICAgIHJhdGlvWSA9IChtYXhZIC0gbWluWSkgLyAyO1xuICAgICAgICBvZmZzZXRYID0gLShtYXhYICsgbWluWCkgLyAyO1xuICAgICAgICBvZmZzZXRZID0gLShtYXhZICsgbWluWSkgLyAyO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICByYXRpb1gsXG4gICAgICAgIHJhdGlvWSxcbiAgICAgICAgb2Zmc2V0WCxcbiAgICAgICAgb2Zmc2V0WVxuICAgIH07XG59XG5jbGFzcyBEb3VnaG51dENvbnRyb2xsZXIgZXh0ZW5kcyBEYXRhc2V0Q29udHJvbGxlciB7XG4gICAgc3RhdGljIGlkID0gJ2RvdWdobnV0JztcbiBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gICAgICAgIGRhdGFzZXRFbGVtZW50VHlwZTogZmFsc2UsXG4gICAgICAgIGRhdGFFbGVtZW50VHlwZTogJ2FyYycsXG4gICAgICAgIGFuaW1hdGlvbjoge1xuICAgICAgICAgICAgYW5pbWF0ZVJvdGF0ZTogdHJ1ZSxcbiAgICAgICAgICAgIGFuaW1hdGVTY2FsZTogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgYW5pbWF0aW9uczoge1xuICAgICAgICAgICAgbnVtYmVyczoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgJ2NpcmN1bWZlcmVuY2UnLFxuICAgICAgICAgICAgICAgICAgICAnZW5kQW5nbGUnLFxuICAgICAgICAgICAgICAgICAgICAnaW5uZXJSYWRpdXMnLFxuICAgICAgICAgICAgICAgICAgICAnb3V0ZXJSYWRpdXMnLFxuICAgICAgICAgICAgICAgICAgICAnc3RhcnRBbmdsZScsXG4gICAgICAgICAgICAgICAgICAgICd4JyxcbiAgICAgICAgICAgICAgICAgICAgJ3knLFxuICAgICAgICAgICAgICAgICAgICAnb2Zmc2V0JyxcbiAgICAgICAgICAgICAgICAgICAgJ2JvcmRlcldpZHRoJyxcbiAgICAgICAgICAgICAgICAgICAgJ3NwYWNpbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjdXRvdXQ6ICc1MCUnLFxuICAgICAgICByb3RhdGlvbjogMCxcbiAgICAgICAgY2lyY3VtZmVyZW5jZTogMzYwLFxuICAgICAgICByYWRpdXM6ICcxMDAlJyxcbiAgICAgICAgc3BhY2luZzogMCxcbiAgICAgICAgaW5kZXhBeGlzOiAncidcbiAgICB9O1xuICAgIHN0YXRpYyBkZXNjcmlwdG9ycyA9IHtcbiAgICAgICAgX3NjcmlwdGFibGU6IChuYW1lKT0+bmFtZSAhPT0gJ3NwYWNpbmcnLFxuICAgICAgICBfaW5kZXhhYmxlOiAobmFtZSk9Pm5hbWUgIT09ICdzcGFjaW5nJ1xuICAgIH07XG4gc3RhdGljIG92ZXJyaWRlcyA9IHtcbiAgICAgICAgYXNwZWN0UmF0aW86IDEsXG4gICAgICAgIHBsdWdpbnM6IHtcbiAgICAgICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZUxhYmVscyAoY2hhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBjaGFydC5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEubGFiZWxzLmxlbmd0aCAmJiBkYXRhLmRhdGFzZXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgbGFiZWxzOiB7IHBvaW50U3R5bGUgLCBjb2xvciAgfSAgfSA9IGNoYXJ0LmxlZ2VuZC5vcHRpb25zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLmxhYmVscy5tYXAoKGxhYmVsLCBpKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gbWV0YS5jb250cm9sbGVyLmdldFN0eWxlKGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogbGFiZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsU3R5bGU6IHN0eWxlLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZVN0eWxlOiBzdHlsZS5ib3JkZXJDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRDb2xvcjogY29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lV2lkdGg6IHN0eWxlLmJvcmRlcldpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRTdHlsZTogcG9pbnRTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZGRlbjogIWNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25DbGljayAoZSwgbGVnZW5kSXRlbSwgbGVnZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIGxlZ2VuZC5jaGFydC50b2dnbGVEYXRhVmlzaWJpbGl0eShsZWdlbmRJdGVtLmluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgbGVnZW5kLmNoYXJ0LnVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3RydWN0b3IoY2hhcnQsIGRhdGFzZXRJbmRleCl7XG4gICAgICAgIHN1cGVyKGNoYXJ0LCBkYXRhc2V0SW5kZXgpO1xuICAgICAgICB0aGlzLmVuYWJsZU9wdGlvblNoYXJpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLmlubmVyUmFkaXVzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm91dGVyUmFkaXVzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm9mZnNldFggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMub2Zmc2V0WSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgbGlua1NjYWxlcygpIHt9XG4gcGFyc2Uoc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmdldERhdGFzZXQoKS5kYXRhO1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgaWYgKHRoaXMuX3BhcnNpbmcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBtZXRhLl9wYXJzZWQgPSBkYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IGdldHRlciA9IChpKT0+K2RhdGFbaV07XG4gICAgICAgICAgICBpZiAoaXNPYmplY3QoZGF0YVtzdGFydF0pKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBrZXkgPSd2YWx1ZScgIH0gPSB0aGlzLl9wYXJzaW5nO1xuICAgICAgICAgICAgICAgIGdldHRlciA9IChpKT0+K3Jlc29sdmVPYmplY3RLZXkoZGF0YVtpXSwga2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBpLCBpbGVuO1xuICAgICAgICAgICAgZm9yKGkgPSBzdGFydCwgaWxlbiA9IHN0YXJ0ICsgY291bnQ7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgICAgIG1ldGEuX3BhcnNlZFtpXSA9IGdldHRlcihpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiBfZ2V0Um90YXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0b1JhZGlhbnModGhpcy5vcHRpb25zLnJvdGF0aW9uIC0gOTApO1xuICAgIH1cbiBfZ2V0Q2lyY3VtZmVyZW5jZSgpIHtcbiAgICAgICAgcmV0dXJuIHRvUmFkaWFucyh0aGlzLm9wdGlvbnMuY2lyY3VtZmVyZW5jZSk7XG4gICAgfVxuIF9nZXRSb3RhdGlvbkV4dGVudHMoKSB7XG4gICAgICAgIGxldCBtaW4gPSBUQVU7XG4gICAgICAgIGxldCBtYXggPSAtVEFVO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgKytpKXtcbiAgICAgICAgICAgIGlmICh0aGlzLmNoYXJ0LmlzRGF0YXNldFZpc2libGUoaSkgJiYgdGhpcy5jaGFydC5nZXREYXRhc2V0TWV0YShpKS50eXBlID09PSB0aGlzLl90eXBlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29udHJvbGxlciA9IHRoaXMuY2hhcnQuZ2V0RGF0YXNldE1ldGEoaSkuY29udHJvbGxlcjtcbiAgICAgICAgICAgICAgICBjb25zdCByb3RhdGlvbiA9IGNvbnRyb2xsZXIuX2dldFJvdGF0aW9uKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgY2lyY3VtZmVyZW5jZSA9IGNvbnRyb2xsZXIuX2dldENpcmN1bWZlcmVuY2UoKTtcbiAgICAgICAgICAgICAgICBtaW4gPSBNYXRoLm1pbihtaW4sIHJvdGF0aW9uKTtcbiAgICAgICAgICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIHJvdGF0aW9uICsgY2lyY3VtZmVyZW5jZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJvdGF0aW9uOiBtaW4sXG4gICAgICAgICAgICBjaXJjdW1mZXJlbmNlOiBtYXggLSBtaW5cbiAgICAgICAgfTtcbiAgICB9XG4gdXBkYXRlKG1vZGUpIHtcbiAgICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICBjb25zdCB7IGNoYXJ0QXJlYSAgfSA9IGNoYXJ0O1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgYXJjcyA9IG1ldGEuZGF0YTtcbiAgICAgICAgY29uc3Qgc3BhY2luZyA9IHRoaXMuZ2V0TWF4Qm9yZGVyV2lkdGgoKSArIHRoaXMuZ2V0TWF4T2Zmc2V0KGFyY3MpICsgdGhpcy5vcHRpb25zLnNwYWNpbmc7XG4gICAgICAgIGNvbnN0IG1heFNpemUgPSBNYXRoLm1heCgoTWF0aC5taW4oY2hhcnRBcmVhLndpZHRoLCBjaGFydEFyZWEuaGVpZ2h0KSAtIHNwYWNpbmcpIC8gMiwgMCk7XG4gICAgICAgIGNvbnN0IGN1dG91dCA9IE1hdGgubWluKHRvUGVyY2VudGFnZSh0aGlzLm9wdGlvbnMuY3V0b3V0LCBtYXhTaXplKSwgMSk7XG4gICAgICAgIGNvbnN0IGNoYXJ0V2VpZ2h0ID0gdGhpcy5fZ2V0UmluZ1dlaWdodCh0aGlzLmluZGV4KTtcbiAgICAgICAgY29uc3QgeyBjaXJjdW1mZXJlbmNlICwgcm90YXRpb24gIH0gPSB0aGlzLl9nZXRSb3RhdGlvbkV4dGVudHMoKTtcbiAgICAgICAgY29uc3QgeyByYXRpb1ggLCByYXRpb1kgLCBvZmZzZXRYICwgb2Zmc2V0WSAgfSA9IGdldFJhdGlvQW5kT2Zmc2V0KHJvdGF0aW9uLCBjaXJjdW1mZXJlbmNlLCBjdXRvdXQpO1xuICAgICAgICBjb25zdCBtYXhXaWR0aCA9IChjaGFydEFyZWEud2lkdGggLSBzcGFjaW5nKSAvIHJhdGlvWDtcbiAgICAgICAgY29uc3QgbWF4SGVpZ2h0ID0gKGNoYXJ0QXJlYS5oZWlnaHQgLSBzcGFjaW5nKSAvIHJhdGlvWTtcbiAgICAgICAgY29uc3QgbWF4UmFkaXVzID0gTWF0aC5tYXgoTWF0aC5taW4obWF4V2lkdGgsIG1heEhlaWdodCkgLyAyLCAwKTtcbiAgICAgICAgY29uc3Qgb3V0ZXJSYWRpdXMgPSB0b0RpbWVuc2lvbih0aGlzLm9wdGlvbnMucmFkaXVzLCBtYXhSYWRpdXMpO1xuICAgICAgICBjb25zdCBpbm5lclJhZGl1cyA9IE1hdGgubWF4KG91dGVyUmFkaXVzICogY3V0b3V0LCAwKTtcbiAgICAgICAgY29uc3QgcmFkaXVzTGVuZ3RoID0gKG91dGVyUmFkaXVzIC0gaW5uZXJSYWRpdXMpIC8gdGhpcy5fZ2V0VmlzaWJsZURhdGFzZXRXZWlnaHRUb3RhbCgpO1xuICAgICAgICB0aGlzLm9mZnNldFggPSBvZmZzZXRYICogb3V0ZXJSYWRpdXM7XG4gICAgICAgIHRoaXMub2Zmc2V0WSA9IG9mZnNldFkgKiBvdXRlclJhZGl1cztcbiAgICAgICAgbWV0YS50b3RhbCA9IHRoaXMuY2FsY3VsYXRlVG90YWwoKTtcbiAgICAgICAgdGhpcy5vdXRlclJhZGl1cyA9IG91dGVyUmFkaXVzIC0gcmFkaXVzTGVuZ3RoICogdGhpcy5fZ2V0UmluZ1dlaWdodE9mZnNldCh0aGlzLmluZGV4KTtcbiAgICAgICAgdGhpcy5pbm5lclJhZGl1cyA9IE1hdGgubWF4KHRoaXMub3V0ZXJSYWRpdXMgLSByYWRpdXNMZW5ndGggKiBjaGFydFdlaWdodCwgMCk7XG4gICAgICAgIHRoaXMudXBkYXRlRWxlbWVudHMoYXJjcywgMCwgYXJjcy5sZW5ndGgsIG1vZGUpO1xuICAgIH1cbiBfY2lyY3VtZmVyZW5jZShpLCByZXNldCkge1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgY2lyY3VtZmVyZW5jZSA9IHRoaXMuX2dldENpcmN1bWZlcmVuY2UoKTtcbiAgICAgICAgaWYgKHJlc2V0ICYmIG9wdHMuYW5pbWF0aW9uLmFuaW1hdGVSb3RhdGUgfHwgIXRoaXMuY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaSkgfHwgbWV0YS5fcGFyc2VkW2ldID09PSBudWxsIHx8IG1ldGEuZGF0YVtpXS5oaWRkZW4pIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGN1bGF0ZUNpcmN1bWZlcmVuY2UobWV0YS5fcGFyc2VkW2ldICogY2lyY3VtZmVyZW5jZSAvIFRBVSk7XG4gICAgfVxuICAgIHVwZGF0ZUVsZW1lbnRzKGFyY3MsIHN0YXJ0LCBjb3VudCwgbW9kZSkge1xuICAgICAgICBjb25zdCByZXNldCA9IG1vZGUgPT09ICdyZXNldCc7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3QgY2hhcnRBcmVhID0gY2hhcnQuY2hhcnRBcmVhO1xuICAgICAgICBjb25zdCBvcHRzID0gY2hhcnQub3B0aW9ucztcbiAgICAgICAgY29uc3QgYW5pbWF0aW9uT3B0cyA9IG9wdHMuYW5pbWF0aW9uO1xuICAgICAgICBjb25zdCBjZW50ZXJYID0gKGNoYXJ0QXJlYS5sZWZ0ICsgY2hhcnRBcmVhLnJpZ2h0KSAvIDI7XG4gICAgICAgIGNvbnN0IGNlbnRlclkgPSAoY2hhcnRBcmVhLnRvcCArIGNoYXJ0QXJlYS5ib3R0b20pIC8gMjtcbiAgICAgICAgY29uc3QgYW5pbWF0ZVNjYWxlID0gcmVzZXQgJiYgYW5pbWF0aW9uT3B0cy5hbmltYXRlU2NhbGU7XG4gICAgICAgIGNvbnN0IGlubmVyUmFkaXVzID0gYW5pbWF0ZVNjYWxlID8gMCA6IHRoaXMuaW5uZXJSYWRpdXM7XG4gICAgICAgIGNvbnN0IG91dGVyUmFkaXVzID0gYW5pbWF0ZVNjYWxlID8gMCA6IHRoaXMub3V0ZXJSYWRpdXM7XG4gICAgICAgIGNvbnN0IHsgc2hhcmVkT3B0aW9ucyAsIGluY2x1ZGVPcHRpb25zICB9ID0gdGhpcy5fZ2V0U2hhcmVkT3B0aW9ucyhzdGFydCwgbW9kZSk7XG4gICAgICAgIGxldCBzdGFydEFuZ2xlID0gdGhpcy5fZ2V0Um90YXRpb24oKTtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGZvcihpID0gMDsgaSA8IHN0YXJ0OyArK2kpe1xuICAgICAgICAgICAgc3RhcnRBbmdsZSArPSB0aGlzLl9jaXJjdW1mZXJlbmNlKGksIHJlc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IoaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBjb3VudDsgKytpKXtcbiAgICAgICAgICAgIGNvbnN0IGNpcmN1bWZlcmVuY2UgPSB0aGlzLl9jaXJjdW1mZXJlbmNlKGksIHJlc2V0KTtcbiAgICAgICAgICAgIGNvbnN0IGFyYyA9IGFyY3NbaV07XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgICAgIHg6IGNlbnRlclggKyB0aGlzLm9mZnNldFgsXG4gICAgICAgICAgICAgICAgeTogY2VudGVyWSArIHRoaXMub2Zmc2V0WSxcbiAgICAgICAgICAgICAgICBzdGFydEFuZ2xlLFxuICAgICAgICAgICAgICAgIGVuZEFuZ2xlOiBzdGFydEFuZ2xlICsgY2lyY3VtZmVyZW5jZSxcbiAgICAgICAgICAgICAgICBjaXJjdW1mZXJlbmNlLFxuICAgICAgICAgICAgICAgIG91dGVyUmFkaXVzLFxuICAgICAgICAgICAgICAgIGlubmVyUmFkaXVzXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGluY2x1ZGVPcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllcy5vcHRpb25zID0gc2hhcmVkT3B0aW9ucyB8fCB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSwgYXJjLmFjdGl2ZSA/ICdhY3RpdmUnIDogbW9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGFydEFuZ2xlICs9IGNpcmN1bWZlcmVuY2U7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQoYXJjLCBpLCBwcm9wZXJ0aWVzLCBtb2RlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYWxjdWxhdGVUb3RhbCgpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IG1ldGFEYXRhID0gbWV0YS5kYXRhO1xuICAgICAgICBsZXQgdG90YWwgPSAwO1xuICAgICAgICBsZXQgaTtcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgbWV0YURhdGEubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBtZXRhLl9wYXJzZWRbaV07XG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IG51bGwgJiYgIWlzTmFOKHZhbHVlKSAmJiB0aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGkpICYmICFtZXRhRGF0YVtpXS5oaWRkZW4pIHtcbiAgICAgICAgICAgICAgICB0b3RhbCArPSBNYXRoLmFicyh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsO1xuICAgIH1cbiAgICBjYWxjdWxhdGVDaXJjdW1mZXJlbmNlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHRvdGFsID0gdGhpcy5fY2FjaGVkTWV0YS50b3RhbDtcbiAgICAgICAgaWYgKHRvdGFsID4gMCAmJiAhaXNOYU4odmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gVEFVICogKE1hdGguYWJzKHZhbHVlKSAvIHRvdGFsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgZ2V0TGFiZWxBbmRWYWx1ZShpbmRleCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICBjb25zdCBsYWJlbHMgPSBjaGFydC5kYXRhLmxhYmVscyB8fCBbXTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBmb3JtYXROdW1iZXIobWV0YS5fcGFyc2VkW2luZGV4XSwgY2hhcnQub3B0aW9ucy5sb2NhbGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGFiZWw6IGxhYmVsc1tpbmRleF0gfHwgJycsXG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICB9O1xuICAgIH1cbiAgICBnZXRNYXhCb3JkZXJXaWR0aChhcmNzKSB7XG4gICAgICAgIGxldCBtYXggPSAwO1xuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGxldCBpLCBpbGVuLCBtZXRhLCBjb250cm9sbGVyLCBvcHRpb25zO1xuICAgICAgICBpZiAoIWFyY3MpIHtcbiAgICAgICAgICAgIGZvcihpID0gMCwgaWxlbiA9IGNoYXJ0LmRhdGEuZGF0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgICAgICBpZiAoY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpKSkge1xuICAgICAgICAgICAgICAgICAgICBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoaSk7XG4gICAgICAgICAgICAgICAgICAgIGFyY3MgPSBtZXRhLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIgPSBtZXRhLmNvbnRyb2xsZXI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWFyY3MpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IGFyY3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBjb250cm9sbGVyLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSk7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5ib3JkZXJBbGlnbiAhPT0gJ2lubmVyJykge1xuICAgICAgICAgICAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgb3B0aW9ucy5ib3JkZXJXaWR0aCB8fCAwLCBvcHRpb25zLmhvdmVyQm9yZGVyV2lkdGggfHwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1heDtcbiAgICB9XG4gICAgZ2V0TWF4T2Zmc2V0KGFyY3MpIHtcbiAgICAgICAgbGV0IG1heCA9IDA7XG4gICAgICAgIGZvcihsZXQgaSA9IDAsIGlsZW4gPSBhcmNzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGkpO1xuICAgICAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCBvcHRpb25zLm9mZnNldCB8fCAwLCBvcHRpb25zLmhvdmVyT2Zmc2V0IHx8IDApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXg7XG4gICAgfVxuIF9nZXRSaW5nV2VpZ2h0T2Zmc2V0KGRhdGFzZXRJbmRleCkge1xuICAgICAgICBsZXQgcmluZ1dlaWdodE9mZnNldCA9IDA7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBkYXRhc2V0SW5kZXg7ICsraSl7XG4gICAgICAgICAgICBpZiAodGhpcy5jaGFydC5pc0RhdGFzZXRWaXNpYmxlKGkpKSB7XG4gICAgICAgICAgICAgICAgcmluZ1dlaWdodE9mZnNldCArPSB0aGlzLl9nZXRSaW5nV2VpZ2h0KGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByaW5nV2VpZ2h0T2Zmc2V0O1xuICAgIH1cbiBfZ2V0UmluZ1dlaWdodChkYXRhc2V0SW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KHZhbHVlT3JEZWZhdWx0KHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdLndlaWdodCwgMSksIDApO1xuICAgIH1cbiBfZ2V0VmlzaWJsZURhdGFzZXRXZWlnaHRUb3RhbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldFJpbmdXZWlnaHRPZmZzZXQodGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzLmxlbmd0aCkgfHwgMTtcbiAgICB9XG59XG5cbmNsYXNzIExpbmVDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICAgIHN0YXRpYyBpZCA9ICdsaW5lJztcbiBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gICAgICAgIGRhdGFzZXRFbGVtZW50VHlwZTogJ2xpbmUnLFxuICAgICAgICBkYXRhRWxlbWVudFR5cGU6ICdwb2ludCcsXG4gICAgICAgIHNob3dMaW5lOiB0cnVlLFxuICAgICAgICBzcGFuR2FwczogZmFsc2VcbiAgICB9O1xuIHN0YXRpYyBvdmVycmlkZXMgPSB7XG4gICAgICAgIHNjYWxlczoge1xuICAgICAgICAgICAgX2luZGV4Xzoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdjYXRlZ29yeSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfdmFsdWVfOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2xpbmVhcidcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zdXBwb3J0c0RlY2ltYXRpb24gPSB0cnVlO1xuICAgICAgICBzdXBlci5pbml0aWFsaXplKCk7XG4gICAgfVxuICAgIHVwZGF0ZShtb2RlKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCB7IGRhdGFzZXQ6IGxpbmUgLCBkYXRhOiBwb2ludHMgPSBbXSAsIF9kYXRhc2V0ICB9ID0gbWV0YTtcbiAgICAgICAgY29uc3QgYW5pbWF0aW9uc0Rpc2FibGVkID0gdGhpcy5jaGFydC5fYW5pbWF0aW9uc0Rpc2FibGVkO1xuICAgICAgICBsZXQgeyBzdGFydCAsIGNvdW50ICB9ID0gX2dldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHMobWV0YSwgcG9pbnRzLCBhbmltYXRpb25zRGlzYWJsZWQpO1xuICAgICAgICB0aGlzLl9kcmF3U3RhcnQgPSBzdGFydDtcbiAgICAgICAgdGhpcy5fZHJhd0NvdW50ID0gY291bnQ7XG4gICAgICAgIGlmIChfc2NhbGVSYW5nZXNDaGFuZ2VkKG1ldGEpKSB7XG4gICAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgICAgICBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgbGluZS5fY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICBsaW5lLl9kYXRhc2V0SW5kZXggPSB0aGlzLmluZGV4O1xuICAgICAgICBsaW5lLl9kZWNpbWF0ZWQgPSAhIV9kYXRhc2V0Ll9kZWNpbWF0ZWQ7XG4gICAgICAgIGxpbmUucG9pbnRzID0gcG9pbnRzO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5yZXNvbHZlRGF0YXNldEVsZW1lbnRPcHRpb25zKG1vZGUpO1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5zaG93TGluZSkge1xuICAgICAgICAgICAgb3B0aW9ucy5ib3JkZXJXaWR0aCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucy5zZWdtZW50ID0gdGhpcy5vcHRpb25zLnNlZ21lbnQ7XG4gICAgICAgIHRoaXMudXBkYXRlRWxlbWVudChsaW5lLCB1bmRlZmluZWQsIHtcbiAgICAgICAgICAgIGFuaW1hdGVkOiAhYW5pbWF0aW9uc0Rpc2FibGVkLFxuICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICB9LCBtb2RlKTtcbiAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50cyhwb2ludHMsIHN0YXJ0LCBjb3VudCwgbW9kZSk7XG4gICAgfVxuICAgIHVwZGF0ZUVsZW1lbnRzKHBvaW50cywgc3RhcnQsIGNvdW50LCBtb2RlKSB7XG4gICAgICAgIGNvbnN0IHJlc2V0ID0gbW9kZSA9PT0gJ3Jlc2V0JztcbiAgICAgICAgY29uc3QgeyBpU2NhbGUgLCB2U2NhbGUgLCBfc3RhY2tlZCAsIF9kYXRhc2V0ICB9ID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgeyBzaGFyZWRPcHRpb25zICwgaW5jbHVkZU9wdGlvbnMgIH0gPSB0aGlzLl9nZXRTaGFyZWRPcHRpb25zKHN0YXJ0LCBtb2RlKTtcbiAgICAgICAgY29uc3QgaUF4aXMgPSBpU2NhbGUuYXhpcztcbiAgICAgICAgY29uc3QgdkF4aXMgPSB2U2NhbGUuYXhpcztcbiAgICAgICAgY29uc3QgeyBzcGFuR2FwcyAsIHNlZ21lbnQgIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IG1heEdhcExlbmd0aCA9IGlzTnVtYmVyKHNwYW5HYXBzKSA/IHNwYW5HYXBzIDogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICBjb25zdCBkaXJlY3RVcGRhdGUgPSB0aGlzLmNoYXJ0Ll9hbmltYXRpb25zRGlzYWJsZWQgfHwgcmVzZXQgfHwgbW9kZSA9PT0gJ25vbmUnO1xuICAgICAgICBjb25zdCBlbmQgPSBzdGFydCArIGNvdW50O1xuICAgICAgICBjb25zdCBwb2ludHNDb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgICAgIGxldCBwcmV2UGFyc2VkID0gc3RhcnQgPiAwICYmIHRoaXMuZ2V0UGFyc2VkKHN0YXJ0IC0gMSk7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBwb2ludHNDb3VudDsgKytpKXtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50ID0gcG9pbnRzW2ldO1xuICAgICAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IGRpcmVjdFVwZGF0ZSA/IHBvaW50IDoge307XG4gICAgICAgICAgICBpZiAoaSA8IHN0YXJ0IHx8IGkgPj0gZW5kKSB7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllcy5za2lwID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGkpO1xuICAgICAgICAgICAgY29uc3QgbnVsbERhdGEgPSBpc051bGxPclVuZGVmKHBhcnNlZFt2QXhpc10pO1xuICAgICAgICAgICAgY29uc3QgaVBpeGVsID0gcHJvcGVydGllc1tpQXhpc10gPSBpU2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShwYXJzZWRbaUF4aXNdLCBpKTtcbiAgICAgICAgICAgIGNvbnN0IHZQaXhlbCA9IHByb3BlcnRpZXNbdkF4aXNdID0gcmVzZXQgfHwgbnVsbERhdGEgPyB2U2NhbGUuZ2V0QmFzZVBpeGVsKCkgOiB2U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShfc3RhY2tlZCA/IHRoaXMuYXBwbHlTdGFjayh2U2NhbGUsIHBhcnNlZCwgX3N0YWNrZWQpIDogcGFyc2VkW3ZBeGlzXSwgaSk7XG4gICAgICAgICAgICBwcm9wZXJ0aWVzLnNraXAgPSBpc05hTihpUGl4ZWwpIHx8IGlzTmFOKHZQaXhlbCkgfHwgbnVsbERhdGE7XG4gICAgICAgICAgICBwcm9wZXJ0aWVzLnN0b3AgPSBpID4gMCAmJiBNYXRoLmFicyhwYXJzZWRbaUF4aXNdIC0gcHJldlBhcnNlZFtpQXhpc10pID4gbWF4R2FwTGVuZ3RoO1xuICAgICAgICAgICAgaWYgKHNlZ21lbnQpIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLnBhcnNlZCA9IHBhcnNlZDtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLnJhdyA9IF9kYXRhc2V0LmRhdGFbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW5jbHVkZU9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLm9wdGlvbnMgPSBzaGFyZWRPcHRpb25zIHx8IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpLCBwb2ludC5hY3RpdmUgPyAnYWN0aXZlJyA6IG1vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFkaXJlY3RVcGRhdGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQocG9pbnQsIGksIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJldlBhcnNlZCA9IHBhcnNlZDtcbiAgICAgICAgfVxuICAgIH1cbiBnZXRNYXhPdmVyZmxvdygpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGRhdGFzZXQgPSBtZXRhLmRhdGFzZXQ7XG4gICAgICAgIGNvbnN0IGJvcmRlciA9IGRhdGFzZXQub3B0aW9ucyAmJiBkYXRhc2V0Lm9wdGlvbnMuYm9yZGVyV2lkdGggfHwgMDtcbiAgICAgICAgY29uc3QgZGF0YSA9IG1ldGEuZGF0YSB8fCBbXTtcbiAgICAgICAgaWYgKCFkYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGJvcmRlcjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmaXJzdFBvaW50ID0gZGF0YVswXS5zaXplKHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucygwKSk7XG4gICAgICAgIGNvbnN0IGxhc3RQb2ludCA9IGRhdGFbZGF0YS5sZW5ndGggLSAxXS5zaXplKHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhkYXRhLmxlbmd0aCAtIDEpKTtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KGJvcmRlciwgZmlyc3RQb2ludCwgbGFzdFBvaW50KSAvIDI7XG4gICAgfVxuICAgIGRyYXcoKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBtZXRhLmRhdGFzZXQudXBkYXRlQ29udHJvbFBvaW50cyh0aGlzLmNoYXJ0LmNoYXJ0QXJlYSwgbWV0YS5pU2NhbGUuYXhpcyk7XG4gICAgICAgIHN1cGVyLmRyYXcoKTtcbiAgICB9XG59XG5cbmNsYXNzIFBvbGFyQXJlYUNvbnRyb2xsZXIgZXh0ZW5kcyBEYXRhc2V0Q29udHJvbGxlciB7XG4gICAgc3RhdGljIGlkID0gJ3BvbGFyQXJlYSc7XG4gc3RhdGljIGRlZmF1bHRzID0ge1xuICAgICAgICBkYXRhRWxlbWVudFR5cGU6ICdhcmMnLFxuICAgICAgICBhbmltYXRpb246IHtcbiAgICAgICAgICAgIGFuaW1hdGVSb3RhdGU6IHRydWUsXG4gICAgICAgICAgICBhbmltYXRlU2NhbGU6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgYW5pbWF0aW9uczoge1xuICAgICAgICAgICAgbnVtYmVyczoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgJ3gnLFxuICAgICAgICAgICAgICAgICAgICAneScsXG4gICAgICAgICAgICAgICAgICAgICdzdGFydEFuZ2xlJyxcbiAgICAgICAgICAgICAgICAgICAgJ2VuZEFuZ2xlJyxcbiAgICAgICAgICAgICAgICAgICAgJ2lubmVyUmFkaXVzJyxcbiAgICAgICAgICAgICAgICAgICAgJ291dGVyUmFkaXVzJ1xuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaW5kZXhBeGlzOiAncicsXG4gICAgICAgIHN0YXJ0QW5nbGU6IDBcbiAgICB9O1xuIHN0YXRpYyBvdmVycmlkZXMgPSB7XG4gICAgICAgIGFzcGVjdFJhdGlvOiAxLFxuICAgICAgICBwbHVnaW5zOiB7XG4gICAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVMYWJlbHMgKGNoYXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gY2hhcnQuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmxhYmVscy5sZW5ndGggJiYgZGF0YS5kYXRhc2V0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGxhYmVsczogeyBwb2ludFN0eWxlICwgY29sb3IgIH0gIH0gPSBjaGFydC5sZWdlbmQub3B0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5sYWJlbHMubWFwKChsYWJlbCwgaSk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHlsZSA9IG1ldGEuY29udHJvbGxlci5nZXRTdHlsZShpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGxhYmVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbFN0eWxlOiBzdHlsZS5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VTdHlsZTogc3R5bGUuYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250Q29sb3I6IGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZVdpZHRoOiBzdHlsZS5ib3JkZXJXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50U3R5bGU6IHBvaW50U3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWRkZW46ICFjaGFydC5nZXREYXRhVmlzaWJpbGl0eShpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uQ2xpY2sgKGUsIGxlZ2VuZEl0ZW0sIGxlZ2VuZCkge1xuICAgICAgICAgICAgICAgICAgICBsZWdlbmQuY2hhcnQudG9nZ2xlRGF0YVZpc2liaWxpdHkobGVnZW5kSXRlbS5pbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGxlZ2VuZC5jaGFydC51cGRhdGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNjYWxlczoge1xuICAgICAgICAgICAgcjoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdyYWRpYWxMaW5lYXInLFxuICAgICAgICAgICAgICAgIGFuZ2xlTGluZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJlZ2luQXRaZXJvOiB0cnVlLFxuICAgICAgICAgICAgICAgIGdyaWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgY2lyY3VsYXI6IHRydWVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHBvaW50TGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzdGFydEFuZ2xlOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKGNoYXJ0LCBkYXRhc2V0SW5kZXgpe1xuICAgICAgICBzdXBlcihjaGFydCwgZGF0YXNldEluZGV4KTtcbiAgICAgICAgdGhpcy5pbm5lclJhZGl1cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5vdXRlclJhZGl1cyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZ2V0TGFiZWxBbmRWYWx1ZShpbmRleCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICBjb25zdCBsYWJlbHMgPSBjaGFydC5kYXRhLmxhYmVscyB8fCBbXTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBmb3JtYXROdW1iZXIobWV0YS5fcGFyc2VkW2luZGV4XS5yLCBjaGFydC5vcHRpb25zLmxvY2FsZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsYWJlbDogbGFiZWxzW2luZGV4XSB8fCAnJyxcbiAgICAgICAgICAgIHZhbHVlXG4gICAgICAgIH07XG4gICAgfVxuICAgIHBhcnNlT2JqZWN0RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICAgICAgcmV0dXJuIF9wYXJzZU9iamVjdERhdGFSYWRpYWxTY2FsZS5iaW5kKHRoaXMpKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCk7XG4gICAgfVxuICAgIHVwZGF0ZShtb2RlKSB7XG4gICAgICAgIGNvbnN0IGFyY3MgPSB0aGlzLl9jYWNoZWRNZXRhLmRhdGE7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVJhZGl1cygpO1xuICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnRzKGFyY3MsIDAsIGFyY3MubGVuZ3RoLCBtb2RlKTtcbiAgICB9XG4gZ2V0TWluTWF4KCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSB7XG4gICAgICAgICAgICBtaW46IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcbiAgICAgICAgICAgIG1heDogTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZXG4gICAgICAgIH07XG4gICAgICAgIG1ldGEuZGF0YS5mb3JFYWNoKChlbGVtZW50LCBpbmRleCk9PntcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGluZGV4KS5yO1xuICAgICAgICAgICAgaWYgKCFpc05hTihwYXJzZWQpICYmIHRoaXMuY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlZCA8IHJhbmdlLm1pbikge1xuICAgICAgICAgICAgICAgICAgICByYW5nZS5taW4gPSBwYXJzZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwYXJzZWQgPiByYW5nZS5tYXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UubWF4ID0gcGFyc2VkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByYW5nZTtcbiAgICB9XG4gX3VwZGF0ZVJhZGl1cygpIHtcbiAgICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICBjb25zdCBjaGFydEFyZWEgPSBjaGFydC5jaGFydEFyZWE7XG4gICAgICAgIGNvbnN0IG9wdHMgPSBjaGFydC5vcHRpb25zO1xuICAgICAgICBjb25zdCBtaW5TaXplID0gTWF0aC5taW4oY2hhcnRBcmVhLnJpZ2h0IC0gY2hhcnRBcmVhLmxlZnQsIGNoYXJ0QXJlYS5ib3R0b20gLSBjaGFydEFyZWEudG9wKTtcbiAgICAgICAgY29uc3Qgb3V0ZXJSYWRpdXMgPSBNYXRoLm1heChtaW5TaXplIC8gMiwgMCk7XG4gICAgICAgIGNvbnN0IGlubmVyUmFkaXVzID0gTWF0aC5tYXgob3B0cy5jdXRvdXRQZXJjZW50YWdlID8gb3V0ZXJSYWRpdXMgLyAxMDAgKiBvcHRzLmN1dG91dFBlcmNlbnRhZ2UgOiAxLCAwKTtcbiAgICAgICAgY29uc3QgcmFkaXVzTGVuZ3RoID0gKG91dGVyUmFkaXVzIC0gaW5uZXJSYWRpdXMpIC8gY2hhcnQuZ2V0VmlzaWJsZURhdGFzZXRDb3VudCgpO1xuICAgICAgICB0aGlzLm91dGVyUmFkaXVzID0gb3V0ZXJSYWRpdXMgLSByYWRpdXNMZW5ndGggKiB0aGlzLmluZGV4O1xuICAgICAgICB0aGlzLmlubmVyUmFkaXVzID0gdGhpcy5vdXRlclJhZGl1cyAtIHJhZGl1c0xlbmd0aDtcbiAgICB9XG4gICAgdXBkYXRlRWxlbWVudHMoYXJjcywgc3RhcnQsIGNvdW50LCBtb2RlKSB7XG4gICAgICAgIGNvbnN0IHJlc2V0ID0gbW9kZSA9PT0gJ3Jlc2V0JztcbiAgICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICBjb25zdCBvcHRzID0gY2hhcnQub3B0aW9ucztcbiAgICAgICAgY29uc3QgYW5pbWF0aW9uT3B0cyA9IG9wdHMuYW5pbWF0aW9uO1xuICAgICAgICBjb25zdCBzY2FsZSA9IHRoaXMuX2NhY2hlZE1ldGEuclNjYWxlO1xuICAgICAgICBjb25zdCBjZW50ZXJYID0gc2NhbGUueENlbnRlcjtcbiAgICAgICAgY29uc3QgY2VudGVyWSA9IHNjYWxlLnlDZW50ZXI7XG4gICAgICAgIGNvbnN0IGRhdGFzZXRTdGFydEFuZ2xlID0gc2NhbGUuZ2V0SW5kZXhBbmdsZSgwKSAtIDAuNSAqIFBJO1xuICAgICAgICBsZXQgYW5nbGUgPSBkYXRhc2V0U3RhcnRBbmdsZTtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRBbmdsZSA9IDM2MCAvIHRoaXMuY291bnRWaXNpYmxlRWxlbWVudHMoKTtcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgc3RhcnQ7ICsraSl7XG4gICAgICAgICAgICBhbmdsZSArPSB0aGlzLl9jb21wdXRlQW5nbGUoaSwgbW9kZSwgZGVmYXVsdEFuZ2xlKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IoaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBjb3VudDsgaSsrKXtcbiAgICAgICAgICAgIGNvbnN0IGFyYyA9IGFyY3NbaV07XG4gICAgICAgICAgICBsZXQgc3RhcnRBbmdsZSA9IGFuZ2xlO1xuICAgICAgICAgICAgbGV0IGVuZEFuZ2xlID0gYW5nbGUgKyB0aGlzLl9jb21wdXRlQW5nbGUoaSwgbW9kZSwgZGVmYXVsdEFuZ2xlKTtcbiAgICAgICAgICAgIGxldCBvdXRlclJhZGl1cyA9IGNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGkpID8gc2NhbGUuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUodGhpcy5nZXRQYXJzZWQoaSkucikgOiAwO1xuICAgICAgICAgICAgYW5nbGUgPSBlbmRBbmdsZTtcbiAgICAgICAgICAgIGlmIChyZXNldCkge1xuICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25PcHRzLmFuaW1hdGVTY2FsZSkge1xuICAgICAgICAgICAgICAgICAgICBvdXRlclJhZGl1cyA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25PcHRzLmFuaW1hdGVSb3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRBbmdsZSA9IGVuZEFuZ2xlID0gZGF0YXNldFN0YXJ0QW5nbGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IHtcbiAgICAgICAgICAgICAgICB4OiBjZW50ZXJYLFxuICAgICAgICAgICAgICAgIHk6IGNlbnRlclksXG4gICAgICAgICAgICAgICAgaW5uZXJSYWRpdXM6IDAsXG4gICAgICAgICAgICAgICAgb3V0ZXJSYWRpdXMsXG4gICAgICAgICAgICAgICAgc3RhcnRBbmdsZSxcbiAgICAgICAgICAgICAgICBlbmRBbmdsZSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSwgYXJjLmFjdGl2ZSA/ICdhY3RpdmUnIDogbW9kZSlcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQoYXJjLCBpLCBwcm9wZXJ0aWVzLCBtb2RlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb3VudFZpc2libGVFbGVtZW50cygpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGxldCBjb3VudCA9IDA7XG4gICAgICAgIG1ldGEuZGF0YS5mb3JFYWNoKChlbGVtZW50LCBpbmRleCk9PntcbiAgICAgICAgICAgIGlmICghaXNOYU4odGhpcy5nZXRQYXJzZWQoaW5kZXgpLnIpICYmIHRoaXMuY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjb3VudDtcbiAgICB9XG4gX2NvbXB1dGVBbmdsZShpbmRleCwgbW9kZSwgZGVmYXVsdEFuZ2xlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGluZGV4KSA/IHRvUmFkaWFucyh0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaW5kZXgsIG1vZGUpLmFuZ2xlIHx8IGRlZmF1bHRBbmdsZSkgOiAwO1xuICAgIH1cbn1cblxuY2xhc3MgUGllQ29udHJvbGxlciBleHRlbmRzIERvdWdobnV0Q29udHJvbGxlciB7XG4gICAgc3RhdGljIGlkID0gJ3BpZSc7XG4gc3RhdGljIGRlZmF1bHRzID0ge1xuICAgICAgICBjdXRvdXQ6IDAsXG4gICAgICAgIHJvdGF0aW9uOiAwLFxuICAgICAgICBjaXJjdW1mZXJlbmNlOiAzNjAsXG4gICAgICAgIHJhZGl1czogJzEwMCUnXG4gICAgfTtcbn1cblxuY2xhc3MgUmFkYXJDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICAgIHN0YXRpYyBpZCA9ICdyYWRhcic7XG4gc3RhdGljIGRlZmF1bHRzID0ge1xuICAgICAgICBkYXRhc2V0RWxlbWVudFR5cGU6ICdsaW5lJyxcbiAgICAgICAgZGF0YUVsZW1lbnRUeXBlOiAncG9pbnQnLFxuICAgICAgICBpbmRleEF4aXM6ICdyJyxcbiAgICAgICAgc2hvd0xpbmU6IHRydWUsXG4gICAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgICAgICBsaW5lOiB7XG4gICAgICAgICAgICAgICAgZmlsbDogJ3N0YXJ0J1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiBzdGF0aWMgb3ZlcnJpZGVzID0ge1xuICAgICAgICBhc3BlY3RSYXRpbzogMSxcbiAgICAgICAgc2NhbGVzOiB7XG4gICAgICAgICAgICByOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3JhZGlhbExpbmVhcidcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gZ2V0TGFiZWxBbmRWYWx1ZShpbmRleCkge1xuICAgICAgICBjb25zdCB2U2NhbGUgPSB0aGlzLl9jYWNoZWRNZXRhLnZTY2FsZTtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGFiZWw6IHZTY2FsZS5nZXRMYWJlbHMoKVtpbmRleF0sXG4gICAgICAgICAgICB2YWx1ZTogJycgKyB2U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWRbdlNjYWxlLmF4aXNdKVxuICAgICAgICB9O1xuICAgIH1cbiAgICBwYXJzZU9iamVjdERhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIHJldHVybiBfcGFyc2VPYmplY3REYXRhUmFkaWFsU2NhbGUuYmluZCh0aGlzKShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgIH1cbiAgICB1cGRhdGUobW9kZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgbGluZSA9IG1ldGEuZGF0YXNldDtcbiAgICAgICAgY29uc3QgcG9pbnRzID0gbWV0YS5kYXRhIHx8IFtdO1xuICAgICAgICBjb25zdCBsYWJlbHMgPSBtZXRhLmlTY2FsZS5nZXRMYWJlbHMoKTtcbiAgICAgICAgbGluZS5wb2ludHMgPSBwb2ludHM7XG4gICAgICAgIGlmIChtb2RlICE9PSAncmVzaXplJykge1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMucmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9ucyhtb2RlKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLnNob3dMaW5lKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5ib3JkZXJXaWR0aCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgICAgIF9sb29wOiB0cnVlLFxuICAgICAgICAgICAgICAgIF9mdWxsTG9vcDogbGFiZWxzLmxlbmd0aCA9PT0gcG9pbnRzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50KGxpbmUsIHVuZGVmaW5lZCwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50cyhwb2ludHMsIDAsIHBvaW50cy5sZW5ndGgsIG1vZGUpO1xuICAgIH1cbiAgICB1cGRhdGVFbGVtZW50cyhwb2ludHMsIHN0YXJ0LCBjb3VudCwgbW9kZSkge1xuICAgICAgICBjb25zdCBzY2FsZSA9IHRoaXMuX2NhY2hlZE1ldGEuclNjYWxlO1xuICAgICAgICBjb25zdCByZXNldCA9IG1vZGUgPT09ICdyZXNldCc7XG4gICAgICAgIGZvcihsZXQgaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBjb3VudDsgaSsrKXtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50ID0gcG9pbnRzW2ldO1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpLCBwb2ludC5hY3RpdmUgPyAnYWN0aXZlJyA6IG1vZGUpO1xuICAgICAgICAgICAgY29uc3QgcG9pbnRQb3NpdGlvbiA9IHNjYWxlLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZShpLCB0aGlzLmdldFBhcnNlZChpKS5yKTtcbiAgICAgICAgICAgIGNvbnN0IHggPSByZXNldCA/IHNjYWxlLnhDZW50ZXIgOiBwb2ludFBvc2l0aW9uLng7XG4gICAgICAgICAgICBjb25zdCB5ID0gcmVzZXQgPyBzY2FsZS55Q2VudGVyIDogcG9pbnRQb3NpdGlvbi55O1xuICAgICAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IHtcbiAgICAgICAgICAgICAgICB4LFxuICAgICAgICAgICAgICAgIHksXG4gICAgICAgICAgICAgICAgYW5nbGU6IHBvaW50UG9zaXRpb24uYW5nbGUsXG4gICAgICAgICAgICAgICAgc2tpcDogaXNOYU4oeCkgfHwgaXNOYU4oeSksXG4gICAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRWxlbWVudChwb2ludCwgaSwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNsYXNzIFNjYXR0ZXJDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICAgIHN0YXRpYyBpZCA9ICdzY2F0dGVyJztcbiBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gICAgICAgIGRhdGFzZXRFbGVtZW50VHlwZTogZmFsc2UsXG4gICAgICAgIGRhdGFFbGVtZW50VHlwZTogJ3BvaW50JyxcbiAgICAgICAgc2hvd0xpbmU6IGZhbHNlLFxuICAgICAgICBmaWxsOiBmYWxzZVxuICAgIH07XG4gc3RhdGljIG92ZXJyaWRlcyA9IHtcbiAgICAgICAgaW50ZXJhY3Rpb246IHtcbiAgICAgICAgICAgIG1vZGU6ICdwb2ludCdcbiAgICAgICAgfSxcbiAgICAgICAgc2NhbGVzOiB7XG4gICAgICAgICAgICB4OiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2xpbmVhcidcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB5OiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2xpbmVhcidcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gZ2V0TGFiZWxBbmRWYWx1ZShpbmRleCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgbGFiZWxzID0gdGhpcy5jaGFydC5kYXRhLmxhYmVscyB8fCBbXTtcbiAgICAgICAgY29uc3QgeyB4U2NhbGUgLCB5U2NhbGUgIH0gPSBtZXRhO1xuICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgICAgIGNvbnN0IHggPSB4U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWQueCk7XG4gICAgICAgIGNvbnN0IHkgPSB5U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWQueSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsYWJlbDogbGFiZWxzW2luZGV4XSB8fCAnJyxcbiAgICAgICAgICAgIHZhbHVlOiAnKCcgKyB4ICsgJywgJyArIHkgKyAnKSdcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdXBkYXRlKG1vZGUpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IHsgZGF0YTogcG9pbnRzID0gW10gIH0gPSBtZXRhO1xuICAgICAgICBjb25zdCBhbmltYXRpb25zRGlzYWJsZWQgPSB0aGlzLmNoYXJ0Ll9hbmltYXRpb25zRGlzYWJsZWQ7XG4gICAgICAgIGxldCB7IHN0YXJ0ICwgY291bnQgIH0gPSBfZ2V0U3RhcnRBbmRDb3VudE9mVmlzaWJsZVBvaW50cyhtZXRhLCBwb2ludHMsIGFuaW1hdGlvbnNEaXNhYmxlZCk7XG4gICAgICAgIHRoaXMuX2RyYXdTdGFydCA9IHN0YXJ0O1xuICAgICAgICB0aGlzLl9kcmF3Q291bnQgPSBjb3VudDtcbiAgICAgICAgaWYgKF9zY2FsZVJhbmdlc0NoYW5nZWQobWV0YSkpIHtcbiAgICAgICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgICAgIGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNob3dMaW5lKSB7XG4gICAgICAgICAgICBjb25zdCB7IGRhdGFzZXQ6IGxpbmUgLCBfZGF0YXNldCAgfSA9IG1ldGE7XG4gICAgICAgICAgICBsaW5lLl9jaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgICAgICBsaW5lLl9kYXRhc2V0SW5kZXggPSB0aGlzLmluZGV4O1xuICAgICAgICAgICAgbGluZS5fZGVjaW1hdGVkID0gISFfZGF0YXNldC5fZGVjaW1hdGVkO1xuICAgICAgICAgICAgbGluZS5wb2ludHMgPSBwb2ludHM7XG4gICAgICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5yZXNvbHZlRGF0YXNldEVsZW1lbnRPcHRpb25zKG1vZGUpO1xuICAgICAgICAgICAgb3B0aW9ucy5zZWdtZW50ID0gdGhpcy5vcHRpb25zLnNlZ21lbnQ7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQobGluZSwgdW5kZWZpbmVkLCB7XG4gICAgICAgICAgICAgICAgYW5pbWF0ZWQ6ICFhbmltYXRpb25zRGlzYWJsZWQsXG4gICAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICAgICAgfSwgbW9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50cyhwb2ludHMsIHN0YXJ0LCBjb3VudCwgbW9kZSk7XG4gICAgfVxuICAgIGFkZEVsZW1lbnRzKCkge1xuICAgICAgICBjb25zdCB7IHNob3dMaW5lICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBpZiAoIXRoaXMuZGF0YXNldEVsZW1lbnRUeXBlICYmIHNob3dMaW5lKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGFzZXRFbGVtZW50VHlwZSA9IHRoaXMuY2hhcnQucmVnaXN0cnkuZ2V0RWxlbWVudCgnbGluZScpO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLmFkZEVsZW1lbnRzKCk7XG4gICAgfVxuICAgIHVwZGF0ZUVsZW1lbnRzKHBvaW50cywgc3RhcnQsIGNvdW50LCBtb2RlKSB7XG4gICAgICAgIGNvbnN0IHJlc2V0ID0gbW9kZSA9PT0gJ3Jlc2V0JztcbiAgICAgICAgY29uc3QgeyBpU2NhbGUgLCB2U2NhbGUgLCBfc3RhY2tlZCAsIF9kYXRhc2V0ICB9ID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgZmlyc3RPcHRzID0gdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKHN0YXJ0LCBtb2RlKTtcbiAgICAgICAgY29uc3Qgc2hhcmVkT3B0aW9ucyA9IHRoaXMuZ2V0U2hhcmVkT3B0aW9ucyhmaXJzdE9wdHMpO1xuICAgICAgICBjb25zdCBpbmNsdWRlT3B0aW9ucyA9IHRoaXMuaW5jbHVkZU9wdGlvbnMobW9kZSwgc2hhcmVkT3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGlBeGlzID0gaVNjYWxlLmF4aXM7XG4gICAgICAgIGNvbnN0IHZBeGlzID0gdlNjYWxlLmF4aXM7XG4gICAgICAgIGNvbnN0IHsgc3BhbkdhcHMgLCBzZWdtZW50ICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBtYXhHYXBMZW5ndGggPSBpc051bWJlcihzcGFuR2FwcykgPyBzcGFuR2FwcyA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgY29uc3QgZGlyZWN0VXBkYXRlID0gdGhpcy5jaGFydC5fYW5pbWF0aW9uc0Rpc2FibGVkIHx8IHJlc2V0IHx8IG1vZGUgPT09ICdub25lJztcbiAgICAgICAgbGV0IHByZXZQYXJzZWQgPSBzdGFydCA+IDAgJiYgdGhpcy5nZXRQYXJzZWQoc3RhcnQgLSAxKTtcbiAgICAgICAgZm9yKGxldCBpID0gc3RhcnQ7IGkgPCBzdGFydCArIGNvdW50OyArK2kpe1xuICAgICAgICAgICAgY29uc3QgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpKTtcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSBkaXJlY3RVcGRhdGUgPyBwb2ludCA6IHt9O1xuICAgICAgICAgICAgY29uc3QgbnVsbERhdGEgPSBpc051bGxPclVuZGVmKHBhcnNlZFt2QXhpc10pO1xuICAgICAgICAgICAgY29uc3QgaVBpeGVsID0gcHJvcGVydGllc1tpQXhpc10gPSBpU2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShwYXJzZWRbaUF4aXNdLCBpKTtcbiAgICAgICAgICAgIGNvbnN0IHZQaXhlbCA9IHByb3BlcnRpZXNbdkF4aXNdID0gcmVzZXQgfHwgbnVsbERhdGEgPyB2U2NhbGUuZ2V0QmFzZVBpeGVsKCkgOiB2U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShfc3RhY2tlZCA/IHRoaXMuYXBwbHlTdGFjayh2U2NhbGUsIHBhcnNlZCwgX3N0YWNrZWQpIDogcGFyc2VkW3ZBeGlzXSwgaSk7XG4gICAgICAgICAgICBwcm9wZXJ0aWVzLnNraXAgPSBpc05hTihpUGl4ZWwpIHx8IGlzTmFOKHZQaXhlbCkgfHwgbnVsbERhdGE7XG4gICAgICAgICAgICBwcm9wZXJ0aWVzLnN0b3AgPSBpID4gMCAmJiBNYXRoLmFicyhwYXJzZWRbaUF4aXNdIC0gcHJldlBhcnNlZFtpQXhpc10pID4gbWF4R2FwTGVuZ3RoO1xuICAgICAgICAgICAgaWYgKHNlZ21lbnQpIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLnBhcnNlZCA9IHBhcnNlZDtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLnJhdyA9IF9kYXRhc2V0LmRhdGFbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW5jbHVkZU9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLm9wdGlvbnMgPSBzaGFyZWRPcHRpb25zIHx8IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpLCBwb2ludC5hY3RpdmUgPyAnYWN0aXZlJyA6IG1vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFkaXJlY3RVcGRhdGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQocG9pbnQsIGksIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJldlBhcnNlZCA9IHBhcnNlZDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZVNoYXJlZE9wdGlvbnMoc2hhcmVkT3B0aW9ucywgbW9kZSwgZmlyc3RPcHRzKTtcbiAgICB9XG4gZ2V0TWF4T3ZlcmZsb3coKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBkYXRhID0gbWV0YS5kYXRhIHx8IFtdO1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5zaG93TGluZSkge1xuICAgICAgICAgICAgbGV0IG1heCA9IDA7XG4gICAgICAgICAgICBmb3IobGV0IGkgPSBkYXRhLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKXtcbiAgICAgICAgICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIGRhdGFbaV0uc2l6ZSh0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSkpIC8gMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWF4ID4gMCAmJiBtYXg7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGF0YXNldCA9IG1ldGEuZGF0YXNldDtcbiAgICAgICAgY29uc3QgYm9yZGVyID0gZGF0YXNldC5vcHRpb25zICYmIGRhdGFzZXQub3B0aW9ucy5ib3JkZXJXaWR0aCB8fCAwO1xuICAgICAgICBpZiAoIWRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gYm9yZGVyO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZpcnN0UG9pbnQgPSBkYXRhWzBdLnNpemUodGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKDApKTtcbiAgICAgICAgY29uc3QgbGFzdFBvaW50ID0gZGF0YVtkYXRhLmxlbmd0aCAtIDFdLnNpemUodGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGRhdGEubGVuZ3RoIC0gMSkpO1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgoYm9yZGVyLCBmaXJzdFBvaW50LCBsYXN0UG9pbnQpIC8gMjtcbiAgICB9XG59XG5cbnZhciBjb250cm9sbGVycyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbl9fcHJvdG9fXzogbnVsbCxcbkJhckNvbnRyb2xsZXI6IEJhckNvbnRyb2xsZXIsXG5CdWJibGVDb250cm9sbGVyOiBCdWJibGVDb250cm9sbGVyLFxuRG91Z2hudXRDb250cm9sbGVyOiBEb3VnaG51dENvbnRyb2xsZXIsXG5MaW5lQ29udHJvbGxlcjogTGluZUNvbnRyb2xsZXIsXG5Qb2xhckFyZWFDb250cm9sbGVyOiBQb2xhckFyZWFDb250cm9sbGVyLFxuUGllQ29udHJvbGxlcjogUGllQ29udHJvbGxlcixcblJhZGFyQ29udHJvbGxlcjogUmFkYXJDb250cm9sbGVyLFxuU2NhdHRlckNvbnRyb2xsZXI6IFNjYXR0ZXJDb250cm9sbGVyXG59KTtcblxuLyoqXG4gKiBAbmFtZXNwYWNlIENoYXJ0Ll9hZGFwdGVyc1xuICogQHNpbmNlIDIuOC4wXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIGFic3RyYWN0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkOiBDaGVjayB0aGF0IGEgY29tcGxldGUgZGF0ZSBhZGFwdGVyIGlzIHByb3ZpZGVkLicpO1xufVxuLyoqXG4gKiBEYXRlIGFkYXB0ZXIgKGN1cnJlbnQgdXNlZCBieSB0aGUgdGltZSBzY2FsZSlcbiAqIEBuYW1lc3BhY2UgQ2hhcnQuX2FkYXB0ZXJzLl9kYXRlXG4gKiBAbWVtYmVyb2YgQ2hhcnQuX2FkYXB0ZXJzXG4gKiBAcHJpdmF0ZVxuICovIGNsYXNzIERhdGVBZGFwdGVyQmFzZSB7XG4gICAgLyoqXG4gICAqIE92ZXJyaWRlIGRlZmF1bHQgZGF0ZSBhZGFwdGVyIG1ldGhvZHMuXG4gICAqIEFjY2VwdHMgdHlwZSBwYXJhbWV0ZXIgdG8gZGVmaW5lIG9wdGlvbnMgdHlwZS5cbiAgICogQGV4YW1wbGVcbiAgICogQ2hhcnQuX2FkYXB0ZXJzLl9kYXRlLm92ZXJyaWRlPHtteUFkYXB0ZXJPcHRpb246IHN0cmluZ30+KHtcbiAgICogICBpbml0KCkge1xuICAgKiAgICAgY29uc29sZS5sb2codGhpcy5vcHRpb25zLm15QWRhcHRlck9wdGlvbik7XG4gICAqICAgfVxuICAgKiB9KVxuICAgKi8gc3RhdGljIG92ZXJyaWRlKG1lbWJlcnMpIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihEYXRlQWRhcHRlckJhc2UucHJvdG90eXBlLCBtZW1iZXJzKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucyl7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cbiAgICBpbml0KCkge31cbiAgICBmb3JtYXRzKCkge1xuICAgICAgICByZXR1cm4gYWJzdHJhY3QoKTtcbiAgICB9XG4gICAgcGFyc2UoKSB7XG4gICAgICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICAgIH1cbiAgICBmb3JtYXQoKSB7XG4gICAgICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICAgIH1cbiAgICBhZGQoKSB7XG4gICAgICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICAgIH1cbiAgICBkaWZmKCkge1xuICAgICAgICByZXR1cm4gYWJzdHJhY3QoKTtcbiAgICB9XG4gICAgc3RhcnRPZigpIHtcbiAgICAgICAgcmV0dXJuIGFic3RyYWN0KCk7XG4gICAgfVxuICAgIGVuZE9mKCkge1xuICAgICAgICByZXR1cm4gYWJzdHJhY3QoKTtcbiAgICB9XG59XG52YXIgYWRhcHRlcnMgPSB7XG4gICAgX2RhdGU6IERhdGVBZGFwdGVyQmFzZVxufTtcblxuZnVuY3Rpb24gYmluYXJ5U2VhcmNoKG1ldGFzZXQsIGF4aXMsIHZhbHVlLCBpbnRlcnNlY3QpIHtcbiAgICBjb25zdCB7IGNvbnRyb2xsZXIgLCBkYXRhICwgX3NvcnRlZCAgfSA9IG1ldGFzZXQ7XG4gICAgY29uc3QgaVNjYWxlID0gY29udHJvbGxlci5fY2FjaGVkTWV0YS5pU2NhbGU7XG4gICAgaWYgKGlTY2FsZSAmJiBheGlzID09PSBpU2NhbGUuYXhpcyAmJiBheGlzICE9PSAncicgJiYgX3NvcnRlZCAmJiBkYXRhLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBsb29rdXBNZXRob2QgPSBpU2NhbGUuX3JldmVyc2VQaXhlbHMgPyBfcmxvb2t1cEJ5S2V5IDogX2xvb2t1cEJ5S2V5O1xuICAgICAgICBpZiAoIWludGVyc2VjdCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvb2t1cE1ldGhvZChkYXRhLCBheGlzLCB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY29udHJvbGxlci5fc2hhcmVkT3B0aW9ucykge1xuICAgICAgICAgICAgY29uc3QgZWwgPSBkYXRhWzBdO1xuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSB0eXBlb2YgZWwuZ2V0UmFuZ2UgPT09ICdmdW5jdGlvbicgJiYgZWwuZ2V0UmFuZ2UoYXhpcyk7XG4gICAgICAgICAgICBpZiAocmFuZ2UpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFydCA9IGxvb2t1cE1ldGhvZChkYXRhLCBheGlzLCB2YWx1ZSAtIHJhbmdlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBlbmQgPSBsb29rdXBNZXRob2QoZGF0YSwgYXhpcywgdmFsdWUgKyByYW5nZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgbG86IHN0YXJ0LmxvLFxuICAgICAgICAgICAgICAgICAgICBoaTogZW5kLmhpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBsbzogMCxcbiAgICAgICAgaGk6IGRhdGEubGVuZ3RoIC0gMVxuICAgIH07XG59XG4gZnVuY3Rpb24gZXZhbHVhdGVJbnRlcmFjdGlvbkl0ZW1zKGNoYXJ0LCBheGlzLCBwb3NpdGlvbiwgaGFuZGxlciwgaW50ZXJzZWN0KSB7XG4gICAgY29uc3QgbWV0YXNldHMgPSBjaGFydC5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCk7XG4gICAgY29uc3QgdmFsdWUgPSBwb3NpdGlvbltheGlzXTtcbiAgICBmb3IobGV0IGkgPSAwLCBpbGVuID0gbWV0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgY29uc3QgeyBpbmRleCAsIGRhdGEgIH0gPSBtZXRhc2V0c1tpXTtcbiAgICAgICAgY29uc3QgeyBsbyAsIGhpICB9ID0gYmluYXJ5U2VhcmNoKG1ldGFzZXRzW2ldLCBheGlzLCB2YWx1ZSwgaW50ZXJzZWN0KTtcbiAgICAgICAgZm9yKGxldCBqID0gbG87IGogPD0gaGk7ICsrail7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gZGF0YVtqXTtcbiAgICAgICAgICAgIGlmICghZWxlbWVudC5za2lwKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlcihlbGVtZW50LCBpbmRleCwgaik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4gZnVuY3Rpb24gZ2V0RGlzdGFuY2VNZXRyaWNGb3JBeGlzKGF4aXMpIHtcbiAgICBjb25zdCB1c2VYID0gYXhpcy5pbmRleE9mKCd4JykgIT09IC0xO1xuICAgIGNvbnN0IHVzZVkgPSBheGlzLmluZGV4T2YoJ3knKSAhPT0gLTE7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHB0MSwgcHQyKSB7XG4gICAgICAgIGNvbnN0IGRlbHRhWCA9IHVzZVggPyBNYXRoLmFicyhwdDEueCAtIHB0Mi54KSA6IDA7XG4gICAgICAgIGNvbnN0IGRlbHRhWSA9IHVzZVkgPyBNYXRoLmFicyhwdDEueSAtIHB0Mi55KSA6IDA7XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3coZGVsdGFYLCAyKSArIE1hdGgucG93KGRlbHRhWSwgMikpO1xuICAgIH07XG59XG4gZnVuY3Rpb24gZ2V0SW50ZXJzZWN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uLCBpbmNsdWRlSW52aXNpYmxlKSB7XG4gICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICBpZiAoIWluY2x1ZGVJbnZpc2libGUgJiYgIWNoYXJ0LmlzUG9pbnRJbkFyZWEocG9zaXRpb24pKSB7XG4gICAgICAgIHJldHVybiBpdGVtcztcbiAgICB9XG4gICAgY29uc3QgZXZhbHVhdGlvbkZ1bmMgPSBmdW5jdGlvbihlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4KSB7XG4gICAgICAgIGlmICghaW5jbHVkZUludmlzaWJsZSAmJiAhX2lzUG9pbnRJbkFyZWEoZWxlbWVudCwgY2hhcnQuY2hhcnRBcmVhLCAwKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbGVtZW50LmluUmFuZ2UocG9zaXRpb24ueCwgcG9zaXRpb24ueSwgdXNlRmluYWxQb3NpdGlvbikpIHtcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgZGF0YXNldEluZGV4LFxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgZXZhbHVhdGVJbnRlcmFjdGlvbkl0ZW1zKGNoYXJ0LCBheGlzLCBwb3NpdGlvbiwgZXZhbHVhdGlvbkZ1bmMsIHRydWUpO1xuICAgIHJldHVybiBpdGVtcztcbn1cbiBmdW5jdGlvbiBnZXROZWFyZXN0UmFkaWFsSXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgbGV0IGl0ZW1zID0gW107XG4gICAgZnVuY3Rpb24gZXZhbHVhdGlvbkZ1bmMoZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleCkge1xuICAgICAgICBjb25zdCB7IHN0YXJ0QW5nbGUgLCBlbmRBbmdsZSAgfSA9IGVsZW1lbnQuZ2V0UHJvcHMoW1xuICAgICAgICAgICAgJ3N0YXJ0QW5nbGUnLFxuICAgICAgICAgICAgJ2VuZEFuZ2xlJ1xuICAgICAgICBdLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgY29uc3QgeyBhbmdsZSAgfSA9IGdldEFuZ2xlRnJvbVBvaW50KGVsZW1lbnQsIHtcbiAgICAgICAgICAgIHg6IHBvc2l0aW9uLngsXG4gICAgICAgICAgICB5OiBwb3NpdGlvbi55XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoX2FuZ2xlQmV0d2VlbihhbmdsZSwgc3RhcnRBbmdsZSwgZW5kQW5nbGUpKSB7XG4gICAgICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgICAgICAgIGRhdGFzZXRJbmRleCxcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZXZhbHVhdGVJbnRlcmFjdGlvbkl0ZW1zKGNoYXJ0LCBheGlzLCBwb3NpdGlvbiwgZXZhbHVhdGlvbkZ1bmMpO1xuICAgIHJldHVybiBpdGVtcztcbn1cbiBmdW5jdGlvbiBnZXROZWFyZXN0Q2FydGVzaWFuSXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCBpbnRlcnNlY3QsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpIHtcbiAgICBsZXQgaXRlbXMgPSBbXTtcbiAgICBjb25zdCBkaXN0YW5jZU1ldHJpYyA9IGdldERpc3RhbmNlTWV0cmljRm9yQXhpcyhheGlzKTtcbiAgICBsZXQgbWluRGlzdGFuY2UgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgZnVuY3Rpb24gZXZhbHVhdGlvbkZ1bmMoZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleCkge1xuICAgICAgICBjb25zdCBpblJhbmdlID0gZWxlbWVudC5pblJhbmdlKHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICBpZiAoaW50ZXJzZWN0ICYmICFpblJhbmdlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2VudGVyID0gZWxlbWVudC5nZXRDZW50ZXJQb2ludCh1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgY29uc3QgcG9pbnRJbkFyZWEgPSAhIWluY2x1ZGVJbnZpc2libGUgfHwgY2hhcnQuaXNQb2ludEluQXJlYShjZW50ZXIpO1xuICAgICAgICBpZiAoIXBvaW50SW5BcmVhICYmICFpblJhbmdlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBkaXN0YW5jZU1ldHJpYyhwb3NpdGlvbiwgY2VudGVyKTtcbiAgICAgICAgaWYgKGRpc3RhbmNlIDwgbWluRGlzdGFuY2UpIHtcbiAgICAgICAgICAgIGl0ZW1zID0gW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YXNldEluZGV4LFxuICAgICAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBtaW5EaXN0YW5jZSA9IGRpc3RhbmNlO1xuICAgICAgICB9IGVsc2UgaWYgKGRpc3RhbmNlID09PSBtaW5EaXN0YW5jZSkge1xuICAgICAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgICAgICBkYXRhc2V0SW5kZXgsXG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGV2YWx1YXRlSW50ZXJhY3Rpb25JdGVtcyhjaGFydCwgYXhpcywgcG9zaXRpb24sIGV2YWx1YXRpb25GdW5jKTtcbiAgICByZXR1cm4gaXRlbXM7XG59XG4gZnVuY3Rpb24gZ2V0TmVhcmVzdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgaW50ZXJzZWN0LCB1c2VGaW5hbFBvc2l0aW9uLCBpbmNsdWRlSW52aXNpYmxlKSB7XG4gICAgaWYgKCFpbmNsdWRlSW52aXNpYmxlICYmICFjaGFydC5pc1BvaW50SW5BcmVhKHBvc2l0aW9uKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHJldHVybiBheGlzID09PSAncicgJiYgIWludGVyc2VjdCA/IGdldE5lYXJlc3RSYWRpYWxJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIHVzZUZpbmFsUG9zaXRpb24pIDogZ2V0TmVhcmVzdENhcnRlc2lhbkl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgaW50ZXJzZWN0LCB1c2VGaW5hbFBvc2l0aW9uLCBpbmNsdWRlSW52aXNpYmxlKTtcbn1cbiBmdW5jdGlvbiBnZXRBeGlzSXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCBpbnRlcnNlY3QsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBjb25zdCBpdGVtcyA9IFtdO1xuICAgIGNvbnN0IHJhbmdlTWV0aG9kID0gYXhpcyA9PT0gJ3gnID8gJ2luWFJhbmdlJyA6ICdpbllSYW5nZSc7XG4gICAgbGV0IGludGVyc2VjdHNJdGVtID0gZmFsc2U7XG4gICAgZXZhbHVhdGVJbnRlcmFjdGlvbkl0ZW1zKGNoYXJ0LCBheGlzLCBwb3NpdGlvbiwgKGVsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXgpPT57XG4gICAgICAgIGlmIChlbGVtZW50W3JhbmdlTWV0aG9kXShwb3NpdGlvbltheGlzXSwgdXNlRmluYWxQb3NpdGlvbikpIHtcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgZGF0YXNldEluZGV4LFxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGludGVyc2VjdHNJdGVtID0gaW50ZXJzZWN0c0l0ZW0gfHwgZWxlbWVudC5pblJhbmdlKHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGludGVyc2VjdCAmJiAhaW50ZXJzZWN0c0l0ZW0pIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbXM7XG59XG4gdmFyIEludGVyYWN0aW9uID0ge1xuICAgIGV2YWx1YXRlSW50ZXJhY3Rpb25JdGVtcyxcbiAgICBtb2Rlczoge1xuIGluZGV4IChjaGFydCwgZSwgb3B0aW9ucywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KTtcbiAgICAgICAgICAgIGNvbnN0IGF4aXMgPSBvcHRpb25zLmF4aXMgfHwgJ3gnO1xuICAgICAgICAgICAgY29uc3QgaW5jbHVkZUludmlzaWJsZSA9IG9wdGlvbnMuaW5jbHVkZUludmlzaWJsZSB8fCBmYWxzZTtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gb3B0aW9ucy5pbnRlcnNlY3QgPyBnZXRJbnRlcnNlY3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpIDogZ2V0TmVhcmVzdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgZmFsc2UsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpO1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudHMgPSBbXTtcbiAgICAgICAgICAgIGlmICghaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2hhcnQuZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpLmZvckVhY2goKG1ldGEpPT57XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBpdGVtc1swXS5pbmRleDtcbiAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gbWV0YS5kYXRhW2luZGV4XTtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudCAmJiAhZWxlbWVudC5za2lwKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFzZXRJbmRleDogbWV0YS5pbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnRzO1xuICAgICAgICB9LFxuIGRhdGFzZXQgKGNoYXJ0LCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuICAgICAgICAgICAgY29uc3QgYXhpcyA9IG9wdGlvbnMuYXhpcyB8fCAneHknO1xuICAgICAgICAgICAgY29uc3QgaW5jbHVkZUludmlzaWJsZSA9IG9wdGlvbnMuaW5jbHVkZUludmlzaWJsZSB8fCBmYWxzZTtcbiAgICAgICAgICAgIGxldCBpdGVtcyA9IG9wdGlvbnMuaW50ZXJzZWN0ID8gZ2V0SW50ZXJzZWN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uLCBpbmNsdWRlSW52aXNpYmxlKSA6IGdldE5lYXJlc3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIGZhbHNlLCB1c2VGaW5hbFBvc2l0aW9uLCBpbmNsdWRlSW52aXNpYmxlKTtcbiAgICAgICAgICAgIGlmIChpdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YXNldEluZGV4ID0gaXRlbXNbMF0uZGF0YXNldEluZGV4O1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpLmRhdGE7XG4gICAgICAgICAgICAgICAgaXRlbXMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7ICsraSl7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogZGF0YVtpXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFzZXRJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpdGVtcztcbiAgICAgICAgfSxcbiBwb2ludCAoY2hhcnQsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG4gICAgICAgICAgICBjb25zdCBheGlzID0gb3B0aW9ucy5heGlzIHx8ICd4eSc7XG4gICAgICAgICAgICBjb25zdCBpbmNsdWRlSW52aXNpYmxlID0gb3B0aW9ucy5pbmNsdWRlSW52aXNpYmxlIHx8IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIGdldEludGVyc2VjdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgdXNlRmluYWxQb3NpdGlvbiwgaW5jbHVkZUludmlzaWJsZSk7XG4gICAgICAgIH0sXG4gbmVhcmVzdCAoY2hhcnQsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG4gICAgICAgICAgICBjb25zdCBheGlzID0gb3B0aW9ucy5heGlzIHx8ICd4eSc7XG4gICAgICAgICAgICBjb25zdCBpbmNsdWRlSW52aXNpYmxlID0gb3B0aW9ucy5pbmNsdWRlSW52aXNpYmxlIHx8IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIGdldE5lYXJlc3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIG9wdGlvbnMuaW50ZXJzZWN0LCB1c2VGaW5hbFBvc2l0aW9uLCBpbmNsdWRlSW52aXNpYmxlKTtcbiAgICAgICAgfSxcbiB4IChjaGFydCwgZSwgb3B0aW9ucywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KTtcbiAgICAgICAgICAgIHJldHVybiBnZXRBeGlzSXRlbXMoY2hhcnQsIHBvc2l0aW9uLCAneCcsIG9wdGlvbnMuaW50ZXJzZWN0LCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgfSxcbiB5IChjaGFydCwgZSwgb3B0aW9ucywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KTtcbiAgICAgICAgICAgIHJldHVybiBnZXRBeGlzSXRlbXMoY2hhcnQsIHBvc2l0aW9uLCAneScsIG9wdGlvbnMuaW50ZXJzZWN0LCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmNvbnN0IFNUQVRJQ19QT1NJVElPTlMgPSBbXG4gICAgJ2xlZnQnLFxuICAgICd0b3AnLFxuICAgICdyaWdodCcsXG4gICAgJ2JvdHRvbSdcbl07XG5mdW5jdGlvbiBmaWx0ZXJCeVBvc2l0aW9uKGFycmF5LCBwb3NpdGlvbikge1xuICAgIHJldHVybiBhcnJheS5maWx0ZXIoKHYpPT52LnBvcyA9PT0gcG9zaXRpb24pO1xufVxuZnVuY3Rpb24gZmlsdGVyRHluYW1pY1Bvc2l0aW9uQnlBeGlzKGFycmF5LCBheGlzKSB7XG4gICAgcmV0dXJuIGFycmF5LmZpbHRlcigodik9PlNUQVRJQ19QT1NJVElPTlMuaW5kZXhPZih2LnBvcykgPT09IC0xICYmIHYuYm94LmF4aXMgPT09IGF4aXMpO1xufVxuZnVuY3Rpb24gc29ydEJ5V2VpZ2h0KGFycmF5LCByZXZlcnNlKSB7XG4gICAgcmV0dXJuIGFycmF5LnNvcnQoKGEsIGIpPT57XG4gICAgICAgIGNvbnN0IHYwID0gcmV2ZXJzZSA/IGIgOiBhO1xuICAgICAgICBjb25zdCB2MSA9IHJldmVyc2UgPyBhIDogYjtcbiAgICAgICAgcmV0dXJuIHYwLndlaWdodCA9PT0gdjEud2VpZ2h0ID8gdjAuaW5kZXggLSB2MS5pbmRleCA6IHYwLndlaWdodCAtIHYxLndlaWdodDtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHdyYXBCb3hlcyhib3hlcykge1xuICAgIGNvbnN0IGxheW91dEJveGVzID0gW107XG4gICAgbGV0IGksIGlsZW4sIGJveCwgcG9zLCBzdGFjaywgc3RhY2tXZWlnaHQ7XG4gICAgZm9yKGkgPSAwLCBpbGVuID0gKGJveGVzIHx8IFtdKS5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBib3ggPSBib3hlc1tpXTtcbiAgICAgICAgKHsgcG9zaXRpb246IHBvcyAsIG9wdGlvbnM6IHsgc3RhY2sgLCBzdGFja1dlaWdodCA9MSAgfSAgfSA9IGJveCk7XG4gICAgICAgIGxheW91dEJveGVzLnB1c2goe1xuICAgICAgICAgICAgaW5kZXg6IGksXG4gICAgICAgICAgICBib3gsXG4gICAgICAgICAgICBwb3MsXG4gICAgICAgICAgICBob3Jpem9udGFsOiBib3guaXNIb3Jpem9udGFsKCksXG4gICAgICAgICAgICB3ZWlnaHQ6IGJveC53ZWlnaHQsXG4gICAgICAgICAgICBzdGFjazogc3RhY2sgJiYgcG9zICsgc3RhY2ssXG4gICAgICAgICAgICBzdGFja1dlaWdodFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGxheW91dEJveGVzO1xufVxuZnVuY3Rpb24gYnVpbGRTdGFja3MobGF5b3V0cykge1xuICAgIGNvbnN0IHN0YWNrcyA9IHt9O1xuICAgIGZvciAoY29uc3Qgd3JhcCBvZiBsYXlvdXRzKXtcbiAgICAgICAgY29uc3QgeyBzdGFjayAsIHBvcyAsIHN0YWNrV2VpZ2h0ICB9ID0gd3JhcDtcbiAgICAgICAgaWYgKCFzdGFjayB8fCAhU1RBVElDX1BPU0lUSU9OUy5pbmNsdWRlcyhwb3MpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBfc3RhY2sgPSBzdGFja3Nbc3RhY2tdIHx8IChzdGFja3Nbc3RhY2tdID0ge1xuICAgICAgICAgICAgY291bnQ6IDAsXG4gICAgICAgICAgICBwbGFjZWQ6IDAsXG4gICAgICAgICAgICB3ZWlnaHQ6IDAsXG4gICAgICAgICAgICBzaXplOiAwXG4gICAgICAgIH0pO1xuICAgICAgICBfc3RhY2suY291bnQrKztcbiAgICAgICAgX3N0YWNrLndlaWdodCArPSBzdGFja1dlaWdodDtcbiAgICB9XG4gICAgcmV0dXJuIHN0YWNrcztcbn1cbiBmdW5jdGlvbiBzZXRMYXlvdXREaW1zKGxheW91dHMsIHBhcmFtcykge1xuICAgIGNvbnN0IHN0YWNrcyA9IGJ1aWxkU3RhY2tzKGxheW91dHMpO1xuICAgIGNvbnN0IHsgdkJveE1heFdpZHRoICwgaEJveE1heEhlaWdodCAgfSA9IHBhcmFtcztcbiAgICBsZXQgaSwgaWxlbiwgbGF5b3V0O1xuICAgIGZvcihpID0gMCwgaWxlbiA9IGxheW91dHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgbGF5b3V0ID0gbGF5b3V0c1tpXTtcbiAgICAgICAgY29uc3QgeyBmdWxsU2l6ZSAgfSA9IGxheW91dC5ib3g7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gc3RhY2tzW2xheW91dC5zdGFja107XG4gICAgICAgIGNvbnN0IGZhY3RvciA9IHN0YWNrICYmIGxheW91dC5zdGFja1dlaWdodCAvIHN0YWNrLndlaWdodDtcbiAgICAgICAgaWYgKGxheW91dC5ob3Jpem9udGFsKSB7XG4gICAgICAgICAgICBsYXlvdXQud2lkdGggPSBmYWN0b3IgPyBmYWN0b3IgKiB2Qm94TWF4V2lkdGggOiBmdWxsU2l6ZSAmJiBwYXJhbXMuYXZhaWxhYmxlV2lkdGg7XG4gICAgICAgICAgICBsYXlvdXQuaGVpZ2h0ID0gaEJveE1heEhlaWdodDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxheW91dC53aWR0aCA9IHZCb3hNYXhXaWR0aDtcbiAgICAgICAgICAgIGxheW91dC5oZWlnaHQgPSBmYWN0b3IgPyBmYWN0b3IgKiBoQm94TWF4SGVpZ2h0IDogZnVsbFNpemUgJiYgcGFyYW1zLmF2YWlsYWJsZUhlaWdodDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3RhY2tzO1xufVxuZnVuY3Rpb24gYnVpbGRMYXlvdXRCb3hlcyhib3hlcykge1xuICAgIGNvbnN0IGxheW91dEJveGVzID0gd3JhcEJveGVzKGJveGVzKTtcbiAgICBjb25zdCBmdWxsU2l6ZSA9IHNvcnRCeVdlaWdodChsYXlvdXRCb3hlcy5maWx0ZXIoKHdyYXApPT53cmFwLmJveC5mdWxsU2l6ZSksIHRydWUpO1xuICAgIGNvbnN0IGxlZnQgPSBzb3J0QnlXZWlnaHQoZmlsdGVyQnlQb3NpdGlvbihsYXlvdXRCb3hlcywgJ2xlZnQnKSwgdHJ1ZSk7XG4gICAgY29uc3QgcmlnaHQgPSBzb3J0QnlXZWlnaHQoZmlsdGVyQnlQb3NpdGlvbihsYXlvdXRCb3hlcywgJ3JpZ2h0JykpO1xuICAgIGNvbnN0IHRvcCA9IHNvcnRCeVdlaWdodChmaWx0ZXJCeVBvc2l0aW9uKGxheW91dEJveGVzLCAndG9wJyksIHRydWUpO1xuICAgIGNvbnN0IGJvdHRvbSA9IHNvcnRCeVdlaWdodChmaWx0ZXJCeVBvc2l0aW9uKGxheW91dEJveGVzLCAnYm90dG9tJykpO1xuICAgIGNvbnN0IGNlbnRlckhvcml6b250YWwgPSBmaWx0ZXJEeW5hbWljUG9zaXRpb25CeUF4aXMobGF5b3V0Qm94ZXMsICd4Jyk7XG4gICAgY29uc3QgY2VudGVyVmVydGljYWwgPSBmaWx0ZXJEeW5hbWljUG9zaXRpb25CeUF4aXMobGF5b3V0Qm94ZXMsICd5Jyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZnVsbFNpemUsXG4gICAgICAgIGxlZnRBbmRUb3A6IGxlZnQuY29uY2F0KHRvcCksXG4gICAgICAgIHJpZ2h0QW5kQm90dG9tOiByaWdodC5jb25jYXQoY2VudGVyVmVydGljYWwpLmNvbmNhdChib3R0b20pLmNvbmNhdChjZW50ZXJIb3Jpem9udGFsKSxcbiAgICAgICAgY2hhcnRBcmVhOiBmaWx0ZXJCeVBvc2l0aW9uKGxheW91dEJveGVzLCAnY2hhcnRBcmVhJyksXG4gICAgICAgIHZlcnRpY2FsOiBsZWZ0LmNvbmNhdChyaWdodCkuY29uY2F0KGNlbnRlclZlcnRpY2FsKSxcbiAgICAgICAgaG9yaXpvbnRhbDogdG9wLmNvbmNhdChib3R0b20pLmNvbmNhdChjZW50ZXJIb3Jpem9udGFsKVxuICAgIH07XG59XG5mdW5jdGlvbiBnZXRDb21iaW5lZE1heChtYXhQYWRkaW5nLCBjaGFydEFyZWEsIGEsIGIpIHtcbiAgICByZXR1cm4gTWF0aC5tYXgobWF4UGFkZGluZ1thXSwgY2hhcnRBcmVhW2FdKSArIE1hdGgubWF4KG1heFBhZGRpbmdbYl0sIGNoYXJ0QXJlYVtiXSk7XG59XG5mdW5jdGlvbiB1cGRhdGVNYXhQYWRkaW5nKG1heFBhZGRpbmcsIGJveFBhZGRpbmcpIHtcbiAgICBtYXhQYWRkaW5nLnRvcCA9IE1hdGgubWF4KG1heFBhZGRpbmcudG9wLCBib3hQYWRkaW5nLnRvcCk7XG4gICAgbWF4UGFkZGluZy5sZWZ0ID0gTWF0aC5tYXgobWF4UGFkZGluZy5sZWZ0LCBib3hQYWRkaW5nLmxlZnQpO1xuICAgIG1heFBhZGRpbmcuYm90dG9tID0gTWF0aC5tYXgobWF4UGFkZGluZy5ib3R0b20sIGJveFBhZGRpbmcuYm90dG9tKTtcbiAgICBtYXhQYWRkaW5nLnJpZ2h0ID0gTWF0aC5tYXgobWF4UGFkZGluZy5yaWdodCwgYm94UGFkZGluZy5yaWdodCk7XG59XG5mdW5jdGlvbiB1cGRhdGVEaW1zKGNoYXJ0QXJlYSwgcGFyYW1zLCBsYXlvdXQsIHN0YWNrcykge1xuICAgIGNvbnN0IHsgcG9zICwgYm94ICB9ID0gbGF5b3V0O1xuICAgIGNvbnN0IG1heFBhZGRpbmcgPSBjaGFydEFyZWEubWF4UGFkZGluZztcbiAgICBpZiAoIWlzT2JqZWN0KHBvcykpIHtcbiAgICAgICAgaWYgKGxheW91dC5zaXplKSB7XG4gICAgICAgICAgICBjaGFydEFyZWFbcG9zXSAtPSBsYXlvdXQuc2l6ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGFjayA9IHN0YWNrc1tsYXlvdXQuc3RhY2tdIHx8IHtcbiAgICAgICAgICAgIHNpemU6IDAsXG4gICAgICAgICAgICBjb3VudDogMVxuICAgICAgICB9O1xuICAgICAgICBzdGFjay5zaXplID0gTWF0aC5tYXgoc3RhY2suc2l6ZSwgbGF5b3V0Lmhvcml6b250YWwgPyBib3guaGVpZ2h0IDogYm94LndpZHRoKTtcbiAgICAgICAgbGF5b3V0LnNpemUgPSBzdGFjay5zaXplIC8gc3RhY2suY291bnQ7XG4gICAgICAgIGNoYXJ0QXJlYVtwb3NdICs9IGxheW91dC5zaXplO1xuICAgIH1cbiAgICBpZiAoYm94LmdldFBhZGRpbmcpIHtcbiAgICAgICAgdXBkYXRlTWF4UGFkZGluZyhtYXhQYWRkaW5nLCBib3guZ2V0UGFkZGluZygpKTtcbiAgICB9XG4gICAgY29uc3QgbmV3V2lkdGggPSBNYXRoLm1heCgwLCBwYXJhbXMub3V0ZXJXaWR0aCAtIGdldENvbWJpbmVkTWF4KG1heFBhZGRpbmcsIGNoYXJ0QXJlYSwgJ2xlZnQnLCAncmlnaHQnKSk7XG4gICAgY29uc3QgbmV3SGVpZ2h0ID0gTWF0aC5tYXgoMCwgcGFyYW1zLm91dGVySGVpZ2h0IC0gZ2V0Q29tYmluZWRNYXgobWF4UGFkZGluZywgY2hhcnRBcmVhLCAndG9wJywgJ2JvdHRvbScpKTtcbiAgICBjb25zdCB3aWR0aENoYW5nZWQgPSBuZXdXaWR0aCAhPT0gY2hhcnRBcmVhLnc7XG4gICAgY29uc3QgaGVpZ2h0Q2hhbmdlZCA9IG5ld0hlaWdodCAhPT0gY2hhcnRBcmVhLmg7XG4gICAgY2hhcnRBcmVhLncgPSBuZXdXaWR0aDtcbiAgICBjaGFydEFyZWEuaCA9IG5ld0hlaWdodDtcbiAgICByZXR1cm4gbGF5b3V0Lmhvcml6b250YWwgPyB7XG4gICAgICAgIHNhbWU6IHdpZHRoQ2hhbmdlZCxcbiAgICAgICAgb3RoZXI6IGhlaWdodENoYW5nZWRcbiAgICB9IDoge1xuICAgICAgICBzYW1lOiBoZWlnaHRDaGFuZ2VkLFxuICAgICAgICBvdGhlcjogd2lkdGhDaGFuZ2VkXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGhhbmRsZU1heFBhZGRpbmcoY2hhcnRBcmVhKSB7XG4gICAgY29uc3QgbWF4UGFkZGluZyA9IGNoYXJ0QXJlYS5tYXhQYWRkaW5nO1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVBvcyhwb3MpIHtcbiAgICAgICAgY29uc3QgY2hhbmdlID0gTWF0aC5tYXgobWF4UGFkZGluZ1twb3NdIC0gY2hhcnRBcmVhW3Bvc10sIDApO1xuICAgICAgICBjaGFydEFyZWFbcG9zXSArPSBjaGFuZ2U7XG4gICAgICAgIHJldHVybiBjaGFuZ2U7XG4gICAgfVxuICAgIGNoYXJ0QXJlYS55ICs9IHVwZGF0ZVBvcygndG9wJyk7XG4gICAgY2hhcnRBcmVhLnggKz0gdXBkYXRlUG9zKCdsZWZ0Jyk7XG4gICAgdXBkYXRlUG9zKCdyaWdodCcpO1xuICAgIHVwZGF0ZVBvcygnYm90dG9tJyk7XG59XG5mdW5jdGlvbiBnZXRNYXJnaW5zKGhvcml6b250YWwsIGNoYXJ0QXJlYSkge1xuICAgIGNvbnN0IG1heFBhZGRpbmcgPSBjaGFydEFyZWEubWF4UGFkZGluZztcbiAgICBmdW5jdGlvbiBtYXJnaW5Gb3JQb3NpdGlvbnMocG9zaXRpb25zKSB7XG4gICAgICAgIGNvbnN0IG1hcmdpbiA9IHtcbiAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICAgIGJvdHRvbTogMFxuICAgICAgICB9O1xuICAgICAgICBwb3NpdGlvbnMuZm9yRWFjaCgocG9zKT0+e1xuICAgICAgICAgICAgbWFyZ2luW3Bvc10gPSBNYXRoLm1heChjaGFydEFyZWFbcG9zXSwgbWF4UGFkZGluZ1twb3NdKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBtYXJnaW47XG4gICAgfVxuICAgIHJldHVybiBob3Jpem9udGFsID8gbWFyZ2luRm9yUG9zaXRpb25zKFtcbiAgICAgICAgJ2xlZnQnLFxuICAgICAgICAncmlnaHQnXG4gICAgXSkgOiBtYXJnaW5Gb3JQb3NpdGlvbnMoW1xuICAgICAgICAndG9wJyxcbiAgICAgICAgJ2JvdHRvbSdcbiAgICBdKTtcbn1cbmZ1bmN0aW9uIGZpdEJveGVzKGJveGVzLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKSB7XG4gICAgY29uc3QgcmVmaXRCb3hlcyA9IFtdO1xuICAgIGxldCBpLCBpbGVuLCBsYXlvdXQsIGJveCwgcmVmaXQsIGNoYW5nZWQ7XG4gICAgZm9yKGkgPSAwLCBpbGVuID0gYm94ZXMubGVuZ3RoLCByZWZpdCA9IDA7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBsYXlvdXQgPSBib3hlc1tpXTtcbiAgICAgICAgYm94ID0gbGF5b3V0LmJveDtcbiAgICAgICAgYm94LnVwZGF0ZShsYXlvdXQud2lkdGggfHwgY2hhcnRBcmVhLncsIGxheW91dC5oZWlnaHQgfHwgY2hhcnRBcmVhLmgsIGdldE1hcmdpbnMobGF5b3V0Lmhvcml6b250YWwsIGNoYXJ0QXJlYSkpO1xuICAgICAgICBjb25zdCB7IHNhbWUgLCBvdGhlciAgfSA9IHVwZGF0ZURpbXMoY2hhcnRBcmVhLCBwYXJhbXMsIGxheW91dCwgc3RhY2tzKTtcbiAgICAgICAgcmVmaXQgfD0gc2FtZSAmJiByZWZpdEJveGVzLmxlbmd0aDtcbiAgICAgICAgY2hhbmdlZCA9IGNoYW5nZWQgfHwgb3RoZXI7XG4gICAgICAgIGlmICghYm94LmZ1bGxTaXplKSB7XG4gICAgICAgICAgICByZWZpdEJveGVzLnB1c2gobGF5b3V0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVmaXQgJiYgZml0Qm94ZXMocmVmaXRCb3hlcywgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcykgfHwgY2hhbmdlZDtcbn1cbmZ1bmN0aW9uIHNldEJveERpbXMoYm94LCBsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICBib3gudG9wID0gdG9wO1xuICAgIGJveC5sZWZ0ID0gbGVmdDtcbiAgICBib3gucmlnaHQgPSBsZWZ0ICsgd2lkdGg7XG4gICAgYm94LmJvdHRvbSA9IHRvcCArIGhlaWdodDtcbiAgICBib3gud2lkdGggPSB3aWR0aDtcbiAgICBib3guaGVpZ2h0ID0gaGVpZ2h0O1xufVxuZnVuY3Rpb24gcGxhY2VCb3hlcyhib3hlcywgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcykge1xuICAgIGNvbnN0IHVzZXJQYWRkaW5nID0gcGFyYW1zLnBhZGRpbmc7XG4gICAgbGV0IHsgeCAsIHkgIH0gPSBjaGFydEFyZWE7XG4gICAgZm9yIChjb25zdCBsYXlvdXQgb2YgYm94ZXMpe1xuICAgICAgICBjb25zdCBib3ggPSBsYXlvdXQuYm94O1xuICAgICAgICBjb25zdCBzdGFjayA9IHN0YWNrc1tsYXlvdXQuc3RhY2tdIHx8IHtcbiAgICAgICAgICAgIGNvdW50OiAxLFxuICAgICAgICAgICAgcGxhY2VkOiAwLFxuICAgICAgICAgICAgd2VpZ2h0OiAxXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHdlaWdodCA9IGxheW91dC5zdGFja1dlaWdodCAvIHN0YWNrLndlaWdodCB8fCAxO1xuICAgICAgICBpZiAobGF5b3V0Lmhvcml6b250YWwpIHtcbiAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gY2hhcnRBcmVhLncgKiB3ZWlnaHQ7XG4gICAgICAgICAgICBjb25zdCBoZWlnaHQgPSBzdGFjay5zaXplIHx8IGJveC5oZWlnaHQ7XG4gICAgICAgICAgICBpZiAoZGVmaW5lZChzdGFjay5zdGFydCkpIHtcbiAgICAgICAgICAgICAgICB5ID0gc3RhY2suc3RhcnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYm94LmZ1bGxTaXplKSB7XG4gICAgICAgICAgICAgICAgc2V0Qm94RGltcyhib3gsIHVzZXJQYWRkaW5nLmxlZnQsIHksIHBhcmFtcy5vdXRlcldpZHRoIC0gdXNlclBhZGRpbmcucmlnaHQgLSB1c2VyUGFkZGluZy5sZWZ0LCBoZWlnaHQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZXRCb3hEaW1zKGJveCwgY2hhcnRBcmVhLmxlZnQgKyBzdGFjay5wbGFjZWQsIHksIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhY2suc3RhcnQgPSB5O1xuICAgICAgICAgICAgc3RhY2sucGxhY2VkICs9IHdpZHRoO1xuICAgICAgICAgICAgeSA9IGJveC5ib3R0b207XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBoZWlnaHQxID0gY2hhcnRBcmVhLmggKiB3ZWlnaHQ7XG4gICAgICAgICAgICBjb25zdCB3aWR0aDEgPSBzdGFjay5zaXplIHx8IGJveC53aWR0aDtcbiAgICAgICAgICAgIGlmIChkZWZpbmVkKHN0YWNrLnN0YXJ0KSkge1xuICAgICAgICAgICAgICAgIHggPSBzdGFjay5zdGFydDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChib3guZnVsbFNpemUpIHtcbiAgICAgICAgICAgICAgICBzZXRCb3hEaW1zKGJveCwgeCwgdXNlclBhZGRpbmcudG9wLCB3aWR0aDEsIHBhcmFtcy5vdXRlckhlaWdodCAtIHVzZXJQYWRkaW5nLmJvdHRvbSAtIHVzZXJQYWRkaW5nLnRvcCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNldEJveERpbXMoYm94LCB4LCBjaGFydEFyZWEudG9wICsgc3RhY2sucGxhY2VkLCB3aWR0aDEsIGhlaWdodDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhY2suc3RhcnQgPSB4O1xuICAgICAgICAgICAgc3RhY2sucGxhY2VkICs9IGhlaWdodDE7XG4gICAgICAgICAgICB4ID0gYm94LnJpZ2h0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGNoYXJ0QXJlYS54ID0geDtcbiAgICBjaGFydEFyZWEueSA9IHk7XG59XG52YXIgbGF5b3V0cyA9IHtcbiBhZGRCb3ggKGNoYXJ0LCBpdGVtKSB7XG4gICAgICAgIGlmICghY2hhcnQuYm94ZXMpIHtcbiAgICAgICAgICAgIGNoYXJ0LmJveGVzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaXRlbS5mdWxsU2l6ZSA9IGl0ZW0uZnVsbFNpemUgfHwgZmFsc2U7XG4gICAgICAgIGl0ZW0ucG9zaXRpb24gPSBpdGVtLnBvc2l0aW9uIHx8ICd0b3AnO1xuICAgICAgICBpdGVtLndlaWdodCA9IGl0ZW0ud2VpZ2h0IHx8IDA7XG4gICAgICAgIGl0ZW0uX2xheWVycyA9IGl0ZW0uX2xheWVycyB8fCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB6OiAwLFxuICAgICAgICAgICAgICAgICAgICBkcmF3IChjaGFydEFyZWEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZHJhdyhjaGFydEFyZWEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfTtcbiAgICAgICAgY2hhcnQuYm94ZXMucHVzaChpdGVtKTtcbiAgICB9LFxuIHJlbW92ZUJveCAoY2hhcnQsIGxheW91dEl0ZW0pIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBjaGFydC5ib3hlcyA/IGNoYXJ0LmJveGVzLmluZGV4T2YobGF5b3V0SXRlbSkgOiAtMTtcbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgY2hhcnQuYm94ZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgIH0sXG4gY29uZmlndXJlIChjaGFydCwgaXRlbSwgb3B0aW9ucykge1xuICAgICAgICBpdGVtLmZ1bGxTaXplID0gb3B0aW9ucy5mdWxsU2l6ZTtcbiAgICAgICAgaXRlbS5wb3NpdGlvbiA9IG9wdGlvbnMucG9zaXRpb247XG4gICAgICAgIGl0ZW0ud2VpZ2h0ID0gb3B0aW9ucy53ZWlnaHQ7XG4gICAgfSxcbiB1cGRhdGUgKGNoYXJ0LCB3aWR0aCwgaGVpZ2h0LCBtaW5QYWRkaW5nKSB7XG4gICAgICAgIGlmICghY2hhcnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKGNoYXJ0Lm9wdGlvbnMubGF5b3V0LnBhZGRpbmcpO1xuICAgICAgICBjb25zdCBhdmFpbGFibGVXaWR0aCA9IE1hdGgubWF4KHdpZHRoIC0gcGFkZGluZy53aWR0aCwgMCk7XG4gICAgICAgIGNvbnN0IGF2YWlsYWJsZUhlaWdodCA9IE1hdGgubWF4KGhlaWdodCAtIHBhZGRpbmcuaGVpZ2h0LCAwKTtcbiAgICAgICAgY29uc3QgYm94ZXMgPSBidWlsZExheW91dEJveGVzKGNoYXJ0LmJveGVzKTtcbiAgICAgICAgY29uc3QgdmVydGljYWxCb3hlcyA9IGJveGVzLnZlcnRpY2FsO1xuICAgICAgICBjb25zdCBob3Jpem9udGFsQm94ZXMgPSBib3hlcy5ob3Jpem9udGFsO1xuICAgICAgICBlYWNoKGNoYXJ0LmJveGVzLCAoYm94KT0+e1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBib3guYmVmb3JlTGF5b3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgYm94LmJlZm9yZUxheW91dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgdmlzaWJsZVZlcnRpY2FsQm94Q291bnQgPSB2ZXJ0aWNhbEJveGVzLnJlZHVjZSgodG90YWwsIHdyYXApPT53cmFwLmJveC5vcHRpb25zICYmIHdyYXAuYm94Lm9wdGlvbnMuZGlzcGxheSA9PT0gZmFsc2UgPyB0b3RhbCA6IHRvdGFsICsgMSwgMCkgfHwgMTtcbiAgICAgICAgY29uc3QgcGFyYW1zID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgICAgICAgICBvdXRlcldpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgIG91dGVySGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgICAgICBwYWRkaW5nLFxuICAgICAgICAgICAgYXZhaWxhYmxlV2lkdGgsXG4gICAgICAgICAgICBhdmFpbGFibGVIZWlnaHQsXG4gICAgICAgICAgICB2Qm94TWF4V2lkdGg6IGF2YWlsYWJsZVdpZHRoIC8gMiAvIHZpc2libGVWZXJ0aWNhbEJveENvdW50LFxuICAgICAgICAgICAgaEJveE1heEhlaWdodDogYXZhaWxhYmxlSGVpZ2h0IC8gMlxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgbWF4UGFkZGluZyA9IE9iamVjdC5hc3NpZ24oe30sIHBhZGRpbmcpO1xuICAgICAgICB1cGRhdGVNYXhQYWRkaW5nKG1heFBhZGRpbmcsIHRvUGFkZGluZyhtaW5QYWRkaW5nKSk7XG4gICAgICAgIGNvbnN0IGNoYXJ0QXJlYSA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgbWF4UGFkZGluZyxcbiAgICAgICAgICAgIHc6IGF2YWlsYWJsZVdpZHRoLFxuICAgICAgICAgICAgaDogYXZhaWxhYmxlSGVpZ2h0LFxuICAgICAgICAgICAgeDogcGFkZGluZy5sZWZ0LFxuICAgICAgICAgICAgeTogcGFkZGluZy50b3BcbiAgICAgICAgfSwgcGFkZGluZyk7XG4gICAgICAgIGNvbnN0IHN0YWNrcyA9IHNldExheW91dERpbXModmVydGljYWxCb3hlcy5jb25jYXQoaG9yaXpvbnRhbEJveGVzKSwgcGFyYW1zKTtcbiAgICAgICAgZml0Qm94ZXMoYm94ZXMuZnVsbFNpemUsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpO1xuICAgICAgICBmaXRCb3hlcyh2ZXJ0aWNhbEJveGVzLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKTtcbiAgICAgICAgaWYgKGZpdEJveGVzKGhvcml6b250YWxCb3hlcywgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcykpIHtcbiAgICAgICAgICAgIGZpdEJveGVzKHZlcnRpY2FsQm94ZXMsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpO1xuICAgICAgICB9XG4gICAgICAgIGhhbmRsZU1heFBhZGRpbmcoY2hhcnRBcmVhKTtcbiAgICAgICAgcGxhY2VCb3hlcyhib3hlcy5sZWZ0QW5kVG9wLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKTtcbiAgICAgICAgY2hhcnRBcmVhLnggKz0gY2hhcnRBcmVhLnc7XG4gICAgICAgIGNoYXJ0QXJlYS55ICs9IGNoYXJ0QXJlYS5oO1xuICAgICAgICBwbGFjZUJveGVzKGJveGVzLnJpZ2h0QW5kQm90dG9tLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKTtcbiAgICAgICAgY2hhcnQuY2hhcnRBcmVhID0ge1xuICAgICAgICAgICAgbGVmdDogY2hhcnRBcmVhLmxlZnQsXG4gICAgICAgICAgICB0b3A6IGNoYXJ0QXJlYS50b3AsXG4gICAgICAgICAgICByaWdodDogY2hhcnRBcmVhLmxlZnQgKyBjaGFydEFyZWEudyxcbiAgICAgICAgICAgIGJvdHRvbTogY2hhcnRBcmVhLnRvcCArIGNoYXJ0QXJlYS5oLFxuICAgICAgICAgICAgaGVpZ2h0OiBjaGFydEFyZWEuaCxcbiAgICAgICAgICAgIHdpZHRoOiBjaGFydEFyZWEud1xuICAgICAgICB9O1xuICAgICAgICBlYWNoKGJveGVzLmNoYXJ0QXJlYSwgKGxheW91dCk9PntcbiAgICAgICAgICAgIGNvbnN0IGJveCA9IGxheW91dC5ib3g7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGJveCwgY2hhcnQuY2hhcnRBcmVhKTtcbiAgICAgICAgICAgIGJveC51cGRhdGUoY2hhcnRBcmVhLncsIGNoYXJ0QXJlYS5oLCB7XG4gICAgICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgICAgICAgYm90dG9tOiAwXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufTtcblxuY2xhc3MgQmFzZVBsYXRmb3JtIHtcbiBhY3F1aXJlQ29udGV4dChjYW52YXMsIGFzcGVjdFJhdGlvKSB7fVxuIHJlbGVhc2VDb250ZXh0KGNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiBhZGRFdmVudExpc3RlbmVyKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcikge31cbiByZW1vdmVFdmVudExpc3RlbmVyKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcikge31cbiBnZXREZXZpY2VQaXhlbFJhdGlvKCkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG4gZ2V0TWF4aW11bVNpemUoZWxlbWVudCwgd2lkdGgsIGhlaWdodCwgYXNwZWN0UmF0aW8pIHtcbiAgICAgICAgd2lkdGggPSBNYXRoLm1heCgwLCB3aWR0aCB8fCBlbGVtZW50LndpZHRoKTtcbiAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IHx8IGVsZW1lbnQuaGVpZ2h0O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IE1hdGgubWF4KDAsIGFzcGVjdFJhdGlvID8gTWF0aC5mbG9vcih3aWR0aCAvIGFzcGVjdFJhdGlvKSA6IGhlaWdodClcbiAgICAgICAgfTtcbiAgICB9XG4gaXNBdHRhY2hlZChjYW52YXMpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuIHVwZGF0ZUNvbmZpZyhjb25maWcpIHtcbiAgICB9XG59XG5cbmNsYXNzIEJhc2ljUGxhdGZvcm0gZXh0ZW5kcyBCYXNlUGxhdGZvcm0ge1xuICAgIGFjcXVpcmVDb250ZXh0KGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0gJiYgaXRlbS5nZXRDb250ZXh0ICYmIGl0ZW0uZ2V0Q29udGV4dCgnMmQnKSB8fCBudWxsO1xuICAgIH1cbiAgICB1cGRhdGVDb25maWcoY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5vcHRpb25zLmFuaW1hdGlvbiA9IGZhbHNlO1xuICAgIH1cbn1cblxuY29uc3QgRVhQQU5ET19LRVkgPSAnJGNoYXJ0anMnO1xuIGNvbnN0IEVWRU5UX1RZUEVTID0ge1xuICAgIHRvdWNoc3RhcnQ6ICdtb3VzZWRvd24nLFxuICAgIHRvdWNobW92ZTogJ21vdXNlbW92ZScsXG4gICAgdG91Y2hlbmQ6ICdtb3VzZXVwJyxcbiAgICBwb2ludGVyZW50ZXI6ICdtb3VzZWVudGVyJyxcbiAgICBwb2ludGVyZG93bjogJ21vdXNlZG93bicsXG4gICAgcG9pbnRlcm1vdmU6ICdtb3VzZW1vdmUnLFxuICAgIHBvaW50ZXJ1cDogJ21vdXNldXAnLFxuICAgIHBvaW50ZXJsZWF2ZTogJ21vdXNlb3V0JyxcbiAgICBwb2ludGVyb3V0OiAnbW91c2VvdXQnXG59O1xuY29uc3QgaXNOdWxsT3JFbXB0eSA9ICh2YWx1ZSk9PnZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSAnJztcbiBmdW5jdGlvbiBpbml0Q2FudmFzKGNhbnZhcywgYXNwZWN0UmF0aW8pIHtcbiAgICBjb25zdCBzdHlsZSA9IGNhbnZhcy5zdHlsZTtcbiAgICBjb25zdCByZW5kZXJIZWlnaHQgPSBjYW52YXMuZ2V0QXR0cmlidXRlKCdoZWlnaHQnKTtcbiAgICBjb25zdCByZW5kZXJXaWR0aCA9IGNhbnZhcy5nZXRBdHRyaWJ1dGUoJ3dpZHRoJyk7XG4gICAgY2FudmFzW0VYUEFORE9fS0VZXSA9IHtcbiAgICAgICAgaW5pdGlhbDoge1xuICAgICAgICAgICAgaGVpZ2h0OiByZW5kZXJIZWlnaHQsXG4gICAgICAgICAgICB3aWR0aDogcmVuZGVyV2lkdGgsXG4gICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IHN0eWxlLmRpc3BsYXksXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBzdHlsZS5oZWlnaHQsXG4gICAgICAgICAgICAgICAgd2lkdGg6IHN0eWxlLndpZHRoXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHN0eWxlLmRpc3BsYXkgPSBzdHlsZS5kaXNwbGF5IHx8ICdibG9jayc7XG4gICAgc3R5bGUuYm94U2l6aW5nID0gc3R5bGUuYm94U2l6aW5nIHx8ICdib3JkZXItYm94JztcbiAgICBpZiAoaXNOdWxsT3JFbXB0eShyZW5kZXJXaWR0aCkpIHtcbiAgICAgICAgY29uc3QgZGlzcGxheVdpZHRoID0gcmVhZFVzZWRTaXplKGNhbnZhcywgJ3dpZHRoJyk7XG4gICAgICAgIGlmIChkaXNwbGF5V2lkdGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY2FudmFzLndpZHRoID0gZGlzcGxheVdpZHRoO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChpc051bGxPckVtcHR5KHJlbmRlckhlaWdodCkpIHtcbiAgICAgICAgaWYgKGNhbnZhcy5zdHlsZS5oZWlnaHQgPT09ICcnKSB7XG4gICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gY2FudmFzLndpZHRoIC8gKGFzcGVjdFJhdGlvIHx8IDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZGlzcGxheUhlaWdodCA9IHJlYWRVc2VkU2l6ZShjYW52YXMsICdoZWlnaHQnKTtcbiAgICAgICAgICAgIGlmIChkaXNwbGF5SGVpZ2h0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gZGlzcGxheUhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2FudmFzO1xufVxuY29uc3QgZXZlbnRMaXN0ZW5lck9wdGlvbnMgPSBzdXBwb3J0c0V2ZW50TGlzdGVuZXJPcHRpb25zID8ge1xuICAgIHBhc3NpdmU6IHRydWVcbn0gOiBmYWxzZTtcbmZ1bmN0aW9uIGFkZExpc3RlbmVyKG5vZGUsIHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBldmVudExpc3RlbmVyT3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVMaXN0ZW5lcihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgICBjaGFydC5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgZXZlbnRMaXN0ZW5lck9wdGlvbnMpO1xufVxuZnVuY3Rpb24gZnJvbU5hdGl2ZUV2ZW50KGV2ZW50LCBjaGFydCkge1xuICAgIGNvbnN0IHR5cGUgPSBFVkVOVF9UWVBFU1tldmVudC50eXBlXSB8fCBldmVudC50eXBlO1xuICAgIGNvbnN0IHsgeCAsIHkgIH0gPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGV2ZW50LCBjaGFydCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZSxcbiAgICAgICAgY2hhcnQsXG4gICAgICAgIG5hdGl2ZTogZXZlbnQsXG4gICAgICAgIHg6IHggIT09IHVuZGVmaW5lZCA/IHggOiBudWxsLFxuICAgICAgICB5OiB5ICE9PSB1bmRlZmluZWQgPyB5IDogbnVsbFxuICAgIH07XG59XG5mdW5jdGlvbiBub2RlTGlzdENvbnRhaW5zKG5vZGVMaXN0LCBjYW52YXMpIHtcbiAgICBmb3IgKGNvbnN0IG5vZGUgb2Ygbm9kZUxpc3Qpe1xuICAgICAgICBpZiAobm9kZSA9PT0gY2FudmFzIHx8IG5vZGUuY29udGFpbnMoY2FudmFzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVBdHRhY2hPYnNlcnZlcihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgICBjb25zdCBjYW52YXMgPSBjaGFydC5jYW52YXM7XG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigoZW50cmllcyk9PntcbiAgICAgICAgbGV0IHRyaWdnZXIgPSBmYWxzZTtcbiAgICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBlbnRyaWVzKXtcbiAgICAgICAgICAgIHRyaWdnZXIgPSB0cmlnZ2VyIHx8IG5vZGVMaXN0Q29udGFpbnMoZW50cnkuYWRkZWROb2RlcywgY2FudmFzKTtcbiAgICAgICAgICAgIHRyaWdnZXIgPSB0cmlnZ2VyICYmICFub2RlTGlzdENvbnRhaW5zKGVudHJ5LnJlbW92ZWROb2RlcywgY2FudmFzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJpZ2dlcikge1xuICAgICAgICAgICAgbGlzdGVuZXIoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQsIHtcbiAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgICBzdWJ0cmVlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIG9ic2VydmVyO1xufVxuZnVuY3Rpb24gY3JlYXRlRGV0YWNoT2JzZXJ2ZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgY29uc3QgY2FudmFzID0gY2hhcnQuY2FudmFzO1xuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKGVudHJpZXMpPT57XG4gICAgICAgIGxldCB0cmlnZ2VyID0gZmFsc2U7XG4gICAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcyl7XG4gICAgICAgICAgICB0cmlnZ2VyID0gdHJpZ2dlciB8fCBub2RlTGlzdENvbnRhaW5zKGVudHJ5LnJlbW92ZWROb2RlcywgY2FudmFzKTtcbiAgICAgICAgICAgIHRyaWdnZXIgPSB0cmlnZ2VyICYmICFub2RlTGlzdENvbnRhaW5zKGVudHJ5LmFkZGVkTm9kZXMsIGNhbnZhcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRyaWdnZXIpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBvYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LCB7XG4gICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICAgICAgc3VidHJlZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBvYnNlcnZlcjtcbn1cbmNvbnN0IGRycExpc3RlbmluZ0NoYXJ0cyA9IG5ldyBNYXAoKTtcbmxldCBvbGREZXZpY2VQaXhlbFJhdGlvID0gMDtcbmZ1bmN0aW9uIG9uV2luZG93UmVzaXplKCkge1xuICAgIGNvbnN0IGRwciA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgIGlmIChkcHIgPT09IG9sZERldmljZVBpeGVsUmF0aW8pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBvbGREZXZpY2VQaXhlbFJhdGlvID0gZHByO1xuICAgIGRycExpc3RlbmluZ0NoYXJ0cy5mb3JFYWNoKChyZXNpemUsIGNoYXJ0KT0+e1xuICAgICAgICBpZiAoY2hhcnQuY3VycmVudERldmljZVBpeGVsUmF0aW8gIT09IGRwcikge1xuICAgICAgICAgICAgcmVzaXplKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGxpc3RlbkRldmljZVBpeGVsUmF0aW9DaGFuZ2VzKGNoYXJ0LCByZXNpemUpIHtcbiAgICBpZiAoIWRycExpc3RlbmluZ0NoYXJ0cy5zaXplKSB7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvbldpbmRvd1Jlc2l6ZSk7XG4gICAgfVxuICAgIGRycExpc3RlbmluZ0NoYXJ0cy5zZXQoY2hhcnQsIHJlc2l6ZSk7XG59XG5mdW5jdGlvbiB1bmxpc3RlbkRldmljZVBpeGVsUmF0aW9DaGFuZ2VzKGNoYXJ0KSB7XG4gICAgZHJwTGlzdGVuaW5nQ2hhcnRzLmRlbGV0ZShjaGFydCk7XG4gICAgaWYgKCFkcnBMaXN0ZW5pbmdDaGFydHMuc2l6ZSkge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgb25XaW5kb3dSZXNpemUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZVJlc2l6ZU9ic2VydmVyKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcikge1xuICAgIGNvbnN0IGNhbnZhcyA9IGNoYXJ0LmNhbnZhcztcbiAgICBjb25zdCBjb250YWluZXIgPSBjYW52YXMgJiYgX2dldFBhcmVudE5vZGUoY2FudmFzKTtcbiAgICBpZiAoIWNvbnRhaW5lcikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHJlc2l6ZSA9IHRocm90dGxlZCgod2lkdGgsIGhlaWdodCk9PntcbiAgICAgICAgY29uc3QgdyA9IGNvbnRhaW5lci5jbGllbnRXaWR0aDtcbiAgICAgICAgbGlzdGVuZXIod2lkdGgsIGhlaWdodCk7XG4gICAgICAgIGlmICh3IDwgY29udGFpbmVyLmNsaWVudFdpZHRoKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcigpO1xuICAgICAgICB9XG4gICAgfSwgd2luZG93KTtcbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcigoZW50cmllcyk9PntcbiAgICAgICAgY29uc3QgZW50cnkgPSBlbnRyaWVzWzBdO1xuICAgICAgICBjb25zdCB3aWR0aCA9IGVudHJ5LmNvbnRlbnRSZWN0LndpZHRoO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSBlbnRyeS5jb250ZW50UmVjdC5oZWlnaHQ7XG4gICAgICAgIGlmICh3aWR0aCA9PT0gMCAmJiBoZWlnaHQgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXNpemUod2lkdGgsIGhlaWdodCk7XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZShjb250YWluZXIpO1xuICAgIGxpc3RlbkRldmljZVBpeGVsUmF0aW9DaGFuZ2VzKGNoYXJ0LCByZXNpemUpO1xuICAgIHJldHVybiBvYnNlcnZlcjtcbn1cbmZ1bmN0aW9uIHJlbGVhc2VPYnNlcnZlcihjaGFydCwgdHlwZSwgb2JzZXJ2ZXIpIHtcbiAgICBpZiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gJ3Jlc2l6ZScpIHtcbiAgICAgICAgdW5saXN0ZW5EZXZpY2VQaXhlbFJhdGlvQ2hhbmdlcyhjaGFydCk7XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlUHJveHlBbmRMaXN0ZW4oY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgY29uc3QgY2FudmFzID0gY2hhcnQuY2FudmFzO1xuICAgIGNvbnN0IHByb3h5ID0gdGhyb3R0bGVkKChldmVudCk9PntcbiAgICAgICAgaWYgKGNoYXJ0LmN0eCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgbGlzdGVuZXIoZnJvbU5hdGl2ZUV2ZW50KGV2ZW50LCBjaGFydCkpO1xuICAgICAgICB9XG4gICAgfSwgY2hhcnQpO1xuICAgIGFkZExpc3RlbmVyKGNhbnZhcywgdHlwZSwgcHJveHkpO1xuICAgIHJldHVybiBwcm94eTtcbn1cbiBjbGFzcyBEb21QbGF0Zm9ybSBleHRlbmRzIEJhc2VQbGF0Zm9ybSB7XG4gYWNxdWlyZUNvbnRleHQoY2FudmFzLCBhc3BlY3RSYXRpbykge1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gY2FudmFzICYmIGNhbnZhcy5nZXRDb250ZXh0ICYmIGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0LmNhbnZhcyA9PT0gY2FudmFzKSB7XG4gICAgICAgICAgICBpbml0Q2FudmFzKGNhbnZhcywgYXNwZWN0UmF0aW8pO1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuIHJlbGVhc2VDb250ZXh0KGNvbnRleHQpIHtcbiAgICAgICAgY29uc3QgY2FudmFzID0gY29udGV4dC5jYW52YXM7XG4gICAgICAgIGlmICghY2FudmFzW0VYUEFORE9fS0VZXSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGluaXRpYWwgPSBjYW52YXNbRVhQQU5ET19LRVldLmluaXRpYWw7XG4gICAgICAgIFtcbiAgICAgICAgICAgICdoZWlnaHQnLFxuICAgICAgICAgICAgJ3dpZHRoJ1xuICAgICAgICBdLmZvckVhY2goKHByb3ApPT57XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGluaXRpYWxbcHJvcF07XG4gICAgICAgICAgICBpZiAoaXNOdWxsT3JVbmRlZih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBjYW52YXMucmVtb3ZlQXR0cmlidXRlKHByb3ApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYW52YXMuc2V0QXR0cmlidXRlKHByb3AsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gaW5pdGlhbC5zdHlsZSB8fCB7fTtcbiAgICAgICAgT2JqZWN0LmtleXMoc3R5bGUpLmZvckVhY2goKGtleSk9PntcbiAgICAgICAgICAgIGNhbnZhcy5zdHlsZVtrZXldID0gc3R5bGVba2V5XTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNhbnZhcy53aWR0aCA9IGNhbnZhcy53aWR0aDtcbiAgICAgICAgZGVsZXRlIGNhbnZhc1tFWFBBTkRPX0tFWV07XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiBhZGRFdmVudExpc3RlbmVyKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoY2hhcnQsIHR5cGUpO1xuICAgICAgICBjb25zdCBwcm94aWVzID0gY2hhcnQuJHByb3hpZXMgfHwgKGNoYXJ0LiRwcm94aWVzID0ge30pO1xuICAgICAgICBjb25zdCBoYW5kbGVycyA9IHtcbiAgICAgICAgICAgIGF0dGFjaDogY3JlYXRlQXR0YWNoT2JzZXJ2ZXIsXG4gICAgICAgICAgICBkZXRhY2g6IGNyZWF0ZURldGFjaE9ic2VydmVyLFxuICAgICAgICAgICAgcmVzaXplOiBjcmVhdGVSZXNpemVPYnNlcnZlclxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBoYW5kbGVyID0gaGFuZGxlcnNbdHlwZV0gfHwgY3JlYXRlUHJveHlBbmRMaXN0ZW47XG4gICAgICAgIHByb3hpZXNbdHlwZV0gPSBoYW5kbGVyKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcik7XG4gICAgfVxuIHJlbW92ZUV2ZW50TGlzdGVuZXIoY2hhcnQsIHR5cGUpIHtcbiAgICAgICAgY29uc3QgcHJveGllcyA9IGNoYXJ0LiRwcm94aWVzIHx8IChjaGFydC4kcHJveGllcyA9IHt9KTtcbiAgICAgICAgY29uc3QgcHJveHkgPSBwcm94aWVzW3R5cGVdO1xuICAgICAgICBpZiAoIXByb3h5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaGFuZGxlcnMgPSB7XG4gICAgICAgICAgICBhdHRhY2g6IHJlbGVhc2VPYnNlcnZlcixcbiAgICAgICAgICAgIGRldGFjaDogcmVsZWFzZU9ic2VydmVyLFxuICAgICAgICAgICAgcmVzaXplOiByZWxlYXNlT2JzZXJ2ZXJcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgaGFuZGxlciA9IGhhbmRsZXJzW3R5cGVdIHx8IHJlbW92ZUxpc3RlbmVyO1xuICAgICAgICBoYW5kbGVyKGNoYXJ0LCB0eXBlLCBwcm94eSk7XG4gICAgICAgIHByb3hpZXNbdHlwZV0gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGdldERldmljZVBpeGVsUmF0aW8oKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcbiAgICB9XG4gZ2V0TWF4aW11bVNpemUoY2FudmFzLCB3aWR0aCwgaGVpZ2h0LCBhc3BlY3RSYXRpbykge1xuICAgICAgICByZXR1cm4gZ2V0TWF4aW11bVNpemUoY2FudmFzLCB3aWR0aCwgaGVpZ2h0LCBhc3BlY3RSYXRpbyk7XG4gICAgfVxuIGlzQXR0YWNoZWQoY2FudmFzKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IF9nZXRQYXJlbnROb2RlKGNhbnZhcyk7XG4gICAgICAgIHJldHVybiAhIShjb250YWluZXIgJiYgY29udGFpbmVyLmlzQ29ubmVjdGVkKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIF9kZXRlY3RQbGF0Zm9ybShjYW52YXMpIHtcbiAgICBpZiAoIV9pc0RvbVN1cHBvcnRlZCgpIHx8IHR5cGVvZiBPZmZzY3JlZW5DYW52YXMgIT09ICd1bmRlZmluZWQnICYmIGNhbnZhcyBpbnN0YW5jZW9mIE9mZnNjcmVlbkNhbnZhcykge1xuICAgICAgICByZXR1cm4gQmFzaWNQbGF0Zm9ybTtcbiAgICB9XG4gICAgcmV0dXJuIERvbVBsYXRmb3JtO1xufVxuXG5jbGFzcyBFbGVtZW50IHtcbiAgICBzdGF0aWMgZGVmYXVsdHMgPSB7fTtcbiAgICBzdGF0aWMgZGVmYXVsdFJvdXRlcyA9IHVuZGVmaW5lZDtcbiAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICB0b29sdGlwUG9zaXRpb24odXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICBjb25zdCB7IHggLCB5ICB9ID0gdGhpcy5nZXRQcm9wcyhbXG4gICAgICAgICAgICAneCcsXG4gICAgICAgICAgICAneSdcbiAgICAgICAgXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4LFxuICAgICAgICAgICAgeVxuICAgICAgICB9O1xuICAgIH1cbiAgICBoYXNWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIGlzTnVtYmVyKHRoaXMueCkgJiYgaXNOdW1iZXIodGhpcy55KTtcbiAgICB9XG4gICAgZ2V0UHJvcHMocHJvcHMsIGZpbmFsKSB7XG4gICAgICAgIGNvbnN0IGFuaW1zID0gdGhpcy4kYW5pbWF0aW9ucztcbiAgICAgICAgaWYgKCFmaW5hbCB8fCAhYW5pbXMpIHtcbiAgICAgICAgICAgIC8vIGxldCdzIG5vdCBjcmVhdGUgYW4gb2JqZWN0LCBpZiBub3QgbmVlZGVkXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXQgPSB7fTtcbiAgICAgICAgcHJvcHMuZm9yRWFjaCgocHJvcCk9PntcbiAgICAgICAgICAgIHJldFtwcm9wXSA9IGFuaW1zW3Byb3BdICYmIGFuaW1zW3Byb3BdLmFjdGl2ZSgpID8gYW5pbXNbcHJvcF0uX3RvIDogdGhpc1twcm9wXTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBhdXRvU2tpcChzY2FsZSwgdGlja3MpIHtcbiAgICBjb25zdCB0aWNrT3B0cyA9IHNjYWxlLm9wdGlvbnMudGlja3M7XG4gICAgY29uc3QgZGV0ZXJtaW5lZE1heFRpY2tzID0gZGV0ZXJtaW5lTWF4VGlja3Moc2NhbGUpO1xuICAgIGNvbnN0IHRpY2tzTGltaXQgPSBNYXRoLm1pbih0aWNrT3B0cy5tYXhUaWNrc0xpbWl0IHx8IGRldGVybWluZWRNYXhUaWNrcywgZGV0ZXJtaW5lZE1heFRpY2tzKTtcbiAgICBjb25zdCBtYWpvckluZGljZXMgPSB0aWNrT3B0cy5tYWpvci5lbmFibGVkID8gZ2V0TWFqb3JJbmRpY2VzKHRpY2tzKSA6IFtdO1xuICAgIGNvbnN0IG51bU1ham9ySW5kaWNlcyA9IG1ham9ySW5kaWNlcy5sZW5ndGg7XG4gICAgY29uc3QgZmlyc3QgPSBtYWpvckluZGljZXNbMF07XG4gICAgY29uc3QgbGFzdCA9IG1ham9ySW5kaWNlc1tudW1NYWpvckluZGljZXMgLSAxXTtcbiAgICBjb25zdCBuZXdUaWNrcyA9IFtdO1xuICAgIGlmIChudW1NYWpvckluZGljZXMgPiB0aWNrc0xpbWl0KSB7XG4gICAgICAgIHNraXBNYWpvcnModGlja3MsIG5ld1RpY2tzLCBtYWpvckluZGljZXMsIG51bU1ham9ySW5kaWNlcyAvIHRpY2tzTGltaXQpO1xuICAgICAgICByZXR1cm4gbmV3VGlja3M7XG4gICAgfVxuICAgIGNvbnN0IHNwYWNpbmcgPSBjYWxjdWxhdGVTcGFjaW5nKG1ham9ySW5kaWNlcywgdGlja3MsIHRpY2tzTGltaXQpO1xuICAgIGlmIChudW1NYWpvckluZGljZXMgPiAwKSB7XG4gICAgICAgIGxldCBpLCBpbGVuO1xuICAgICAgICBjb25zdCBhdmdNYWpvclNwYWNpbmcgPSBudW1NYWpvckluZGljZXMgPiAxID8gTWF0aC5yb3VuZCgobGFzdCAtIGZpcnN0KSAvIChudW1NYWpvckluZGljZXMgLSAxKSkgOiBudWxsO1xuICAgICAgICBza2lwKHRpY2tzLCBuZXdUaWNrcywgc3BhY2luZywgaXNOdWxsT3JVbmRlZihhdmdNYWpvclNwYWNpbmcpID8gMCA6IGZpcnN0IC0gYXZnTWFqb3JTcGFjaW5nLCBmaXJzdCk7XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IG51bU1ham9ySW5kaWNlcyAtIDE7IGkgPCBpbGVuOyBpKyspe1xuICAgICAgICAgICAgc2tpcCh0aWNrcywgbmV3VGlja3MsIHNwYWNpbmcsIG1ham9ySW5kaWNlc1tpXSwgbWFqb3JJbmRpY2VzW2kgKyAxXSk7XG4gICAgICAgIH1cbiAgICAgICAgc2tpcCh0aWNrcywgbmV3VGlja3MsIHNwYWNpbmcsIGxhc3QsIGlzTnVsbE9yVW5kZWYoYXZnTWFqb3JTcGFjaW5nKSA/IHRpY2tzLmxlbmd0aCA6IGxhc3QgKyBhdmdNYWpvclNwYWNpbmcpO1xuICAgICAgICByZXR1cm4gbmV3VGlja3M7XG4gICAgfVxuICAgIHNraXAodGlja3MsIG5ld1RpY2tzLCBzcGFjaW5nKTtcbiAgICByZXR1cm4gbmV3VGlja3M7XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVNYXhUaWNrcyhzY2FsZSkge1xuICAgIGNvbnN0IG9mZnNldCA9IHNjYWxlLm9wdGlvbnMub2Zmc2V0O1xuICAgIGNvbnN0IHRpY2tMZW5ndGggPSBzY2FsZS5fdGlja1NpemUoKTtcbiAgICBjb25zdCBtYXhTY2FsZSA9IHNjYWxlLl9sZW5ndGggLyB0aWNrTGVuZ3RoICsgKG9mZnNldCA/IDAgOiAxKTtcbiAgICBjb25zdCBtYXhDaGFydCA9IHNjYWxlLl9tYXhMZW5ndGggLyB0aWNrTGVuZ3RoO1xuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgubWluKG1heFNjYWxlLCBtYXhDaGFydCkpO1xufVxuIGZ1bmN0aW9uIGNhbGN1bGF0ZVNwYWNpbmcobWFqb3JJbmRpY2VzLCB0aWNrcywgdGlja3NMaW1pdCkge1xuICAgIGNvbnN0IGV2ZW5NYWpvclNwYWNpbmcgPSBnZXRFdmVuU3BhY2luZyhtYWpvckluZGljZXMpO1xuICAgIGNvbnN0IHNwYWNpbmcgPSB0aWNrcy5sZW5ndGggLyB0aWNrc0xpbWl0O1xuICAgIGlmICghZXZlbk1ham9yU3BhY2luZykge1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgoc3BhY2luZywgMSk7XG4gICAgfVxuICAgIGNvbnN0IGZhY3RvcnMgPSBfZmFjdG9yaXplKGV2ZW5NYWpvclNwYWNpbmcpO1xuICAgIGZvcihsZXQgaSA9IDAsIGlsZW4gPSBmYWN0b3JzLmxlbmd0aCAtIDE7IGkgPCBpbGVuOyBpKyspe1xuICAgICAgICBjb25zdCBmYWN0b3IgPSBmYWN0b3JzW2ldO1xuICAgICAgICBpZiAoZmFjdG9yID4gc3BhY2luZykge1xuICAgICAgICAgICAgcmV0dXJuIGZhY3RvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gTWF0aC5tYXgoc3BhY2luZywgMSk7XG59XG4gZnVuY3Rpb24gZ2V0TWFqb3JJbmRpY2VzKHRpY2tzKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgbGV0IGksIGlsZW47XG4gICAgZm9yKGkgPSAwLCBpbGVuID0gdGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKXtcbiAgICAgICAgaWYgKHRpY2tzW2ldLm1ham9yKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIGZ1bmN0aW9uIHNraXBNYWpvcnModGlja3MsIG5ld1RpY2tzLCBtYWpvckluZGljZXMsIHNwYWNpbmcpIHtcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIGxldCBuZXh0ID0gbWFqb3JJbmRpY2VzWzBdO1xuICAgIGxldCBpO1xuICAgIHNwYWNpbmcgPSBNYXRoLmNlaWwoc3BhY2luZyk7XG4gICAgZm9yKGkgPSAwOyBpIDwgdGlja3MubGVuZ3RoOyBpKyspe1xuICAgICAgICBpZiAoaSA9PT0gbmV4dCkge1xuICAgICAgICAgICAgbmV3VGlja3MucHVzaCh0aWNrc1tpXSk7XG4gICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgICAgbmV4dCA9IG1ham9ySW5kaWNlc1tjb3VudCAqIHNwYWNpbmddO1xuICAgICAgICB9XG4gICAgfVxufVxuIGZ1bmN0aW9uIHNraXAodGlja3MsIG5ld1RpY2tzLCBzcGFjaW5nLCBtYWpvclN0YXJ0LCBtYWpvckVuZCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gdmFsdWVPckRlZmF1bHQobWFqb3JTdGFydCwgMCk7XG4gICAgY29uc3QgZW5kID0gTWF0aC5taW4odmFsdWVPckRlZmF1bHQobWFqb3JFbmQsIHRpY2tzLmxlbmd0aCksIHRpY2tzLmxlbmd0aCk7XG4gICAgbGV0IGNvdW50ID0gMDtcbiAgICBsZXQgbGVuZ3RoLCBpLCBuZXh0O1xuICAgIHNwYWNpbmcgPSBNYXRoLmNlaWwoc3BhY2luZyk7XG4gICAgaWYgKG1ham9yRW5kKSB7XG4gICAgICAgIGxlbmd0aCA9IG1ham9yRW5kIC0gbWFqb3JTdGFydDtcbiAgICAgICAgc3BhY2luZyA9IGxlbmd0aCAvIE1hdGguZmxvb3IobGVuZ3RoIC8gc3BhY2luZyk7XG4gICAgfVxuICAgIG5leHQgPSBzdGFydDtcbiAgICB3aGlsZShuZXh0IDwgMCl7XG4gICAgICAgIGNvdW50Kys7XG4gICAgICAgIG5leHQgPSBNYXRoLnJvdW5kKHN0YXJ0ICsgY291bnQgKiBzcGFjaW5nKTtcbiAgICB9XG4gICAgZm9yKGkgPSBNYXRoLm1heChzdGFydCwgMCk7IGkgPCBlbmQ7IGkrKyl7XG4gICAgICAgIGlmIChpID09PSBuZXh0KSB7XG4gICAgICAgICAgICBuZXdUaWNrcy5wdXNoKHRpY2tzW2ldKTtcbiAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICBuZXh0ID0gTWF0aC5yb3VuZChzdGFydCArIGNvdW50ICogc3BhY2luZyk7XG4gICAgICAgIH1cbiAgICB9XG59XG4gZnVuY3Rpb24gZ2V0RXZlblNwYWNpbmcoYXJyKSB7XG4gICAgY29uc3QgbGVuID0gYXJyLmxlbmd0aDtcbiAgICBsZXQgaSwgZGlmZjtcbiAgICBpZiAobGVuIDwgMikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvcihkaWZmID0gYXJyWzBdLCBpID0gMTsgaSA8IGxlbjsgKytpKXtcbiAgICAgICAgaWYgKGFycltpXSAtIGFycltpIC0gMV0gIT09IGRpZmYpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGlmZjtcbn1cblxuY29uc3QgcmV2ZXJzZUFsaWduID0gKGFsaWduKT0+YWxpZ24gPT09ICdsZWZ0JyA/ICdyaWdodCcgOiBhbGlnbiA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6IGFsaWduO1xuY29uc3Qgb2Zmc2V0RnJvbUVkZ2UgPSAoc2NhbGUsIGVkZ2UsIG9mZnNldCk9PmVkZ2UgPT09ICd0b3AnIHx8IGVkZ2UgPT09ICdsZWZ0JyA/IHNjYWxlW2VkZ2VdICsgb2Zmc2V0IDogc2NhbGVbZWRnZV0gLSBvZmZzZXQ7XG5jb25zdCBnZXRUaWNrc0xpbWl0ID0gKHRpY2tzTGVuZ3RoLCBtYXhUaWNrc0xpbWl0KT0+TWF0aC5taW4obWF4VGlja3NMaW1pdCB8fCB0aWNrc0xlbmd0aCwgdGlja3NMZW5ndGgpO1xuIGZ1bmN0aW9uIHNhbXBsZShhcnIsIG51bUl0ZW1zKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgY29uc3QgaW5jcmVtZW50ID0gYXJyLmxlbmd0aCAvIG51bUl0ZW1zO1xuICAgIGNvbnN0IGxlbiA9IGFyci5sZW5ndGg7XG4gICAgbGV0IGkgPSAwO1xuICAgIGZvcig7IGkgPCBsZW47IGkgKz0gaW5jcmVtZW50KXtcbiAgICAgICAgcmVzdWx0LnB1c2goYXJyW01hdGguZmxvb3IoaSldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbiBmdW5jdGlvbiBnZXRQaXhlbEZvckdyaWRMaW5lKHNjYWxlLCBpbmRleCwgb2Zmc2V0R3JpZExpbmVzKSB7XG4gICAgY29uc3QgbGVuZ3RoID0gc2NhbGUudGlja3MubGVuZ3RoO1xuICAgIGNvbnN0IHZhbGlkSW5kZXggPSBNYXRoLm1pbihpbmRleCwgbGVuZ3RoIC0gMSk7XG4gICAgY29uc3Qgc3RhcnQgPSBzY2FsZS5fc3RhcnRQaXhlbDtcbiAgICBjb25zdCBlbmQgPSBzY2FsZS5fZW5kUGl4ZWw7XG4gICAgY29uc3QgZXBzaWxvbiA9IDFlLTY7XG4gICAgbGV0IGxpbmVWYWx1ZSA9IHNjYWxlLmdldFBpeGVsRm9yVGljayh2YWxpZEluZGV4KTtcbiAgICBsZXQgb2Zmc2V0O1xuICAgIGlmIChvZmZzZXRHcmlkTGluZXMpIHtcbiAgICAgICAgaWYgKGxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgb2Zmc2V0ID0gTWF0aC5tYXgobGluZVZhbHVlIC0gc3RhcnQsIGVuZCAtIGxpbmVWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgICAgIG9mZnNldCA9IChzY2FsZS5nZXRQaXhlbEZvclRpY2soMSkgLSBsaW5lVmFsdWUpIC8gMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9mZnNldCA9IChsaW5lVmFsdWUgLSBzY2FsZS5nZXRQaXhlbEZvclRpY2sodmFsaWRJbmRleCAtIDEpKSAvIDI7XG4gICAgICAgIH1cbiAgICAgICAgbGluZVZhbHVlICs9IHZhbGlkSW5kZXggPCBpbmRleCA/IG9mZnNldCA6IC1vZmZzZXQ7XG4gICAgICAgIGlmIChsaW5lVmFsdWUgPCBzdGFydCAtIGVwc2lsb24gfHwgbGluZVZhbHVlID4gZW5kICsgZXBzaWxvbikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsaW5lVmFsdWU7XG59XG4gZnVuY3Rpb24gZ2FyYmFnZUNvbGxlY3QoY2FjaGVzLCBsZW5ndGgpIHtcbiAgICBlYWNoKGNhY2hlcywgKGNhY2hlKT0+e1xuICAgICAgICBjb25zdCBnYyA9IGNhY2hlLmdjO1xuICAgICAgICBjb25zdCBnY0xlbiA9IGdjLmxlbmd0aCAvIDI7XG4gICAgICAgIGxldCBpO1xuICAgICAgICBpZiAoZ2NMZW4gPiBsZW5ndGgpIHtcbiAgICAgICAgICAgIGZvcihpID0gMDsgaSA8IGdjTGVuOyArK2kpe1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBjYWNoZS5kYXRhW2djW2ldXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdjLnNwbGljZSgwLCBnY0xlbik7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbiBmdW5jdGlvbiBnZXRUaWNrTWFya0xlbmd0aChvcHRpb25zKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMuZHJhd1RpY2tzID8gb3B0aW9ucy50aWNrTGVuZ3RoIDogMDtcbn1cbiBmdW5jdGlvbiBnZXRUaXRsZUhlaWdodChvcHRpb25zLCBmYWxsYmFjaykge1xuICAgIGlmICghb3B0aW9ucy5kaXNwbGF5KSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBjb25zdCBmb250ID0gdG9Gb250KG9wdGlvbnMuZm9udCwgZmFsbGJhY2spO1xuICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcob3B0aW9ucy5wYWRkaW5nKTtcbiAgICBjb25zdCBsaW5lcyA9IGlzQXJyYXkob3B0aW9ucy50ZXh0KSA/IG9wdGlvbnMudGV4dC5sZW5ndGggOiAxO1xuICAgIHJldHVybiBsaW5lcyAqIGZvbnQubGluZUhlaWdodCArIHBhZGRpbmcuaGVpZ2h0O1xufVxuZnVuY3Rpb24gY3JlYXRlU2NhbGVDb250ZXh0KHBhcmVudCwgc2NhbGUpIHtcbiAgICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsIHtcbiAgICAgICAgc2NhbGUsXG4gICAgICAgIHR5cGU6ICdzY2FsZSdcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVRpY2tDb250ZXh0KHBhcmVudCwgaW5kZXgsIHRpY2spIHtcbiAgICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsIHtcbiAgICAgICAgdGljayxcbiAgICAgICAgaW5kZXgsXG4gICAgICAgIHR5cGU6ICd0aWNrJ1xuICAgIH0pO1xufVxuZnVuY3Rpb24gdGl0bGVBbGlnbihhbGlnbiwgcG9zaXRpb24sIHJldmVyc2UpIHtcbiAgICBsZXQgcmV0ID0gX3RvTGVmdFJpZ2h0Q2VudGVyKGFsaWduKTtcbiAgICBpZiAocmV2ZXJzZSAmJiBwb3NpdGlvbiAhPT0gJ3JpZ2h0JyB8fCAhcmV2ZXJzZSAmJiBwb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICByZXQgPSByZXZlcnNlQWxpZ24ocmV0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cbmZ1bmN0aW9uIHRpdGxlQXJncyhzY2FsZSwgb2Zmc2V0LCBwb3NpdGlvbiwgYWxpZ24pIHtcbiAgICBjb25zdCB7IHRvcCAsIGxlZnQgLCBib3R0b20gLCByaWdodCAsIGNoYXJ0ICB9ID0gc2NhbGU7XG4gICAgY29uc3QgeyBjaGFydEFyZWEgLCBzY2FsZXMgIH0gPSBjaGFydDtcbiAgICBsZXQgcm90YXRpb24gPSAwO1xuICAgIGxldCBtYXhXaWR0aCwgdGl0bGVYLCB0aXRsZVk7XG4gICAgY29uc3QgaGVpZ2h0ID0gYm90dG9tIC0gdG9wO1xuICAgIGNvbnN0IHdpZHRoID0gcmlnaHQgLSBsZWZ0O1xuICAgIGlmIChzY2FsZS5pc0hvcml6b250YWwoKSkge1xuICAgICAgICB0aXRsZVggPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgbGVmdCwgcmlnaHQpO1xuICAgICAgICBpZiAoaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbkF4aXNJRCA9IE9iamVjdC5rZXlzKHBvc2l0aW9uKVswXTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcG9zaXRpb25bcG9zaXRpb25BeGlzSURdO1xuICAgICAgICAgICAgdGl0bGVZID0gc2NhbGVzW3Bvc2l0aW9uQXhpc0lEXS5nZXRQaXhlbEZvclZhbHVlKHZhbHVlKSArIGhlaWdodCAtIG9mZnNldDtcbiAgICAgICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgIHRpdGxlWSA9IChjaGFydEFyZWEuYm90dG9tICsgY2hhcnRBcmVhLnRvcCkgLyAyICsgaGVpZ2h0IC0gb2Zmc2V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGl0bGVZID0gb2Zmc2V0RnJvbUVkZ2Uoc2NhbGUsIHBvc2l0aW9uLCBvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIG1heFdpZHRoID0gcmlnaHQgLSBsZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uQXhpc0lEMSA9IE9iamVjdC5rZXlzKHBvc2l0aW9uKVswXTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlMSA9IHBvc2l0aW9uW3Bvc2l0aW9uQXhpc0lEMV07XG4gICAgICAgICAgICB0aXRsZVggPSBzY2FsZXNbcG9zaXRpb25BeGlzSUQxXS5nZXRQaXhlbEZvclZhbHVlKHZhbHVlMSkgLSB3aWR0aCArIG9mZnNldDtcbiAgICAgICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgIHRpdGxlWCA9IChjaGFydEFyZWEubGVmdCArIGNoYXJ0QXJlYS5yaWdodCkgLyAyIC0gd2lkdGggKyBvZmZzZXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aXRsZVggPSBvZmZzZXRGcm9tRWRnZShzY2FsZSwgcG9zaXRpb24sIG9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgICAgdGl0bGVZID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIGJvdHRvbSwgdG9wKTtcbiAgICAgICAgcm90YXRpb24gPSBwb3NpdGlvbiA9PT0gJ2xlZnQnID8gLUhBTEZfUEkgOiBIQUxGX1BJO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICB0aXRsZVgsXG4gICAgICAgIHRpdGxlWSxcbiAgICAgICAgbWF4V2lkdGgsXG4gICAgICAgIHJvdGF0aW9uXG4gICAgfTtcbn1cbmNsYXNzIFNjYWxlIGV4dGVuZHMgRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoY2ZnKXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgIHRoaXMuaWQgPSBjZmcuaWQ7XG4gICAgICAgICB0aGlzLnR5cGUgPSBjZmcudHlwZTtcbiAgICAgICAgIHRoaXMub3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMuY3R4ID0gY2ZnLmN0eDtcbiAgICAgICAgIHRoaXMuY2hhcnQgPSBjZmcuY2hhcnQ7XG4gICAgICAgICB0aGlzLnRvcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMuYm90dG9tID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5sZWZ0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5yaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMud2lkdGggPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLmhlaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fbWFyZ2lucyA9IHtcbiAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgIGJvdHRvbTogMFxuICAgICAgICB9O1xuICAgICAgICAgdGhpcy5tYXhXaWR0aCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMubWF4SGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5wYWRkaW5nVG9wID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5wYWRkaW5nQm90dG9tID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5wYWRkaW5nTGVmdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMucGFkZGluZ1JpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5heGlzID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5sYWJlbFJvdGF0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm1pbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5tYXggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3JhbmdlID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy50aWNrcyA9IFtdO1xuICAgICAgICAgdGhpcy5fZ3JpZExpbmVJdGVtcyA9IG51bGw7XG4gICAgICAgICB0aGlzLl9sYWJlbEl0ZW1zID0gbnVsbDtcbiAgICAgICAgIHRoaXMuX2xhYmVsU2l6ZXMgPSBudWxsO1xuICAgICAgICB0aGlzLl9sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLl9tYXhMZW5ndGggPSAwO1xuICAgICAgICB0aGlzLl9sb25nZXN0VGV4dENhY2hlID0ge307XG4gICAgICAgICB0aGlzLl9zdGFydFBpeGVsID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5fZW5kUGl4ZWwgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3JldmVyc2VQaXhlbHMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fdXNlck1heCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fdXNlck1pbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fc3VnZ2VzdGVkTWF4ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9zdWdnZXN0ZWRNaW4gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3RpY2tzTGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5fYm9yZGVyVmFsdWUgPSAwO1xuICAgICAgICB0aGlzLl9jYWNoZSA9IHt9O1xuICAgICAgICB0aGlzLl9kYXRhTGltaXRzQ2FjaGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gICAgfVxuIGluaXQob3B0aW9ucykge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICB0aGlzLmF4aXMgPSBvcHRpb25zLmF4aXM7XG4gICAgICAgIHRoaXMuX3VzZXJNaW4gPSB0aGlzLnBhcnNlKG9wdGlvbnMubWluKTtcbiAgICAgICAgdGhpcy5fdXNlck1heCA9IHRoaXMucGFyc2Uob3B0aW9ucy5tYXgpO1xuICAgICAgICB0aGlzLl9zdWdnZXN0ZWRNaW4gPSB0aGlzLnBhcnNlKG9wdGlvbnMuc3VnZ2VzdGVkTWluKTtcbiAgICAgICAgdGhpcy5fc3VnZ2VzdGVkTWF4ID0gdGhpcy5wYXJzZShvcHRpb25zLnN1Z2dlc3RlZE1heCk7XG4gICAgfVxuIHBhcnNlKHJhdywgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHJhdztcbiAgICB9XG4gZ2V0VXNlckJvdW5kcygpIHtcbiAgICAgICAgbGV0IHsgX3VzZXJNaW4gLCBfdXNlck1heCAsIF9zdWdnZXN0ZWRNaW4gLCBfc3VnZ2VzdGVkTWF4ICB9ID0gdGhpcztcbiAgICAgICAgX3VzZXJNaW4gPSBmaW5pdGVPckRlZmF1bHQoX3VzZXJNaW4sIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSk7XG4gICAgICAgIF91c2VyTWF4ID0gZmluaXRlT3JEZWZhdWx0KF91c2VyTWF4LCBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkpO1xuICAgICAgICBfc3VnZ2VzdGVkTWluID0gZmluaXRlT3JEZWZhdWx0KF9zdWdnZXN0ZWRNaW4sIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSk7XG4gICAgICAgIF9zdWdnZXN0ZWRNYXggPSBmaW5pdGVPckRlZmF1bHQoX3N1Z2dlc3RlZE1heCwgTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1pbjogZmluaXRlT3JEZWZhdWx0KF91c2VyTWluLCBfc3VnZ2VzdGVkTWluKSxcbiAgICAgICAgICAgIG1heDogZmluaXRlT3JEZWZhdWx0KF91c2VyTWF4LCBfc3VnZ2VzdGVkTWF4KSxcbiAgICAgICAgICAgIG1pbkRlZmluZWQ6IGlzTnVtYmVyRmluaXRlKF91c2VyTWluKSxcbiAgICAgICAgICAgIG1heERlZmluZWQ6IGlzTnVtYmVyRmluaXRlKF91c2VyTWF4KVxuICAgICAgICB9O1xuICAgIH1cbiBnZXRNaW5NYXgoY2FuU3RhY2spIHtcbiAgICAgICAgbGV0IHsgbWluICwgbWF4ICwgbWluRGVmaW5lZCAsIG1heERlZmluZWQgIH0gPSB0aGlzLmdldFVzZXJCb3VuZHMoKTtcbiAgICAgICAgbGV0IHJhbmdlO1xuICAgICAgICBpZiAobWluRGVmaW5lZCAmJiBtYXhEZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1pbixcbiAgICAgICAgICAgICAgICBtYXhcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWV0YXMgPSB0aGlzLmdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKCk7XG4gICAgICAgIGZvcihsZXQgaSA9IDAsIGlsZW4gPSBtZXRhcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgcmFuZ2UgPSBtZXRhc1tpXS5jb250cm9sbGVyLmdldE1pbk1heCh0aGlzLCBjYW5TdGFjayk7XG4gICAgICAgICAgICBpZiAoIW1pbkRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBtaW4gPSBNYXRoLm1pbihtaW4sIHJhbmdlLm1pbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIW1heERlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIHJhbmdlLm1heCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbWluID0gbWF4RGVmaW5lZCAmJiBtaW4gPiBtYXggPyBtYXggOiBtaW47XG4gICAgICAgIG1heCA9IG1pbkRlZmluZWQgJiYgbWluID4gbWF4ID8gbWluIDogbWF4O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWluOiBmaW5pdGVPckRlZmF1bHQobWluLCBmaW5pdGVPckRlZmF1bHQobWF4LCBtaW4pKSxcbiAgICAgICAgICAgIG1heDogZmluaXRlT3JEZWZhdWx0KG1heCwgZmluaXRlT3JEZWZhdWx0KG1pbiwgbWF4KSlcbiAgICAgICAgfTtcbiAgICB9XG4gZ2V0UGFkZGluZygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxlZnQ6IHRoaXMucGFkZGluZ0xlZnQgfHwgMCxcbiAgICAgICAgICAgIHRvcDogdGhpcy5wYWRkaW5nVG9wIHx8IDAsXG4gICAgICAgICAgICByaWdodDogdGhpcy5wYWRkaW5nUmlnaHQgfHwgMCxcbiAgICAgICAgICAgIGJvdHRvbTogdGhpcy5wYWRkaW5nQm90dG9tIHx8IDBcbiAgICAgICAgfTtcbiAgICB9XG4gZ2V0VGlja3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRpY2tzO1xuICAgIH1cbiBnZXRMYWJlbHMoKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmNoYXJ0LmRhdGE7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMubGFiZWxzIHx8ICh0aGlzLmlzSG9yaXpvbnRhbCgpID8gZGF0YS54TGFiZWxzIDogZGF0YS55TGFiZWxzKSB8fCBkYXRhLmxhYmVscyB8fCBbXTtcbiAgICB9XG4gZ2V0TGFiZWxJdGVtcyhjaGFydEFyZWEgPSB0aGlzLmNoYXJ0LmNoYXJ0QXJlYSkge1xuICAgICAgICBjb25zdCBpdGVtcyA9IHRoaXMuX2xhYmVsSXRlbXMgfHwgKHRoaXMuX2xhYmVsSXRlbXMgPSB0aGlzLl9jb21wdXRlTGFiZWxJdGVtcyhjaGFydEFyZWEpKTtcbiAgICAgICAgcmV0dXJuIGl0ZW1zO1xuICAgIH1cbiAgICBiZWZvcmVMYXlvdXQoKSB7XG4gICAgICAgIHRoaXMuX2NhY2hlID0ge307XG4gICAgICAgIHRoaXMuX2RhdGFMaW1pdHNDYWNoZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgYmVmb3JlVXBkYXRlKCkge1xuICAgICAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlVXBkYXRlLCBbXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgIF0pO1xuICAgIH1cbiB1cGRhdGUobWF4V2lkdGgsIG1heEhlaWdodCwgbWFyZ2lucykge1xuICAgICAgICBjb25zdCB7IGJlZ2luQXRaZXJvICwgZ3JhY2UgLCB0aWNrczogdGlja09wdHMgIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHNhbXBsZVNpemUgPSB0aWNrT3B0cy5zYW1wbGVTaXplO1xuICAgICAgICB0aGlzLmJlZm9yZVVwZGF0ZSgpO1xuICAgICAgICB0aGlzLm1heFdpZHRoID0gbWF4V2lkdGg7XG4gICAgICAgIHRoaXMubWF4SGVpZ2h0ID0gbWF4SGVpZ2h0O1xuICAgICAgICB0aGlzLl9tYXJnaW5zID0gbWFyZ2lucyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgYm90dG9tOiAwXG4gICAgICAgIH0sIG1hcmdpbnMpO1xuICAgICAgICB0aGlzLnRpY2tzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fbGFiZWxTaXplcyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2dyaWRMaW5lSXRlbXMgPSBudWxsO1xuICAgICAgICB0aGlzLl9sYWJlbEl0ZW1zID0gbnVsbDtcbiAgICAgICAgdGhpcy5iZWZvcmVTZXREaW1lbnNpb25zKCk7XG4gICAgICAgIHRoaXMuc2V0RGltZW5zaW9ucygpO1xuICAgICAgICB0aGlzLmFmdGVyU2V0RGltZW5zaW9ucygpO1xuICAgICAgICB0aGlzLl9tYXhMZW5ndGggPSB0aGlzLmlzSG9yaXpvbnRhbCgpID8gdGhpcy53aWR0aCArIG1hcmdpbnMubGVmdCArIG1hcmdpbnMucmlnaHQgOiB0aGlzLmhlaWdodCArIG1hcmdpbnMudG9wICsgbWFyZ2lucy5ib3R0b207XG4gICAgICAgIGlmICghdGhpcy5fZGF0YUxpbWl0c0NhY2hlZCkge1xuICAgICAgICAgICAgdGhpcy5iZWZvcmVEYXRhTGltaXRzKCk7XG4gICAgICAgICAgICB0aGlzLmRldGVybWluZURhdGFMaW1pdHMoKTtcbiAgICAgICAgICAgIHRoaXMuYWZ0ZXJEYXRhTGltaXRzKCk7XG4gICAgICAgICAgICB0aGlzLl9yYW5nZSA9IF9hZGRHcmFjZSh0aGlzLCBncmFjZSwgYmVnaW5BdFplcm8pO1xuICAgICAgICAgICAgdGhpcy5fZGF0YUxpbWl0c0NhY2hlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iZWZvcmVCdWlsZFRpY2tzKCk7XG4gICAgICAgIHRoaXMudGlja3MgPSB0aGlzLmJ1aWxkVGlja3MoKSB8fCBbXTtcbiAgICAgICAgdGhpcy5hZnRlckJ1aWxkVGlja3MoKTtcbiAgICAgICAgY29uc3Qgc2FtcGxpbmdFbmFibGVkID0gc2FtcGxlU2l6ZSA8IHRoaXMudGlja3MubGVuZ3RoO1xuICAgICAgICB0aGlzLl9jb252ZXJ0VGlja3NUb0xhYmVscyhzYW1wbGluZ0VuYWJsZWQgPyBzYW1wbGUodGhpcy50aWNrcywgc2FtcGxlU2l6ZSkgOiB0aGlzLnRpY2tzKTtcbiAgICAgICAgdGhpcy5jb25maWd1cmUoKTtcbiAgICAgICAgdGhpcy5iZWZvcmVDYWxjdWxhdGVMYWJlbFJvdGF0aW9uKCk7XG4gICAgICAgIHRoaXMuY2FsY3VsYXRlTGFiZWxSb3RhdGlvbigpO1xuICAgICAgICB0aGlzLmFmdGVyQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbigpO1xuICAgICAgICBpZiAodGlja09wdHMuZGlzcGxheSAmJiAodGlja09wdHMuYXV0b1NraXAgfHwgdGlja09wdHMuc291cmNlID09PSAnYXV0bycpKSB7XG4gICAgICAgICAgICB0aGlzLnRpY2tzID0gYXV0b1NraXAodGhpcywgdGhpcy50aWNrcyk7XG4gICAgICAgICAgICB0aGlzLl9sYWJlbFNpemVzID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuYWZ0ZXJBdXRvU2tpcCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzYW1wbGluZ0VuYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnZlcnRUaWNrc1RvTGFiZWxzKHRoaXMudGlja3MpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmVmb3JlRml0KCk7XG4gICAgICAgIHRoaXMuZml0KCk7XG4gICAgICAgIHRoaXMuYWZ0ZXJGaXQoKTtcbiAgICAgICAgdGhpcy5hZnRlclVwZGF0ZSgpO1xuICAgIH1cbiBjb25maWd1cmUoKSB7XG4gICAgICAgIGxldCByZXZlcnNlUGl4ZWxzID0gdGhpcy5vcHRpb25zLnJldmVyc2U7XG4gICAgICAgIGxldCBzdGFydFBpeGVsLCBlbmRQaXhlbDtcbiAgICAgICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgIHN0YXJ0UGl4ZWwgPSB0aGlzLmxlZnQ7XG4gICAgICAgICAgICBlbmRQaXhlbCA9IHRoaXMucmlnaHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGFydFBpeGVsID0gdGhpcy50b3A7XG4gICAgICAgICAgICBlbmRQaXhlbCA9IHRoaXMuYm90dG9tO1xuICAgICAgICAgICAgcmV2ZXJzZVBpeGVscyA9ICFyZXZlcnNlUGl4ZWxzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3N0YXJ0UGl4ZWwgPSBzdGFydFBpeGVsO1xuICAgICAgICB0aGlzLl9lbmRQaXhlbCA9IGVuZFBpeGVsO1xuICAgICAgICB0aGlzLl9yZXZlcnNlUGl4ZWxzID0gcmV2ZXJzZVBpeGVscztcbiAgICAgICAgdGhpcy5fbGVuZ3RoID0gZW5kUGl4ZWwgLSBzdGFydFBpeGVsO1xuICAgICAgICB0aGlzLl9hbGlnblRvUGl4ZWxzID0gdGhpcy5vcHRpb25zLmFsaWduVG9QaXhlbHM7XG4gICAgfVxuICAgIGFmdGVyVXBkYXRlKCkge1xuICAgICAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYWZ0ZXJVcGRhdGUsIFtcbiAgICAgICAgICAgIHRoaXNcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGJlZm9yZVNldERpbWVuc2lvbnMoKSB7XG4gICAgICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5iZWZvcmVTZXREaW1lbnNpb25zLCBbXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBzZXREaW1lbnNpb25zKCkge1xuICAgICAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMubWF4V2lkdGg7XG4gICAgICAgICAgICB0aGlzLmxlZnQgPSAwO1xuICAgICAgICAgICAgdGhpcy5yaWdodCA9IHRoaXMud2lkdGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMubWF4SGVpZ2h0O1xuICAgICAgICAgICAgdGhpcy50b3AgPSAwO1xuICAgICAgICAgICAgdGhpcy5ib3R0b20gPSB0aGlzLmhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBhZGRpbmdMZWZ0ID0gMDtcbiAgICAgICAgdGhpcy5wYWRkaW5nVG9wID0gMDtcbiAgICAgICAgdGhpcy5wYWRkaW5nUmlnaHQgPSAwO1xuICAgICAgICB0aGlzLnBhZGRpbmdCb3R0b20gPSAwO1xuICAgIH1cbiAgICBhZnRlclNldERpbWVuc2lvbnMoKSB7XG4gICAgICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlclNldERpbWVuc2lvbnMsIFtcbiAgICAgICAgICAgIHRoaXNcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIF9jYWxsSG9va3MobmFtZSkge1xuICAgICAgICB0aGlzLmNoYXJ0Lm5vdGlmeVBsdWdpbnMobmFtZSwgdGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnNbbmFtZV0sIFtcbiAgICAgICAgICAgIHRoaXNcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGJlZm9yZURhdGFMaW1pdHMoKSB7XG4gICAgICAgIHRoaXMuX2NhbGxIb29rcygnYmVmb3JlRGF0YUxpbWl0cycpO1xuICAgIH1cbiAgICBkZXRlcm1pbmVEYXRhTGltaXRzKCkge31cbiAgICBhZnRlckRhdGFMaW1pdHMoKSB7XG4gICAgICAgIHRoaXMuX2NhbGxIb29rcygnYWZ0ZXJEYXRhTGltaXRzJyk7XG4gICAgfVxuICAgIGJlZm9yZUJ1aWxkVGlja3MoKSB7XG4gICAgICAgIHRoaXMuX2NhbGxIb29rcygnYmVmb3JlQnVpbGRUaWNrcycpO1xuICAgIH1cbiBidWlsZFRpY2tzKCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGFmdGVyQnVpbGRUaWNrcygpIHtcbiAgICAgICAgdGhpcy5fY2FsbEhvb2tzKCdhZnRlckJ1aWxkVGlja3MnKTtcbiAgICB9XG4gICAgYmVmb3JlVGlja1RvTGFiZWxDb252ZXJzaW9uKCkge1xuICAgICAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlVGlja1RvTGFiZWxDb252ZXJzaW9uLCBbXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgIF0pO1xuICAgIH1cbiBnZW5lcmF0ZVRpY2tMYWJlbHModGlja3MpIHtcbiAgICAgICAgY29uc3QgdGlja09wdHMgPSB0aGlzLm9wdGlvbnMudGlja3M7XG4gICAgICAgIGxldCBpLCBpbGVuLCB0aWNrO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSB0aWNrcy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspe1xuICAgICAgICAgICAgdGljayA9IHRpY2tzW2ldO1xuICAgICAgICAgICAgdGljay5sYWJlbCA9IGNhbGxiYWNrKHRpY2tPcHRzLmNhbGxiYWNrLCBbXG4gICAgICAgICAgICAgICAgdGljay52YWx1ZSxcbiAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgIHRpY2tzXG4gICAgICAgICAgICBdLCB0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbigpIHtcbiAgICAgICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyVGlja1RvTGFiZWxDb252ZXJzaW9uLCBbXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBiZWZvcmVDYWxjdWxhdGVMYWJlbFJvdGF0aW9uKCkge1xuICAgICAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbiwgW1xuICAgICAgICAgICAgdGhpc1xuICAgICAgICBdKTtcbiAgICB9XG4gICAgY2FsY3VsYXRlTGFiZWxSb3RhdGlvbigpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgdGlja09wdHMgPSBvcHRpb25zLnRpY2tzO1xuICAgICAgICBjb25zdCBudW1UaWNrcyA9IGdldFRpY2tzTGltaXQodGhpcy50aWNrcy5sZW5ndGgsIG9wdGlvbnMudGlja3MubWF4VGlja3NMaW1pdCk7XG4gICAgICAgIGNvbnN0IG1pblJvdGF0aW9uID0gdGlja09wdHMubWluUm90YXRpb24gfHwgMDtcbiAgICAgICAgY29uc3QgbWF4Um90YXRpb24gPSB0aWNrT3B0cy5tYXhSb3RhdGlvbjtcbiAgICAgICAgbGV0IGxhYmVsUm90YXRpb24gPSBtaW5Sb3RhdGlvbjtcbiAgICAgICAgbGV0IHRpY2tXaWR0aCwgbWF4SGVpZ2h0LCBtYXhMYWJlbERpYWdvbmFsO1xuICAgICAgICBpZiAoIXRoaXMuX2lzVmlzaWJsZSgpIHx8ICF0aWNrT3B0cy5kaXNwbGF5IHx8IG1pblJvdGF0aW9uID49IG1heFJvdGF0aW9uIHx8IG51bVRpY2tzIDw9IDEgfHwgIXRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgIHRoaXMubGFiZWxSb3RhdGlvbiA9IG1pblJvdGF0aW9uO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxhYmVsU2l6ZXMgPSB0aGlzLl9nZXRMYWJlbFNpemVzKCk7XG4gICAgICAgIGNvbnN0IG1heExhYmVsV2lkdGggPSBsYWJlbFNpemVzLndpZGVzdC53aWR0aDtcbiAgICAgICAgY29uc3QgbWF4TGFiZWxIZWlnaHQgPSBsYWJlbFNpemVzLmhpZ2hlc3QuaGVpZ2h0O1xuICAgICAgICBjb25zdCBtYXhXaWR0aCA9IF9saW1pdFZhbHVlKHRoaXMuY2hhcnQud2lkdGggLSBtYXhMYWJlbFdpZHRoLCAwLCB0aGlzLm1heFdpZHRoKTtcbiAgICAgICAgdGlja1dpZHRoID0gb3B0aW9ucy5vZmZzZXQgPyB0aGlzLm1heFdpZHRoIC8gbnVtVGlja3MgOiBtYXhXaWR0aCAvIChudW1UaWNrcyAtIDEpO1xuICAgICAgICBpZiAobWF4TGFiZWxXaWR0aCArIDYgPiB0aWNrV2lkdGgpIHtcbiAgICAgICAgICAgIHRpY2tXaWR0aCA9IG1heFdpZHRoIC8gKG51bVRpY2tzIC0gKG9wdGlvbnMub2Zmc2V0ID8gMC41IDogMSkpO1xuICAgICAgICAgICAgbWF4SGVpZ2h0ID0gdGhpcy5tYXhIZWlnaHQgLSBnZXRUaWNrTWFya0xlbmd0aChvcHRpb25zLmdyaWQpIC0gdGlja09wdHMucGFkZGluZyAtIGdldFRpdGxlSGVpZ2h0KG9wdGlvbnMudGl0bGUsIHRoaXMuY2hhcnQub3B0aW9ucy5mb250KTtcbiAgICAgICAgICAgIG1heExhYmVsRGlhZ29uYWwgPSBNYXRoLnNxcnQobWF4TGFiZWxXaWR0aCAqIG1heExhYmVsV2lkdGggKyBtYXhMYWJlbEhlaWdodCAqIG1heExhYmVsSGVpZ2h0KTtcbiAgICAgICAgICAgIGxhYmVsUm90YXRpb24gPSB0b0RlZ3JlZXMoTWF0aC5taW4oTWF0aC5hc2luKF9saW1pdFZhbHVlKChsYWJlbFNpemVzLmhpZ2hlc3QuaGVpZ2h0ICsgNikgLyB0aWNrV2lkdGgsIC0xLCAxKSksIE1hdGguYXNpbihfbGltaXRWYWx1ZShtYXhIZWlnaHQgLyBtYXhMYWJlbERpYWdvbmFsLCAtMSwgMSkpIC0gTWF0aC5hc2luKF9saW1pdFZhbHVlKG1heExhYmVsSGVpZ2h0IC8gbWF4TGFiZWxEaWFnb25hbCwgLTEsIDEpKSkpO1xuICAgICAgICAgICAgbGFiZWxSb3RhdGlvbiA9IE1hdGgubWF4KG1pblJvdGF0aW9uLCBNYXRoLm1pbihtYXhSb3RhdGlvbiwgbGFiZWxSb3RhdGlvbikpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGFiZWxSb3RhdGlvbiA9IGxhYmVsUm90YXRpb247XG4gICAgfVxuICAgIGFmdGVyQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbigpIHtcbiAgICAgICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbiwgW1xuICAgICAgICAgICAgdGhpc1xuICAgICAgICBdKTtcbiAgICB9XG4gICAgYWZ0ZXJBdXRvU2tpcCgpIHt9XG4gICAgYmVmb3JlRml0KCkge1xuICAgICAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlRml0LCBbXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBmaXQoKSB7XG4gICAgICAgIGNvbnN0IG1pblNpemUgPSB7XG4gICAgICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgICAgIGhlaWdodDogMFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCB7IGNoYXJ0ICwgb3B0aW9uczogeyB0aWNrczogdGlja09wdHMgLCB0aXRsZTogdGl0bGVPcHRzICwgZ3JpZDogZ3JpZE9wdHMgIH0gIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBkaXNwbGF5ID0gdGhpcy5faXNWaXNpYmxlKCk7XG4gICAgICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IHRoaXMuaXNIb3Jpem9udGFsKCk7XG4gICAgICAgIGlmIChkaXNwbGF5KSB7XG4gICAgICAgICAgICBjb25zdCB0aXRsZUhlaWdodCA9IGdldFRpdGxlSGVpZ2h0KHRpdGxlT3B0cywgY2hhcnQub3B0aW9ucy5mb250KTtcbiAgICAgICAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgICBtaW5TaXplLndpZHRoID0gdGhpcy5tYXhXaWR0aDtcbiAgICAgICAgICAgICAgICBtaW5TaXplLmhlaWdodCA9IGdldFRpY2tNYXJrTGVuZ3RoKGdyaWRPcHRzKSArIHRpdGxlSGVpZ2h0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtaW5TaXplLmhlaWdodCA9IHRoaXMubWF4SGVpZ2h0O1xuICAgICAgICAgICAgICAgIG1pblNpemUud2lkdGggPSBnZXRUaWNrTWFya0xlbmd0aChncmlkT3B0cykgKyB0aXRsZUhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aWNrT3B0cy5kaXNwbGF5ICYmIHRoaXMudGlja3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBmaXJzdCAsIGxhc3QgLCB3aWRlc3QgLCBoaWdoZXN0ICB9ID0gdGhpcy5fZ2V0TGFiZWxTaXplcygpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpY2tQYWRkaW5nID0gdGlja09wdHMucGFkZGluZyAqIDI7XG4gICAgICAgICAgICAgICAgY29uc3QgYW5nbGVSYWRpYW5zID0gdG9SYWRpYW5zKHRoaXMubGFiZWxSb3RhdGlvbik7XG4gICAgICAgICAgICAgICAgY29uc3QgY29zID0gTWF0aC5jb3MoYW5nbGVSYWRpYW5zKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzaW4gPSBNYXRoLnNpbihhbmdsZVJhZGlhbnMpO1xuICAgICAgICAgICAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFiZWxIZWlnaHQgPSB0aWNrT3B0cy5taXJyb3IgPyAwIDogc2luICogd2lkZXN0LndpZHRoICsgY29zICogaGlnaGVzdC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIG1pblNpemUuaGVpZ2h0ID0gTWF0aC5taW4odGhpcy5tYXhIZWlnaHQsIG1pblNpemUuaGVpZ2h0ICsgbGFiZWxIZWlnaHQgKyB0aWNrUGFkZGluZyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFiZWxXaWR0aCA9IHRpY2tPcHRzLm1pcnJvciA/IDAgOiBjb3MgKiB3aWRlc3Qud2lkdGggKyBzaW4gKiBoaWdoZXN0LmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgbWluU2l6ZS53aWR0aCA9IE1hdGgubWluKHRoaXMubWF4V2lkdGgsIG1pblNpemUud2lkdGggKyBsYWJlbFdpZHRoICsgdGlja1BhZGRpbmcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9jYWxjdWxhdGVQYWRkaW5nKGZpcnN0LCBsYXN0LCBzaW4sIGNvcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faGFuZGxlTWFyZ2lucygpO1xuICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5fbGVuZ3RoID0gY2hhcnQud2lkdGggLSB0aGlzLl9tYXJnaW5zLmxlZnQgLSB0aGlzLl9tYXJnaW5zLnJpZ2h0O1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSBtaW5TaXplLmhlaWdodDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSBtaW5TaXplLndpZHRoO1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLl9sZW5ndGggPSBjaGFydC5oZWlnaHQgLSB0aGlzLl9tYXJnaW5zLnRvcCAtIHRoaXMuX21hcmdpbnMuYm90dG9tO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9jYWxjdWxhdGVQYWRkaW5nKGZpcnN0LCBsYXN0LCBzaW4sIGNvcykge1xuICAgICAgICBjb25zdCB7IHRpY2tzOiB7IGFsaWduICwgcGFkZGluZyAgfSAsIHBvc2l0aW9uICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBpc1JvdGF0ZWQgPSB0aGlzLmxhYmVsUm90YXRpb24gIT09IDA7XG4gICAgICAgIGNvbnN0IGxhYmVsc0JlbG93VGlja3MgPSBwb3NpdGlvbiAhPT0gJ3RvcCcgJiYgdGhpcy5heGlzID09PSAneCc7XG4gICAgICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICBjb25zdCBvZmZzZXRMZWZ0ID0gdGhpcy5nZXRQaXhlbEZvclRpY2soMCkgLSB0aGlzLmxlZnQ7XG4gICAgICAgICAgICBjb25zdCBvZmZzZXRSaWdodCA9IHRoaXMucmlnaHQgLSB0aGlzLmdldFBpeGVsRm9yVGljayh0aGlzLnRpY2tzLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgbGV0IHBhZGRpbmdMZWZ0ID0gMDtcbiAgICAgICAgICAgIGxldCBwYWRkaW5nUmlnaHQgPSAwO1xuICAgICAgICAgICAgaWYgKGlzUm90YXRlZCkge1xuICAgICAgICAgICAgICAgIGlmIChsYWJlbHNCZWxvd1RpY2tzKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmdMZWZ0ID0gY29zICogZmlyc3Qud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmdSaWdodCA9IHNpbiAqIGxhc3QuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmdMZWZ0ID0gc2luICogZmlyc3QuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nUmlnaHQgPSBjb3MgKiBsYXN0LndpZHRoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWxpZ24gPT09ICdzdGFydCcpIHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nUmlnaHQgPSBsYXN0LndpZHRoO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhbGlnbiA9PT0gJ2VuZCcpIHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nTGVmdCA9IGZpcnN0LndpZHRoO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhbGlnbiAhPT0gJ2lubmVyJykge1xuICAgICAgICAgICAgICAgIHBhZGRpbmdMZWZ0ID0gZmlyc3Qud2lkdGggLyAyO1xuICAgICAgICAgICAgICAgIHBhZGRpbmdSaWdodCA9IGxhc3Qud2lkdGggLyAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5wYWRkaW5nTGVmdCA9IE1hdGgubWF4KChwYWRkaW5nTGVmdCAtIG9mZnNldExlZnQgKyBwYWRkaW5nKSAqIHRoaXMud2lkdGggLyAodGhpcy53aWR0aCAtIG9mZnNldExlZnQpLCAwKTtcbiAgICAgICAgICAgIHRoaXMucGFkZGluZ1JpZ2h0ID0gTWF0aC5tYXgoKHBhZGRpbmdSaWdodCAtIG9mZnNldFJpZ2h0ICsgcGFkZGluZykgKiB0aGlzLndpZHRoIC8gKHRoaXMud2lkdGggLSBvZmZzZXRSaWdodCksIDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHBhZGRpbmdUb3AgPSBsYXN0LmhlaWdodCAvIDI7XG4gICAgICAgICAgICBsZXQgcGFkZGluZ0JvdHRvbSA9IGZpcnN0LmhlaWdodCAvIDI7XG4gICAgICAgICAgICBpZiAoYWxpZ24gPT09ICdzdGFydCcpIHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nVG9wID0gMDtcbiAgICAgICAgICAgICAgICBwYWRkaW5nQm90dG9tID0gZmlyc3QuaGVpZ2h0O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhbGlnbiA9PT0gJ2VuZCcpIHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nVG9wID0gbGFzdC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgcGFkZGluZ0JvdHRvbSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnBhZGRpbmdUb3AgPSBwYWRkaW5nVG9wICsgcGFkZGluZztcbiAgICAgICAgICAgIHRoaXMucGFkZGluZ0JvdHRvbSA9IHBhZGRpbmdCb3R0b20gKyBwYWRkaW5nO1xuICAgICAgICB9XG4gICAgfVxuIF9oYW5kbGVNYXJnaW5zKCkge1xuICAgICAgICBpZiAodGhpcy5fbWFyZ2lucykge1xuICAgICAgICAgICAgdGhpcy5fbWFyZ2lucy5sZWZ0ID0gTWF0aC5tYXgodGhpcy5wYWRkaW5nTGVmdCwgdGhpcy5fbWFyZ2lucy5sZWZ0KTtcbiAgICAgICAgICAgIHRoaXMuX21hcmdpbnMudG9wID0gTWF0aC5tYXgodGhpcy5wYWRkaW5nVG9wLCB0aGlzLl9tYXJnaW5zLnRvcCk7XG4gICAgICAgICAgICB0aGlzLl9tYXJnaW5zLnJpZ2h0ID0gTWF0aC5tYXgodGhpcy5wYWRkaW5nUmlnaHQsIHRoaXMuX21hcmdpbnMucmlnaHQpO1xuICAgICAgICAgICAgdGhpcy5fbWFyZ2lucy5ib3R0b20gPSBNYXRoLm1heCh0aGlzLnBhZGRpbmdCb3R0b20sIHRoaXMuX21hcmdpbnMuYm90dG9tKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhZnRlckZpdCgpIHtcbiAgICAgICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyRml0LCBbXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgIF0pO1xuICAgIH1cbiBpc0hvcml6b250YWwoKSB7XG4gICAgICAgIGNvbnN0IHsgYXhpcyAsIHBvc2l0aW9uICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICByZXR1cm4gcG9zaXRpb24gPT09ICd0b3AnIHx8IHBvc2l0aW9uID09PSAnYm90dG9tJyB8fCBheGlzID09PSAneCc7XG4gICAgfVxuIGlzRnVsbFNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZnVsbFNpemU7XG4gICAgfVxuIF9jb252ZXJ0VGlja3NUb0xhYmVscyh0aWNrcykge1xuICAgICAgICB0aGlzLmJlZm9yZVRpY2tUb0xhYmVsQ29udmVyc2lvbigpO1xuICAgICAgICB0aGlzLmdlbmVyYXRlVGlja0xhYmVscyh0aWNrcyk7XG4gICAgICAgIGxldCBpLCBpbGVuO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSB0aWNrcy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspe1xuICAgICAgICAgICAgaWYgKGlzTnVsbE9yVW5kZWYodGlja3NbaV0ubGFiZWwpKSB7XG4gICAgICAgICAgICAgICAgdGlja3Muc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIGlsZW4tLTtcbiAgICAgICAgICAgICAgICBpLS07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbigpO1xuICAgIH1cbiBfZ2V0TGFiZWxTaXplcygpIHtcbiAgICAgICAgbGV0IGxhYmVsU2l6ZXMgPSB0aGlzLl9sYWJlbFNpemVzO1xuICAgICAgICBpZiAoIWxhYmVsU2l6ZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHNhbXBsZVNpemUgPSB0aGlzLm9wdGlvbnMudGlja3Muc2FtcGxlU2l6ZTtcbiAgICAgICAgICAgIGxldCB0aWNrcyA9IHRoaXMudGlja3M7XG4gICAgICAgICAgICBpZiAoc2FtcGxlU2l6ZSA8IHRpY2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRpY2tzID0gc2FtcGxlKHRpY2tzLCBzYW1wbGVTaXplKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2xhYmVsU2l6ZXMgPSBsYWJlbFNpemVzID0gdGhpcy5fY29tcHV0ZUxhYmVsU2l6ZXModGlja3MsIHRpY2tzLmxlbmd0aCwgdGhpcy5vcHRpb25zLnRpY2tzLm1heFRpY2tzTGltaXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsYWJlbFNpemVzO1xuICAgIH1cbiBfY29tcHV0ZUxhYmVsU2l6ZXModGlja3MsIGxlbmd0aCwgbWF4VGlja3NMaW1pdCkge1xuICAgICAgICBjb25zdCB7IGN0eCAsIF9sb25nZXN0VGV4dENhY2hlOiBjYWNoZXMgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB3aWR0aHMgPSBbXTtcbiAgICAgICAgY29uc3QgaGVpZ2h0cyA9IFtdO1xuICAgICAgICBjb25zdCBpbmNyZW1lbnQgPSBNYXRoLmZsb29yKGxlbmd0aCAvIGdldFRpY2tzTGltaXQobGVuZ3RoLCBtYXhUaWNrc0xpbWl0KSk7XG4gICAgICAgIGxldCB3aWRlc3RMYWJlbFNpemUgPSAwO1xuICAgICAgICBsZXQgaGlnaGVzdExhYmVsU2l6ZSA9IDA7XG4gICAgICAgIGxldCBpLCBqLCBqbGVuLCBsYWJlbCwgdGlja0ZvbnQsIGZvbnRTdHJpbmcsIGNhY2hlLCBsaW5lSGVpZ2h0LCB3aWR0aCwgaGVpZ2h0LCBuZXN0ZWRMYWJlbDtcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IGluY3JlbWVudCl7XG4gICAgICAgICAgICBsYWJlbCA9IHRpY2tzW2ldLmxhYmVsO1xuICAgICAgICAgICAgdGlja0ZvbnQgPSB0aGlzLl9yZXNvbHZlVGlja0ZvbnRPcHRpb25zKGkpO1xuICAgICAgICAgICAgY3R4LmZvbnQgPSBmb250U3RyaW5nID0gdGlja0ZvbnQuc3RyaW5nO1xuICAgICAgICAgICAgY2FjaGUgPSBjYWNoZXNbZm9udFN0cmluZ10gPSBjYWNoZXNbZm9udFN0cmluZ10gfHwge1xuICAgICAgICAgICAgICAgIGRhdGE6IHt9LFxuICAgICAgICAgICAgICAgIGdjOiBbXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGxpbmVIZWlnaHQgPSB0aWNrRm9udC5saW5lSGVpZ2h0O1xuICAgICAgICAgICAgd2lkdGggPSBoZWlnaHQgPSAwO1xuICAgICAgICAgICAgaWYgKCFpc051bGxPclVuZGVmKGxhYmVsKSAmJiAhaXNBcnJheShsYWJlbCkpIHtcbiAgICAgICAgICAgICAgICB3aWR0aCA9IF9tZWFzdXJlVGV4dChjdHgsIGNhY2hlLmRhdGEsIGNhY2hlLmdjLCB3aWR0aCwgbGFiZWwpO1xuICAgICAgICAgICAgICAgIGhlaWdodCA9IGxpbmVIZWlnaHQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkobGFiZWwpKSB7XG4gICAgICAgICAgICAgICAgZm9yKGogPSAwLCBqbGVuID0gbGFiZWwubGVuZ3RoOyBqIDwgamxlbjsgKytqKXtcbiAgICAgICAgICAgICAgICAgICAgbmVzdGVkTGFiZWwgPSBsYWJlbFtqXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc051bGxPclVuZGVmKG5lc3RlZExhYmVsKSAmJiAhaXNBcnJheShuZXN0ZWRMYWJlbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoID0gX21lYXN1cmVUZXh0KGN0eCwgY2FjaGUuZGF0YSwgY2FjaGUuZ2MsIHdpZHRoLCBuZXN0ZWRMYWJlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgKz0gbGluZUhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdpZHRocy5wdXNoKHdpZHRoKTtcbiAgICAgICAgICAgIGhlaWdodHMucHVzaChoZWlnaHQpO1xuICAgICAgICAgICAgd2lkZXN0TGFiZWxTaXplID0gTWF0aC5tYXgod2lkdGgsIHdpZGVzdExhYmVsU2l6ZSk7XG4gICAgICAgICAgICBoaWdoZXN0TGFiZWxTaXplID0gTWF0aC5tYXgoaGVpZ2h0LCBoaWdoZXN0TGFiZWxTaXplKTtcbiAgICAgICAgfVxuICAgICAgICBnYXJiYWdlQ29sbGVjdChjYWNoZXMsIGxlbmd0aCk7XG4gICAgICAgIGNvbnN0IHdpZGVzdCA9IHdpZHRocy5pbmRleE9mKHdpZGVzdExhYmVsU2l6ZSk7XG4gICAgICAgIGNvbnN0IGhpZ2hlc3QgPSBoZWlnaHRzLmluZGV4T2YoaGlnaGVzdExhYmVsU2l6ZSk7XG4gICAgICAgIGNvbnN0IHZhbHVlQXQgPSAoaWR4KT0+KHtcbiAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGhzW2lkeF0gfHwgMCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodHNbaWR4XSB8fCAwXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZpcnN0OiB2YWx1ZUF0KDApLFxuICAgICAgICAgICAgbGFzdDogdmFsdWVBdChsZW5ndGggLSAxKSxcbiAgICAgICAgICAgIHdpZGVzdDogdmFsdWVBdCh3aWRlc3QpLFxuICAgICAgICAgICAgaGlnaGVzdDogdmFsdWVBdChoaWdoZXN0KSxcbiAgICAgICAgICAgIHdpZHRocyxcbiAgICAgICAgICAgIGhlaWdodHNcbiAgICAgICAgfTtcbiAgICB9XG4gZ2V0TGFiZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuIGdldFBpeGVsRm9yVmFsdWUodmFsdWUsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBOYU47XG4gICAgfVxuIGdldFZhbHVlRm9yUGl4ZWwocGl4ZWwpIHt9XG4gZ2V0UGl4ZWxGb3JUaWNrKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IHRpY2tzID0gdGhpcy50aWNrcztcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+IHRpY2tzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBpeGVsRm9yVmFsdWUodGlja3NbaW5kZXhdLnZhbHVlKTtcbiAgICB9XG4gZ2V0UGl4ZWxGb3JEZWNpbWFsKGRlY2ltYWwpIHtcbiAgICAgICAgaWYgKHRoaXMuX3JldmVyc2VQaXhlbHMpIHtcbiAgICAgICAgICAgIGRlY2ltYWwgPSAxIC0gZGVjaW1hbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwaXhlbCA9IHRoaXMuX3N0YXJ0UGl4ZWwgKyBkZWNpbWFsICogdGhpcy5fbGVuZ3RoO1xuICAgICAgICByZXR1cm4gX2ludDE2UmFuZ2UodGhpcy5fYWxpZ25Ub1BpeGVscyA/IF9hbGlnblBpeGVsKHRoaXMuY2hhcnQsIHBpeGVsLCAwKSA6IHBpeGVsKTtcbiAgICB9XG4gZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKSB7XG4gICAgICAgIGNvbnN0IGRlY2ltYWwgPSAocGl4ZWwgLSB0aGlzLl9zdGFydFBpeGVsKSAvIHRoaXMuX2xlbmd0aDtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JldmVyc2VQaXhlbHMgPyAxIC0gZGVjaW1hbCA6IGRlY2ltYWw7XG4gICAgfVxuIGdldEJhc2VQaXhlbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGl4ZWxGb3JWYWx1ZSh0aGlzLmdldEJhc2VWYWx1ZSgpKTtcbiAgICB9XG4gZ2V0QmFzZVZhbHVlKCkge1xuICAgICAgICBjb25zdCB7IG1pbiAsIG1heCAgfSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBtaW4gPCAwICYmIG1heCA8IDAgPyBtYXggOiBtaW4gPiAwICYmIG1heCA+IDAgPyBtaW4gOiAwO1xuICAgIH1cbiBnZXRDb250ZXh0KGluZGV4KSB7XG4gICAgICAgIGNvbnN0IHRpY2tzID0gdGhpcy50aWNrcyB8fCBbXTtcbiAgICAgICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aWNrcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHRpY2sgPSB0aWNrc1tpbmRleF07XG4gICAgICAgICAgICByZXR1cm4gdGljay4kY29udGV4dCB8fCAodGljay4kY29udGV4dCA9IGNyZWF0ZVRpY2tDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpLCBpbmRleCwgdGljaykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLiRjb250ZXh0IHx8ICh0aGlzLiRjb250ZXh0ID0gY3JlYXRlU2NhbGVDb250ZXh0KHRoaXMuY2hhcnQuZ2V0Q29udGV4dCgpLCB0aGlzKSk7XG4gICAgfVxuIF90aWNrU2l6ZSgpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uVGlja3MgPSB0aGlzLm9wdGlvbnMudGlja3M7XG4gICAgICAgIGNvbnN0IHJvdCA9IHRvUmFkaWFucyh0aGlzLmxhYmVsUm90YXRpb24pO1xuICAgICAgICBjb25zdCBjb3MgPSBNYXRoLmFicyhNYXRoLmNvcyhyb3QpKTtcbiAgICAgICAgY29uc3Qgc2luID0gTWF0aC5hYnMoTWF0aC5zaW4ocm90KSk7XG4gICAgICAgIGNvbnN0IGxhYmVsU2l6ZXMgPSB0aGlzLl9nZXRMYWJlbFNpemVzKCk7XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSBvcHRpb25UaWNrcy5hdXRvU2tpcFBhZGRpbmcgfHwgMDtcbiAgICAgICAgY29uc3QgdyA9IGxhYmVsU2l6ZXMgPyBsYWJlbFNpemVzLndpZGVzdC53aWR0aCArIHBhZGRpbmcgOiAwO1xuICAgICAgICBjb25zdCBoID0gbGFiZWxTaXplcyA/IGxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQgKyBwYWRkaW5nIDogMDtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNIb3Jpem9udGFsKCkgPyBoICogY29zID4gdyAqIHNpbiA/IHcgLyBjb3MgOiBoIC8gc2luIDogaCAqIHNpbiA8IHcgKiBjb3MgPyBoIC8gY29zIDogdyAvIHNpbjtcbiAgICB9XG4gX2lzVmlzaWJsZSgpIHtcbiAgICAgICAgY29uc3QgZGlzcGxheSA9IHRoaXMub3B0aW9ucy5kaXNwbGF5O1xuICAgICAgICBpZiAoZGlzcGxheSAhPT0gJ2F1dG8nKSB7XG4gICAgICAgICAgICByZXR1cm4gISFkaXNwbGF5O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKCkubGVuZ3RoID4gMDtcbiAgICB9XG4gX2NvbXB1dGVHcmlkTGluZUl0ZW1zKGNoYXJ0QXJlYSkge1xuICAgICAgICBjb25zdCBheGlzID0gdGhpcy5heGlzO1xuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHsgZ3JpZCAsIHBvc2l0aW9uICwgYm9yZGVyICB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gZ3JpZC5vZmZzZXQ7XG4gICAgICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IHRoaXMuaXNIb3Jpem9udGFsKCk7XG4gICAgICAgIGNvbnN0IHRpY2tzID0gdGhpcy50aWNrcztcbiAgICAgICAgY29uc3QgdGlja3NMZW5ndGggPSB0aWNrcy5sZW5ndGggKyAob2Zmc2V0ID8gMSA6IDApO1xuICAgICAgICBjb25zdCB0bCA9IGdldFRpY2tNYXJrTGVuZ3RoKGdyaWQpO1xuICAgICAgICBjb25zdCBpdGVtcyA9IFtdO1xuICAgICAgICBjb25zdCBib3JkZXJPcHRzID0gYm9yZGVyLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICBjb25zdCBheGlzV2lkdGggPSBib3JkZXJPcHRzLmRpc3BsYXkgPyBib3JkZXJPcHRzLndpZHRoIDogMDtcbiAgICAgICAgY29uc3QgYXhpc0hhbGZXaWR0aCA9IGF4aXNXaWR0aCAvIDI7XG4gICAgICAgIGNvbnN0IGFsaWduQm9yZGVyVmFsdWUgPSBmdW5jdGlvbihwaXhlbCkge1xuICAgICAgICAgICAgcmV0dXJuIF9hbGlnblBpeGVsKGNoYXJ0LCBwaXhlbCwgYXhpc1dpZHRoKTtcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IGJvcmRlclZhbHVlLCBpLCBsaW5lVmFsdWUsIGFsaWduZWRMaW5lVmFsdWU7XG4gICAgICAgIGxldCB0eDEsIHR5MSwgdHgyLCB0eTIsIHgxLCB5MSwgeDIsIHkyO1xuICAgICAgICBpZiAocG9zaXRpb24gPT09ICd0b3AnKSB7XG4gICAgICAgICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUodGhpcy5ib3R0b20pO1xuICAgICAgICAgICAgdHkxID0gdGhpcy5ib3R0b20gLSB0bDtcbiAgICAgICAgICAgIHR5MiA9IGJvcmRlclZhbHVlIC0gYXhpc0hhbGZXaWR0aDtcbiAgICAgICAgICAgIHkxID0gYWxpZ25Cb3JkZXJWYWx1ZShjaGFydEFyZWEudG9wKSArIGF4aXNIYWxmV2lkdGg7XG4gICAgICAgICAgICB5MiA9IGNoYXJ0QXJlYS5ib3R0b207XG4gICAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUodGhpcy50b3ApO1xuICAgICAgICAgICAgeTEgPSBjaGFydEFyZWEudG9wO1xuICAgICAgICAgICAgeTIgPSBhbGlnbkJvcmRlclZhbHVlKGNoYXJ0QXJlYS5ib3R0b20pIC0gYXhpc0hhbGZXaWR0aDtcbiAgICAgICAgICAgIHR5MSA9IGJvcmRlclZhbHVlICsgYXhpc0hhbGZXaWR0aDtcbiAgICAgICAgICAgIHR5MiA9IHRoaXMudG9wICsgdGw7XG4gICAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgYm9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKHRoaXMucmlnaHQpO1xuICAgICAgICAgICAgdHgxID0gdGhpcy5yaWdodCAtIHRsO1xuICAgICAgICAgICAgdHgyID0gYm9yZGVyVmFsdWUgLSBheGlzSGFsZldpZHRoO1xuICAgICAgICAgICAgeDEgPSBhbGlnbkJvcmRlclZhbHVlKGNoYXJ0QXJlYS5sZWZ0KSArIGF4aXNIYWxmV2lkdGg7XG4gICAgICAgICAgICB4MiA9IGNoYXJ0QXJlYS5yaWdodDtcbiAgICAgICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgYm9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKHRoaXMubGVmdCk7XG4gICAgICAgICAgICB4MSA9IGNoYXJ0QXJlYS5sZWZ0O1xuICAgICAgICAgICAgeDIgPSBhbGlnbkJvcmRlclZhbHVlKGNoYXJ0QXJlYS5yaWdodCkgLSBheGlzSGFsZldpZHRoO1xuICAgICAgICAgICAgdHgxID0gYm9yZGVyVmFsdWUgKyBheGlzSGFsZldpZHRoO1xuICAgICAgICAgICAgdHgyID0gdGhpcy5sZWZ0ICsgdGw7XG4gICAgICAgIH0gZWxzZSBpZiAoYXhpcyA9PT0gJ3gnKSB7XG4gICAgICAgICAgICBpZiAocG9zaXRpb24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgYm9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKChjaGFydEFyZWEudG9wICsgY2hhcnRBcmVhLmJvdHRvbSkgLyAyICsgMC41KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9zaXRpb25BeGlzSUQgPSBPYmplY3Qua2V5cyhwb3NpdGlvbilbMF07XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBwb3NpdGlvbltwb3NpdGlvbkF4aXNJRF07XG4gICAgICAgICAgICAgICAgYm9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKHRoaXMuY2hhcnQuc2NhbGVzW3Bvc2l0aW9uQXhpc0lEXS5nZXRQaXhlbEZvclZhbHVlKHZhbHVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB5MSA9IGNoYXJ0QXJlYS50b3A7XG4gICAgICAgICAgICB5MiA9IGNoYXJ0QXJlYS5ib3R0b207XG4gICAgICAgICAgICB0eTEgPSBib3JkZXJWYWx1ZSArIGF4aXNIYWxmV2lkdGg7XG4gICAgICAgICAgICB0eTIgPSB0eTEgKyB0bDtcbiAgICAgICAgfSBlbHNlIGlmIChheGlzID09PSAneScpIHtcbiAgICAgICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUoKGNoYXJ0QXJlYS5sZWZ0ICsgY2hhcnRBcmVhLnJpZ2h0KSAvIDIpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwb3NpdGlvbkF4aXNJRDEgPSBPYmplY3Qua2V5cyhwb3NpdGlvbilbMF07XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUxID0gcG9zaXRpb25bcG9zaXRpb25BeGlzSUQxXTtcbiAgICAgICAgICAgICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUodGhpcy5jaGFydC5zY2FsZXNbcG9zaXRpb25BeGlzSUQxXS5nZXRQaXhlbEZvclZhbHVlKHZhbHVlMSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHgxID0gYm9yZGVyVmFsdWUgLSBheGlzSGFsZldpZHRoO1xuICAgICAgICAgICAgdHgyID0gdHgxIC0gdGw7XG4gICAgICAgICAgICB4MSA9IGNoYXJ0QXJlYS5sZWZ0O1xuICAgICAgICAgICAgeDIgPSBjaGFydEFyZWEucmlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGltaXQgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLnRpY2tzLm1heFRpY2tzTGltaXQsIHRpY2tzTGVuZ3RoKTtcbiAgICAgICAgY29uc3Qgc3RlcCA9IE1hdGgubWF4KDEsIE1hdGguY2VpbCh0aWNrc0xlbmd0aCAvIGxpbWl0KSk7XG4gICAgICAgIGZvcihpID0gMDsgaSA8IHRpY2tzTGVuZ3RoOyBpICs9IHN0ZXApe1xuICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuZ2V0Q29udGV4dChpKTtcbiAgICAgICAgICAgIGNvbnN0IG9wdHNBdEluZGV4ID0gZ3JpZC5zZXRDb250ZXh0KGNvbnRleHQpO1xuICAgICAgICAgICAgY29uc3Qgb3B0c0F0SW5kZXhCb3JkZXIgPSBib3JkZXIuc2V0Q29udGV4dChjb250ZXh0KTtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVXaWR0aCA9IG9wdHNBdEluZGV4LmxpbmVXaWR0aDtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVDb2xvciA9IG9wdHNBdEluZGV4LmNvbG9yO1xuICAgICAgICAgICAgY29uc3QgYm9yZGVyRGFzaCA9IG9wdHNBdEluZGV4Qm9yZGVyLmRhc2ggfHwgW107XG4gICAgICAgICAgICBjb25zdCBib3JkZXJEYXNoT2Zmc2V0ID0gb3B0c0F0SW5kZXhCb3JkZXIuZGFzaE9mZnNldDtcbiAgICAgICAgICAgIGNvbnN0IHRpY2tXaWR0aCA9IG9wdHNBdEluZGV4LnRpY2tXaWR0aDtcbiAgICAgICAgICAgIGNvbnN0IHRpY2tDb2xvciA9IG9wdHNBdEluZGV4LnRpY2tDb2xvcjtcbiAgICAgICAgICAgIGNvbnN0IHRpY2tCb3JkZXJEYXNoID0gb3B0c0F0SW5kZXgudGlja0JvcmRlckRhc2ggfHwgW107XG4gICAgICAgICAgICBjb25zdCB0aWNrQm9yZGVyRGFzaE9mZnNldCA9IG9wdHNBdEluZGV4LnRpY2tCb3JkZXJEYXNoT2Zmc2V0O1xuICAgICAgICAgICAgbGluZVZhbHVlID0gZ2V0UGl4ZWxGb3JHcmlkTGluZSh0aGlzLCBpLCBvZmZzZXQpO1xuICAgICAgICAgICAgaWYgKGxpbmVWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbGlnbmVkTGluZVZhbHVlID0gX2FsaWduUGl4ZWwoY2hhcnQsIGxpbmVWYWx1ZSwgbGluZVdpZHRoKTtcbiAgICAgICAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgICB0eDEgPSB0eDIgPSB4MSA9IHgyID0gYWxpZ25lZExpbmVWYWx1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdHkxID0gdHkyID0geTEgPSB5MiA9IGFsaWduZWRMaW5lVmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICB0eDEsXG4gICAgICAgICAgICAgICAgdHkxLFxuICAgICAgICAgICAgICAgIHR4MixcbiAgICAgICAgICAgICAgICB0eTIsXG4gICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgeTEsXG4gICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgeTIsXG4gICAgICAgICAgICAgICAgd2lkdGg6IGxpbmVXaWR0aCxcbiAgICAgICAgICAgICAgICBjb2xvcjogbGluZUNvbG9yLFxuICAgICAgICAgICAgICAgIGJvcmRlckRhc2gsXG4gICAgICAgICAgICAgICAgYm9yZGVyRGFzaE9mZnNldCxcbiAgICAgICAgICAgICAgICB0aWNrV2lkdGgsXG4gICAgICAgICAgICAgICAgdGlja0NvbG9yLFxuICAgICAgICAgICAgICAgIHRpY2tCb3JkZXJEYXNoLFxuICAgICAgICAgICAgICAgIHRpY2tCb3JkZXJEYXNoT2Zmc2V0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90aWNrc0xlbmd0aCA9IHRpY2tzTGVuZ3RoO1xuICAgICAgICB0aGlzLl9ib3JkZXJWYWx1ZSA9IGJvcmRlclZhbHVlO1xuICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgfVxuIF9jb21wdXRlTGFiZWxJdGVtcyhjaGFydEFyZWEpIHtcbiAgICAgICAgY29uc3QgYXhpcyA9IHRoaXMuYXhpcztcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgeyBwb3NpdGlvbiAsIHRpY2tzOiBvcHRpb25UaWNrcyAgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IHRoaXMuaXNIb3Jpem9udGFsKCk7XG4gICAgICAgIGNvbnN0IHRpY2tzID0gdGhpcy50aWNrcztcbiAgICAgICAgY29uc3QgeyBhbGlnbiAsIGNyb3NzQWxpZ24gLCBwYWRkaW5nICwgbWlycm9yICB9ID0gb3B0aW9uVGlja3M7XG4gICAgICAgIGNvbnN0IHRsID0gZ2V0VGlja01hcmtMZW5ndGgob3B0aW9ucy5ncmlkKTtcbiAgICAgICAgY29uc3QgdGlja0FuZFBhZGRpbmcgPSB0bCArIHBhZGRpbmc7XG4gICAgICAgIGNvbnN0IGhUaWNrQW5kUGFkZGluZyA9IG1pcnJvciA/IC1wYWRkaW5nIDogdGlja0FuZFBhZGRpbmc7XG4gICAgICAgIGNvbnN0IHJvdGF0aW9uID0gLXRvUmFkaWFucyh0aGlzLmxhYmVsUm90YXRpb24pO1xuICAgICAgICBjb25zdCBpdGVtcyA9IFtdO1xuICAgICAgICBsZXQgaSwgaWxlbiwgdGljaywgbGFiZWwsIHgsIHksIHRleHRBbGlnbiwgcGl4ZWwsIGZvbnQsIGxpbmVIZWlnaHQsIGxpbmVDb3VudCwgdGV4dE9mZnNldDtcbiAgICAgICAgbGV0IHRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgICAgICBpZiAocG9zaXRpb24gPT09ICd0b3AnKSB7XG4gICAgICAgICAgICB5ID0gdGhpcy5ib3R0b20gLSBoVGlja0FuZFBhZGRpbmc7XG4gICAgICAgICAgICB0ZXh0QWxpZ24gPSB0aGlzLl9nZXRYQXhpc0xhYmVsQWxpZ25tZW50KCk7XG4gICAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgICB5ID0gdGhpcy50b3AgKyBoVGlja0FuZFBhZGRpbmc7XG4gICAgICAgICAgICB0ZXh0QWxpZ24gPSB0aGlzLl9nZXRYQXhpc0xhYmVsQWxpZ25tZW50KCk7XG4gICAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgY29uc3QgcmV0ID0gdGhpcy5fZ2V0WUF4aXNMYWJlbEFsaWdubWVudCh0bCk7XG4gICAgICAgICAgICB0ZXh0QWxpZ24gPSByZXQudGV4dEFsaWduO1xuICAgICAgICAgICAgeCA9IHJldC54O1xuICAgICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgICBjb25zdCByZXQxID0gdGhpcy5fZ2V0WUF4aXNMYWJlbEFsaWdubWVudCh0bCk7XG4gICAgICAgICAgICB0ZXh0QWxpZ24gPSByZXQxLnRleHRBbGlnbjtcbiAgICAgICAgICAgIHggPSByZXQxLng7XG4gICAgICAgIH0gZWxzZSBpZiAoYXhpcyA9PT0gJ3gnKSB7XG4gICAgICAgICAgICBpZiAocG9zaXRpb24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgeSA9IChjaGFydEFyZWEudG9wICsgY2hhcnRBcmVhLmJvdHRvbSkgLyAyICsgdGlja0FuZFBhZGRpbmc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHBvc2l0aW9uKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uQXhpc0lEID0gT2JqZWN0LmtleXMocG9zaXRpb24pWzBdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcG9zaXRpb25bcG9zaXRpb25BeGlzSURdO1xuICAgICAgICAgICAgICAgIHkgPSB0aGlzLmNoYXJ0LnNjYWxlc1twb3NpdGlvbkF4aXNJRF0uZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkgKyB0aWNrQW5kUGFkZGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRleHRBbGlnbiA9IHRoaXMuX2dldFhBeGlzTGFiZWxBbGlnbm1lbnQoKTtcbiAgICAgICAgfSBlbHNlIGlmIChheGlzID09PSAneScpIHtcbiAgICAgICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgICB4ID0gKGNoYXJ0QXJlYS5sZWZ0ICsgY2hhcnRBcmVhLnJpZ2h0KSAvIDIgLSB0aWNrQW5kUGFkZGluZztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9zaXRpb25BeGlzSUQxID0gT2JqZWN0LmtleXMocG9zaXRpb24pWzBdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlMSA9IHBvc2l0aW9uW3Bvc2l0aW9uQXhpc0lEMV07XG4gICAgICAgICAgICAgICAgeCA9IHRoaXMuY2hhcnQuc2NhbGVzW3Bvc2l0aW9uQXhpc0lEMV0uZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZTEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGV4dEFsaWduID0gdGhpcy5fZ2V0WUF4aXNMYWJlbEFsaWdubWVudCh0bCkudGV4dEFsaWduO1xuICAgICAgICB9XG4gICAgICAgIGlmIChheGlzID09PSAneScpIHtcbiAgICAgICAgICAgIGlmIChhbGlnbiA9PT0gJ3N0YXJ0Jykge1xuICAgICAgICAgICAgICAgIHRleHRCYXNlbGluZSA9ICd0b3AnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhbGlnbiA9PT0gJ2VuZCcpIHtcbiAgICAgICAgICAgICAgICB0ZXh0QmFzZWxpbmUgPSAnYm90dG9tJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYWJlbFNpemVzID0gdGhpcy5fZ2V0TGFiZWxTaXplcygpO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSB0aWNrcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgdGljayA9IHRpY2tzW2ldO1xuICAgICAgICAgICAgbGFiZWwgPSB0aWNrLmxhYmVsO1xuICAgICAgICAgICAgY29uc3Qgb3B0c0F0SW5kZXggPSBvcHRpb25UaWNrcy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dChpKSk7XG4gICAgICAgICAgICBwaXhlbCA9IHRoaXMuZ2V0UGl4ZWxGb3JUaWNrKGkpICsgb3B0aW9uVGlja3MubGFiZWxPZmZzZXQ7XG4gICAgICAgICAgICBmb250ID0gdGhpcy5fcmVzb2x2ZVRpY2tGb250T3B0aW9ucyhpKTtcbiAgICAgICAgICAgIGxpbmVIZWlnaHQgPSBmb250LmxpbmVIZWlnaHQ7XG4gICAgICAgICAgICBsaW5lQ291bnQgPSBpc0FycmF5KGxhYmVsKSA/IGxhYmVsLmxlbmd0aCA6IDE7XG4gICAgICAgICAgICBjb25zdCBoYWxmQ291bnQgPSBsaW5lQ291bnQgLyAyO1xuICAgICAgICAgICAgY29uc3QgY29sb3IgPSBvcHRzQXRJbmRleC5jb2xvcjtcbiAgICAgICAgICAgIGNvbnN0IHN0cm9rZUNvbG9yID0gb3B0c0F0SW5kZXgudGV4dFN0cm9rZUNvbG9yO1xuICAgICAgICAgICAgY29uc3Qgc3Ryb2tlV2lkdGggPSBvcHRzQXRJbmRleC50ZXh0U3Ryb2tlV2lkdGg7XG4gICAgICAgICAgICBsZXQgdGlja1RleHRBbGlnbiA9IHRleHRBbGlnbjtcbiAgICAgICAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgICB4ID0gcGl4ZWw7XG4gICAgICAgICAgICAgICAgaWYgKHRleHRBbGlnbiA9PT0gJ2lubmVyJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gaWxlbiAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpY2tUZXh0QWxpZ24gPSAhdGhpcy5vcHRpb25zLnJldmVyc2UgPyAncmlnaHQnIDogJ2xlZnQnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpY2tUZXh0QWxpZ24gPSAhdGhpcy5vcHRpb25zLnJldmVyc2UgPyAnbGVmdCcgOiAncmlnaHQnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGlja1RleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNyb3NzQWxpZ24gPT09ICduZWFyJyB8fCByb3RhdGlvbiAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dE9mZnNldCA9IC1saW5lQ291bnQgKiBsaW5lSGVpZ2h0ICsgbGluZUhlaWdodCAvIDI7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3Jvc3NBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRPZmZzZXQgPSAtbGFiZWxTaXplcy5oaWdoZXN0LmhlaWdodCAvIDIgLSBoYWxmQ291bnQgKiBsaW5lSGVpZ2h0ICsgbGluZUhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRPZmZzZXQgPSAtbGFiZWxTaXplcy5oaWdoZXN0LmhlaWdodCArIGxpbmVIZWlnaHQgLyAyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNyb3NzQWxpZ24gPT09ICduZWFyJyB8fCByb3RhdGlvbiAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dE9mZnNldCA9IGxpbmVIZWlnaHQgLyAyO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNyb3NzQWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0T2Zmc2V0ID0gbGFiZWxTaXplcy5oaWdoZXN0LmhlaWdodCAvIDIgLSBoYWxmQ291bnQgKiBsaW5lSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dE9mZnNldCA9IGxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQgLSBsaW5lQ291bnQgKiBsaW5lSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtaXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dE9mZnNldCAqPSAtMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJvdGF0aW9uICE9PSAwICYmICFvcHRzQXRJbmRleC5zaG93TGFiZWxCYWNrZHJvcCkge1xuICAgICAgICAgICAgICAgICAgICB4ICs9IGxpbmVIZWlnaHQgLyAyICogTWF0aC5zaW4ocm90YXRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgeSA9IHBpeGVsO1xuICAgICAgICAgICAgICAgIHRleHRPZmZzZXQgPSAoMSAtIGxpbmVDb3VudCkgKiBsaW5lSGVpZ2h0IC8gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBiYWNrZHJvcDtcbiAgICAgICAgICAgIGlmIChvcHRzQXRJbmRleC5zaG93TGFiZWxCYWNrZHJvcCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxhYmVsUGFkZGluZyA9IHRvUGFkZGluZyhvcHRzQXRJbmRleC5iYWNrZHJvcFBhZGRpbmcpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IGxhYmVsU2l6ZXMuaGVpZ2h0c1tpXTtcbiAgICAgICAgICAgICAgICBjb25zdCB3aWR0aCA9IGxhYmVsU2l6ZXMud2lkdGhzW2ldO1xuICAgICAgICAgICAgICAgIGxldCB0b3AgPSB0ZXh0T2Zmc2V0IC0gbGFiZWxQYWRkaW5nLnRvcDtcbiAgICAgICAgICAgICAgICBsZXQgbGVmdCA9IDAgLSBsYWJlbFBhZGRpbmcubGVmdDtcbiAgICAgICAgICAgICAgICBzd2l0Y2godGV4dEJhc2VsaW5lKXtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbWlkZGxlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcCAtPSBoZWlnaHQgLyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3AgLT0gaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN3aXRjaCh0ZXh0QWxpZ24pe1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdjZW50ZXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCAtPSB3aWR0aCAvIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCAtPSB3aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBiYWNrZHJvcCA9IHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdCxcbiAgICAgICAgICAgICAgICAgICAgdG9wLFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGggKyBsYWJlbFBhZGRpbmcud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0ICsgbGFiZWxQYWRkaW5nLmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IG9wdHNBdEluZGV4LmJhY2tkcm9wQ29sb3JcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgbGFiZWwsXG4gICAgICAgICAgICAgICAgZm9udCxcbiAgICAgICAgICAgICAgICB0ZXh0T2Zmc2V0LFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgcm90YXRpb24sXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICBzdHJva2VDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbjogdGlja1RleHRBbGlnbixcbiAgICAgICAgICAgICAgICAgICAgdGV4dEJhc2VsaW5lLFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHlcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3BcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgfVxuICAgIF9nZXRYQXhpc0xhYmVsQWxpZ25tZW50KCkge1xuICAgICAgICBjb25zdCB7IHBvc2l0aW9uICwgdGlja3MgIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHJvdGF0aW9uID0gLXRvUmFkaWFucyh0aGlzLmxhYmVsUm90YXRpb24pO1xuICAgICAgICBpZiAocm90YXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBwb3NpdGlvbiA9PT0gJ3RvcCcgPyAnbGVmdCcgOiAncmlnaHQnO1xuICAgICAgICB9XG4gICAgICAgIGxldCBhbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICBpZiAodGlja3MuYWxpZ24gPT09ICdzdGFydCcpIHtcbiAgICAgICAgICAgIGFsaWduID0gJ2xlZnQnO1xuICAgICAgICB9IGVsc2UgaWYgKHRpY2tzLmFsaWduID09PSAnZW5kJykge1xuICAgICAgICAgICAgYWxpZ24gPSAncmlnaHQnO1xuICAgICAgICB9IGVsc2UgaWYgKHRpY2tzLmFsaWduID09PSAnaW5uZXInKSB7XG4gICAgICAgICAgICBhbGlnbiA9ICdpbm5lcic7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFsaWduO1xuICAgIH1cbiAgICBfZ2V0WUF4aXNMYWJlbEFsaWdubWVudCh0bCkge1xuICAgICAgICBjb25zdCB7IHBvc2l0aW9uICwgdGlja3M6IHsgY3Jvc3NBbGlnbiAsIG1pcnJvciAsIHBhZGRpbmcgIH0gIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGxhYmVsU2l6ZXMgPSB0aGlzLl9nZXRMYWJlbFNpemVzKCk7XG4gICAgICAgIGNvbnN0IHRpY2tBbmRQYWRkaW5nID0gdGwgKyBwYWRkaW5nO1xuICAgICAgICBjb25zdCB3aWRlc3QgPSBsYWJlbFNpemVzLndpZGVzdC53aWR0aDtcbiAgICAgICAgbGV0IHRleHRBbGlnbjtcbiAgICAgICAgbGV0IHg7XG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgICBpZiAobWlycm9yKSB7XG4gICAgICAgICAgICAgICAgeCA9IHRoaXMucmlnaHQgKyBwYWRkaW5nO1xuICAgICAgICAgICAgICAgIGlmIChjcm9zc0FsaWduID09PSAnbmVhcicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ2xlZnQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3Jvc3NBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgICAgICAgICAgIHggKz0gd2lkZXN0IC8gMjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ24gPSAncmlnaHQnO1xuICAgICAgICAgICAgICAgICAgICB4ICs9IHdpZGVzdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHggPSB0aGlzLnJpZ2h0IC0gdGlja0FuZFBhZGRpbmc7XG4gICAgICAgICAgICAgICAgaWYgKGNyb3NzQWxpZ24gPT09ICduZWFyJykge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ24gPSAncmlnaHQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3Jvc3NBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgICAgICAgICAgIHggLT0gd2lkZXN0IC8gMjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ24gPSAnbGVmdCc7XG4gICAgICAgICAgICAgICAgICAgIHggPSB0aGlzLmxlZnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgICBpZiAobWlycm9yKSB7XG4gICAgICAgICAgICAgICAgeCA9IHRoaXMubGVmdCArIHBhZGRpbmc7XG4gICAgICAgICAgICAgICAgaWYgKGNyb3NzQWxpZ24gPT09ICduZWFyJykge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ24gPSAncmlnaHQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3Jvc3NBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgICAgICAgICAgIHggLT0gd2lkZXN0IC8gMjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ24gPSAnbGVmdCc7XG4gICAgICAgICAgICAgICAgICAgIHggLT0gd2lkZXN0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgeCA9IHRoaXMubGVmdCArIHRpY2tBbmRQYWRkaW5nO1xuICAgICAgICAgICAgICAgIGlmIChjcm9zc0FsaWduID09PSAnbmVhcicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ2xlZnQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3Jvc3NBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgICAgICAgICAgIHggKz0gd2lkZXN0IC8gMjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ24gPSAncmlnaHQnO1xuICAgICAgICAgICAgICAgICAgICB4ID0gdGhpcy5yaWdodDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0ZXh0QWxpZ24gPSAncmlnaHQnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0ZXh0QWxpZ24sXG4gICAgICAgICAgICB4XG4gICAgICAgIH07XG4gICAgfVxuIF9jb21wdXRlTGFiZWxBcmVhKCkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnRpY2tzLm1pcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSB0aGlzLm9wdGlvbnMucG9zaXRpb247XG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ2xlZnQnIHx8IHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICBsZWZ0OiB0aGlzLmxlZnQsXG4gICAgICAgICAgICAgICAgYm90dG9tOiBjaGFydC5oZWlnaHQsXG4gICAgICAgICAgICAgICAgcmlnaHQ6IHRoaXMucmlnaHRcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAndG9wJyB8fCBwb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdG9wOiB0aGlzLnRvcCxcbiAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgIGJvdHRvbTogdGhpcy5ib3R0b20sXG4gICAgICAgICAgICAgICAgcmlnaHQ6IGNoYXJ0LndpZHRoXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuIGRyYXdCYWNrZ3JvdW5kKCkge1xuICAgICAgICBjb25zdCB7IGN0eCAsIG9wdGlvbnM6IHsgYmFja2dyb3VuZENvbG9yICB9ICwgbGVmdCAsIHRvcCAsIHdpZHRoICwgaGVpZ2h0ICB9ID0gdGhpcztcbiAgICAgICAgaWYgKGJhY2tncm91bmRDb2xvcikge1xuICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBiYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgICAgICBjdHguZmlsbFJlY3QobGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0TGluZVdpZHRoRm9yVmFsdWUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgZ3JpZCA9IHRoaXMub3B0aW9ucy5ncmlkO1xuICAgICAgICBpZiAoIXRoaXMuX2lzVmlzaWJsZSgpIHx8ICFncmlkLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRpY2tzID0gdGhpcy50aWNrcztcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aWNrcy5maW5kSW5kZXgoKHQpPT50LnZhbHVlID09PSB2YWx1ZSk7XG4gICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBvcHRzID0gZ3JpZC5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dChpbmRleCkpO1xuICAgICAgICAgICAgcmV0dXJuIG9wdHMubGluZVdpZHRoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiBkcmF3R3JpZChjaGFydEFyZWEpIHtcbiAgICAgICAgY29uc3QgZ3JpZCA9IHRoaXMub3B0aW9ucy5ncmlkO1xuICAgICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgY29uc3QgaXRlbXMgPSB0aGlzLl9ncmlkTGluZUl0ZW1zIHx8ICh0aGlzLl9ncmlkTGluZUl0ZW1zID0gdGhpcy5fY29tcHV0ZUdyaWRMaW5lSXRlbXMoY2hhcnRBcmVhKSk7XG4gICAgICAgIGxldCBpLCBpbGVuO1xuICAgICAgICBjb25zdCBkcmF3TGluZSA9IChwMSwgcDIsIHN0eWxlKT0+e1xuICAgICAgICAgICAgaWYgKCFzdHlsZS53aWR0aCB8fCAhc3R5bGUuY29sb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgY3R4LmxpbmVXaWR0aCA9IHN0eWxlLndpZHRoO1xuICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gc3R5bGUuY29sb3I7XG4gICAgICAgICAgICBjdHguc2V0TGluZURhc2goc3R5bGUuYm9yZGVyRGFzaCB8fCBbXSk7XG4gICAgICAgICAgICBjdHgubGluZURhc2hPZmZzZXQgPSBzdHlsZS5ib3JkZXJEYXNoT2Zmc2V0O1xuICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyhwMS54LCBwMS55KTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8ocDIueCwgcDIueSk7XG4gICAgICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoZ3JpZC5kaXNwbGF5KSB7XG4gICAgICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBpdGVtc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoZ3JpZC5kcmF3T25DaGFydEFyZWEpIHtcbiAgICAgICAgICAgICAgICAgICAgZHJhd0xpbmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogaXRlbS54MSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IGl0ZW0ueTFcbiAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogaXRlbS54MixcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IGl0ZW0ueTJcbiAgICAgICAgICAgICAgICAgICAgfSwgaXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChncmlkLmRyYXdUaWNrcykge1xuICAgICAgICAgICAgICAgICAgICBkcmF3TGluZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBpdGVtLnR4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IGl0ZW0udHkxXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IGl0ZW0udHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogaXRlbS50eTJcbiAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGl0ZW0udGlja0NvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGl0ZW0udGlja1dpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyRGFzaDogaXRlbS50aWNrQm9yZGVyRGFzaCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckRhc2hPZmZzZXQ6IGl0ZW0udGlja0JvcmRlckRhc2hPZmZzZXRcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuIGRyYXdCb3JkZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgY2hhcnQgLCBjdHggLCBvcHRpb25zOiB7IGJvcmRlciAsIGdyaWQgIH0gIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBib3JkZXJPcHRzID0gYm9yZGVyLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICBjb25zdCBheGlzV2lkdGggPSBib3JkZXIuZGlzcGxheSA/IGJvcmRlck9wdHMud2lkdGggOiAwO1xuICAgICAgICBpZiAoIWF4aXNXaWR0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxhc3RMaW5lV2lkdGggPSBncmlkLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KDApKS5saW5lV2lkdGg7XG4gICAgICAgIGNvbnN0IGJvcmRlclZhbHVlID0gdGhpcy5fYm9yZGVyVmFsdWU7XG4gICAgICAgIGxldCB4MSwgeDIsIHkxLCB5MjtcbiAgICAgICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgIHgxID0gX2FsaWduUGl4ZWwoY2hhcnQsIHRoaXMubGVmdCwgYXhpc1dpZHRoKSAtIGF4aXNXaWR0aCAvIDI7XG4gICAgICAgICAgICB4MiA9IF9hbGlnblBpeGVsKGNoYXJ0LCB0aGlzLnJpZ2h0LCBsYXN0TGluZVdpZHRoKSArIGxhc3RMaW5lV2lkdGggLyAyO1xuICAgICAgICAgICAgeTEgPSB5MiA9IGJvcmRlclZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgeTEgPSBfYWxpZ25QaXhlbChjaGFydCwgdGhpcy50b3AsIGF4aXNXaWR0aCkgLSBheGlzV2lkdGggLyAyO1xuICAgICAgICAgICAgeTIgPSBfYWxpZ25QaXhlbChjaGFydCwgdGhpcy5ib3R0b20sIGxhc3RMaW5lV2lkdGgpICsgbGFzdExpbmVXaWR0aCAvIDI7XG4gICAgICAgICAgICB4MSA9IHgyID0gYm9yZGVyVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IGJvcmRlck9wdHMud2lkdGg7XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGJvcmRlck9wdHMuY29sb3I7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4Lm1vdmVUbyh4MSwgeTEpO1xuICAgICAgICBjdHgubGluZVRvKHgyLCB5Mik7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gZHJhd0xhYmVscyhjaGFydEFyZWEpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uVGlja3MgPSB0aGlzLm9wdGlvbnMudGlja3M7XG4gICAgICAgIGlmICghb3B0aW9uVGlja3MuZGlzcGxheSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgICAgICBjb25zdCBhcmVhID0gdGhpcy5fY29tcHV0ZUxhYmVsQXJlYSgpO1xuICAgICAgICBpZiAoYXJlYSkge1xuICAgICAgICAgICAgY2xpcEFyZWEoY3R4LCBhcmVhKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpdGVtcyA9IHRoaXMuZ2V0TGFiZWxJdGVtcyhjaGFydEFyZWEpO1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMpe1xuICAgICAgICAgICAgY29uc3QgcmVuZGVyVGV4dE9wdGlvbnMgPSBpdGVtLm9wdGlvbnM7XG4gICAgICAgICAgICBjb25zdCB0aWNrRm9udCA9IGl0ZW0uZm9udDtcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gaXRlbS5sYWJlbDtcbiAgICAgICAgICAgIGNvbnN0IHkgPSBpdGVtLnRleHRPZmZzZXQ7XG4gICAgICAgICAgICByZW5kZXJUZXh0KGN0eCwgbGFiZWwsIDAsIHksIHRpY2tGb250LCByZW5kZXJUZXh0T3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFyZWEpIHtcbiAgICAgICAgICAgIHVuY2xpcEFyZWEoY3R4KTtcbiAgICAgICAgfVxuICAgIH1cbiBkcmF3VGl0bGUoKSB7XG4gICAgICAgIGNvbnN0IHsgY3R4ICwgb3B0aW9uczogeyBwb3NpdGlvbiAsIHRpdGxlICwgcmV2ZXJzZSAgfSAgfSA9IHRoaXM7XG4gICAgICAgIGlmICghdGl0bGUuZGlzcGxheSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZvbnQgPSB0b0ZvbnQodGl0bGUuZm9udCk7XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcodGl0bGUucGFkZGluZyk7XG4gICAgICAgIGNvbnN0IGFsaWduID0gdGl0bGUuYWxpZ247XG4gICAgICAgIGxldCBvZmZzZXQgPSBmb250LmxpbmVIZWlnaHQgLyAyO1xuICAgICAgICBpZiAocG9zaXRpb24gPT09ICdib3R0b20nIHx8IHBvc2l0aW9uID09PSAnY2VudGVyJyB8fCBpc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgICAgICAgIG9mZnNldCArPSBwYWRkaW5nLmJvdHRvbTtcbiAgICAgICAgICAgIGlmIChpc0FycmF5KHRpdGxlLnRleHQpKSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IGZvbnQubGluZUhlaWdodCAqICh0aXRsZS50ZXh0Lmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2Zmc2V0ICs9IHBhZGRpbmcudG9wO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgdGl0bGVYICwgdGl0bGVZICwgbWF4V2lkdGggLCByb3RhdGlvbiAgfSA9IHRpdGxlQXJncyh0aGlzLCBvZmZzZXQsIHBvc2l0aW9uLCBhbGlnbik7XG4gICAgICAgIHJlbmRlclRleHQoY3R4LCB0aXRsZS50ZXh0LCAwLCAwLCBmb250LCB7XG4gICAgICAgICAgICBjb2xvcjogdGl0bGUuY29sb3IsXG4gICAgICAgICAgICBtYXhXaWR0aCxcbiAgICAgICAgICAgIHJvdGF0aW9uLFxuICAgICAgICAgICAgdGV4dEFsaWduOiB0aXRsZUFsaWduKGFsaWduLCBwb3NpdGlvbiwgcmV2ZXJzZSksXG4gICAgICAgICAgICB0ZXh0QmFzZWxpbmU6ICdtaWRkbGUnLFxuICAgICAgICAgICAgdHJhbnNsYXRpb246IFtcbiAgICAgICAgICAgICAgICB0aXRsZVgsXG4gICAgICAgICAgICAgICAgdGl0bGVZXG4gICAgICAgICAgICBdXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBkcmF3KGNoYXJ0QXJlYSkge1xuICAgICAgICBpZiAoIXRoaXMuX2lzVmlzaWJsZSgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kcmF3QmFja2dyb3VuZCgpO1xuICAgICAgICB0aGlzLmRyYXdHcmlkKGNoYXJ0QXJlYSk7XG4gICAgICAgIHRoaXMuZHJhd0JvcmRlcigpO1xuICAgICAgICB0aGlzLmRyYXdUaXRsZSgpO1xuICAgICAgICB0aGlzLmRyYXdMYWJlbHMoY2hhcnRBcmVhKTtcbiAgICB9XG4gX2xheWVycygpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgdHogPSBvcHRzLnRpY2tzICYmIG9wdHMudGlja3MueiB8fCAwO1xuICAgICAgICBjb25zdCBneiA9IHZhbHVlT3JEZWZhdWx0KG9wdHMuZ3JpZCAmJiBvcHRzLmdyaWQueiwgLTEpO1xuICAgICAgICBjb25zdCBieiA9IHZhbHVlT3JEZWZhdWx0KG9wdHMuYm9yZGVyICYmIG9wdHMuYm9yZGVyLnosIDApO1xuICAgICAgICBpZiAoIXRoaXMuX2lzVmlzaWJsZSgpIHx8IHRoaXMuZHJhdyAhPT0gU2NhbGUucHJvdG90eXBlLmRyYXcpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB6OiB0eixcbiAgICAgICAgICAgICAgICAgICAgZHJhdzogKGNoYXJ0QXJlYSk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhdyhjaGFydEFyZWEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHo6IGd6LFxuICAgICAgICAgICAgICAgIGRyYXc6IChjaGFydEFyZWEpPT57XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhd0JhY2tncm91bmQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3R3JpZChjaGFydEFyZWEpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXdUaXRsZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgejogYnosXG4gICAgICAgICAgICAgICAgZHJhdzogKCk9PntcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3Qm9yZGVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB6OiB0eixcbiAgICAgICAgICAgICAgICBkcmF3OiAoY2hhcnRBcmVhKT0+e1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXdMYWJlbHMoY2hhcnRBcmVhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIF07XG4gICAgfVxuIGdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKHR5cGUpIHtcbiAgICAgICAgY29uc3QgbWV0YXMgPSB0aGlzLmNoYXJ0LmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtcbiAgICAgICAgY29uc3QgYXhpc0lEID0gdGhpcy5heGlzICsgJ0F4aXNJRCc7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICBsZXQgaSwgaWxlbjtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gbWV0YXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIGNvbnN0IG1ldGEgPSBtZXRhc1tpXTtcbiAgICAgICAgICAgIGlmIChtZXRhW2F4aXNJRF0gPT09IHRoaXMuaWQgJiYgKCF0eXBlIHx8IG1ldGEudHlwZSA9PT0gdHlwZSkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChtZXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiBfcmVzb2x2ZVRpY2tGb250T3B0aW9ucyhpbmRleCkge1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zLnRpY2tzLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KGluZGV4KSk7XG4gICAgICAgIHJldHVybiB0b0ZvbnQob3B0cy5mb250KTtcbiAgICB9XG4gX21heERpZ2l0cygpIHtcbiAgICAgICAgY29uc3QgZm9udFNpemUgPSB0aGlzLl9yZXNvbHZlVGlja0ZvbnRPcHRpb25zKDApLmxpbmVIZWlnaHQ7XG4gICAgICAgIHJldHVybiAodGhpcy5pc0hvcml6b250YWwoKSA/IHRoaXMud2lkdGggOiB0aGlzLmhlaWdodCkgLyBmb250U2l6ZTtcbiAgICB9XG59XG5cbmNsYXNzIFR5cGVkUmVnaXN0cnkge1xuICAgIGNvbnN0cnVjdG9yKHR5cGUsIHNjb3BlLCBvdmVycmlkZSl7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5vdmVycmlkZSA9IG92ZXJyaWRlO1xuICAgICAgICB0aGlzLml0ZW1zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9XG4gICAgaXNGb3JUeXBlKHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaXNQcm90b3R5cGVPZi5jYWxsKHRoaXMudHlwZS5wcm90b3R5cGUsIHR5cGUucHJvdG90eXBlKTtcbiAgICB9XG4gcmVnaXN0ZXIoaXRlbSkge1xuICAgICAgICBjb25zdCBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihpdGVtKTtcbiAgICAgICAgbGV0IHBhcmVudFNjb3BlO1xuICAgICAgICBpZiAoaXNJQ2hhcnRDb21wb25lbnQocHJvdG8pKSB7XG4gICAgICAgICAgICBwYXJlbnRTY29wZSA9IHRoaXMucmVnaXN0ZXIocHJvdG8pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5pdGVtcztcbiAgICAgICAgY29uc3QgaWQgPSBpdGVtLmlkO1xuICAgICAgICBjb25zdCBzY29wZSA9IHRoaXMuc2NvcGUgKyAnLicgKyBpZDtcbiAgICAgICAgaWYgKCFpZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjbGFzcyBkb2VzIG5vdCBoYXZlIGlkOiAnICsgaXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlkIGluIGl0ZW1zKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NvcGU7XG4gICAgICAgIH1cbiAgICAgICAgaXRlbXNbaWRdID0gaXRlbTtcbiAgICAgICAgcmVnaXN0ZXJEZWZhdWx0cyhpdGVtLCBzY29wZSwgcGFyZW50U2NvcGUpO1xuICAgICAgICBpZiAodGhpcy5vdmVycmlkZSkge1xuICAgICAgICAgICAgZGVmYXVsdHMub3ZlcnJpZGUoaXRlbS5pZCwgaXRlbS5vdmVycmlkZXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzY29wZTtcbiAgICB9XG4gZ2V0KGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLml0ZW1zW2lkXTtcbiAgICB9XG4gdW5yZWdpc3RlcihpdGVtKSB7XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5pdGVtcztcbiAgICAgICAgY29uc3QgaWQgPSBpdGVtLmlkO1xuICAgICAgICBjb25zdCBzY29wZSA9IHRoaXMuc2NvcGU7XG4gICAgICAgIGlmIChpZCBpbiBpdGVtcykge1xuICAgICAgICAgICAgZGVsZXRlIGl0ZW1zW2lkXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2NvcGUgJiYgaWQgaW4gZGVmYXVsdHNbc2NvcGVdKSB7XG4gICAgICAgICAgICBkZWxldGUgZGVmYXVsdHNbc2NvcGVdW2lkXTtcbiAgICAgICAgICAgIGlmICh0aGlzLm92ZXJyaWRlKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIG92ZXJyaWRlc1tpZF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiByZWdpc3RlckRlZmF1bHRzKGl0ZW0sIHNjb3BlLCBwYXJlbnRTY29wZSkge1xuICAgIGNvbnN0IGl0ZW1EZWZhdWx0cyA9IG1lcmdlKE9iamVjdC5jcmVhdGUobnVsbCksIFtcbiAgICAgICAgcGFyZW50U2NvcGUgPyBkZWZhdWx0cy5nZXQocGFyZW50U2NvcGUpIDoge30sXG4gICAgICAgIGRlZmF1bHRzLmdldChzY29wZSksXG4gICAgICAgIGl0ZW0uZGVmYXVsdHNcbiAgICBdKTtcbiAgICBkZWZhdWx0cy5zZXQoc2NvcGUsIGl0ZW1EZWZhdWx0cyk7XG4gICAgaWYgKGl0ZW0uZGVmYXVsdFJvdXRlcykge1xuICAgICAgICByb3V0ZURlZmF1bHRzKHNjb3BlLCBpdGVtLmRlZmF1bHRSb3V0ZXMpO1xuICAgIH1cbiAgICBpZiAoaXRlbS5kZXNjcmlwdG9ycykge1xuICAgICAgICBkZWZhdWx0cy5kZXNjcmliZShzY29wZSwgaXRlbS5kZXNjcmlwdG9ycyk7XG4gICAgfVxufVxuZnVuY3Rpb24gcm91dGVEZWZhdWx0cyhzY29wZSwgcm91dGVzKSB7XG4gICAgT2JqZWN0LmtleXMocm91dGVzKS5mb3JFYWNoKChwcm9wZXJ0eSk9PntcbiAgICAgICAgY29uc3QgcHJvcGVydHlQYXJ0cyA9IHByb3BlcnR5LnNwbGl0KCcuJyk7XG4gICAgICAgIGNvbnN0IHNvdXJjZU5hbWUgPSBwcm9wZXJ0eVBhcnRzLnBvcCgpO1xuICAgICAgICBjb25zdCBzb3VyY2VTY29wZSA9IFtcbiAgICAgICAgICAgIHNjb3BlXG4gICAgICAgIF0uY29uY2F0KHByb3BlcnR5UGFydHMpLmpvaW4oJy4nKTtcbiAgICAgICAgY29uc3QgcGFydHMgPSByb3V0ZXNbcHJvcGVydHldLnNwbGl0KCcuJyk7XG4gICAgICAgIGNvbnN0IHRhcmdldE5hbWUgPSBwYXJ0cy5wb3AoKTtcbiAgICAgICAgY29uc3QgdGFyZ2V0U2NvcGUgPSBwYXJ0cy5qb2luKCcuJyk7XG4gICAgICAgIGRlZmF1bHRzLnJvdXRlKHNvdXJjZVNjb3BlLCBzb3VyY2VOYW1lLCB0YXJnZXRTY29wZSwgdGFyZ2V0TmFtZSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBpc0lDaGFydENvbXBvbmVudChwcm90bykge1xuICAgIHJldHVybiAnaWQnIGluIHByb3RvICYmICdkZWZhdWx0cycgaW4gcHJvdG87XG59XG5cbmNsYXNzIFJlZ2lzdHJ5IHtcbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICB0aGlzLmNvbnRyb2xsZXJzID0gbmV3IFR5cGVkUmVnaXN0cnkoRGF0YXNldENvbnRyb2xsZXIsICdkYXRhc2V0cycsIHRydWUpO1xuICAgICAgICB0aGlzLmVsZW1lbnRzID0gbmV3IFR5cGVkUmVnaXN0cnkoRWxlbWVudCwgJ2VsZW1lbnRzJyk7XG4gICAgICAgIHRoaXMucGx1Z2lucyA9IG5ldyBUeXBlZFJlZ2lzdHJ5KE9iamVjdCwgJ3BsdWdpbnMnKTtcbiAgICAgICAgdGhpcy5zY2FsZXMgPSBuZXcgVHlwZWRSZWdpc3RyeShTY2FsZSwgJ3NjYWxlcycpO1xuICAgICAgICB0aGlzLl90eXBlZFJlZ2lzdHJpZXMgPSBbXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJzLFxuICAgICAgICAgICAgdGhpcy5zY2FsZXMsXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzXG4gICAgICAgIF07XG4gICAgfVxuIGFkZCguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX2VhY2goJ3JlZ2lzdGVyJywgYXJncyk7XG4gICAgfVxuICAgIHJlbW92ZSguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX2VhY2goJ3VucmVnaXN0ZXInLCBhcmdzKTtcbiAgICB9XG4gYWRkQ29udHJvbGxlcnMoLi4uYXJncykge1xuICAgICAgICB0aGlzLl9lYWNoKCdyZWdpc3RlcicsIGFyZ3MsIHRoaXMuY29udHJvbGxlcnMpO1xuICAgIH1cbiBhZGRFbGVtZW50cyguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX2VhY2goJ3JlZ2lzdGVyJywgYXJncywgdGhpcy5lbGVtZW50cyk7XG4gICAgfVxuIGFkZFBsdWdpbnMoLi4uYXJncykge1xuICAgICAgICB0aGlzLl9lYWNoKCdyZWdpc3RlcicsIGFyZ3MsIHRoaXMucGx1Z2lucyk7XG4gICAgfVxuIGFkZFNjYWxlcyguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX2VhY2goJ3JlZ2lzdGVyJywgYXJncywgdGhpcy5zY2FsZXMpO1xuICAgIH1cbiBnZXRDb250cm9sbGVyKGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXQoaWQsIHRoaXMuY29udHJvbGxlcnMsICdjb250cm9sbGVyJyk7XG4gICAgfVxuIGdldEVsZW1lbnQoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldChpZCwgdGhpcy5lbGVtZW50cywgJ2VsZW1lbnQnKTtcbiAgICB9XG4gZ2V0UGx1Z2luKGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXQoaWQsIHRoaXMucGx1Z2lucywgJ3BsdWdpbicpO1xuICAgIH1cbiBnZXRTY2FsZShpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0KGlkLCB0aGlzLnNjYWxlcywgJ3NjYWxlJyk7XG4gICAgfVxuIHJlbW92ZUNvbnRyb2xsZXJzKC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5fZWFjaCgndW5yZWdpc3RlcicsIGFyZ3MsIHRoaXMuY29udHJvbGxlcnMpO1xuICAgIH1cbiByZW1vdmVFbGVtZW50cyguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX2VhY2goJ3VucmVnaXN0ZXInLCBhcmdzLCB0aGlzLmVsZW1lbnRzKTtcbiAgICB9XG4gcmVtb3ZlUGx1Z2lucyguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX2VhY2goJ3VucmVnaXN0ZXInLCBhcmdzLCB0aGlzLnBsdWdpbnMpO1xuICAgIH1cbiByZW1vdmVTY2FsZXMoLi4uYXJncykge1xuICAgICAgICB0aGlzLl9lYWNoKCd1bnJlZ2lzdGVyJywgYXJncywgdGhpcy5zY2FsZXMpO1xuICAgIH1cbiBfZWFjaChtZXRob2QsIGFyZ3MsIHR5cGVkUmVnaXN0cnkpIHtcbiAgICAgICAgW1xuICAgICAgICAgICAgLi4uYXJnc1xuICAgICAgICBdLmZvckVhY2goKGFyZyk9PntcbiAgICAgICAgICAgIGNvbnN0IHJlZyA9IHR5cGVkUmVnaXN0cnkgfHwgdGhpcy5fZ2V0UmVnaXN0cnlGb3JUeXBlKGFyZyk7XG4gICAgICAgICAgICBpZiAodHlwZWRSZWdpc3RyeSB8fCByZWcuaXNGb3JUeXBlKGFyZykgfHwgcmVnID09PSB0aGlzLnBsdWdpbnMgJiYgYXJnLmlkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXhlYyhtZXRob2QsIHJlZywgYXJnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZWFjaChhcmcsIChpdGVtKT0+e1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtUmVnID0gdHlwZWRSZWdpc3RyeSB8fCB0aGlzLl9nZXRSZWdpc3RyeUZvclR5cGUoaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2V4ZWMobWV0aG9kLCBpdGVtUmVnLCBpdGVtKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuIF9leGVjKG1ldGhvZCwgcmVnaXN0cnksIGNvbXBvbmVudCkge1xuICAgICAgICBjb25zdCBjYW1lbE1ldGhvZCA9IF9jYXBpdGFsaXplKG1ldGhvZCk7XG4gICAgICAgIGNhbGxiYWNrKGNvbXBvbmVudFsnYmVmb3JlJyArIGNhbWVsTWV0aG9kXSwgW10sIGNvbXBvbmVudCk7XG4gICAgICAgIHJlZ2lzdHJ5W21ldGhvZF0oY29tcG9uZW50KTtcbiAgICAgICAgY2FsbGJhY2soY29tcG9uZW50WydhZnRlcicgKyBjYW1lbE1ldGhvZF0sIFtdLCBjb21wb25lbnQpO1xuICAgIH1cbiBfZ2V0UmVnaXN0cnlGb3JUeXBlKHR5cGUpIHtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMuX3R5cGVkUmVnaXN0cmllcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBjb25zdCByZWcgPSB0aGlzLl90eXBlZFJlZ2lzdHJpZXNbaV07XG4gICAgICAgICAgICBpZiAocmVnLmlzRm9yVHlwZSh0eXBlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucGx1Z2lucztcbiAgICB9XG4gX2dldChpZCwgdHlwZWRSZWdpc3RyeSwgdHlwZSkge1xuICAgICAgICBjb25zdCBpdGVtID0gdHlwZWRSZWdpc3RyeS5nZXQoaWQpO1xuICAgICAgICBpZiAoaXRlbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIGlkICsgJ1wiIGlzIG5vdCBhIHJlZ2lzdGVyZWQgJyArIHR5cGUgKyAnLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cbn1cbnZhciByZWdpc3RyeSA9IC8qICNfX1BVUkVfXyAqLyBuZXcgUmVnaXN0cnkoKTtcblxuY2xhc3MgUGx1Z2luU2VydmljZSB7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgdGhpcy5faW5pdCA9IFtdO1xuICAgIH1cbiBub3RpZnkoY2hhcnQsIGhvb2ssIGFyZ3MsIGZpbHRlcikge1xuICAgICAgICBpZiAoaG9vayA9PT0gJ2JlZm9yZUluaXQnKSB7XG4gICAgICAgICAgICB0aGlzLl9pbml0ID0gdGhpcy5fY3JlYXRlRGVzY3JpcHRvcnMoY2hhcnQsIHRydWUpO1xuICAgICAgICAgICAgdGhpcy5fbm90aWZ5KHRoaXMuX2luaXQsIGNoYXJ0LCAnaW5zdGFsbCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0b3JzID0gZmlsdGVyID8gdGhpcy5fZGVzY3JpcHRvcnMoY2hhcnQpLmZpbHRlcihmaWx0ZXIpIDogdGhpcy5fZGVzY3JpcHRvcnMoY2hhcnQpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9ub3RpZnkoZGVzY3JpcHRvcnMsIGNoYXJ0LCBob29rLCBhcmdzKTtcbiAgICAgICAgaWYgKGhvb2sgPT09ICdhZnRlckRlc3Ryb3knKSB7XG4gICAgICAgICAgICB0aGlzLl9ub3RpZnkoZGVzY3JpcHRvcnMsIGNoYXJ0LCAnc3RvcCcpO1xuICAgICAgICAgICAgdGhpcy5fbm90aWZ5KHRoaXMuX2luaXQsIGNoYXJ0LCAndW5pbnN0YWxsJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gX25vdGlmeShkZXNjcmlwdG9ycywgY2hhcnQsIGhvb2ssIGFyZ3MpIHtcbiAgICAgICAgYXJncyA9IGFyZ3MgfHwge307XG4gICAgICAgIGZvciAoY29uc3QgZGVzY3JpcHRvciBvZiBkZXNjcmlwdG9ycyl7XG4gICAgICAgICAgICBjb25zdCBwbHVnaW4gPSBkZXNjcmlwdG9yLnBsdWdpbjtcbiAgICAgICAgICAgIGNvbnN0IG1ldGhvZCA9IHBsdWdpbltob29rXTtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IFtcbiAgICAgICAgICAgICAgICBjaGFydCxcbiAgICAgICAgICAgICAgICBhcmdzLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3Iub3B0aW9uc1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayhtZXRob2QsIHBhcmFtcywgcGx1Z2luKSA9PT0gZmFsc2UgJiYgYXJncy5jYW5jZWxhYmxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpbnZhbGlkYXRlKCkge1xuICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWYodGhpcy5fY2FjaGUpKSB7XG4gICAgICAgICAgICB0aGlzLl9vbGRDYWNoZSA9IHRoaXMuX2NhY2hlO1xuICAgICAgICAgICAgdGhpcy5fY2FjaGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gX2Rlc2NyaXB0b3JzKGNoYXJ0KSB7XG4gICAgICAgIGlmICh0aGlzLl9jYWNoZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0b3JzID0gdGhpcy5fY2FjaGUgPSB0aGlzLl9jcmVhdGVEZXNjcmlwdG9ycyhjaGFydCk7XG4gICAgICAgIHRoaXMuX25vdGlmeVN0YXRlQ2hhbmdlcyhjaGFydCk7XG4gICAgICAgIHJldHVybiBkZXNjcmlwdG9ycztcbiAgICB9XG4gICAgX2NyZWF0ZURlc2NyaXB0b3JzKGNoYXJ0LCBhbGwpIHtcbiAgICAgICAgY29uc3QgY29uZmlnID0gY2hhcnQgJiYgY2hhcnQuY29uZmlnO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdmFsdWVPckRlZmF1bHQoY29uZmlnLm9wdGlvbnMgJiYgY29uZmlnLm9wdGlvbnMucGx1Z2lucywge30pO1xuICAgICAgICBjb25zdCBwbHVnaW5zID0gYWxsUGx1Z2lucyhjb25maWcpO1xuICAgICAgICByZXR1cm4gb3B0aW9ucyA9PT0gZmFsc2UgJiYgIWFsbCA/IFtdIDogY3JlYXRlRGVzY3JpcHRvcnMoY2hhcnQsIHBsdWdpbnMsIG9wdGlvbnMsIGFsbCk7XG4gICAgfVxuIF9ub3RpZnlTdGF0ZUNoYW5nZXMoY2hhcnQpIHtcbiAgICAgICAgY29uc3QgcHJldmlvdXNEZXNjcmlwdG9ycyA9IHRoaXMuX29sZENhY2hlIHx8IFtdO1xuICAgICAgICBjb25zdCBkZXNjcmlwdG9ycyA9IHRoaXMuX2NhY2hlO1xuICAgICAgICBjb25zdCBkaWZmID0gKGEsIGIpPT5hLmZpbHRlcigoeCk9PiFiLnNvbWUoKHkpPT54LnBsdWdpbi5pZCA9PT0geS5wbHVnaW4uaWQpKTtcbiAgICAgICAgdGhpcy5fbm90aWZ5KGRpZmYocHJldmlvdXNEZXNjcmlwdG9ycywgZGVzY3JpcHRvcnMpLCBjaGFydCwgJ3N0b3AnKTtcbiAgICAgICAgdGhpcy5fbm90aWZ5KGRpZmYoZGVzY3JpcHRvcnMsIHByZXZpb3VzRGVzY3JpcHRvcnMpLCBjaGFydCwgJ3N0YXJ0Jyk7XG4gICAgfVxufVxuIGZ1bmN0aW9uIGFsbFBsdWdpbnMoY29uZmlnKSB7XG4gICAgY29uc3QgbG9jYWxJZHMgPSB7fTtcbiAgICBjb25zdCBwbHVnaW5zID0gW107XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHJlZ2lzdHJ5LnBsdWdpbnMuaXRlbXMpO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgcGx1Z2lucy5wdXNoKHJlZ2lzdHJ5LmdldFBsdWdpbihrZXlzW2ldKSk7XG4gICAgfVxuICAgIGNvbnN0IGxvY2FsID0gY29uZmlnLnBsdWdpbnMgfHwgW107XG4gICAgZm9yKGxldCBpMSA9IDA7IGkxIDwgbG9jYWwubGVuZ3RoOyBpMSsrKXtcbiAgICAgICAgY29uc3QgcGx1Z2luID0gbG9jYWxbaTFdO1xuICAgICAgICBpZiAocGx1Z2lucy5pbmRleE9mKHBsdWdpbikgPT09IC0xKSB7XG4gICAgICAgICAgICBwbHVnaW5zLnB1c2gocGx1Z2luKTtcbiAgICAgICAgICAgIGxvY2FsSWRzW3BsdWdpbi5pZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHBsdWdpbnMsXG4gICAgICAgIGxvY2FsSWRzXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdldE9wdHMob3B0aW9ucywgYWxsKSB7XG4gICAgaWYgKCFhbGwgJiYgb3B0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChvcHRpb25zID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbnM7XG59XG5mdW5jdGlvbiBjcmVhdGVEZXNjcmlwdG9ycyhjaGFydCwgeyBwbHVnaW5zICwgbG9jYWxJZHMgIH0sIG9wdGlvbnMsIGFsbCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGNvbnN0IGNvbnRleHQgPSBjaGFydC5nZXRDb250ZXh0KCk7XG4gICAgZm9yIChjb25zdCBwbHVnaW4gb2YgcGx1Z2lucyl7XG4gICAgICAgIGNvbnN0IGlkID0gcGx1Z2luLmlkO1xuICAgICAgICBjb25zdCBvcHRzID0gZ2V0T3B0cyhvcHRpb25zW2lkXSwgYWxsKTtcbiAgICAgICAgaWYgKG9wdHMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgIHBsdWdpbixcbiAgICAgICAgICAgIG9wdGlvbnM6IHBsdWdpbk9wdHMoY2hhcnQuY29uZmlnLCB7XG4gICAgICAgICAgICAgICAgcGx1Z2luLFxuICAgICAgICAgICAgICAgIGxvY2FsOiBsb2NhbElkc1tpZF1cbiAgICAgICAgICAgIH0sIG9wdHMsIGNvbnRleHQpXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gcGx1Z2luT3B0cyhjb25maWcsIHsgcGx1Z2luICwgbG9jYWwgIH0sIG9wdHMsIGNvbnRleHQpIHtcbiAgICBjb25zdCBrZXlzID0gY29uZmlnLnBsdWdpblNjb3BlS2V5cyhwbHVnaW4pO1xuICAgIGNvbnN0IHNjb3BlcyA9IGNvbmZpZy5nZXRPcHRpb25TY29wZXMob3B0cywga2V5cyk7XG4gICAgaWYgKGxvY2FsICYmIHBsdWdpbi5kZWZhdWx0cykge1xuICAgICAgICBzY29wZXMucHVzaChwbHVnaW4uZGVmYXVsdHMpO1xuICAgIH1cbiAgICByZXR1cm4gY29uZmlnLmNyZWF0ZVJlc29sdmVyKHNjb3BlcywgY29udGV4dCwgW1xuICAgICAgICAnJ1xuICAgIF0sIHtcbiAgICAgICAgc2NyaXB0YWJsZTogZmFsc2UsXG4gICAgICAgIGluZGV4YWJsZTogZmFsc2UsXG4gICAgICAgIGFsbEtleXM6IHRydWVcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0SW5kZXhBeGlzKHR5cGUsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBkYXRhc2V0RGVmYXVsdHMgPSBkZWZhdWx0cy5kYXRhc2V0c1t0eXBlXSB8fCB7fTtcbiAgICBjb25zdCBkYXRhc2V0T3B0aW9ucyA9IChvcHRpb25zLmRhdGFzZXRzIHx8IHt9KVt0eXBlXSB8fCB7fTtcbiAgICByZXR1cm4gZGF0YXNldE9wdGlvbnMuaW5kZXhBeGlzIHx8IG9wdGlvbnMuaW5kZXhBeGlzIHx8IGRhdGFzZXREZWZhdWx0cy5pbmRleEF4aXMgfHwgJ3gnO1xufVxuZnVuY3Rpb24gZ2V0QXhpc0Zyb21EZWZhdWx0U2NhbGVJRChpZCwgaW5kZXhBeGlzKSB7XG4gICAgbGV0IGF4aXMgPSBpZDtcbiAgICBpZiAoaWQgPT09ICdfaW5kZXhfJykge1xuICAgICAgICBheGlzID0gaW5kZXhBeGlzO1xuICAgIH0gZWxzZSBpZiAoaWQgPT09ICdfdmFsdWVfJykge1xuICAgICAgICBheGlzID0gaW5kZXhBeGlzID09PSAneCcgPyAneScgOiAneCc7XG4gICAgfVxuICAgIHJldHVybiBheGlzO1xufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdFNjYWxlSURGcm9tQXhpcyhheGlzLCBpbmRleEF4aXMpIHtcbiAgICByZXR1cm4gYXhpcyA9PT0gaW5kZXhBeGlzID8gJ19pbmRleF8nIDogJ192YWx1ZV8nO1xufVxuZnVuY3Rpb24gYXhpc0Zyb21Qb3NpdGlvbihwb3NpdGlvbikge1xuICAgIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcgfHwgcG9zaXRpb24gPT09ICdib3R0b20nKSB7XG4gICAgICAgIHJldHVybiAneCc7XG4gICAgfVxuICAgIGlmIChwb3NpdGlvbiA9PT0gJ2xlZnQnIHx8IHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgIHJldHVybiAneSc7XG4gICAgfVxufVxuZnVuY3Rpb24gZGV0ZXJtaW5lQXhpcyhpZCwgc2NhbGVPcHRpb25zKSB7XG4gICAgaWYgKGlkID09PSAneCcgfHwgaWQgPT09ICd5JyB8fCBpZCA9PT0gJ3InKSB7XG4gICAgICAgIHJldHVybiBpZDtcbiAgICB9XG4gICAgaWQgPSBzY2FsZU9wdGlvbnMuYXhpcyB8fCBheGlzRnJvbVBvc2l0aW9uKHNjYWxlT3B0aW9ucy5wb3NpdGlvbikgfHwgaWQubGVuZ3RoID4gMSAmJiBkZXRlcm1pbmVBeGlzKGlkWzBdLnRvTG93ZXJDYXNlKCksIHNjYWxlT3B0aW9ucyk7XG4gICAgaWYgKGlkKSB7XG4gICAgICAgIHJldHVybiBpZDtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZGV0ZXJtaW5lIHR5cGUgb2YgJyR7bmFtZX0nIGF4aXMuIFBsZWFzZSBwcm92aWRlICdheGlzJyBvciAncG9zaXRpb24nIG9wdGlvbi5gKTtcbn1cbmZ1bmN0aW9uIG1lcmdlU2NhbGVDb25maWcoY29uZmlnLCBvcHRpb25zKSB7XG4gICAgY29uc3QgY2hhcnREZWZhdWx0cyA9IG92ZXJyaWRlc1tjb25maWcudHlwZV0gfHwge1xuICAgICAgICBzY2FsZXM6IHt9XG4gICAgfTtcbiAgICBjb25zdCBjb25maWdTY2FsZXMgPSBvcHRpb25zLnNjYWxlcyB8fCB7fTtcbiAgICBjb25zdCBjaGFydEluZGV4QXhpcyA9IGdldEluZGV4QXhpcyhjb25maWcudHlwZSwgb3B0aW9ucyk7XG4gICAgY29uc3Qgc2NhbGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBPYmplY3Qua2V5cyhjb25maWdTY2FsZXMpLmZvckVhY2goKGlkKT0+e1xuICAgICAgICBjb25zdCBzY2FsZUNvbmYgPSBjb25maWdTY2FsZXNbaWRdO1xuICAgICAgICBpZiAoIWlzT2JqZWN0KHNjYWxlQ29uZikpIHtcbiAgICAgICAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKGBJbnZhbGlkIHNjYWxlIGNvbmZpZ3VyYXRpb24gZm9yIHNjYWxlOiAke2lkfWApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzY2FsZUNvbmYuX3Byb3h5KSB7XG4gICAgICAgICAgICByZXR1cm4gY29uc29sZS53YXJuKGBJZ25vcmluZyByZXNvbHZlciBwYXNzZWQgYXMgb3B0aW9ucyBmb3Igc2NhbGU6ICR7aWR9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYXhpcyA9IGRldGVybWluZUF4aXMoaWQsIHNjYWxlQ29uZik7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRJZCA9IGdldERlZmF1bHRTY2FsZUlERnJvbUF4aXMoYXhpcywgY2hhcnRJbmRleEF4aXMpO1xuICAgICAgICBjb25zdCBkZWZhdWx0U2NhbGVPcHRpb25zID0gY2hhcnREZWZhdWx0cy5zY2FsZXMgfHwge307XG4gICAgICAgIHNjYWxlc1tpZF0gPSBtZXJnZUlmKE9iamVjdC5jcmVhdGUobnVsbCksIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBheGlzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2NhbGVDb25mLFxuICAgICAgICAgICAgZGVmYXVsdFNjYWxlT3B0aW9uc1theGlzXSxcbiAgICAgICAgICAgIGRlZmF1bHRTY2FsZU9wdGlvbnNbZGVmYXVsdElkXVxuICAgICAgICBdKTtcbiAgICB9KTtcbiAgICBjb25maWcuZGF0YS5kYXRhc2V0cy5mb3JFYWNoKChkYXRhc2V0KT0+e1xuICAgICAgICBjb25zdCB0eXBlID0gZGF0YXNldC50eXBlIHx8IGNvbmZpZy50eXBlO1xuICAgICAgICBjb25zdCBpbmRleEF4aXMgPSBkYXRhc2V0LmluZGV4QXhpcyB8fCBnZXRJbmRleEF4aXModHlwZSwgb3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGRhdGFzZXREZWZhdWx0cyA9IG92ZXJyaWRlc1t0eXBlXSB8fCB7fTtcbiAgICAgICAgY29uc3QgZGVmYXVsdFNjYWxlT3B0aW9ucyA9IGRhdGFzZXREZWZhdWx0cy5zY2FsZXMgfHwge307XG4gICAgICAgIE9iamVjdC5rZXlzKGRlZmF1bHRTY2FsZU9wdGlvbnMpLmZvckVhY2goKGRlZmF1bHRJRCk9PntcbiAgICAgICAgICAgIGNvbnN0IGF4aXMgPSBnZXRBeGlzRnJvbURlZmF1bHRTY2FsZUlEKGRlZmF1bHRJRCwgaW5kZXhBeGlzKTtcbiAgICAgICAgICAgIGNvbnN0IGlkID0gZGF0YXNldFtheGlzICsgJ0F4aXNJRCddIHx8IGF4aXM7XG4gICAgICAgICAgICBzY2FsZXNbaWRdID0gc2NhbGVzW2lkXSB8fCBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgICAgbWVyZ2VJZihzY2FsZXNbaWRdLCBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBheGlzXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjb25maWdTY2FsZXNbaWRdLFxuICAgICAgICAgICAgICAgIGRlZmF1bHRTY2FsZU9wdGlvbnNbZGVmYXVsdElEXVxuICAgICAgICAgICAgXSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIE9iamVjdC5rZXlzKHNjYWxlcykuZm9yRWFjaCgoa2V5KT0+e1xuICAgICAgICBjb25zdCBzY2FsZSA9IHNjYWxlc1trZXldO1xuICAgICAgICBtZXJnZUlmKHNjYWxlLCBbXG4gICAgICAgICAgICBkZWZhdWx0cy5zY2FsZXNbc2NhbGUudHlwZV0sXG4gICAgICAgICAgICBkZWZhdWx0cy5zY2FsZVxuICAgICAgICBdKTtcbiAgICB9KTtcbiAgICByZXR1cm4gc2NhbGVzO1xufVxuZnVuY3Rpb24gaW5pdE9wdGlvbnMoY29uZmlnKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IGNvbmZpZy5vcHRpb25zIHx8IChjb25maWcub3B0aW9ucyA9IHt9KTtcbiAgICBvcHRpb25zLnBsdWdpbnMgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLnBsdWdpbnMsIHt9KTtcbiAgICBvcHRpb25zLnNjYWxlcyA9IG1lcmdlU2NhbGVDb25maWcoY29uZmlnLCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIGluaXREYXRhKGRhdGEpIHtcbiAgICBkYXRhID0gZGF0YSB8fCB7fTtcbiAgICBkYXRhLmRhdGFzZXRzID0gZGF0YS5kYXRhc2V0cyB8fCBbXTtcbiAgICBkYXRhLmxhYmVscyA9IGRhdGEubGFiZWxzIHx8IFtdO1xuICAgIHJldHVybiBkYXRhO1xufVxuZnVuY3Rpb24gaW5pdENvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gICAgY29uZmlnLmRhdGEgPSBpbml0RGF0YShjb25maWcuZGF0YSk7XG4gICAgaW5pdE9wdGlvbnMoY29uZmlnKTtcbiAgICByZXR1cm4gY29uZmlnO1xufVxuY29uc3Qga2V5Q2FjaGUgPSBuZXcgTWFwKCk7XG5jb25zdCBrZXlzQ2FjaGVkID0gbmV3IFNldCgpO1xuZnVuY3Rpb24gY2FjaGVkS2V5cyhjYWNoZUtleSwgZ2VuZXJhdGUpIHtcbiAgICBsZXQga2V5cyA9IGtleUNhY2hlLmdldChjYWNoZUtleSk7XG4gICAgaWYgKCFrZXlzKSB7XG4gICAgICAgIGtleXMgPSBnZW5lcmF0ZSgpO1xuICAgICAgICBrZXlDYWNoZS5zZXQoY2FjaGVLZXksIGtleXMpO1xuICAgICAgICBrZXlzQ2FjaGVkLmFkZChrZXlzKTtcbiAgICB9XG4gICAgcmV0dXJuIGtleXM7XG59XG5jb25zdCBhZGRJZkZvdW5kID0gKHNldCwgb2JqLCBrZXkpPT57XG4gICAgY29uc3Qgb3B0cyA9IHJlc29sdmVPYmplY3RLZXkob2JqLCBrZXkpO1xuICAgIGlmIChvcHRzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc2V0LmFkZChvcHRzKTtcbiAgICB9XG59O1xuY2xhc3MgQ29uZmlnIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpe1xuICAgICAgICB0aGlzLl9jb25maWcgPSBpbml0Q29uZmlnKGNvbmZpZyk7XG4gICAgICAgIHRoaXMuX3Njb3BlQ2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuX3Jlc29sdmVyQ2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIGdldCBwbGF0Zm9ybSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5wbGF0Zm9ybTtcbiAgICB9XG4gICAgZ2V0IHR5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb25maWcudHlwZTtcbiAgICB9XG4gICAgc2V0IHR5cGUodHlwZSkge1xuICAgICAgICB0aGlzLl9jb25maWcudHlwZSA9IHR5cGU7XG4gICAgfVxuICAgIGdldCBkYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29uZmlnLmRhdGE7XG4gICAgfVxuICAgIHNldCBkYXRhKGRhdGEpIHtcbiAgICAgICAgdGhpcy5fY29uZmlnLmRhdGEgPSBpbml0RGF0YShkYXRhKTtcbiAgICB9XG4gICAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb25maWcub3B0aW9ucztcbiAgICB9XG4gICAgc2V0IG9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICB0aGlzLl9jb25maWcub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIGdldCBwbHVnaW5zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29uZmlnLnBsdWdpbnM7XG4gICAgfVxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5fY29uZmlnO1xuICAgICAgICB0aGlzLmNsZWFyQ2FjaGUoKTtcbiAgICAgICAgaW5pdE9wdGlvbnMoY29uZmlnKTtcbiAgICB9XG4gICAgY2xlYXJDYWNoZSgpIHtcbiAgICAgICAgdGhpcy5fc2NvcGVDYWNoZS5jbGVhcigpO1xuICAgICAgICB0aGlzLl9yZXNvbHZlckNhY2hlLmNsZWFyKCk7XG4gICAgfVxuIGRhdGFzZXRTY29wZUtleXMoZGF0YXNldFR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlZEtleXMoZGF0YXNldFR5cGUsICgpPT5bXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICBgZGF0YXNldHMuJHtkYXRhc2V0VHlwZX1gLFxuICAgICAgICAgICAgICAgICAgICAnJ1xuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF0pO1xuICAgIH1cbiBkYXRhc2V0QW5pbWF0aW9uU2NvcGVLZXlzKGRhdGFzZXRUeXBlLCB0cmFuc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiBjYWNoZWRLZXlzKGAke2RhdGFzZXRUeXBlfS50cmFuc2l0aW9uLiR7dHJhbnNpdGlvbn1gLCAoKT0+W1xuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgYGRhdGFzZXRzLiR7ZGF0YXNldFR5cGV9LnRyYW5zaXRpb25zLiR7dHJhbnNpdGlvbn1gLFxuICAgICAgICAgICAgICAgICAgICBgdHJhbnNpdGlvbnMuJHt0cmFuc2l0aW9ufWBcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgYGRhdGFzZXRzLiR7ZGF0YXNldFR5cGV9YCxcbiAgICAgICAgICAgICAgICAgICAgJydcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdKTtcbiAgICB9XG4gZGF0YXNldEVsZW1lbnRTY29wZUtleXMoZGF0YXNldFR5cGUsIGVsZW1lbnRUeXBlKSB7XG4gICAgICAgIHJldHVybiBjYWNoZWRLZXlzKGAke2RhdGFzZXRUeXBlfS0ke2VsZW1lbnRUeXBlfWAsICgpPT5bXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICBgZGF0YXNldHMuJHtkYXRhc2V0VHlwZX0uZWxlbWVudHMuJHtlbGVtZW50VHlwZX1gLFxuICAgICAgICAgICAgICAgICAgICBgZGF0YXNldHMuJHtkYXRhc2V0VHlwZX1gLFxuICAgICAgICAgICAgICAgICAgICBgZWxlbWVudHMuJHtlbGVtZW50VHlwZX1gLFxuICAgICAgICAgICAgICAgICAgICAnJ1xuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF0pO1xuICAgIH1cbiBwbHVnaW5TY29wZUtleXMocGx1Z2luKSB7XG4gICAgICAgIGNvbnN0IGlkID0gcGx1Z2luLmlkO1xuICAgICAgICBjb25zdCB0eXBlID0gdGhpcy50eXBlO1xuICAgICAgICByZXR1cm4gY2FjaGVkS2V5cyhgJHt0eXBlfS1wbHVnaW4tJHtpZH1gLCAoKT0+W1xuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgYHBsdWdpbnMuJHtpZH1gLFxuICAgICAgICAgICAgICAgICAgICAuLi5wbHVnaW4uYWRkaXRpb25hbE9wdGlvblNjb3BlcyB8fCBbXVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF0pO1xuICAgIH1cbiBfY2FjaGVkU2NvcGVzKG1haW5TY29wZSwgcmVzZXRDYWNoZSkge1xuICAgICAgICBjb25zdCBfc2NvcGVDYWNoZSA9IHRoaXMuX3Njb3BlQ2FjaGU7XG4gICAgICAgIGxldCBjYWNoZSA9IF9zY29wZUNhY2hlLmdldChtYWluU2NvcGUpO1xuICAgICAgICBpZiAoIWNhY2hlIHx8IHJlc2V0Q2FjaGUpIHtcbiAgICAgICAgICAgIGNhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgX3Njb3BlQ2FjaGUuc2V0KG1haW5TY29wZSwgY2FjaGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYWNoZTtcbiAgICB9XG4gZ2V0T3B0aW9uU2NvcGVzKG1haW5TY29wZSwga2V5TGlzdHMsIHJlc2V0Q2FjaGUpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zICwgdHlwZSAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGNhY2hlID0gdGhpcy5fY2FjaGVkU2NvcGVzKG1haW5TY29wZSwgcmVzZXRDYWNoZSk7XG4gICAgICAgIGNvbnN0IGNhY2hlZCA9IGNhY2hlLmdldChrZXlMaXN0cyk7XG4gICAgICAgIGlmIChjYWNoZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2NvcGVzID0gbmV3IFNldCgpO1xuICAgICAgICBrZXlMaXN0cy5mb3JFYWNoKChrZXlzKT0+e1xuICAgICAgICAgICAgaWYgKG1haW5TY29wZSkge1xuICAgICAgICAgICAgICAgIHNjb3Blcy5hZGQobWFpblNjb3BlKTtcbiAgICAgICAgICAgICAgICBrZXlzLmZvckVhY2goKGtleSk9PmFkZElmRm91bmQoc2NvcGVzLCBtYWluU2NvcGUsIGtleSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAga2V5cy5mb3JFYWNoKChrZXkpPT5hZGRJZkZvdW5kKHNjb3Blcywgb3B0aW9ucywga2V5KSk7XG4gICAgICAgICAgICBrZXlzLmZvckVhY2goKGtleSk9PmFkZElmRm91bmQoc2NvcGVzLCBvdmVycmlkZXNbdHlwZV0gfHwge30sIGtleSkpO1xuICAgICAgICAgICAga2V5cy5mb3JFYWNoKChrZXkpPT5hZGRJZkZvdW5kKHNjb3BlcywgZGVmYXVsdHMsIGtleSkpO1xuICAgICAgICAgICAga2V5cy5mb3JFYWNoKChrZXkpPT5hZGRJZkZvdW5kKHNjb3BlcywgZGVzY3JpcHRvcnMsIGtleSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgYXJyYXkgPSBBcnJheS5mcm9tKHNjb3Blcyk7XG4gICAgICAgIGlmIChhcnJheS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGFycmF5LnB1c2goT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGtleXNDYWNoZWQuaGFzKGtleUxpc3RzKSkge1xuICAgICAgICAgICAgY2FjaGUuc2V0KGtleUxpc3RzLCBhcnJheSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cbiBjaGFydE9wdGlvblNjb3BlcygpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zICwgdHlwZSAgfSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgb3ZlcnJpZGVzW3R5cGVdIHx8IHt9LFxuICAgICAgICAgICAgZGVmYXVsdHMuZGF0YXNldHNbdHlwZV0gfHwge30sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdHlwZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlZmF1bHRzLFxuICAgICAgICAgICAgZGVzY3JpcHRvcnNcbiAgICAgICAgXTtcbiAgICB9XG4gcmVzb2x2ZU5hbWVkT3B0aW9ucyhzY29wZXMsIG5hbWVzLCBjb250ZXh0LCBwcmVmaXhlcyA9IFtcbiAgICAgICAgJydcbiAgICBdKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgICAgICRzaGFyZWQ6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgeyByZXNvbHZlciAsIHN1YlByZWZpeGVzICB9ID0gZ2V0UmVzb2x2ZXIodGhpcy5fcmVzb2x2ZXJDYWNoZSwgc2NvcGVzLCBwcmVmaXhlcyk7XG4gICAgICAgIGxldCBvcHRpb25zID0gcmVzb2x2ZXI7XG4gICAgICAgIGlmIChuZWVkQ29udGV4dChyZXNvbHZlciwgbmFtZXMpKSB7XG4gICAgICAgICAgICByZXN1bHQuJHNoYXJlZCA9IGZhbHNlO1xuICAgICAgICAgICAgY29udGV4dCA9IGlzRnVuY3Rpb24oY29udGV4dCkgPyBjb250ZXh0KCkgOiBjb250ZXh0O1xuICAgICAgICAgICAgY29uc3Qgc3ViUmVzb2x2ZXIgPSB0aGlzLmNyZWF0ZVJlc29sdmVyKHNjb3BlcywgY29udGV4dCwgc3ViUHJlZml4ZXMpO1xuICAgICAgICAgICAgb3B0aW9ucyA9IF9hdHRhY2hDb250ZXh0KHJlc29sdmVyLCBjb250ZXh0LCBzdWJSZXNvbHZlcik7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBwcm9wIG9mIG5hbWVzKXtcbiAgICAgICAgICAgIHJlc3VsdFtwcm9wXSA9IG9wdGlvbnNbcHJvcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gY3JlYXRlUmVzb2x2ZXIoc2NvcGVzLCBjb250ZXh0LCBwcmVmaXhlcyA9IFtcbiAgICAgICAgJydcbiAgICBdLCBkZXNjcmlwdG9yRGVmYXVsdHMpIHtcbiAgICAgICAgY29uc3QgeyByZXNvbHZlciAgfSA9IGdldFJlc29sdmVyKHRoaXMuX3Jlc29sdmVyQ2FjaGUsIHNjb3BlcywgcHJlZml4ZXMpO1xuICAgICAgICByZXR1cm4gaXNPYmplY3QoY29udGV4dCkgPyBfYXR0YWNoQ29udGV4dChyZXNvbHZlciwgY29udGV4dCwgdW5kZWZpbmVkLCBkZXNjcmlwdG9yRGVmYXVsdHMpIDogcmVzb2x2ZXI7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0UmVzb2x2ZXIocmVzb2x2ZXJDYWNoZSwgc2NvcGVzLCBwcmVmaXhlcykge1xuICAgIGxldCBjYWNoZSA9IHJlc29sdmVyQ2FjaGUuZ2V0KHNjb3Blcyk7XG4gICAgaWYgKCFjYWNoZSkge1xuICAgICAgICBjYWNoZSA9IG5ldyBNYXAoKTtcbiAgICAgICAgcmVzb2x2ZXJDYWNoZS5zZXQoc2NvcGVzLCBjYWNoZSk7XG4gICAgfVxuICAgIGNvbnN0IGNhY2hlS2V5ID0gcHJlZml4ZXMuam9pbigpO1xuICAgIGxldCBjYWNoZWQgPSBjYWNoZS5nZXQoY2FjaGVLZXkpO1xuICAgIGlmICghY2FjaGVkKSB7XG4gICAgICAgIGNvbnN0IHJlc29sdmVyID0gX2NyZWF0ZVJlc29sdmVyKHNjb3BlcywgcHJlZml4ZXMpO1xuICAgICAgICBjYWNoZWQgPSB7XG4gICAgICAgICAgICByZXNvbHZlcixcbiAgICAgICAgICAgIHN1YlByZWZpeGVzOiBwcmVmaXhlcy5maWx0ZXIoKHApPT4hcC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdob3ZlcicpKVxuICAgICAgICB9O1xuICAgICAgICBjYWNoZS5zZXQoY2FjaGVLZXksIGNhY2hlZCk7XG4gICAgfVxuICAgIHJldHVybiBjYWNoZWQ7XG59XG5jb25zdCBoYXNGdW5jdGlvbiA9ICh2YWx1ZSk9PmlzT2JqZWN0KHZhbHVlKSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSkucmVkdWNlKChhY2MsIGtleSk9PmFjYyB8fCBpc0Z1bmN0aW9uKHZhbHVlW2tleV0pLCBmYWxzZSk7XG5mdW5jdGlvbiBuZWVkQ29udGV4dChwcm94eSwgbmFtZXMpIHtcbiAgICBjb25zdCB7IGlzU2NyaXB0YWJsZSAsIGlzSW5kZXhhYmxlICB9ID0gX2Rlc2NyaXB0b3JzKHByb3h5KTtcbiAgICBmb3IgKGNvbnN0IHByb3Agb2YgbmFtZXMpe1xuICAgICAgICBjb25zdCBzY3JpcHRhYmxlID0gaXNTY3JpcHRhYmxlKHByb3ApO1xuICAgICAgICBjb25zdCBpbmRleGFibGUgPSBpc0luZGV4YWJsZShwcm9wKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSAoaW5kZXhhYmxlIHx8IHNjcmlwdGFibGUpICYmIHByb3h5W3Byb3BdO1xuICAgICAgICBpZiAoc2NyaXB0YWJsZSAmJiAoaXNGdW5jdGlvbih2YWx1ZSkgfHwgaGFzRnVuY3Rpb24odmFsdWUpKSB8fCBpbmRleGFibGUgJiYgaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxudmFyIHZlcnNpb24gPSBcIjQuMi4xXCI7XG5cbmNvbnN0IEtOT1dOX1BPU0lUSU9OUyA9IFtcbiAgICAndG9wJyxcbiAgICAnYm90dG9tJyxcbiAgICAnbGVmdCcsXG4gICAgJ3JpZ2h0JyxcbiAgICAnY2hhcnRBcmVhJ1xuXTtcbmZ1bmN0aW9uIHBvc2l0aW9uSXNIb3Jpem9udGFsKHBvc2l0aW9uLCBheGlzKSB7XG4gICAgcmV0dXJuIHBvc2l0aW9uID09PSAndG9wJyB8fCBwb3NpdGlvbiA9PT0gJ2JvdHRvbScgfHwgS05PV05fUE9TSVRJT05TLmluZGV4T2YocG9zaXRpb24pID09PSAtMSAmJiBheGlzID09PSAneCc7XG59XG5mdW5jdGlvbiBjb21wYXJlMkxldmVsKGwxLCBsMikge1xuICAgIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIHJldHVybiBhW2wxXSA9PT0gYltsMV0gPyBhW2wyXSAtIGJbbDJdIDogYVtsMV0gLSBiW2wxXTtcbiAgICB9O1xufVxuZnVuY3Rpb24gb25BbmltYXRpb25zQ29tcGxldGUoY29udGV4dCkge1xuICAgIGNvbnN0IGNoYXJ0ID0gY29udGV4dC5jaGFydDtcbiAgICBjb25zdCBhbmltYXRpb25PcHRpb25zID0gY2hhcnQub3B0aW9ucy5hbmltYXRpb247XG4gICAgY2hhcnQubm90aWZ5UGx1Z2lucygnYWZ0ZXJSZW5kZXInKTtcbiAgICBjYWxsYmFjayhhbmltYXRpb25PcHRpb25zICYmIGFuaW1hdGlvbk9wdGlvbnMub25Db21wbGV0ZSwgW1xuICAgICAgICBjb250ZXh0XG4gICAgXSwgY2hhcnQpO1xufVxuZnVuY3Rpb24gb25BbmltYXRpb25Qcm9ncmVzcyhjb250ZXh0KSB7XG4gICAgY29uc3QgY2hhcnQgPSBjb250ZXh0LmNoYXJ0O1xuICAgIGNvbnN0IGFuaW1hdGlvbk9wdGlvbnMgPSBjaGFydC5vcHRpb25zLmFuaW1hdGlvbjtcbiAgICBjYWxsYmFjayhhbmltYXRpb25PcHRpb25zICYmIGFuaW1hdGlvbk9wdGlvbnMub25Qcm9ncmVzcywgW1xuICAgICAgICBjb250ZXh0XG4gICAgXSwgY2hhcnQpO1xufVxuIGZ1bmN0aW9uIGdldENhbnZhcyhpdGVtKSB7XG4gICAgaWYgKF9pc0RvbVN1cHBvcnRlZCgpICYmIHR5cGVvZiBpdGVtID09PSAnc3RyaW5nJykge1xuICAgICAgICBpdGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaXRlbSk7XG4gICAgfSBlbHNlIGlmIChpdGVtICYmIGl0ZW0ubGVuZ3RoKSB7XG4gICAgICAgIGl0ZW0gPSBpdGVtWzBdO1xuICAgIH1cbiAgICBpZiAoaXRlbSAmJiBpdGVtLmNhbnZhcykge1xuICAgICAgICBpdGVtID0gaXRlbS5jYW52YXM7XG4gICAgfVxuICAgIHJldHVybiBpdGVtO1xufVxuY29uc3QgaW5zdGFuY2VzID0ge307XG5jb25zdCBnZXRDaGFydCA9IChrZXkpPT57XG4gICAgY29uc3QgY2FudmFzID0gZ2V0Q2FudmFzKGtleSk7XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXMoaW5zdGFuY2VzKS5maWx0ZXIoKGMpPT5jLmNhbnZhcyA9PT0gY2FudmFzKS5wb3AoKTtcbn07XG5mdW5jdGlvbiBtb3ZlTnVtZXJpY0tleXMob2JqLCBzdGFydCwgbW92ZSkge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMpe1xuICAgICAgICBjb25zdCBpbnRLZXkgPSAra2V5O1xuICAgICAgICBpZiAoaW50S2V5ID49IHN0YXJ0KSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IG9ialtrZXldO1xuICAgICAgICAgICAgZGVsZXRlIG9ialtrZXldO1xuICAgICAgICAgICAgaWYgKG1vdmUgPiAwIHx8IGludEtleSA+IHN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgb2JqW2ludEtleSArIG1vdmVdID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4gZnVuY3Rpb24gZGV0ZXJtaW5lTGFzdEV2ZW50KGUsIGxhc3RFdmVudCwgaW5DaGFydEFyZWEsIGlzQ2xpY2spIHtcbiAgICBpZiAoIWluQ2hhcnRBcmVhIHx8IGUudHlwZSA9PT0gJ21vdXNlb3V0Jykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKGlzQ2xpY2spIHtcbiAgICAgICAgcmV0dXJuIGxhc3RFdmVudDtcbiAgICB9XG4gICAgcmV0dXJuIGU7XG59XG5mdW5jdGlvbiBnZXREYXRhc2V0QXJlYShtZXRhKSB7XG4gICAgY29uc3QgeyB4U2NhbGUgLCB5U2NhbGUgIH0gPSBtZXRhO1xuICAgIGlmICh4U2NhbGUgJiYgeVNjYWxlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsZWZ0OiB4U2NhbGUubGVmdCxcbiAgICAgICAgICAgIHJpZ2h0OiB4U2NhbGUucmlnaHQsXG4gICAgICAgICAgICB0b3A6IHlTY2FsZS50b3AsXG4gICAgICAgICAgICBib3R0b206IHlTY2FsZS5ib3R0b21cbiAgICAgICAgfTtcbiAgICB9XG59XG5jbGFzcyBDaGFydCB7XG4gICAgc3RhdGljIGRlZmF1bHRzID0gZGVmYXVsdHM7XG4gICAgc3RhdGljIGluc3RhbmNlcyA9IGluc3RhbmNlcztcbiAgICBzdGF0aWMgb3ZlcnJpZGVzID0gb3ZlcnJpZGVzO1xuICAgIHN0YXRpYyByZWdpc3RyeSA9IHJlZ2lzdHJ5O1xuICAgIHN0YXRpYyB2ZXJzaW9uID0gdmVyc2lvbjtcbiAgICBzdGF0aWMgZ2V0Q2hhcnQgPSBnZXRDaGFydDtcbiAgICBzdGF0aWMgcmVnaXN0ZXIoLi4uaXRlbXMpIHtcbiAgICAgICAgcmVnaXN0cnkuYWRkKC4uLml0ZW1zKTtcbiAgICAgICAgaW52YWxpZGF0ZVBsdWdpbnMoKTtcbiAgICB9XG4gICAgc3RhdGljIHVucmVnaXN0ZXIoLi4uaXRlbXMpIHtcbiAgICAgICAgcmVnaXN0cnkucmVtb3ZlKC4uLml0ZW1zKTtcbiAgICAgICAgaW52YWxpZGF0ZVBsdWdpbnMoKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoaXRlbSwgdXNlckNvbmZpZyl7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY29uZmlnID0gbmV3IENvbmZpZyh1c2VyQ29uZmlnKTtcbiAgICAgICAgY29uc3QgaW5pdGlhbENhbnZhcyA9IGdldENhbnZhcyhpdGVtKTtcbiAgICAgICAgY29uc3QgZXhpc3RpbmdDaGFydCA9IGdldENoYXJ0KGluaXRpYWxDYW52YXMpO1xuICAgICAgICBpZiAoZXhpc3RpbmdDaGFydCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW52YXMgaXMgYWxyZWFkeSBpbiB1c2UuIENoYXJ0IHdpdGggSUQgXFwnJyArIGV4aXN0aW5nQ2hhcnQuaWQgKyAnXFwnJyArICcgbXVzdCBiZSBkZXN0cm95ZWQgYmVmb3JlIHRoZSBjYW52YXMgd2l0aCBJRCBcXCcnICsgZXhpc3RpbmdDaGFydC5jYW52YXMuaWQgKyAnXFwnIGNhbiBiZSByZXVzZWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGNvbmZpZy5jcmVhdGVSZXNvbHZlcihjb25maWcuY2hhcnRPcHRpb25TY29wZXMoKSwgdGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICB0aGlzLnBsYXRmb3JtID0gbmV3IChjb25maWcucGxhdGZvcm0gfHwgX2RldGVjdFBsYXRmb3JtKGluaXRpYWxDYW52YXMpKSgpO1xuICAgICAgICB0aGlzLnBsYXRmb3JtLnVwZGF0ZUNvbmZpZyhjb25maWcpO1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5wbGF0Zm9ybS5hY3F1aXJlQ29udGV4dChpbml0aWFsQ2FudmFzLCBvcHRpb25zLmFzcGVjdFJhdGlvKTtcbiAgICAgICAgY29uc3QgY2FudmFzID0gY29udGV4dCAmJiBjb250ZXh0LmNhbnZhcztcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gY2FudmFzICYmIGNhbnZhcy5oZWlnaHQ7XG4gICAgICAgIGNvbnN0IHdpZHRoID0gY2FudmFzICYmIGNhbnZhcy53aWR0aDtcbiAgICAgICAgdGhpcy5pZCA9IHVpZCgpO1xuICAgICAgICB0aGlzLmN0eCA9IGNvbnRleHQ7XG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5fYXNwZWN0UmF0aW8gPSB0aGlzLmFzcGVjdFJhdGlvO1xuICAgICAgICB0aGlzLl9sYXllcnMgPSBbXTtcbiAgICAgICAgdGhpcy5fbWV0YXNldHMgPSBbXTtcbiAgICAgICAgdGhpcy5fc3RhY2tzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmJveGVzID0gW107XG4gICAgICAgIHRoaXMuY3VycmVudERldmljZVBpeGVsUmF0aW8gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuY2hhcnRBcmVhID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSBbXTtcbiAgICAgICAgdGhpcy5fbGFzdEV2ZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcbiAgICAgICAgIHRoaXMuX3Jlc3BvbnNpdmVMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3NvcnRlZE1ldGFzZXRzID0gW107XG4gICAgICAgIHRoaXMuc2NhbGVzID0ge307XG4gICAgICAgIHRoaXMuX3BsdWdpbnMgPSBuZXcgUGx1Z2luU2VydmljZSgpO1xuICAgICAgICB0aGlzLiRwcm94aWVzID0ge307XG4gICAgICAgIHRoaXMuX2hpZGRlbkluZGljZXMgPSB7fTtcbiAgICAgICAgdGhpcy5hdHRhY2hlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9hbmltYXRpb25zRGlzYWJsZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2RvUmVzaXplID0gZGVib3VuY2UoKG1vZGUpPT50aGlzLnVwZGF0ZShtb2RlKSwgb3B0aW9ucy5yZXNpemVEZWxheSB8fCAwKTtcbiAgICAgICAgdGhpcy5fZGF0YUNoYW5nZXMgPSBbXTtcbiAgICAgICAgaW5zdGFuY2VzW3RoaXMuaWRdID0gdGhpcztcbiAgICAgICAgaWYgKCFjb250ZXh0IHx8ICFjYW52YXMpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gY3JlYXRlIGNoYXJ0OiBjYW4ndCBhY3F1aXJlIGNvbnRleHQgZnJvbSB0aGUgZ2l2ZW4gaXRlbVwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBhbmltYXRvci5saXN0ZW4odGhpcywgJ2NvbXBsZXRlJywgb25BbmltYXRpb25zQ29tcGxldGUpO1xuICAgICAgICBhbmltYXRvci5saXN0ZW4odGhpcywgJ3Byb2dyZXNzJywgb25BbmltYXRpb25Qcm9ncmVzcyk7XG4gICAgICAgIHRoaXMuX2luaXRpYWxpemUoKTtcbiAgICAgICAgaWYgKHRoaXMuYXR0YWNoZWQpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGFzcGVjdFJhdGlvKCkge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnM6IHsgYXNwZWN0UmF0aW8gLCBtYWludGFpbkFzcGVjdFJhdGlvICB9ICwgd2lkdGggLCBoZWlnaHQgLCBfYXNwZWN0UmF0aW8gIH0gPSB0aGlzO1xuICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWYoYXNwZWN0UmF0aW8pKSB7XG4gICAgICAgICAgICByZXR1cm4gYXNwZWN0UmF0aW87XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1haW50YWluQXNwZWN0UmF0aW8gJiYgX2FzcGVjdFJhdGlvKSB7XG4gICAgICAgICAgICByZXR1cm4gX2FzcGVjdFJhdGlvO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoZWlnaHQgPyB3aWR0aCAvIGhlaWdodCA6IG51bGw7XG4gICAgfVxuICAgIGdldCBkYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25maWcuZGF0YTtcbiAgICB9XG4gICAgc2V0IGRhdGEoZGF0YSkge1xuICAgICAgICB0aGlzLmNvbmZpZy5kYXRhID0gZGF0YTtcbiAgICB9XG4gICAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcHRpb25zO1xuICAgIH1cbiAgICBzZXQgb3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuY29uZmlnLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICBnZXQgcmVnaXN0cnkoKSB7XG4gICAgICAgIHJldHVybiByZWdpc3RyeTtcbiAgICB9XG4gX2luaXRpYWxpemUoKSB7XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlSW5pdCcpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJlc3BvbnNpdmUpIHtcbiAgICAgICAgICAgIHRoaXMucmVzaXplKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXRpbmFTY2FsZSh0aGlzLCB0aGlzLm9wdGlvbnMuZGV2aWNlUGl4ZWxSYXRpbyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iaW5kRXZlbnRzKCk7XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJJbml0Jyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBjbGVhcigpIHtcbiAgICAgICAgY2xlYXJDYW52YXModGhpcy5jYW52YXMsIHRoaXMuY3R4KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHN0b3AoKSB7XG4gICAgICAgIGFuaW1hdG9yLnN0b3AodGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiByZXNpemUod2lkdGgsIGhlaWdodCkge1xuICAgICAgICBpZiAoIWFuaW1hdG9yLnJ1bm5pbmcodGhpcykpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc2l6ZUJlZm9yZURyYXcgPSB7XG4gICAgICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIF9yZXNpemUod2lkdGgsIGhlaWdodCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBjYW52YXMgPSB0aGlzLmNhbnZhcztcbiAgICAgICAgY29uc3QgYXNwZWN0UmF0aW8gPSBvcHRpb25zLm1haW50YWluQXNwZWN0UmF0aW8gJiYgdGhpcy5hc3BlY3RSYXRpbztcbiAgICAgICAgY29uc3QgbmV3U2l6ZSA9IHRoaXMucGxhdGZvcm0uZ2V0TWF4aW11bVNpemUoY2FudmFzLCB3aWR0aCwgaGVpZ2h0LCBhc3BlY3RSYXRpbyk7XG4gICAgICAgIGNvbnN0IG5ld1JhdGlvID0gb3B0aW9ucy5kZXZpY2VQaXhlbFJhdGlvIHx8IHRoaXMucGxhdGZvcm0uZ2V0RGV2aWNlUGl4ZWxSYXRpbygpO1xuICAgICAgICBjb25zdCBtb2RlID0gdGhpcy53aWR0aCA/ICdyZXNpemUnIDogJ2F0dGFjaCc7XG4gICAgICAgIHRoaXMud2lkdGggPSBuZXdTaXplLndpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IG5ld1NpemUuaGVpZ2h0O1xuICAgICAgICB0aGlzLl9hc3BlY3RSYXRpbyA9IHRoaXMuYXNwZWN0UmF0aW87XG4gICAgICAgIGlmICghcmV0aW5hU2NhbGUodGhpcywgbmV3UmF0aW8sIHRydWUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdyZXNpemUnLCB7XG4gICAgICAgICAgICBzaXplOiBuZXdTaXplXG4gICAgICAgIH0pO1xuICAgICAgICBjYWxsYmFjayhvcHRpb25zLm9uUmVzaXplLCBbXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgbmV3U2l6ZVxuICAgICAgICBdLCB0aGlzKTtcbiAgICAgICAgaWYgKHRoaXMuYXR0YWNoZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9kb1Jlc2l6ZShtb2RlKSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZW5zdXJlU2NhbGVzSGF2ZUlEcygpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3Qgc2NhbGVzT3B0aW9ucyA9IG9wdGlvbnMuc2NhbGVzIHx8IHt9O1xuICAgICAgICBlYWNoKHNjYWxlc09wdGlvbnMsIChheGlzT3B0aW9ucywgYXhpc0lEKT0+e1xuICAgICAgICAgICAgYXhpc09wdGlvbnMuaWQgPSBheGlzSUQ7XG4gICAgICAgIH0pO1xuICAgIH1cbiBidWlsZE9yVXBkYXRlU2NhbGVzKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBzY2FsZU9wdHMgPSBvcHRpb25zLnNjYWxlcztcbiAgICAgICAgY29uc3Qgc2NhbGVzID0gdGhpcy5zY2FsZXM7XG4gICAgICAgIGNvbnN0IHVwZGF0ZWQgPSBPYmplY3Qua2V5cyhzY2FsZXMpLnJlZHVjZSgob2JqLCBpZCk9PntcbiAgICAgICAgICAgIG9ialtpZF0gPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH0sIHt9KTtcbiAgICAgICAgbGV0IGl0ZW1zID0gW107XG4gICAgICAgIGlmIChzY2FsZU9wdHMpIHtcbiAgICAgICAgICAgIGl0ZW1zID0gaXRlbXMuY29uY2F0KE9iamVjdC5rZXlzKHNjYWxlT3B0cykubWFwKChpZCk9PntcbiAgICAgICAgICAgICAgICBjb25zdCBzY2FsZU9wdGlvbnMgPSBzY2FsZU9wdHNbaWRdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aXMgPSBkZXRlcm1pbmVBeGlzKGlkLCBzY2FsZU9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzUmFkaWFsID0gYXhpcyA9PT0gJ3InO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IGF4aXMgPT09ICd4JztcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBzY2FsZU9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIGRwb3NpdGlvbjogaXNSYWRpYWwgPyAnY2hhcnRBcmVhJyA6IGlzSG9yaXpvbnRhbCA/ICdib3R0b20nIDogJ2xlZnQnLFxuICAgICAgICAgICAgICAgICAgICBkdHlwZTogaXNSYWRpYWwgPyAncmFkaWFsTGluZWFyJyA6IGlzSG9yaXpvbnRhbCA/ICdjYXRlZ29yeScgOiAnbGluZWFyJ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWFjaChpdGVtcywgKGl0ZW0pPT57XG4gICAgICAgICAgICBjb25zdCBzY2FsZU9wdGlvbnMgPSBpdGVtLm9wdGlvbnM7XG4gICAgICAgICAgICBjb25zdCBpZCA9IHNjYWxlT3B0aW9ucy5pZDtcbiAgICAgICAgICAgIGNvbnN0IGF4aXMgPSBkZXRlcm1pbmVBeGlzKGlkLCBzY2FsZU9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3Qgc2NhbGVUeXBlID0gdmFsdWVPckRlZmF1bHQoc2NhbGVPcHRpb25zLnR5cGUsIGl0ZW0uZHR5cGUpO1xuICAgICAgICAgICAgaWYgKHNjYWxlT3B0aW9ucy5wb3NpdGlvbiA9PT0gdW5kZWZpbmVkIHx8IHBvc2l0aW9uSXNIb3Jpem9udGFsKHNjYWxlT3B0aW9ucy5wb3NpdGlvbiwgYXhpcykgIT09IHBvc2l0aW9uSXNIb3Jpem9udGFsKGl0ZW0uZHBvc2l0aW9uKSkge1xuICAgICAgICAgICAgICAgIHNjYWxlT3B0aW9ucy5wb3NpdGlvbiA9IGl0ZW0uZHBvc2l0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXBkYXRlZFtpZF0gPSB0cnVlO1xuICAgICAgICAgICAgbGV0IHNjYWxlID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChpZCBpbiBzY2FsZXMgJiYgc2NhbGVzW2lkXS50eXBlID09PSBzY2FsZVR5cGUpIHtcbiAgICAgICAgICAgICAgICBzY2FsZSA9IHNjYWxlc1tpZF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNjYWxlQ2xhc3MgPSByZWdpc3RyeS5nZXRTY2FsZShzY2FsZVR5cGUpO1xuICAgICAgICAgICAgICAgIHNjYWxlID0gbmV3IHNjYWxlQ2xhc3Moe1xuICAgICAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogc2NhbGVUeXBlLFxuICAgICAgICAgICAgICAgICAgICBjdHg6IHRoaXMuY3R4LFxuICAgICAgICAgICAgICAgICAgICBjaGFydDogdGhpc1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHNjYWxlc1tzY2FsZS5pZF0gPSBzY2FsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNjYWxlLmluaXQoc2NhbGVPcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGVhY2godXBkYXRlZCwgKGhhc1VwZGF0ZWQsIGlkKT0+e1xuICAgICAgICAgICAgaWYgKCFoYXNVcGRhdGVkKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHNjYWxlc1tpZF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBlYWNoKHNjYWxlcywgKHNjYWxlKT0+e1xuICAgICAgICAgICAgbGF5b3V0cy5jb25maWd1cmUodGhpcywgc2NhbGUsIHNjYWxlLm9wdGlvbnMpO1xuICAgICAgICAgICAgbGF5b3V0cy5hZGRCb3godGhpcywgc2NhbGUpO1xuICAgICAgICB9KTtcbiAgICB9XG4gX3VwZGF0ZU1ldGFzZXRzKCkge1xuICAgICAgICBjb25zdCBtZXRhc2V0cyA9IHRoaXMuX21ldGFzZXRzO1xuICAgICAgICBjb25zdCBudW1EYXRhID0gdGhpcy5kYXRhLmRhdGFzZXRzLmxlbmd0aDtcbiAgICAgICAgY29uc3QgbnVtTWV0YSA9IG1ldGFzZXRzLmxlbmd0aDtcbiAgICAgICAgbWV0YXNldHMuc29ydCgoYSwgYik9PmEuaW5kZXggLSBiLmluZGV4KTtcbiAgICAgICAgaWYgKG51bU1ldGEgPiBudW1EYXRhKSB7XG4gICAgICAgICAgICBmb3IobGV0IGkgPSBudW1EYXRhOyBpIDwgbnVtTWV0YTsgKytpKXtcbiAgICAgICAgICAgICAgICB0aGlzLl9kZXN0cm95RGF0YXNldE1ldGEoaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtZXRhc2V0cy5zcGxpY2UobnVtRGF0YSwgbnVtTWV0YSAtIG51bURhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3NvcnRlZE1ldGFzZXRzID0gbWV0YXNldHMuc2xpY2UoMCkuc29ydChjb21wYXJlMkxldmVsKCdvcmRlcicsICdpbmRleCcpKTtcbiAgICB9XG4gX3JlbW92ZVVucmVmZXJlbmNlZE1ldGFzZXRzKCkge1xuICAgICAgICBjb25zdCB7IF9tZXRhc2V0czogbWV0YXNldHMgLCBkYXRhOiB7IGRhdGFzZXRzICB9ICB9ID0gdGhpcztcbiAgICAgICAgaWYgKG1ldGFzZXRzLmxlbmd0aCA+IGRhdGFzZXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3N0YWNrcztcbiAgICAgICAgfVxuICAgICAgICBtZXRhc2V0cy5mb3JFYWNoKChtZXRhLCBpbmRleCk9PntcbiAgICAgICAgICAgIGlmIChkYXRhc2V0cy5maWx0ZXIoKHgpPT54ID09PSBtZXRhLl9kYXRhc2V0KS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kZXN0cm95RGF0YXNldE1ldGEoaW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgYnVpbGRPclVwZGF0ZUNvbnRyb2xsZXJzKCkge1xuICAgICAgICBjb25zdCBuZXdDb250cm9sbGVycyA9IFtdO1xuICAgICAgICBjb25zdCBkYXRhc2V0cyA9IHRoaXMuZGF0YS5kYXRhc2V0cztcbiAgICAgICAgbGV0IGksIGlsZW47XG4gICAgICAgIHRoaXMuX3JlbW92ZVVucmVmZXJlbmNlZE1ldGFzZXRzKCk7XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IGRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47IGkrKyl7XG4gICAgICAgICAgICBjb25zdCBkYXRhc2V0ID0gZGF0YXNldHNbaV07XG4gICAgICAgICAgICBsZXQgbWV0YSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoaSk7XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gZGF0YXNldC50eXBlIHx8IHRoaXMuY29uZmlnLnR5cGU7XG4gICAgICAgICAgICBpZiAobWV0YS50eXBlICYmIG1ldGEudHlwZSAhPT0gdHlwZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Rlc3Ryb3lEYXRhc2V0TWV0YShpKTtcbiAgICAgICAgICAgICAgICBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1ldGEudHlwZSA9IHR5cGU7XG4gICAgICAgICAgICBtZXRhLmluZGV4QXhpcyA9IGRhdGFzZXQuaW5kZXhBeGlzIHx8IGdldEluZGV4QXhpcyh0eXBlLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgbWV0YS5vcmRlciA9IGRhdGFzZXQub3JkZXIgfHwgMDtcbiAgICAgICAgICAgIG1ldGEuaW5kZXggPSBpO1xuICAgICAgICAgICAgbWV0YS5sYWJlbCA9ICcnICsgZGF0YXNldC5sYWJlbDtcbiAgICAgICAgICAgIG1ldGEudmlzaWJsZSA9IHRoaXMuaXNEYXRhc2V0VmlzaWJsZShpKTtcbiAgICAgICAgICAgIGlmIChtZXRhLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgICBtZXRhLmNvbnRyb2xsZXIudXBkYXRlSW5kZXgoaSk7XG4gICAgICAgICAgICAgICAgbWV0YS5jb250cm9sbGVyLmxpbmtTY2FsZXMoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgQ29udHJvbGxlckNsYXNzID0gcmVnaXN0cnkuZ2V0Q29udHJvbGxlcih0eXBlKTtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGRhdGFzZXRFbGVtZW50VHlwZSAsIGRhdGFFbGVtZW50VHlwZSAgfSA9IGRlZmF1bHRzLmRhdGFzZXRzW3R5cGVdO1xuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oQ29udHJvbGxlckNsYXNzLCB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFFbGVtZW50VHlwZTogcmVnaXN0cnkuZ2V0RWxlbWVudChkYXRhRWxlbWVudFR5cGUpLFxuICAgICAgICAgICAgICAgICAgICBkYXRhc2V0RWxlbWVudFR5cGU6IGRhdGFzZXRFbGVtZW50VHlwZSAmJiByZWdpc3RyeS5nZXRFbGVtZW50KGRhdGFzZXRFbGVtZW50VHlwZSlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBtZXRhLmNvbnRyb2xsZXIgPSBuZXcgQ29udHJvbGxlckNsYXNzKHRoaXMsIGkpO1xuICAgICAgICAgICAgICAgIG5ld0NvbnRyb2xsZXJzLnB1c2gobWV0YS5jb250cm9sbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl91cGRhdGVNZXRhc2V0cygpO1xuICAgICAgICByZXR1cm4gbmV3Q29udHJvbGxlcnM7XG4gICAgfVxuIF9yZXNldEVsZW1lbnRzKCkge1xuICAgICAgICBlYWNoKHRoaXMuZGF0YS5kYXRhc2V0cywgKGRhdGFzZXQsIGRhdGFzZXRJbmRleCk9PntcbiAgICAgICAgICAgIHRoaXMuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KS5jb250cm9sbGVyLnJlc2V0KCk7XG4gICAgICAgIH0sIHRoaXMpO1xuICAgIH1cbiByZXNldCgpIHtcbiAgICAgICAgdGhpcy5fcmVzZXRFbGVtZW50cygpO1xuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ3Jlc2V0Jyk7XG4gICAgfVxuICAgIHVwZGF0ZShtb2RlKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY29uZmlnO1xuICAgICAgICBjb25maWcudXBkYXRlKCk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLl9vcHRpb25zID0gY29uZmlnLmNyZWF0ZVJlc29sdmVyKGNvbmZpZy5jaGFydE9wdGlvblNjb3BlcygpLCB0aGlzLmdldENvbnRleHQoKSk7XG4gICAgICAgIGNvbnN0IGFuaW1zRGlzYWJsZWQgPSB0aGlzLl9hbmltYXRpb25zRGlzYWJsZWQgPSAhb3B0aW9ucy5hbmltYXRpb247XG4gICAgICAgIHRoaXMuX3VwZGF0ZVNjYWxlcygpO1xuICAgICAgICB0aGlzLl9jaGVja0V2ZW50QmluZGluZ3MoKTtcbiAgICAgICAgdGhpcy5fdXBkYXRlSGlkZGVuSW5kaWNlcygpO1xuICAgICAgICB0aGlzLl9wbHVnaW5zLmludmFsaWRhdGUoKTtcbiAgICAgICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlVXBkYXRlJywge1xuICAgICAgICAgICAgbW9kZSxcbiAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgICAgfSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV3Q29udHJvbGxlcnMgPSB0aGlzLmJ1aWxkT3JVcGRhdGVDb250cm9sbGVycygpO1xuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZUVsZW1lbnRzVXBkYXRlJyk7XG4gICAgICAgIGxldCBtaW5QYWRkaW5nID0gMDtcbiAgICAgICAgZm9yKGxldCBpID0gMCwgaWxlbiA9IHRoaXMuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspe1xuICAgICAgICAgICAgY29uc3QgeyBjb250cm9sbGVyICB9ID0gdGhpcy5nZXREYXRhc2V0TWV0YShpKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc2V0ID0gIWFuaW1zRGlzYWJsZWQgJiYgbmV3Q29udHJvbGxlcnMuaW5kZXhPZihjb250cm9sbGVyKSA9PT0gLTE7XG4gICAgICAgICAgICBjb250cm9sbGVyLmJ1aWxkT3JVcGRhdGVFbGVtZW50cyhyZXNldCk7XG4gICAgICAgICAgICBtaW5QYWRkaW5nID0gTWF0aC5tYXgoK2NvbnRyb2xsZXIuZ2V0TWF4T3ZlcmZsb3coKSwgbWluUGFkZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgbWluUGFkZGluZyA9IHRoaXMuX21pblBhZGRpbmcgPSBvcHRpb25zLmxheW91dC5hdXRvUGFkZGluZyA/IG1pblBhZGRpbmcgOiAwO1xuICAgICAgICB0aGlzLl91cGRhdGVMYXlvdXQobWluUGFkZGluZyk7XG4gICAgICAgIGlmICghYW5pbXNEaXNhYmxlZCkge1xuICAgICAgICAgICAgZWFjaChuZXdDb250cm9sbGVycywgKGNvbnRyb2xsZXIpPT57XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5yZXNldCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdXBkYXRlRGF0YXNldHMobW9kZSk7XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJVcGRhdGUnLCB7XG4gICAgICAgICAgICBtb2RlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9sYXllcnMuc29ydChjb21wYXJlMkxldmVsKCd6JywgJ19pZHgnKSk7XG4gICAgICAgIGNvbnN0IHsgX2FjdGl2ZSAsIF9sYXN0RXZlbnQgIH0gPSB0aGlzO1xuICAgICAgICBpZiAoX2xhc3RFdmVudCkge1xuICAgICAgICAgICAgdGhpcy5fZXZlbnRIYW5kbGVyKF9sYXN0RXZlbnQsIHRydWUpO1xuICAgICAgICB9IGVsc2UgaWYgKF9hY3RpdmUubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVIb3ZlclN0eWxlcyhfYWN0aXZlLCBfYWN0aXZlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH1cbiBfdXBkYXRlU2NhbGVzKCkge1xuICAgICAgICBlYWNoKHRoaXMuc2NhbGVzLCAoc2NhbGUpPT57XG4gICAgICAgICAgICBsYXlvdXRzLnJlbW92ZUJveCh0aGlzLCBzY2FsZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVuc3VyZVNjYWxlc0hhdmVJRHMoKTtcbiAgICAgICAgdGhpcy5idWlsZE9yVXBkYXRlU2NhbGVzKCk7XG4gICAgfVxuIF9jaGVja0V2ZW50QmluZGluZ3MoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nRXZlbnRzID0gbmV3IFNldChPYmplY3Qua2V5cyh0aGlzLl9saXN0ZW5lcnMpKTtcbiAgICAgICAgY29uc3QgbmV3RXZlbnRzID0gbmV3IFNldChvcHRpb25zLmV2ZW50cyk7XG4gICAgICAgIGlmICghc2V0c0VxdWFsKGV4aXN0aW5nRXZlbnRzLCBuZXdFdmVudHMpIHx8ICEhdGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycyAhPT0gb3B0aW9ucy5yZXNwb25zaXZlKSB7XG4gICAgICAgICAgICB0aGlzLnVuYmluZEV2ZW50cygpO1xuICAgICAgICAgICAgdGhpcy5iaW5kRXZlbnRzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gX3VwZGF0ZUhpZGRlbkluZGljZXMoKSB7XG4gICAgICAgIGNvbnN0IHsgX2hpZGRlbkluZGljZXMgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBjaGFuZ2VzID0gdGhpcy5fZ2V0VW5pZm9ybURhdGFDaGFuZ2VzKCkgfHwgW107XG4gICAgICAgIGZvciAoY29uc3QgeyBtZXRob2QgLCBzdGFydCAsIGNvdW50ICB9IG9mIGNoYW5nZXMpe1xuICAgICAgICAgICAgY29uc3QgbW92ZSA9IG1ldGhvZCA9PT0gJ19yZW1vdmVFbGVtZW50cycgPyAtY291bnQgOiBjb3VudDtcbiAgICAgICAgICAgIG1vdmVOdW1lcmljS2V5cyhfaGlkZGVuSW5kaWNlcywgc3RhcnQsIG1vdmUpO1xuICAgICAgICB9XG4gICAgfVxuIF9nZXRVbmlmb3JtRGF0YUNoYW5nZXMoKSB7XG4gICAgICAgIGNvbnN0IF9kYXRhQ2hhbmdlcyA9IHRoaXMuX2RhdGFDaGFuZ2VzO1xuICAgICAgICBpZiAoIV9kYXRhQ2hhbmdlcyB8fCAhX2RhdGFDaGFuZ2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2RhdGFDaGFuZ2VzID0gW107XG4gICAgICAgIGNvbnN0IGRhdGFzZXRDb3VudCA9IHRoaXMuZGF0YS5kYXRhc2V0cy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IG1ha2VTZXQgPSAoaWR4KT0+bmV3IFNldChfZGF0YUNoYW5nZXMuZmlsdGVyKChjKT0+Y1swXSA9PT0gaWR4KS5tYXAoKGMsIGkpPT5pICsgJywnICsgYy5zcGxpY2UoMSkuam9pbignLCcpKSk7XG4gICAgICAgIGNvbnN0IGNoYW5nZVNldCA9IG1ha2VTZXQoMCk7XG4gICAgICAgIGZvcihsZXQgaSA9IDE7IGkgPCBkYXRhc2V0Q291bnQ7IGkrKyl7XG4gICAgICAgICAgICBpZiAoIXNldHNFcXVhbChjaGFuZ2VTZXQsIG1ha2VTZXQoaSkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKGNoYW5nZVNldCkubWFwKChjKT0+Yy5zcGxpdCgnLCcpKS5tYXAoKGEpPT4oe1xuICAgICAgICAgICAgICAgIG1ldGhvZDogYVsxXSxcbiAgICAgICAgICAgICAgICBzdGFydDogK2FbMl0sXG4gICAgICAgICAgICAgICAgY291bnQ6ICthWzNdXG4gICAgICAgICAgICB9KSk7XG4gICAgfVxuIF91cGRhdGVMYXlvdXQobWluUGFkZGluZykge1xuICAgICAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVMYXlvdXQnLCB7XG4gICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgIH0pID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxheW91dHMudXBkYXRlKHRoaXMsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCBtaW5QYWRkaW5nKTtcbiAgICAgICAgY29uc3QgYXJlYSA9IHRoaXMuY2hhcnRBcmVhO1xuICAgICAgICBjb25zdCBub0FyZWEgPSBhcmVhLndpZHRoIDw9IDAgfHwgYXJlYS5oZWlnaHQgPD0gMDtcbiAgICAgICAgdGhpcy5fbGF5ZXJzID0gW107XG4gICAgICAgIGVhY2godGhpcy5ib3hlcywgKGJveCk9PntcbiAgICAgICAgICAgIGlmIChub0FyZWEgJiYgYm94LnBvc2l0aW9uID09PSAnY2hhcnRBcmVhJykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChib3guY29uZmlndXJlKSB7XG4gICAgICAgICAgICAgICAgYm94LmNvbmZpZ3VyZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fbGF5ZXJzLnB1c2goLi4uYm94Ll9sYXllcnMoKSk7XG4gICAgICAgIH0sIHRoaXMpO1xuICAgICAgICB0aGlzLl9sYXllcnMuZm9yRWFjaCgoaXRlbSwgaW5kZXgpPT57XG4gICAgICAgICAgICBpdGVtLl9pZHggPSBpbmRleDtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJMYXlvdXQnKTtcbiAgICB9XG4gX3VwZGF0ZURhdGFzZXRzKG1vZGUpIHtcbiAgICAgICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlRGF0YXNldHNVcGRhdGUnLCB7XG4gICAgICAgICAgICBtb2RlLFxuICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICB9KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IobGV0IGkgPSAwLCBpbGVuID0gdGhpcy5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICB0aGlzLmdldERhdGFzZXRNZXRhKGkpLmNvbnRyb2xsZXIuY29uZmlndXJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGxldCBpMSA9IDAsIGlsZW4xID0gdGhpcy5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaTEgPCBpbGVuMTsgKytpMSl7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVEYXRhc2V0KGkxLCBpc0Z1bmN0aW9uKG1vZGUpID8gbW9kZSh7XG4gICAgICAgICAgICAgICAgZGF0YXNldEluZGV4OiBpMVxuICAgICAgICAgICAgfSkgOiBtb2RlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyRGF0YXNldHNVcGRhdGUnLCB7XG4gICAgICAgICAgICBtb2RlXG4gICAgICAgIH0pO1xuICAgIH1cbiBfdXBkYXRlRGF0YXNldChpbmRleCwgbW9kZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShpbmRleCk7XG4gICAgICAgIGNvbnN0IGFyZ3MgPSB7XG4gICAgICAgICAgICBtZXRhLFxuICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICBtb2RlLFxuICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVEYXRhc2V0VXBkYXRlJywgYXJncykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbWV0YS5jb250cm9sbGVyLl91cGRhdGUobW9kZSk7XG4gICAgICAgIGFyZ3MuY2FuY2VsYWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyRGF0YXNldFVwZGF0ZScsIGFyZ3MpO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZVJlbmRlcicsIHtcbiAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgICAgfSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFuaW1hdG9yLmhhcyh0aGlzKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYXR0YWNoZWQgJiYgIWFuaW1hdG9yLnJ1bm5pbmcodGhpcykpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRvci5zdGFydCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZHJhdygpO1xuICAgICAgICAgICAgb25BbmltYXRpb25zQ29tcGxldGUoe1xuICAgICAgICAgICAgICAgIGNoYXJ0OiB0aGlzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkcmF3KCkge1xuICAgICAgICBsZXQgaTtcbiAgICAgICAgaWYgKHRoaXMuX3Jlc2l6ZUJlZm9yZURyYXcpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgd2lkdGggLCBoZWlnaHQgIH0gPSB0aGlzLl9yZXNpemVCZWZvcmVEcmF3O1xuICAgICAgICAgICAgdGhpcy5fcmVzaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgdGhpcy5fcmVzaXplQmVmb3JlRHJhdyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICBpZiAodGhpcy53aWR0aCA8PSAwIHx8IHRoaXMuaGVpZ2h0IDw9IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVEcmF3Jywge1xuICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICB9KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYXllcnMgPSB0aGlzLl9sYXllcnM7XG4gICAgICAgIGZvcihpID0gMDsgaSA8IGxheWVycy5sZW5ndGggJiYgbGF5ZXJzW2ldLnogPD0gMDsgKytpKXtcbiAgICAgICAgICAgIGxheWVyc1tpXS5kcmF3KHRoaXMuY2hhcnRBcmVhKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9kcmF3RGF0YXNldHMoKTtcbiAgICAgICAgZm9yKDsgaSA8IGxheWVycy5sZW5ndGg7ICsraSl7XG4gICAgICAgICAgICBsYXllcnNbaV0uZHJhdyh0aGlzLmNoYXJ0QXJlYSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdhZnRlckRyYXcnKTtcbiAgICB9XG4gX2dldFNvcnRlZERhdGFzZXRNZXRhcyhmaWx0ZXJWaXNpYmxlKSB7XG4gICAgICAgIGNvbnN0IG1ldGFzZXRzID0gdGhpcy5fc29ydGVkTWV0YXNldHM7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICBsZXQgaSwgaWxlbjtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gbWV0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIGNvbnN0IG1ldGEgPSBtZXRhc2V0c1tpXTtcbiAgICAgICAgICAgIGlmICghZmlsdGVyVmlzaWJsZSB8fCBtZXRhLnZpc2libGUpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChtZXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiBnZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0U29ydGVkRGF0YXNldE1ldGFzKHRydWUpO1xuICAgIH1cbiBfZHJhd0RhdGFzZXRzKCkge1xuICAgICAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVEYXRhc2V0c0RyYXcnLCB7XG4gICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgIH0pID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGFzZXRzID0gdGhpcy5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCk7XG4gICAgICAgIGZvcihsZXQgaSA9IG1ldGFzZXRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKXtcbiAgICAgICAgICAgIHRoaXMuX2RyYXdEYXRhc2V0KG1ldGFzZXRzW2ldKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyRGF0YXNldHNEcmF3Jyk7XG4gICAgfVxuIF9kcmF3RGF0YXNldChtZXRhKSB7XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgICAgICBjb25zdCBjbGlwID0gbWV0YS5fY2xpcDtcbiAgICAgICAgY29uc3QgdXNlQ2xpcCA9ICFjbGlwLmRpc2FibGVkO1xuICAgICAgICBjb25zdCBhcmVhID0gZ2V0RGF0YXNldEFyZWEobWV0YSkgfHwgdGhpcy5jaGFydEFyZWE7XG4gICAgICAgIGNvbnN0IGFyZ3MgPSB7XG4gICAgICAgICAgICBtZXRhLFxuICAgICAgICAgICAgaW5kZXg6IG1ldGEuaW5kZXgsXG4gICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZURhdGFzZXREcmF3JywgYXJncykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVzZUNsaXApIHtcbiAgICAgICAgICAgIGNsaXBBcmVhKGN0eCwge1xuICAgICAgICAgICAgICAgIGxlZnQ6IGNsaXAubGVmdCA9PT0gZmFsc2UgPyAwIDogYXJlYS5sZWZ0IC0gY2xpcC5sZWZ0LFxuICAgICAgICAgICAgICAgIHJpZ2h0OiBjbGlwLnJpZ2h0ID09PSBmYWxzZSA/IHRoaXMud2lkdGggOiBhcmVhLnJpZ2h0ICsgY2xpcC5yaWdodCxcbiAgICAgICAgICAgICAgICB0b3A6IGNsaXAudG9wID09PSBmYWxzZSA/IDAgOiBhcmVhLnRvcCAtIGNsaXAudG9wLFxuICAgICAgICAgICAgICAgIGJvdHRvbTogY2xpcC5ib3R0b20gPT09IGZhbHNlID8gdGhpcy5oZWlnaHQgOiBhcmVhLmJvdHRvbSArIGNsaXAuYm90dG9tXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBtZXRhLmNvbnRyb2xsZXIuZHJhdygpO1xuICAgICAgICBpZiAodXNlQ2xpcCkge1xuICAgICAgICAgICAgdW5jbGlwQXJlYShjdHgpO1xuICAgICAgICB9XG4gICAgICAgIGFyZ3MuY2FuY2VsYWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyRGF0YXNldERyYXcnLCBhcmdzKTtcbiAgICB9XG4gaXNQb2ludEluQXJlYShwb2ludCkge1xuICAgICAgICByZXR1cm4gX2lzUG9pbnRJbkFyZWEocG9pbnQsIHRoaXMuY2hhcnRBcmVhLCB0aGlzLl9taW5QYWRkaW5nKTtcbiAgICB9XG4gICAgZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZShlLCBtb2RlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IEludGVyYWN0aW9uLm1vZGVzW21vZGVdO1xuICAgICAgICBpZiAodHlwZW9mIG1ldGhvZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIG1ldGhvZCh0aGlzLCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCkge1xuICAgICAgICBjb25zdCBkYXRhc2V0ID0gdGhpcy5kYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF07XG4gICAgICAgIGNvbnN0IG1ldGFzZXRzID0gdGhpcy5fbWV0YXNldHM7XG4gICAgICAgIGxldCBtZXRhID0gbWV0YXNldHMuZmlsdGVyKCh4KT0+eCAmJiB4Ll9kYXRhc2V0ID09PSBkYXRhc2V0KS5wb3AoKTtcbiAgICAgICAgaWYgKCFtZXRhKSB7XG4gICAgICAgICAgICBtZXRhID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0YTogW10sXG4gICAgICAgICAgICAgICAgZGF0YXNldDogbnVsbCxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBudWxsLFxuICAgICAgICAgICAgICAgIGhpZGRlbjogbnVsbCxcbiAgICAgICAgICAgICAgICB4QXhpc0lEOiBudWxsLFxuICAgICAgICAgICAgICAgIHlBeGlzSUQ6IG51bGwsXG4gICAgICAgICAgICAgICAgb3JkZXI6IGRhdGFzZXQgJiYgZGF0YXNldC5vcmRlciB8fCAwLFxuICAgICAgICAgICAgICAgIGluZGV4OiBkYXRhc2V0SW5kZXgsXG4gICAgICAgICAgICAgICAgX2RhdGFzZXQ6IGRhdGFzZXQsXG4gICAgICAgICAgICAgICAgX3BhcnNlZDogW10sXG4gICAgICAgICAgICAgICAgX3NvcnRlZDogZmFsc2VcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBtZXRhc2V0cy5wdXNoKG1ldGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXRhO1xuICAgIH1cbiAgICBnZXRDb250ZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kY29udGV4dCB8fCAodGhpcy4kY29udGV4dCA9IGNyZWF0ZUNvbnRleHQobnVsbCwge1xuICAgICAgICAgICAgY2hhcnQ6IHRoaXMsXG4gICAgICAgICAgICB0eXBlOiAnY2hhcnQnXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZ2V0VmlzaWJsZURhdGFzZXRDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpLmxlbmd0aDtcbiAgICB9XG4gICAgaXNEYXRhc2V0VmlzaWJsZShkYXRhc2V0SW5kZXgpIHtcbiAgICAgICAgY29uc3QgZGF0YXNldCA9IHRoaXMuZGF0YS5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdO1xuICAgICAgICBpZiAoIWRhdGFzZXQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpO1xuICAgICAgICByZXR1cm4gdHlwZW9mIG1ldGEuaGlkZGVuID09PSAnYm9vbGVhbicgPyAhbWV0YS5oaWRkZW4gOiAhZGF0YXNldC5oaWRkZW47XG4gICAgfVxuICAgIHNldERhdGFzZXRWaXNpYmlsaXR5KGRhdGFzZXRJbmRleCwgdmlzaWJsZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpO1xuICAgICAgICBtZXRhLmhpZGRlbiA9ICF2aXNpYmxlO1xuICAgIH1cbiAgICB0b2dnbGVEYXRhVmlzaWJpbGl0eShpbmRleCkge1xuICAgICAgICB0aGlzLl9oaWRkZW5JbmRpY2VzW2luZGV4XSA9ICF0aGlzLl9oaWRkZW5JbmRpY2VzW2luZGV4XTtcbiAgICB9XG4gICAgZ2V0RGF0YVZpc2liaWxpdHkoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLl9oaWRkZW5JbmRpY2VzW2luZGV4XTtcbiAgICB9XG4gX3VwZGF0ZVZpc2liaWxpdHkoZGF0YXNldEluZGV4LCBkYXRhSW5kZXgsIHZpc2libGUpIHtcbiAgICAgICAgY29uc3QgbW9kZSA9IHZpc2libGUgPyAnc2hvdycgOiAnaGlkZSc7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG4gICAgICAgIGNvbnN0IGFuaW1zID0gbWV0YS5jb250cm9sbGVyLl9yZXNvbHZlQW5pbWF0aW9ucyh1bmRlZmluZWQsIG1vZGUpO1xuICAgICAgICBpZiAoZGVmaW5lZChkYXRhSW5kZXgpKSB7XG4gICAgICAgICAgICBtZXRhLmRhdGFbZGF0YUluZGV4XS5oaWRkZW4gPSAhdmlzaWJsZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldERhdGFzZXRWaXNpYmlsaXR5KGRhdGFzZXRJbmRleCwgdmlzaWJsZSk7XG4gICAgICAgICAgICBhbmltcy51cGRhdGUobWV0YSwge1xuICAgICAgICAgICAgICAgIHZpc2libGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy51cGRhdGUoKGN0eCk9PmN0eC5kYXRhc2V0SW5kZXggPT09IGRhdGFzZXRJbmRleCA/IG1vZGUgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGhpZGUoZGF0YXNldEluZGV4LCBkYXRhSW5kZXgpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlVmlzaWJpbGl0eShkYXRhc2V0SW5kZXgsIGRhdGFJbmRleCwgZmFsc2UpO1xuICAgIH1cbiAgICBzaG93KGRhdGFzZXRJbmRleCwgZGF0YUluZGV4KSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVZpc2liaWxpdHkoZGF0YXNldEluZGV4LCBkYXRhSW5kZXgsIHRydWUpO1xuICAgIH1cbiBfZGVzdHJveURhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fbWV0YXNldHNbZGF0YXNldEluZGV4XTtcbiAgICAgICAgaWYgKG1ldGEgJiYgbWV0YS5jb250cm9sbGVyKSB7XG4gICAgICAgICAgICBtZXRhLmNvbnRyb2xsZXIuX2Rlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgdGhpcy5fbWV0YXNldHNbZGF0YXNldEluZGV4XTtcbiAgICB9XG4gICAgX3N0b3AoKSB7XG4gICAgICAgIGxldCBpLCBpbGVuO1xuICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgYW5pbWF0b3IucmVtb3ZlKHRoaXMpO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSB0aGlzLmRhdGEuZGF0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIHRoaXMuX2Rlc3Ryb3lEYXRhc2V0TWV0YShpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZURlc3Ryb3knKTtcbiAgICAgICAgY29uc3QgeyBjYW52YXMgLCBjdHggIH0gPSB0aGlzO1xuICAgICAgICB0aGlzLl9zdG9wKCk7XG4gICAgICAgIHRoaXMuY29uZmlnLmNsZWFyQ2FjaGUoKTtcbiAgICAgICAgaWYgKGNhbnZhcykge1xuICAgICAgICAgICAgdGhpcy51bmJpbmRFdmVudHMoKTtcbiAgICAgICAgICAgIGNsZWFyQ2FudmFzKGNhbnZhcywgY3R4KTtcbiAgICAgICAgICAgIHRoaXMucGxhdGZvcm0ucmVsZWFzZUNvbnRleHQoY3R4KTtcbiAgICAgICAgICAgIHRoaXMuY2FudmFzID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuY3R4ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgaW5zdGFuY2VzW3RoaXMuaWRdO1xuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyRGVzdHJveScpO1xuICAgIH1cbiAgICB0b0Jhc2U2NEltYWdlKC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FudmFzLnRvRGF0YVVSTCguLi5hcmdzKTtcbiAgICB9XG4gYmluZEV2ZW50cygpIHtcbiAgICAgICAgdGhpcy5iaW5kVXNlckV2ZW50cygpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJlc3BvbnNpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuYmluZFJlc3BvbnNpdmVFdmVudHMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuIGJpbmRVc2VyRXZlbnRzKCkge1xuICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XG4gICAgICAgIGNvbnN0IHBsYXRmb3JtID0gdGhpcy5wbGF0Zm9ybTtcbiAgICAgICAgY29uc3QgX2FkZCA9ICh0eXBlLCBsaXN0ZW5lcik9PntcbiAgICAgICAgICAgIHBsYXRmb3JtLmFkZEV2ZW50TGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIpO1xuICAgICAgICAgICAgbGlzdGVuZXJzW3R5cGVdID0gbGlzdGVuZXI7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGxpc3RlbmVyID0gKGUsIHgsIHkpPT57XG4gICAgICAgICAgICBlLm9mZnNldFggPSB4O1xuICAgICAgICAgICAgZS5vZmZzZXRZID0geTtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50SGFuZGxlcihlKTtcbiAgICAgICAgfTtcbiAgICAgICAgZWFjaCh0aGlzLm9wdGlvbnMuZXZlbnRzLCAodHlwZSk9Pl9hZGQodHlwZSwgbGlzdGVuZXIpKTtcbiAgICB9XG4gYmluZFJlc3BvbnNpdmVFdmVudHMoKSB7XG4gICAgICAgIGlmICghdGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycykge1xuICAgICAgICAgICAgdGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX3Jlc3BvbnNpdmVMaXN0ZW5lcnM7XG4gICAgICAgIGNvbnN0IHBsYXRmb3JtID0gdGhpcy5wbGF0Zm9ybTtcbiAgICAgICAgY29uc3QgX2FkZCA9ICh0eXBlLCBsaXN0ZW5lcik9PntcbiAgICAgICAgICAgIHBsYXRmb3JtLmFkZEV2ZW50TGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIpO1xuICAgICAgICAgICAgbGlzdGVuZXJzW3R5cGVdID0gbGlzdGVuZXI7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IF9yZW1vdmUgPSAodHlwZSwgbGlzdGVuZXIpPT57XG4gICAgICAgICAgICBpZiAobGlzdGVuZXJzW3R5cGVdKSB7XG4gICAgICAgICAgICAgICAgcGxhdGZvcm0ucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGxpc3RlbmVyc1t0eXBlXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgbGlzdGVuZXIgPSAod2lkdGgsIGhlaWdodCk9PntcbiAgICAgICAgICAgIGlmICh0aGlzLmNhbnZhcykge1xuICAgICAgICAgICAgICAgIHRoaXMucmVzaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBsZXQgZGV0YWNoZWQ7XG4gICAgICAgIGNvbnN0IGF0dGFjaGVkID0gKCk9PntcbiAgICAgICAgICAgIF9yZW1vdmUoJ2F0dGFjaCcsIGF0dGFjaGVkKTtcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5yZXNpemUoKTtcbiAgICAgICAgICAgIF9hZGQoJ3Jlc2l6ZScsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgIF9hZGQoJ2RldGFjaCcsIGRldGFjaGVkKTtcbiAgICAgICAgfTtcbiAgICAgICAgZGV0YWNoZWQgPSAoKT0+e1xuICAgICAgICAgICAgdGhpcy5hdHRhY2hlZCA9IGZhbHNlO1xuICAgICAgICAgICAgX3JlbW92ZSgncmVzaXplJywgbGlzdGVuZXIpO1xuICAgICAgICAgICAgdGhpcy5fc3RvcCgpO1xuICAgICAgICAgICAgdGhpcy5fcmVzaXplKDAsIDApO1xuICAgICAgICAgICAgX2FkZCgnYXR0YWNoJywgYXR0YWNoZWQpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAocGxhdGZvcm0uaXNBdHRhY2hlZCh0aGlzLmNhbnZhcykpIHtcbiAgICAgICAgICAgIGF0dGFjaGVkKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZXRhY2hlZCgpO1xuICAgICAgICB9XG4gICAgfVxuIHVuYmluZEV2ZW50cygpIHtcbiAgICAgICAgZWFjaCh0aGlzLl9saXN0ZW5lcnMsIChsaXN0ZW5lciwgdHlwZSk9PntcbiAgICAgICAgICAgIHRoaXMucGxhdGZvcm0ucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lcik7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcbiAgICAgICAgZWFjaCh0aGlzLl9yZXNwb25zaXZlTGlzdGVuZXJzLCAobGlzdGVuZXIsIHR5cGUpPT57XG4gICAgICAgICAgICB0aGlzLnBsYXRmb3JtLnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdXBkYXRlSG92ZXJTdHlsZShpdGVtcywgbW9kZSwgZW5hYmxlZCkge1xuICAgICAgICBjb25zdCBwcmVmaXggPSBlbmFibGVkID8gJ3NldCcgOiAncmVtb3ZlJztcbiAgICAgICAgbGV0IG1ldGEsIGl0ZW0sIGksIGlsZW47XG4gICAgICAgIGlmIChtb2RlID09PSAnZGF0YXNldCcpIHtcbiAgICAgICAgICAgIG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGl0ZW1zWzBdLmRhdGFzZXRJbmRleCk7XG4gICAgICAgICAgICBtZXRhLmNvbnRyb2xsZXJbJ18nICsgcHJlZml4ICsgJ0RhdGFzZXRIb3ZlclN0eWxlJ10oKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgaXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgICAgICAgY29uc3QgY29udHJvbGxlciA9IGl0ZW0gJiYgdGhpcy5nZXREYXRhc2V0TWV0YShpdGVtLmRhdGFzZXRJbmRleCkuY29udHJvbGxlcjtcbiAgICAgICAgICAgIGlmIChjb250cm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlcltwcmVmaXggKyAnSG92ZXJTdHlsZSddKGl0ZW0uZWxlbWVudCwgaXRlbS5kYXRhc2V0SW5kZXgsIGl0ZW0uaW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuIGdldEFjdGl2ZUVsZW1lbnRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZlIHx8IFtdO1xuICAgIH1cbiBzZXRBY3RpdmVFbGVtZW50cyhhY3RpdmVFbGVtZW50cykge1xuICAgICAgICBjb25zdCBsYXN0QWN0aXZlID0gdGhpcy5fYWN0aXZlIHx8IFtdO1xuICAgICAgICBjb25zdCBhY3RpdmUgPSBhY3RpdmVFbGVtZW50cy5tYXAoKHsgZGF0YXNldEluZGV4ICwgaW5kZXggIH0pPT57XG4gICAgICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpO1xuICAgICAgICAgICAgaWYgKCFtZXRhKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBkYXRhc2V0IGZvdW5kIGF0IGluZGV4ICcgKyBkYXRhc2V0SW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkYXRhc2V0SW5kZXgsXG4gICAgICAgICAgICAgICAgZWxlbWVudDogbWV0YS5kYXRhW2luZGV4XSxcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGNoYW5nZWQgPSAhX2VsZW1lbnRzRXF1YWwoYWN0aXZlLCBsYXN0QWN0aXZlKTtcbiAgICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZSA9IGFjdGl2ZTtcbiAgICAgICAgICAgIHRoaXMuX2xhc3RFdmVudCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVIb3ZlclN0eWxlcyhhY3RpdmUsIGxhc3RBY3RpdmUpO1xuICAgICAgICB9XG4gICAgfVxuIG5vdGlmeVBsdWdpbnMoaG9vaywgYXJncywgZmlsdGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wbHVnaW5zLm5vdGlmeSh0aGlzLCBob29rLCBhcmdzLCBmaWx0ZXIpO1xuICAgIH1cbiBpc1BsdWdpbkVuYWJsZWQocGx1Z2luSWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BsdWdpbnMuX2NhY2hlLmZpbHRlcigocCk9PnAucGx1Z2luLmlkID09PSBwbHVnaW5JZCkubGVuZ3RoID09PSAxO1xuICAgIH1cbiBfdXBkYXRlSG92ZXJTdHlsZXMoYWN0aXZlLCBsYXN0QWN0aXZlLCByZXBsYXkpIHtcbiAgICAgICAgY29uc3QgaG92ZXJPcHRpb25zID0gdGhpcy5vcHRpb25zLmhvdmVyO1xuICAgICAgICBjb25zdCBkaWZmID0gKGEsIGIpPT5hLmZpbHRlcigoeCk9PiFiLnNvbWUoKHkpPT54LmRhdGFzZXRJbmRleCA9PT0geS5kYXRhc2V0SW5kZXggJiYgeC5pbmRleCA9PT0geS5pbmRleCkpO1xuICAgICAgICBjb25zdCBkZWFjdGl2YXRlZCA9IGRpZmYobGFzdEFjdGl2ZSwgYWN0aXZlKTtcbiAgICAgICAgY29uc3QgYWN0aXZhdGVkID0gcmVwbGF5ID8gYWN0aXZlIDogZGlmZihhY3RpdmUsIGxhc3RBY3RpdmUpO1xuICAgICAgICBpZiAoZGVhY3RpdmF0ZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUhvdmVyU3R5bGUoZGVhY3RpdmF0ZWQsIGhvdmVyT3B0aW9ucy5tb2RlLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFjdGl2YXRlZC5sZW5ndGggJiYgaG92ZXJPcHRpb25zLm1vZGUpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlSG92ZXJTdHlsZShhY3RpdmF0ZWQsIGhvdmVyT3B0aW9ucy5tb2RlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cbiBfZXZlbnRIYW5kbGVyKGUsIHJlcGxheSkge1xuICAgICAgICBjb25zdCBhcmdzID0ge1xuICAgICAgICAgICAgZXZlbnQ6IGUsXG4gICAgICAgICAgICByZXBsYXksXG4gICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlLFxuICAgICAgICAgICAgaW5DaGFydEFyZWE6IHRoaXMuaXNQb2ludEluQXJlYShlKVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBldmVudEZpbHRlciA9IChwbHVnaW4pPT4ocGx1Z2luLm9wdGlvbnMuZXZlbnRzIHx8IHRoaXMub3B0aW9ucy5ldmVudHMpLmluY2x1ZGVzKGUubmF0aXZlLnR5cGUpO1xuICAgICAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVFdmVudCcsIGFyZ3MsIGV2ZW50RmlsdGVyKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGFuZ2VkID0gdGhpcy5faGFuZGxlRXZlbnQoZSwgcmVwbGF5LCBhcmdzLmluQ2hhcnRBcmVhKTtcbiAgICAgICAgYXJncy5jYW5jZWxhYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJFdmVudCcsIGFyZ3MsIGV2ZW50RmlsdGVyKTtcbiAgICAgICAgaWYgKGNoYW5nZWQgfHwgYXJncy5jaGFuZ2VkKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiBfaGFuZGxlRXZlbnQoZSwgcmVwbGF5LCBpbkNoYXJ0QXJlYSkge1xuICAgICAgICBjb25zdCB7IF9hY3RpdmU6IGxhc3RBY3RpdmUgPSBbXSAsIG9wdGlvbnMgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB1c2VGaW5hbFBvc2l0aW9uID0gcmVwbGF5O1xuICAgICAgICBjb25zdCBhY3RpdmUgPSB0aGlzLl9nZXRBY3RpdmVFbGVtZW50cyhlLCBsYXN0QWN0aXZlLCBpbkNoYXJ0QXJlYSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIGNvbnN0IGlzQ2xpY2sgPSBfaXNDbGlja0V2ZW50KGUpO1xuICAgICAgICBjb25zdCBsYXN0RXZlbnQgPSBkZXRlcm1pbmVMYXN0RXZlbnQoZSwgdGhpcy5fbGFzdEV2ZW50LCBpbkNoYXJ0QXJlYSwgaXNDbGljayk7XG4gICAgICAgIGlmIChpbkNoYXJ0QXJlYSkge1xuICAgICAgICAgICAgdGhpcy5fbGFzdEV2ZW50ID0gbnVsbDtcbiAgICAgICAgICAgIGNhbGxiYWNrKG9wdGlvbnMub25Ib3ZlciwgW1xuICAgICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgICAgYWN0aXZlLFxuICAgICAgICAgICAgICAgIHRoaXNcbiAgICAgICAgICAgIF0sIHRoaXMpO1xuICAgICAgICAgICAgaWYgKGlzQ2xpY2spIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhvcHRpb25zLm9uQ2xpY2ssIFtcbiAgICAgICAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICAgICAgXSwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2hhbmdlZCA9ICFfZWxlbWVudHNFcXVhbChhY3RpdmUsIGxhc3RBY3RpdmUpO1xuICAgICAgICBpZiAoY2hhbmdlZCB8fCByZXBsYXkpIHtcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZSA9IGFjdGl2ZTtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUhvdmVyU3R5bGVzKGFjdGl2ZSwgbGFzdEFjdGl2ZSwgcmVwbGF5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9sYXN0RXZlbnQgPSBsYXN0RXZlbnQ7XG4gICAgICAgIHJldHVybiBjaGFuZ2VkO1xuICAgIH1cbiBfZ2V0QWN0aXZlRWxlbWVudHMoZSwgbGFzdEFjdGl2ZSwgaW5DaGFydEFyZWEsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgaWYgKGUudHlwZSA9PT0gJ21vdXNlb3V0Jykge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaW5DaGFydEFyZWEpIHtcbiAgICAgICAgICAgIHJldHVybiBsYXN0QWN0aXZlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhvdmVyT3B0aW9ucyA9IHRoaXMub3B0aW9ucy5ob3ZlcjtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZShlLCBob3Zlck9wdGlvbnMubW9kZSwgaG92ZXJPcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICB9XG59XG5mdW5jdGlvbiBpbnZhbGlkYXRlUGx1Z2lucygpIHtcbiAgICByZXR1cm4gZWFjaChDaGFydC5pbnN0YW5jZXMsIChjaGFydCk9PmNoYXJ0Ll9wbHVnaW5zLmludmFsaWRhdGUoKSk7XG59XG5cbmZ1bmN0aW9uIGNsaXBBcmMoY3R4LCBlbGVtZW50LCBlbmRBbmdsZSkge1xuICAgIGNvbnN0IHsgc3RhcnRBbmdsZSAsIHBpeGVsTWFyZ2luICwgeCAsIHkgLCBvdXRlclJhZGl1cyAsIGlubmVyUmFkaXVzICB9ID0gZWxlbWVudDtcbiAgICBsZXQgYW5nbGVNYXJnaW4gPSBwaXhlbE1hcmdpbiAvIG91dGVyUmFkaXVzO1xuICAgIC8vIERyYXcgYW4gaW5uZXIgYm9yZGVyIGJ5IGNsaXBwaW5nIHRoZSBhcmMgYW5kIGRyYXdpbmcgYSBkb3VibGUtd2lkdGggYm9yZGVyXG4gICAgLy8gRW5sYXJnZSB0aGUgY2xpcHBpbmcgYXJjIGJ5IDAuMzMgcGl4ZWxzIHRvIGVsaW1pbmF0ZSBnbGl0Y2hlcyBiZXR3ZWVuIGJvcmRlcnNcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4LmFyYyh4LCB5LCBvdXRlclJhZGl1cywgc3RhcnRBbmdsZSAtIGFuZ2xlTWFyZ2luLCBlbmRBbmdsZSArIGFuZ2xlTWFyZ2luKTtcbiAgICBpZiAoaW5uZXJSYWRpdXMgPiBwaXhlbE1hcmdpbikge1xuICAgICAgICBhbmdsZU1hcmdpbiA9IHBpeGVsTWFyZ2luIC8gaW5uZXJSYWRpdXM7XG4gICAgICAgIGN0eC5hcmMoeCwgeSwgaW5uZXJSYWRpdXMsIGVuZEFuZ2xlICsgYW5nbGVNYXJnaW4sIHN0YXJ0QW5nbGUgLSBhbmdsZU1hcmdpbiwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY3R4LmFyYyh4LCB5LCBwaXhlbE1hcmdpbiwgZW5kQW5nbGUgKyBIQUxGX1BJLCBzdGFydEFuZ2xlIC0gSEFMRl9QSSk7XG4gICAgfVxuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICBjdHguY2xpcCgpO1xufVxuZnVuY3Rpb24gdG9SYWRpdXNDb3JuZXJzKHZhbHVlKSB7XG4gICAgcmV0dXJuIF9yZWFkVmFsdWVUb1Byb3BzKHZhbHVlLCBbXG4gICAgICAgICdvdXRlclN0YXJ0JyxcbiAgICAgICAgJ291dGVyRW5kJyxcbiAgICAgICAgJ2lubmVyU3RhcnQnLFxuICAgICAgICAnaW5uZXJFbmQnXG4gICAgXSk7XG59XG4vKipcbiAqIFBhcnNlIGJvcmRlciByYWRpdXMgZnJvbSB0aGUgcHJvdmlkZWQgb3B0aW9uc1xuICovIGZ1bmN0aW9uIHBhcnNlQm9yZGVyUmFkaXVzJDEoYXJjLCBpbm5lclJhZGl1cywgb3V0ZXJSYWRpdXMsIGFuZ2xlRGVsdGEpIHtcbiAgICBjb25zdCBvID0gdG9SYWRpdXNDb3JuZXJzKGFyYy5vcHRpb25zLmJvcmRlclJhZGl1cyk7XG4gICAgY29uc3QgaGFsZlRoaWNrbmVzcyA9IChvdXRlclJhZGl1cyAtIGlubmVyUmFkaXVzKSAvIDI7XG4gICAgY29uc3QgaW5uZXJMaW1pdCA9IE1hdGgubWluKGhhbGZUaGlja25lc3MsIGFuZ2xlRGVsdGEgKiBpbm5lclJhZGl1cyAvIDIpO1xuICAgIC8vIE91dGVyIGxpbWl0cyBhcmUgY29tcGxpY2F0ZWQuIFdlIHdhbnQgdG8gY29tcHV0ZSB0aGUgYXZhaWxhYmxlIGFuZ3VsYXIgZGlzdGFuY2UgYXRcbiAgICAvLyBhIHJhZGl1cyBvZiBvdXRlclJhZGl1cyAtIGJvcmRlclJhZGl1cyBiZWNhdXNlIGZvciBzbWFsbCBhbmd1bGFyIGRpc3RhbmNlcywgdGhpcyB0ZXJtIGxpbWl0cy5cbiAgICAvLyBXZSBjb21wdXRlIGF0IHIgPSBvdXRlclJhZGl1cyAtIGJvcmRlclJhZGl1cyBiZWNhdXNlIHRoaXMgY2lyY2xlIGRlZmluZXMgdGhlIGNlbnRlciBvZiB0aGUgYm9yZGVyIGNvcm5lcnMuXG4gICAgLy9cbiAgICAvLyBJZiB0aGUgYm9yZGVyUmFkaXVzIGlzIGxhcmdlLCB0aGF0IHZhbHVlIGNhbiBiZWNvbWUgbmVnYXRpdmUuXG4gICAgLy8gVGhpcyBjYXVzZXMgdGhlIG91dGVyIGJvcmRlcnMgdG8gbG9zZSB0aGVpciByYWRpdXMgZW50aXJlbHksIHdoaWNoIGlzIHJhdGhlciB1bmV4cGVjdGVkLiBUbyBzb2x2ZSB0aGF0LCBpZiBib3JkZXJSYWRpdXMgPiBvdXRlclJhZGl1c1xuICAgIC8vIHdlIGtub3cgdGhhdCB0aGUgdGhpY2tuZXNzIHRlcm0gd2lsbCBkb21pbmF0ZSBhbmQgY29tcHV0ZSB0aGUgbGltaXRzIGF0IHRoYXQgcG9pbnRcbiAgICBjb25zdCBjb21wdXRlT3V0ZXJMaW1pdCA9ICh2YWwpPT57XG4gICAgICAgIGNvbnN0IG91dGVyQXJjTGltaXQgPSAob3V0ZXJSYWRpdXMgLSBNYXRoLm1pbihoYWxmVGhpY2tuZXNzLCB2YWwpKSAqIGFuZ2xlRGVsdGEgLyAyO1xuICAgICAgICByZXR1cm4gX2xpbWl0VmFsdWUodmFsLCAwLCBNYXRoLm1pbihoYWxmVGhpY2tuZXNzLCBvdXRlckFyY0xpbWl0KSk7XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICBvdXRlclN0YXJ0OiBjb21wdXRlT3V0ZXJMaW1pdChvLm91dGVyU3RhcnQpLFxuICAgICAgICBvdXRlckVuZDogY29tcHV0ZU91dGVyTGltaXQoby5vdXRlckVuZCksXG4gICAgICAgIGlubmVyU3RhcnQ6IF9saW1pdFZhbHVlKG8uaW5uZXJTdGFydCwgMCwgaW5uZXJMaW1pdCksXG4gICAgICAgIGlubmVyRW5kOiBfbGltaXRWYWx1ZShvLmlubmVyRW5kLCAwLCBpbm5lckxpbWl0KVxuICAgIH07XG59XG4vKipcbiAqIENvbnZlcnQgKHIsIPCdnIMpIHRvICh4LCB5KVxuICovIGZ1bmN0aW9uIHJUaGV0YVRvWFkociwgdGhldGEsIHgsIHkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiB4ICsgciAqIE1hdGguY29zKHRoZXRhKSxcbiAgICAgICAgeTogeSArIHIgKiBNYXRoLnNpbih0aGV0YSlcbiAgICB9O1xufVxuLyoqXG4gKiBQYXRoIHRoZSBhcmMsIHJlc3BlY3RpbmcgYm9yZGVyIHJhZGl1cyBieSBzZXBhcmF0aW5nIGludG8gbGVmdCBhbmQgcmlnaHQgaGFsdmVzLlxuICpcbiAqICAgU3RhcnQgICAgICBFbmRcbiAqXG4gKiAgICAxLS0tPmEtLS0+MiAgICBPdXRlclxuICogICAvICAgICAgICAgICBcXFxuICogICA4ICAgICAgICAgICAzXG4gKiAgIHwgICAgICAgICAgIHxcbiAqICAgfCAgICAgICAgICAgfFxuICogICA3ICAgICAgICAgICA0XG4gKiAgIFxcICAgICAgICAgICAvXG4gKiAgICA2PC0tLWI8LS0tNSAgICBJbm5lclxuICovIGZ1bmN0aW9uIHBhdGhBcmMoY3R4LCBlbGVtZW50LCBvZmZzZXQsIHNwYWNpbmcsIGVuZCwgY2lyY3VsYXIpIHtcbiAgICBjb25zdCB7IHggLCB5ICwgc3RhcnRBbmdsZTogc3RhcnQgLCBwaXhlbE1hcmdpbiAsIGlubmVyUmFkaXVzOiBpbm5lclIgIH0gPSBlbGVtZW50O1xuICAgIGNvbnN0IG91dGVyUmFkaXVzID0gTWF0aC5tYXgoZWxlbWVudC5vdXRlclJhZGl1cyArIHNwYWNpbmcgKyBvZmZzZXQgLSBwaXhlbE1hcmdpbiwgMCk7XG4gICAgY29uc3QgaW5uZXJSYWRpdXMgPSBpbm5lclIgPiAwID8gaW5uZXJSICsgc3BhY2luZyArIG9mZnNldCArIHBpeGVsTWFyZ2luIDogMDtcbiAgICBsZXQgc3BhY2luZ09mZnNldCA9IDA7XG4gICAgY29uc3QgYWxwaGEgPSBlbmQgLSBzdGFydDtcbiAgICBpZiAoc3BhY2luZykge1xuICAgICAgICAvLyBXaGVuIHNwYWNpbmcgaXMgcHJlc2VudCwgaXQgaXMgdGhlIHNhbWUgZm9yIGFsbCBpdGVtc1xuICAgICAgICAvLyBTbyB3ZSBhZGp1c3QgdGhlIHN0YXJ0IGFuZCBlbmQgYW5nbGUgb2YgdGhlIGFyYyBzdWNoIHRoYXRcbiAgICAgICAgLy8gdGhlIGRpc3RhbmNlIGlzIHRoZSBzYW1lIGFzIGl0IHdvdWxkIGJlIHdpdGhvdXQgdGhlIHNwYWNpbmdcbiAgICAgICAgY29uc3Qgbm9TcGFjaW5nSW5uZXJSYWRpdXMgPSBpbm5lclIgPiAwID8gaW5uZXJSIC0gc3BhY2luZyA6IDA7XG4gICAgICAgIGNvbnN0IG5vU3BhY2luZ091dGVyUmFkaXVzID0gb3V0ZXJSYWRpdXMgPiAwID8gb3V0ZXJSYWRpdXMgLSBzcGFjaW5nIDogMDtcbiAgICAgICAgY29uc3QgYXZOb2dTcGFjaW5nUmFkaXVzID0gKG5vU3BhY2luZ0lubmVyUmFkaXVzICsgbm9TcGFjaW5nT3V0ZXJSYWRpdXMpIC8gMjtcbiAgICAgICAgY29uc3QgYWRqdXN0ZWRBbmdsZSA9IGF2Tm9nU3BhY2luZ1JhZGl1cyAhPT0gMCA/IGFscGhhICogYXZOb2dTcGFjaW5nUmFkaXVzIC8gKGF2Tm9nU3BhY2luZ1JhZGl1cyArIHNwYWNpbmcpIDogYWxwaGE7XG4gICAgICAgIHNwYWNpbmdPZmZzZXQgPSAoYWxwaGEgLSBhZGp1c3RlZEFuZ2xlKSAvIDI7XG4gICAgfVxuICAgIGNvbnN0IGJldGEgPSBNYXRoLm1heCgwLjAwMSwgYWxwaGEgKiBvdXRlclJhZGl1cyAtIG9mZnNldCAvIFBJKSAvIG91dGVyUmFkaXVzO1xuICAgIGNvbnN0IGFuZ2xlT2Zmc2V0ID0gKGFscGhhIC0gYmV0YSkgLyAyO1xuICAgIGNvbnN0IHN0YXJ0QW5nbGUgPSBzdGFydCArIGFuZ2xlT2Zmc2V0ICsgc3BhY2luZ09mZnNldDtcbiAgICBjb25zdCBlbmRBbmdsZSA9IGVuZCAtIGFuZ2xlT2Zmc2V0IC0gc3BhY2luZ09mZnNldDtcbiAgICBjb25zdCB7IG91dGVyU3RhcnQgLCBvdXRlckVuZCAsIGlubmVyU3RhcnQgLCBpbm5lckVuZCAgfSA9IHBhcnNlQm9yZGVyUmFkaXVzJDEoZWxlbWVudCwgaW5uZXJSYWRpdXMsIG91dGVyUmFkaXVzLCBlbmRBbmdsZSAtIHN0YXJ0QW5nbGUpO1xuICAgIGNvbnN0IG91dGVyU3RhcnRBZGp1c3RlZFJhZGl1cyA9IG91dGVyUmFkaXVzIC0gb3V0ZXJTdGFydDtcbiAgICBjb25zdCBvdXRlckVuZEFkanVzdGVkUmFkaXVzID0gb3V0ZXJSYWRpdXMgLSBvdXRlckVuZDtcbiAgICBjb25zdCBvdXRlclN0YXJ0QWRqdXN0ZWRBbmdsZSA9IHN0YXJ0QW5nbGUgKyBvdXRlclN0YXJ0IC8gb3V0ZXJTdGFydEFkanVzdGVkUmFkaXVzO1xuICAgIGNvbnN0IG91dGVyRW5kQWRqdXN0ZWRBbmdsZSA9IGVuZEFuZ2xlIC0gb3V0ZXJFbmQgLyBvdXRlckVuZEFkanVzdGVkUmFkaXVzO1xuICAgIGNvbnN0IGlubmVyU3RhcnRBZGp1c3RlZFJhZGl1cyA9IGlubmVyUmFkaXVzICsgaW5uZXJTdGFydDtcbiAgICBjb25zdCBpbm5lckVuZEFkanVzdGVkUmFkaXVzID0gaW5uZXJSYWRpdXMgKyBpbm5lckVuZDtcbiAgICBjb25zdCBpbm5lclN0YXJ0QWRqdXN0ZWRBbmdsZSA9IHN0YXJ0QW5nbGUgKyBpbm5lclN0YXJ0IC8gaW5uZXJTdGFydEFkanVzdGVkUmFkaXVzO1xuICAgIGNvbnN0IGlubmVyRW5kQWRqdXN0ZWRBbmdsZSA9IGVuZEFuZ2xlIC0gaW5uZXJFbmQgLyBpbm5lckVuZEFkanVzdGVkUmFkaXVzO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBpZiAoY2lyY3VsYXIpIHtcbiAgICAgICAgLy8gVGhlIGZpcnN0IGFyYyBzZWdtZW50cyBmcm9tIHBvaW50IDEgdG8gcG9pbnQgYSB0byBwb2ludCAyXG4gICAgICAgIGNvbnN0IG91dGVyTWlkQWRqdXN0ZWRBbmdsZSA9IChvdXRlclN0YXJ0QWRqdXN0ZWRBbmdsZSArIG91dGVyRW5kQWRqdXN0ZWRBbmdsZSkgLyAyO1xuICAgICAgICBjdHguYXJjKHgsIHksIG91dGVyUmFkaXVzLCBvdXRlclN0YXJ0QWRqdXN0ZWRBbmdsZSwgb3V0ZXJNaWRBZGp1c3RlZEFuZ2xlKTtcbiAgICAgICAgY3R4LmFyYyh4LCB5LCBvdXRlclJhZGl1cywgb3V0ZXJNaWRBZGp1c3RlZEFuZ2xlLCBvdXRlckVuZEFkanVzdGVkQW5nbGUpO1xuICAgICAgICAvLyBUaGUgY29ybmVyIHNlZ21lbnQgZnJvbSBwb2ludCAyIHRvIHBvaW50IDNcbiAgICAgICAgaWYgKG91dGVyRW5kID4gMCkge1xuICAgICAgICAgICAgY29uc3QgcENlbnRlciA9IHJUaGV0YVRvWFkob3V0ZXJFbmRBZGp1c3RlZFJhZGl1cywgb3V0ZXJFbmRBZGp1c3RlZEFuZ2xlLCB4LCB5KTtcbiAgICAgICAgICAgIGN0eC5hcmMocENlbnRlci54LCBwQ2VudGVyLnksIG91dGVyRW5kLCBvdXRlckVuZEFkanVzdGVkQW5nbGUsIGVuZEFuZ2xlICsgSEFMRl9QSSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIGxpbmUgZnJvbSBwb2ludCAzIHRvIHBvaW50IDRcbiAgICAgICAgY29uc3QgcDQgPSByVGhldGFUb1hZKGlubmVyRW5kQWRqdXN0ZWRSYWRpdXMsIGVuZEFuZ2xlLCB4LCB5KTtcbiAgICAgICAgY3R4LmxpbmVUbyhwNC54LCBwNC55KTtcbiAgICAgICAgLy8gVGhlIGNvcm5lciBzZWdtZW50IGZyb20gcG9pbnQgNCB0byBwb2ludCA1XG4gICAgICAgIGlmIChpbm5lckVuZCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHBDZW50ZXIxID0gclRoZXRhVG9YWShpbm5lckVuZEFkanVzdGVkUmFkaXVzLCBpbm5lckVuZEFkanVzdGVkQW5nbGUsIHgsIHkpO1xuICAgICAgICAgICAgY3R4LmFyYyhwQ2VudGVyMS54LCBwQ2VudGVyMS55LCBpbm5lckVuZCwgZW5kQW5nbGUgKyBIQUxGX1BJLCBpbm5lckVuZEFkanVzdGVkQW5nbGUgKyBNYXRoLlBJKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgaW5uZXIgYXJjIGZyb20gcG9pbnQgNSB0byBwb2ludCBiIHRvIHBvaW50IDZcbiAgICAgICAgY29uc3QgaW5uZXJNaWRBZGp1c3RlZEFuZ2xlID0gKGVuZEFuZ2xlIC0gaW5uZXJFbmQgLyBpbm5lclJhZGl1cyArIChzdGFydEFuZ2xlICsgaW5uZXJTdGFydCAvIGlubmVyUmFkaXVzKSkgLyAyO1xuICAgICAgICBjdHguYXJjKHgsIHksIGlubmVyUmFkaXVzLCBlbmRBbmdsZSAtIGlubmVyRW5kIC8gaW5uZXJSYWRpdXMsIGlubmVyTWlkQWRqdXN0ZWRBbmdsZSwgdHJ1ZSk7XG4gICAgICAgIGN0eC5hcmMoeCwgeSwgaW5uZXJSYWRpdXMsIGlubmVyTWlkQWRqdXN0ZWRBbmdsZSwgc3RhcnRBbmdsZSArIGlubmVyU3RhcnQgLyBpbm5lclJhZGl1cywgdHJ1ZSk7XG4gICAgICAgIC8vIFRoZSBjb3JuZXIgc2VnbWVudCBmcm9tIHBvaW50IDYgdG8gcG9pbnQgN1xuICAgICAgICBpZiAoaW5uZXJTdGFydCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHBDZW50ZXIyID0gclRoZXRhVG9YWShpbm5lclN0YXJ0QWRqdXN0ZWRSYWRpdXMsIGlubmVyU3RhcnRBZGp1c3RlZEFuZ2xlLCB4LCB5KTtcbiAgICAgICAgICAgIGN0eC5hcmMocENlbnRlcjIueCwgcENlbnRlcjIueSwgaW5uZXJTdGFydCwgaW5uZXJTdGFydEFkanVzdGVkQW5nbGUgKyBNYXRoLlBJLCBzdGFydEFuZ2xlIC0gSEFMRl9QSSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIGxpbmUgZnJvbSBwb2ludCA3IHRvIHBvaW50IDhcbiAgICAgICAgY29uc3QgcDggPSByVGhldGFUb1hZKG91dGVyU3RhcnRBZGp1c3RlZFJhZGl1cywgc3RhcnRBbmdsZSwgeCwgeSk7XG4gICAgICAgIGN0eC5saW5lVG8ocDgueCwgcDgueSk7XG4gICAgICAgIC8vIFRoZSBjb3JuZXIgc2VnbWVudCBmcm9tIHBvaW50IDggdG8gcG9pbnQgMVxuICAgICAgICBpZiAob3V0ZXJTdGFydCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHBDZW50ZXIzID0gclRoZXRhVG9YWShvdXRlclN0YXJ0QWRqdXN0ZWRSYWRpdXMsIG91dGVyU3RhcnRBZGp1c3RlZEFuZ2xlLCB4LCB5KTtcbiAgICAgICAgICAgIGN0eC5hcmMocENlbnRlcjMueCwgcENlbnRlcjMueSwgb3V0ZXJTdGFydCwgc3RhcnRBbmdsZSAtIEhBTEZfUEksIG91dGVyU3RhcnRBZGp1c3RlZEFuZ2xlKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGN0eC5tb3ZlVG8oeCwgeSk7XG4gICAgICAgIGNvbnN0IG91dGVyU3RhcnRYID0gTWF0aC5jb3Mob3V0ZXJTdGFydEFkanVzdGVkQW5nbGUpICogb3V0ZXJSYWRpdXMgKyB4O1xuICAgICAgICBjb25zdCBvdXRlclN0YXJ0WSA9IE1hdGguc2luKG91dGVyU3RhcnRBZGp1c3RlZEFuZ2xlKSAqIG91dGVyUmFkaXVzICsgeTtcbiAgICAgICAgY3R4LmxpbmVUbyhvdXRlclN0YXJ0WCwgb3V0ZXJTdGFydFkpO1xuICAgICAgICBjb25zdCBvdXRlckVuZFggPSBNYXRoLmNvcyhvdXRlckVuZEFkanVzdGVkQW5nbGUpICogb3V0ZXJSYWRpdXMgKyB4O1xuICAgICAgICBjb25zdCBvdXRlckVuZFkgPSBNYXRoLnNpbihvdXRlckVuZEFkanVzdGVkQW5nbGUpICogb3V0ZXJSYWRpdXMgKyB5O1xuICAgICAgICBjdHgubGluZVRvKG91dGVyRW5kWCwgb3V0ZXJFbmRZKTtcbiAgICB9XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xufVxuZnVuY3Rpb24gZHJhd0FyYyhjdHgsIGVsZW1lbnQsIG9mZnNldCwgc3BhY2luZywgY2lyY3VsYXIpIHtcbiAgICBjb25zdCB7IGZ1bGxDaXJjbGVzICwgc3RhcnRBbmdsZSAsIGNpcmN1bWZlcmVuY2UgIH0gPSBlbGVtZW50O1xuICAgIGxldCBlbmRBbmdsZSA9IGVsZW1lbnQuZW5kQW5nbGU7XG4gICAgaWYgKGZ1bGxDaXJjbGVzKSB7XG4gICAgICAgIHBhdGhBcmMoY3R4LCBlbGVtZW50LCBvZmZzZXQsIHNwYWNpbmcsIGVuZEFuZ2xlLCBjaXJjdWxhcik7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBmdWxsQ2lyY2xlczsgKytpKXtcbiAgICAgICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc05hTihjaXJjdW1mZXJlbmNlKSkge1xuICAgICAgICAgICAgZW5kQW5nbGUgPSBzdGFydEFuZ2xlICsgKGNpcmN1bWZlcmVuY2UgJSBUQVUgfHwgVEFVKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwYXRoQXJjKGN0eCwgZWxlbWVudCwgb2Zmc2V0LCBzcGFjaW5nLCBlbmRBbmdsZSwgY2lyY3VsYXIpO1xuICAgIGN0eC5maWxsKCk7XG4gICAgcmV0dXJuIGVuZEFuZ2xlO1xufVxuZnVuY3Rpb24gZHJhd0JvcmRlcihjdHgsIGVsZW1lbnQsIG9mZnNldCwgc3BhY2luZywgY2lyY3VsYXIpIHtcbiAgICBjb25zdCB7IGZ1bGxDaXJjbGVzICwgc3RhcnRBbmdsZSAsIGNpcmN1bWZlcmVuY2UgLCBvcHRpb25zICB9ID0gZWxlbWVudDtcbiAgICBjb25zdCB7IGJvcmRlcldpZHRoICwgYm9yZGVySm9pblN0eWxlICB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBpbm5lciA9IG9wdGlvbnMuYm9yZGVyQWxpZ24gPT09ICdpbm5lcic7XG4gICAgaWYgKCFib3JkZXJXaWR0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpbm5lcikge1xuICAgICAgICBjdHgubGluZVdpZHRoID0gYm9yZGVyV2lkdGggKiAyO1xuICAgICAgICBjdHgubGluZUpvaW4gPSBib3JkZXJKb2luU3R5bGUgfHwgJ3JvdW5kJztcbiAgICB9IGVsc2Uge1xuICAgICAgICBjdHgubGluZVdpZHRoID0gYm9yZGVyV2lkdGg7XG4gICAgICAgIGN0eC5saW5lSm9pbiA9IGJvcmRlckpvaW5TdHlsZSB8fCAnYmV2ZWwnO1xuICAgIH1cbiAgICBsZXQgZW5kQW5nbGUgPSBlbGVtZW50LmVuZEFuZ2xlO1xuICAgIGlmIChmdWxsQ2lyY2xlcykge1xuICAgICAgICBwYXRoQXJjKGN0eCwgZWxlbWVudCwgb2Zmc2V0LCBzcGFjaW5nLCBlbmRBbmdsZSwgY2lyY3VsYXIpO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgZnVsbENpcmNsZXM7ICsraSl7XG4gICAgICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc05hTihjaXJjdW1mZXJlbmNlKSkge1xuICAgICAgICAgICAgZW5kQW5nbGUgPSBzdGFydEFuZ2xlICsgKGNpcmN1bWZlcmVuY2UgJSBUQVUgfHwgVEFVKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaW5uZXIpIHtcbiAgICAgICAgY2xpcEFyYyhjdHgsIGVsZW1lbnQsIGVuZEFuZ2xlKTtcbiAgICB9XG4gICAgaWYgKCFmdWxsQ2lyY2xlcykge1xuICAgICAgICBwYXRoQXJjKGN0eCwgZWxlbWVudCwgb2Zmc2V0LCBzcGFjaW5nLCBlbmRBbmdsZSwgY2lyY3VsYXIpO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgfVxufVxuY2xhc3MgQXJjRWxlbWVudCBleHRlbmRzIEVsZW1lbnQge1xuICAgIHN0YXRpYyBpZCA9ICdhcmMnO1xuICAgIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgYm9yZGVyQWxpZ246ICdjZW50ZXInLFxuICAgICAgICBib3JkZXJDb2xvcjogJyNmZmYnLFxuICAgICAgICBib3JkZXJKb2luU3R5bGU6IHVuZGVmaW5lZCxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAwLFxuICAgICAgICBib3JkZXJXaWR0aDogMixcbiAgICAgICAgb2Zmc2V0OiAwLFxuICAgICAgICBzcGFjaW5nOiAwLFxuICAgICAgICBhbmdsZTogdW5kZWZpbmVkLFxuICAgICAgICBjaXJjdWxhcjogdHJ1ZVxuICAgIH07XG4gICAgc3RhdGljIGRlZmF1bHRSb3V0ZXMgPSB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2JhY2tncm91bmRDb2xvcidcbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKGNmZyl7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jaXJjdW1mZXJlbmNlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnN0YXJ0QW5nbGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuZW5kQW5nbGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuaW5uZXJSYWRpdXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMub3V0ZXJSYWRpdXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucGl4ZWxNYXJnaW4gPSAwO1xuICAgICAgICB0aGlzLmZ1bGxDaXJjbGVzID0gMDtcbiAgICAgICAgaWYgKGNmZykge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjZmcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGluUmFuZ2UoY2hhcnRYLCBjaGFydFksIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgY29uc3QgcG9pbnQgPSB0aGlzLmdldFByb3BzKFtcbiAgICAgICAgICAgICd4JyxcbiAgICAgICAgICAgICd5J1xuICAgICAgICBdLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgY29uc3QgeyBhbmdsZSAsIGRpc3RhbmNlICB9ID0gZ2V0QW5nbGVGcm9tUG9pbnQocG9pbnQsIHtcbiAgICAgICAgICAgIHg6IGNoYXJ0WCxcbiAgICAgICAgICAgIHk6IGNoYXJ0WVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgeyBzdGFydEFuZ2xlICwgZW5kQW5nbGUgLCBpbm5lclJhZGl1cyAsIG91dGVyUmFkaXVzICwgY2lyY3VtZmVyZW5jZSAgfSA9IHRoaXMuZ2V0UHJvcHMoW1xuICAgICAgICAgICAgJ3N0YXJ0QW5nbGUnLFxuICAgICAgICAgICAgJ2VuZEFuZ2xlJyxcbiAgICAgICAgICAgICdpbm5lclJhZGl1cycsXG4gICAgICAgICAgICAnb3V0ZXJSYWRpdXMnLFxuICAgICAgICAgICAgJ2NpcmN1bWZlcmVuY2UnXG4gICAgICAgIF0sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICBjb25zdCByQWRqdXN0ID0gdGhpcy5vcHRpb25zLnNwYWNpbmcgLyAyO1xuICAgICAgICBjb25zdCBfY2lyY3VtZmVyZW5jZSA9IHZhbHVlT3JEZWZhdWx0KGNpcmN1bWZlcmVuY2UsIGVuZEFuZ2xlIC0gc3RhcnRBbmdsZSk7XG4gICAgICAgIGNvbnN0IGJldHdlZW5BbmdsZXMgPSBfY2lyY3VtZmVyZW5jZSA+PSBUQVUgfHwgX2FuZ2xlQmV0d2VlbihhbmdsZSwgc3RhcnRBbmdsZSwgZW5kQW5nbGUpO1xuICAgICAgICBjb25zdCB3aXRoaW5SYWRpdXMgPSBfaXNCZXR3ZWVuKGRpc3RhbmNlLCBpbm5lclJhZGl1cyArIHJBZGp1c3QsIG91dGVyUmFkaXVzICsgckFkanVzdCk7XG4gICAgICAgIHJldHVybiBiZXR3ZWVuQW5nbGVzICYmIHdpdGhpblJhZGl1cztcbiAgICB9XG4gICAgZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICBjb25zdCB7IHggLCB5ICwgc3RhcnRBbmdsZSAsIGVuZEFuZ2xlICwgaW5uZXJSYWRpdXMgLCBvdXRlclJhZGl1cyAgfSA9IHRoaXMuZ2V0UHJvcHMoW1xuICAgICAgICAgICAgJ3gnLFxuICAgICAgICAgICAgJ3knLFxuICAgICAgICAgICAgJ3N0YXJ0QW5nbGUnLFxuICAgICAgICAgICAgJ2VuZEFuZ2xlJyxcbiAgICAgICAgICAgICdpbm5lclJhZGl1cycsXG4gICAgICAgICAgICAnb3V0ZXJSYWRpdXMnXG4gICAgICAgIF0sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICBjb25zdCB7IG9mZnNldCAsIHNwYWNpbmcgIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGhhbGZBbmdsZSA9IChzdGFydEFuZ2xlICsgZW5kQW5nbGUpIC8gMjtcbiAgICAgICAgY29uc3QgaGFsZlJhZGl1cyA9IChpbm5lclJhZGl1cyArIG91dGVyUmFkaXVzICsgc3BhY2luZyArIG9mZnNldCkgLyAyO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogeCArIE1hdGguY29zKGhhbGZBbmdsZSkgKiBoYWxmUmFkaXVzLFxuICAgICAgICAgICAgeTogeSArIE1hdGguc2luKGhhbGZBbmdsZSkgKiBoYWxmUmFkaXVzXG4gICAgICAgIH07XG4gICAgfVxuICAgIHRvb2x0aXBQb3NpdGlvbih1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldENlbnRlclBvaW50KHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIH1cbiAgICBkcmF3KGN0eCkge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnMgLCBjaXJjdW1mZXJlbmNlICB9ID0gdGhpcztcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gKG9wdGlvbnMub2Zmc2V0IHx8IDApIC8gNDtcbiAgICAgICAgY29uc3Qgc3BhY2luZyA9IChvcHRpb25zLnNwYWNpbmcgfHwgMCkgLyAyO1xuICAgICAgICBjb25zdCBjaXJjdWxhciA9IG9wdGlvbnMuY2lyY3VsYXI7XG4gICAgICAgIHRoaXMucGl4ZWxNYXJnaW4gPSBvcHRpb25zLmJvcmRlckFsaWduID09PSAnaW5uZXInID8gMC4zMyA6IDA7XG4gICAgICAgIHRoaXMuZnVsbENpcmNsZXMgPSBjaXJjdW1mZXJlbmNlID4gVEFVID8gTWF0aC5mbG9vcihjaXJjdW1mZXJlbmNlIC8gVEFVKSA6IDA7XG4gICAgICAgIGlmIChjaXJjdW1mZXJlbmNlID09PSAwIHx8IHRoaXMuaW5uZXJSYWRpdXMgPCAwIHx8IHRoaXMub3V0ZXJSYWRpdXMgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgY29uc3QgaGFsZkFuZ2xlID0gKHRoaXMuc3RhcnRBbmdsZSArIHRoaXMuZW5kQW5nbGUpIC8gMjtcbiAgICAgICAgY3R4LnRyYW5zbGF0ZShNYXRoLmNvcyhoYWxmQW5nbGUpICogb2Zmc2V0LCBNYXRoLnNpbihoYWxmQW5nbGUpICogb2Zmc2V0KTtcbiAgICAgICAgY29uc3QgZml4ID0gMSAtIE1hdGguc2luKE1hdGgubWluKFBJLCBjaXJjdW1mZXJlbmNlIHx8IDApKTtcbiAgICAgICAgY29uc3QgcmFkaXVzT2Zmc2V0ID0gb2Zmc2V0ICogZml4O1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IG9wdGlvbnMuYm9yZGVyQ29sb3I7XG4gICAgICAgIGRyYXdBcmMoY3R4LCB0aGlzLCByYWRpdXNPZmZzZXQsIHNwYWNpbmcsIGNpcmN1bGFyKTtcbiAgICAgICAgZHJhd0JvcmRlcihjdHgsIHRoaXMsIHJhZGl1c09mZnNldCwgc3BhY2luZywgY2lyY3VsYXIpO1xuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc2V0U3R5bGUoY3R4LCBvcHRpb25zLCBzdHlsZSA9IG9wdGlvbnMpIHtcbiAgICBjdHgubGluZUNhcCA9IHZhbHVlT3JEZWZhdWx0KHN0eWxlLmJvcmRlckNhcFN0eWxlLCBvcHRpb25zLmJvcmRlckNhcFN0eWxlKTtcbiAgICBjdHguc2V0TGluZURhc2godmFsdWVPckRlZmF1bHQoc3R5bGUuYm9yZGVyRGFzaCwgb3B0aW9ucy5ib3JkZXJEYXNoKSk7XG4gICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gdmFsdWVPckRlZmF1bHQoc3R5bGUuYm9yZGVyRGFzaE9mZnNldCwgb3B0aW9ucy5ib3JkZXJEYXNoT2Zmc2V0KTtcbiAgICBjdHgubGluZUpvaW4gPSB2YWx1ZU9yRGVmYXVsdChzdHlsZS5ib3JkZXJKb2luU3R5bGUsIG9wdGlvbnMuYm9yZGVySm9pblN0eWxlKTtcbiAgICBjdHgubGluZVdpZHRoID0gdmFsdWVPckRlZmF1bHQoc3R5bGUuYm9yZGVyV2lkdGgsIG9wdGlvbnMuYm9yZGVyV2lkdGgpO1xuICAgIGN0eC5zdHJva2VTdHlsZSA9IHZhbHVlT3JEZWZhdWx0KHN0eWxlLmJvcmRlckNvbG9yLCBvcHRpb25zLmJvcmRlckNvbG9yKTtcbn1cbmZ1bmN0aW9uIGxpbmVUbyhjdHgsIHByZXZpb3VzLCB0YXJnZXQpIHtcbiAgICBjdHgubGluZVRvKHRhcmdldC54LCB0YXJnZXQueSk7XG59XG5mdW5jdGlvbiBnZXRMaW5lTWV0aG9kKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5zdGVwcGVkKSB7XG4gICAgICAgIHJldHVybiBfc3RlcHBlZExpbmVUbztcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMudGVuc2lvbiB8fCBvcHRpb25zLmN1YmljSW50ZXJwb2xhdGlvbk1vZGUgPT09ICdtb25vdG9uZScpIHtcbiAgICAgICAgcmV0dXJuIF9iZXppZXJDdXJ2ZVRvO1xuICAgIH1cbiAgICByZXR1cm4gbGluZVRvO1xufVxuZnVuY3Rpb24gcGF0aFZhcnMocG9pbnRzLCBzZWdtZW50LCBwYXJhbXMgPSB7fSkge1xuICAgIGNvbnN0IGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgICBjb25zdCB7IHN0YXJ0OiBwYXJhbXNTdGFydCA9IDAgLCBlbmQ6IHBhcmFtc0VuZCA9IGNvdW50IC0gMSAgfSA9IHBhcmFtcztcbiAgICBjb25zdCB7IHN0YXJ0OiBzZWdtZW50U3RhcnQgLCBlbmQ6IHNlZ21lbnRFbmQgIH0gPSBzZWdtZW50O1xuICAgIGNvbnN0IHN0YXJ0ID0gTWF0aC5tYXgocGFyYW1zU3RhcnQsIHNlZ21lbnRTdGFydCk7XG4gICAgY29uc3QgZW5kID0gTWF0aC5taW4ocGFyYW1zRW5kLCBzZWdtZW50RW5kKTtcbiAgICBjb25zdCBvdXRzaWRlID0gcGFyYW1zU3RhcnQgPCBzZWdtZW50U3RhcnQgJiYgcGFyYW1zRW5kIDwgc2VnbWVudFN0YXJ0IHx8IHBhcmFtc1N0YXJ0ID4gc2VnbWVudEVuZCAmJiBwYXJhbXNFbmQgPiBzZWdtZW50RW5kO1xuICAgIHJldHVybiB7XG4gICAgICAgIGNvdW50LFxuICAgICAgICBzdGFydCxcbiAgICAgICAgbG9vcDogc2VnbWVudC5sb29wLFxuICAgICAgICBpbGVuOiBlbmQgPCBzdGFydCAmJiAhb3V0c2lkZSA/IGNvdW50ICsgZW5kIC0gc3RhcnQgOiBlbmQgLSBzdGFydFxuICAgIH07XG59XG4gZnVuY3Rpb24gcGF0aFNlZ21lbnQoY3R4LCBsaW5lLCBzZWdtZW50LCBwYXJhbXMpIHtcbiAgICBjb25zdCB7IHBvaW50cyAsIG9wdGlvbnMgIH0gPSBsaW5lO1xuICAgIGNvbnN0IHsgY291bnQgLCBzdGFydCAsIGxvb3AgLCBpbGVuICB9ID0gcGF0aFZhcnMocG9pbnRzLCBzZWdtZW50LCBwYXJhbXMpO1xuICAgIGNvbnN0IGxpbmVNZXRob2QgPSBnZXRMaW5lTWV0aG9kKG9wdGlvbnMpO1xuICAgIGxldCB7IG1vdmUgPXRydWUgLCByZXZlcnNlICB9ID0gcGFyYW1zIHx8IHt9O1xuICAgIGxldCBpLCBwb2ludCwgcHJldjtcbiAgICBmb3IoaSA9IDA7IGkgPD0gaWxlbjsgKytpKXtcbiAgICAgICAgcG9pbnQgPSBwb2ludHNbKHN0YXJ0ICsgKHJldmVyc2UgPyBpbGVuIC0gaSA6IGkpKSAlIGNvdW50XTtcbiAgICAgICAgaWYgKHBvaW50LnNraXApIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2UgaWYgKG1vdmUpIHtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8ocG9pbnQueCwgcG9pbnQueSk7XG4gICAgICAgICAgICBtb3ZlID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsaW5lTWV0aG9kKGN0eCwgcHJldiwgcG9pbnQsIHJldmVyc2UsIG9wdGlvbnMuc3RlcHBlZCk7XG4gICAgICAgIH1cbiAgICAgICAgcHJldiA9IHBvaW50O1xuICAgIH1cbiAgICBpZiAobG9vcCkge1xuICAgICAgICBwb2ludCA9IHBvaW50c1soc3RhcnQgKyAocmV2ZXJzZSA/IGlsZW4gOiAwKSkgJSBjb3VudF07XG4gICAgICAgIGxpbmVNZXRob2QoY3R4LCBwcmV2LCBwb2ludCwgcmV2ZXJzZSwgb3B0aW9ucy5zdGVwcGVkKTtcbiAgICB9XG4gICAgcmV0dXJuICEhbG9vcDtcbn1cbiBmdW5jdGlvbiBmYXN0UGF0aFNlZ21lbnQoY3R4LCBsaW5lLCBzZWdtZW50LCBwYXJhbXMpIHtcbiAgICBjb25zdCBwb2ludHMgPSBsaW5lLnBvaW50cztcbiAgICBjb25zdCB7IGNvdW50ICwgc3RhcnQgLCBpbGVuICB9ID0gcGF0aFZhcnMocG9pbnRzLCBzZWdtZW50LCBwYXJhbXMpO1xuICAgIGNvbnN0IHsgbW92ZSA9dHJ1ZSAsIHJldmVyc2UgIH0gPSBwYXJhbXMgfHwge307XG4gICAgbGV0IGF2Z1ggPSAwO1xuICAgIGxldCBjb3VudFggPSAwO1xuICAgIGxldCBpLCBwb2ludCwgcHJldlgsIG1pblksIG1heFksIGxhc3RZO1xuICAgIGNvbnN0IHBvaW50SW5kZXggPSAoaW5kZXgpPT4oc3RhcnQgKyAocmV2ZXJzZSA/IGlsZW4gLSBpbmRleCA6IGluZGV4KSkgJSBjb3VudDtcbiAgICBjb25zdCBkcmF3WCA9ICgpPT57XG4gICAgICAgIGlmIChtaW5ZICE9PSBtYXhZKSB7XG4gICAgICAgICAgICBjdHgubGluZVRvKGF2Z1gsIG1heFkpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyhhdmdYLCBtaW5ZKTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oYXZnWCwgbGFzdFkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBpZiAobW92ZSkge1xuICAgICAgICBwb2ludCA9IHBvaW50c1twb2ludEluZGV4KDApXTtcbiAgICAgICAgY3R4Lm1vdmVUbyhwb2ludC54LCBwb2ludC55KTtcbiAgICB9XG4gICAgZm9yKGkgPSAwOyBpIDw9IGlsZW47ICsraSl7XG4gICAgICAgIHBvaW50ID0gcG9pbnRzW3BvaW50SW5kZXgoaSldO1xuICAgICAgICBpZiAocG9pbnQuc2tpcCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeCA9IHBvaW50Lng7XG4gICAgICAgIGNvbnN0IHkgPSBwb2ludC55O1xuICAgICAgICBjb25zdCB0cnVuY1ggPSB4IHwgMDtcbiAgICAgICAgaWYgKHRydW5jWCA9PT0gcHJldlgpIHtcbiAgICAgICAgICAgIGlmICh5IDwgbWluWSkge1xuICAgICAgICAgICAgICAgIG1pblkgPSB5O1xuICAgICAgICAgICAgfSBlbHNlIGlmICh5ID4gbWF4WSkge1xuICAgICAgICAgICAgICAgIG1heFkgPSB5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXZnWCA9IChjb3VudFggKiBhdmdYICsgeCkgLyArK2NvdW50WDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRyYXdYKCk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHgsIHkpO1xuICAgICAgICAgICAgcHJldlggPSB0cnVuY1g7XG4gICAgICAgICAgICBjb3VudFggPSAwO1xuICAgICAgICAgICAgbWluWSA9IG1heFkgPSB5O1xuICAgICAgICB9XG4gICAgICAgIGxhc3RZID0geTtcbiAgICB9XG4gICAgZHJhd1goKTtcbn1cbiBmdW5jdGlvbiBfZ2V0U2VnbWVudE1ldGhvZChsaW5lKSB7XG4gICAgY29uc3Qgb3B0cyA9IGxpbmUub3B0aW9ucztcbiAgICBjb25zdCBib3JkZXJEYXNoID0gb3B0cy5ib3JkZXJEYXNoICYmIG9wdHMuYm9yZGVyRGFzaC5sZW5ndGg7XG4gICAgY29uc3QgdXNlRmFzdFBhdGggPSAhbGluZS5fZGVjaW1hdGVkICYmICFsaW5lLl9sb29wICYmICFvcHRzLnRlbnNpb24gJiYgb3B0cy5jdWJpY0ludGVycG9sYXRpb25Nb2RlICE9PSAnbW9ub3RvbmUnICYmICFvcHRzLnN0ZXBwZWQgJiYgIWJvcmRlckRhc2g7XG4gICAgcmV0dXJuIHVzZUZhc3RQYXRoID8gZmFzdFBhdGhTZWdtZW50IDogcGF0aFNlZ21lbnQ7XG59XG4gZnVuY3Rpb24gX2dldEludGVycG9sYXRpb25NZXRob2Qob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLnN0ZXBwZWQpIHtcbiAgICAgICAgcmV0dXJuIF9zdGVwcGVkSW50ZXJwb2xhdGlvbjtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMudGVuc2lvbiB8fCBvcHRpb25zLmN1YmljSW50ZXJwb2xhdGlvbk1vZGUgPT09ICdtb25vdG9uZScpIHtcbiAgICAgICAgcmV0dXJuIF9iZXppZXJJbnRlcnBvbGF0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gX3BvaW50SW5MaW5lO1xufVxuZnVuY3Rpb24gc3Ryb2tlUGF0aFdpdGhDYWNoZShjdHgsIGxpbmUsIHN0YXJ0LCBjb3VudCkge1xuICAgIGxldCBwYXRoID0gbGluZS5fcGF0aDtcbiAgICBpZiAoIXBhdGgpIHtcbiAgICAgICAgcGF0aCA9IGxpbmUuX3BhdGggPSBuZXcgUGF0aDJEKCk7XG4gICAgICAgIGlmIChsaW5lLnBhdGgocGF0aCwgc3RhcnQsIGNvdW50KSkge1xuICAgICAgICAgICAgcGF0aC5jbG9zZVBhdGgoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXRTdHlsZShjdHgsIGxpbmUub3B0aW9ucyk7XG4gICAgY3R4LnN0cm9rZShwYXRoKTtcbn1cbmZ1bmN0aW9uIHN0cm9rZVBhdGhEaXJlY3QoY3R4LCBsaW5lLCBzdGFydCwgY291bnQpIHtcbiAgICBjb25zdCB7IHNlZ21lbnRzICwgb3B0aW9ucyAgfSA9IGxpbmU7XG4gICAgY29uc3Qgc2VnbWVudE1ldGhvZCA9IF9nZXRTZWdtZW50TWV0aG9kKGxpbmUpO1xuICAgIGZvciAoY29uc3Qgc2VnbWVudCBvZiBzZWdtZW50cyl7XG4gICAgICAgIHNldFN0eWxlKGN0eCwgb3B0aW9ucywgc2VnbWVudC5zdHlsZSk7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgaWYgKHNlZ21lbnRNZXRob2QoY3R4LCBsaW5lLCBzZWdtZW50LCB7XG4gICAgICAgICAgICBzdGFydCxcbiAgICAgICAgICAgIGVuZDogc3RhcnQgKyBjb3VudCAtIDFcbiAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgfVxuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgfVxufVxuY29uc3QgdXNlUGF0aDJEID0gdHlwZW9mIFBhdGgyRCA9PT0gJ2Z1bmN0aW9uJztcbmZ1bmN0aW9uIGRyYXcoY3R4LCBsaW5lLCBzdGFydCwgY291bnQpIHtcbiAgICBpZiAodXNlUGF0aDJEICYmICFsaW5lLm9wdGlvbnMuc2VnbWVudCkge1xuICAgICAgICBzdHJva2VQYXRoV2l0aENhY2hlKGN0eCwgbGluZSwgc3RhcnQsIGNvdW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzdHJva2VQYXRoRGlyZWN0KGN0eCwgbGluZSwgc3RhcnQsIGNvdW50KTtcbiAgICB9XG59XG5jbGFzcyBMaW5lRWxlbWVudCBleHRlbmRzIEVsZW1lbnQge1xuICAgIHN0YXRpYyBpZCA9ICdsaW5lJztcbiBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gICAgICAgIGJvcmRlckNhcFN0eWxlOiAnYnV0dCcsXG4gICAgICAgIGJvcmRlckRhc2g6IFtdLFxuICAgICAgICBib3JkZXJEYXNoT2Zmc2V0OiAwLFxuICAgICAgICBib3JkZXJKb2luU3R5bGU6ICdtaXRlcicsXG4gICAgICAgIGJvcmRlcldpZHRoOiAzLFxuICAgICAgICBjYXBCZXppZXJQb2ludHM6IHRydWUsXG4gICAgICAgIGN1YmljSW50ZXJwb2xhdGlvbk1vZGU6ICdkZWZhdWx0JyxcbiAgICAgICAgZmlsbDogZmFsc2UsXG4gICAgICAgIHNwYW5HYXBzOiBmYWxzZSxcbiAgICAgICAgc3RlcHBlZDogZmFsc2UsXG4gICAgICAgIHRlbnNpb246IDBcbiAgICB9O1xuIHN0YXRpYyBkZWZhdWx0Um91dGVzID0ge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdiYWNrZ3JvdW5kQ29sb3InLFxuICAgICAgICBib3JkZXJDb2xvcjogJ2JvcmRlckNvbG9yJ1xuICAgIH07XG4gICAgc3RhdGljIGRlc2NyaXB0b3JzID0ge1xuICAgICAgICBfc2NyaXB0YWJsZTogdHJ1ZSxcbiAgICAgICAgX2luZGV4YWJsZTogKG5hbWUpPT5uYW1lICE9PSAnYm9yZGVyRGFzaCcgJiYgbmFtZSAhPT0gJ2ZpbGwnXG4gICAgfTtcbiAgICBjb25zdHJ1Y3RvcihjZmcpe1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmFuaW1hdGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9jaGFydCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fbG9vcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fZnVsbExvb3AgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3BhdGggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3BvaW50cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fc2VnbWVudHMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2RlY2ltYXRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wb2ludHNVcGRhdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2RhdGFzZXRJbmRleCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGNmZykge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjZmcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZUNvbnRyb2xQb2ludHMoY2hhcnRBcmVhLCBpbmRleEF4aXMpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgaWYgKChvcHRpb25zLnRlbnNpb24gfHwgb3B0aW9ucy5jdWJpY0ludGVycG9sYXRpb25Nb2RlID09PSAnbW9ub3RvbmUnKSAmJiAhb3B0aW9ucy5zdGVwcGVkICYmICF0aGlzLl9wb2ludHNVcGRhdGVkKSB7XG4gICAgICAgICAgICBjb25zdCBsb29wID0gb3B0aW9ucy5zcGFuR2FwcyA/IHRoaXMuX2xvb3AgOiB0aGlzLl9mdWxsTG9vcDtcbiAgICAgICAgICAgIF91cGRhdGVCZXppZXJDb250cm9sUG9pbnRzKHRoaXMuX3BvaW50cywgb3B0aW9ucywgY2hhcnRBcmVhLCBsb29wLCBpbmRleEF4aXMpO1xuICAgICAgICAgICAgdGhpcy5fcG9pbnRzVXBkYXRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0IHBvaW50cyhwb2ludHMpIHtcbiAgICAgICAgdGhpcy5fcG9pbnRzID0gcG9pbnRzO1xuICAgICAgICBkZWxldGUgdGhpcy5fc2VnbWVudHM7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9wYXRoO1xuICAgICAgICB0aGlzLl9wb2ludHNVcGRhdGVkID0gZmFsc2U7XG4gICAgfVxuICAgIGdldCBwb2ludHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wb2ludHM7XG4gICAgfVxuICAgIGdldCBzZWdtZW50cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlZ21lbnRzIHx8ICh0aGlzLl9zZWdtZW50cyA9IF9jb21wdXRlU2VnbWVudHModGhpcywgdGhpcy5vcHRpb25zLnNlZ21lbnQpKTtcbiAgICB9XG4gZmlyc3QoKSB7XG4gICAgICAgIGNvbnN0IHNlZ21lbnRzID0gdGhpcy5zZWdtZW50cztcbiAgICAgICAgY29uc3QgcG9pbnRzID0gdGhpcy5wb2ludHM7XG4gICAgICAgIHJldHVybiBzZWdtZW50cy5sZW5ndGggJiYgcG9pbnRzW3NlZ21lbnRzWzBdLnN0YXJ0XTtcbiAgICB9XG4gbGFzdCgpIHtcbiAgICAgICAgY29uc3Qgc2VnbWVudHMgPSB0aGlzLnNlZ21lbnRzO1xuICAgICAgICBjb25zdCBwb2ludHMgPSB0aGlzLnBvaW50cztcbiAgICAgICAgY29uc3QgY291bnQgPSBzZWdtZW50cy5sZW5ndGg7XG4gICAgICAgIHJldHVybiBjb3VudCAmJiBwb2ludHNbc2VnbWVudHNbY291bnQgLSAxXS5lbmRdO1xuICAgIH1cbiBpbnRlcnBvbGF0ZShwb2ludCwgcHJvcGVydHkpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgdmFsdWUgPSBwb2ludFtwcm9wZXJ0eV07XG4gICAgICAgIGNvbnN0IHBvaW50cyA9IHRoaXMucG9pbnRzO1xuICAgICAgICBjb25zdCBzZWdtZW50cyA9IF9ib3VuZFNlZ21lbnRzKHRoaXMsIHtcbiAgICAgICAgICAgIHByb3BlcnR5LFxuICAgICAgICAgICAgc3RhcnQ6IHZhbHVlLFxuICAgICAgICAgICAgZW5kOiB2YWx1ZVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFzZWdtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgY29uc3QgX2ludGVycG9sYXRlID0gX2dldEludGVycG9sYXRpb25NZXRob2Qob3B0aW9ucyk7XG4gICAgICAgIGxldCBpLCBpbGVuO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBzZWdtZW50cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgY29uc3QgeyBzdGFydCAsIGVuZCAgfSA9IHNlZ21lbnRzW2ldO1xuICAgICAgICAgICAgY29uc3QgcDEgPSBwb2ludHNbc3RhcnRdO1xuICAgICAgICAgICAgY29uc3QgcDIgPSBwb2ludHNbZW5kXTtcbiAgICAgICAgICAgIGlmIChwMSA9PT0gcDIpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChwMSk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB0ID0gTWF0aC5hYnMoKHZhbHVlIC0gcDFbcHJvcGVydHldKSAvIChwMltwcm9wZXJ0eV0gLSBwMVtwcm9wZXJ0eV0pKTtcbiAgICAgICAgICAgIGNvbnN0IGludGVycG9sYXRlZCA9IF9pbnRlcnBvbGF0ZShwMSwgcDIsIHQsIG9wdGlvbnMuc3RlcHBlZCk7XG4gICAgICAgICAgICBpbnRlcnBvbGF0ZWRbcHJvcGVydHldID0gcG9pbnRbcHJvcGVydHldO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goaW50ZXJwb2xhdGVkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA9PT0gMSA/IHJlc3VsdFswXSA6IHJlc3VsdDtcbiAgICB9XG4gcGF0aFNlZ21lbnQoY3R4LCBzZWdtZW50LCBwYXJhbXMpIHtcbiAgICAgICAgY29uc3Qgc2VnbWVudE1ldGhvZCA9IF9nZXRTZWdtZW50TWV0aG9kKHRoaXMpO1xuICAgICAgICByZXR1cm4gc2VnbWVudE1ldGhvZChjdHgsIHRoaXMsIHNlZ21lbnQsIHBhcmFtcyk7XG4gICAgfVxuIHBhdGgoY3R4LCBzdGFydCwgY291bnQpIHtcbiAgICAgICAgY29uc3Qgc2VnbWVudHMgPSB0aGlzLnNlZ21lbnRzO1xuICAgICAgICBjb25zdCBzZWdtZW50TWV0aG9kID0gX2dldFNlZ21lbnRNZXRob2QodGhpcyk7XG4gICAgICAgIGxldCBsb29wID0gdGhpcy5fbG9vcDtcbiAgICAgICAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICAgICAgICBjb3VudCA9IGNvdW50IHx8IHRoaXMucG9pbnRzLmxlbmd0aCAtIHN0YXJ0O1xuICAgICAgICBmb3IgKGNvbnN0IHNlZ21lbnQgb2Ygc2VnbWVudHMpe1xuICAgICAgICAgICAgbG9vcCAmPSBzZWdtZW50TWV0aG9kKGN0eCwgdGhpcywgc2VnbWVudCwge1xuICAgICAgICAgICAgICAgIHN0YXJ0LFxuICAgICAgICAgICAgICAgIGVuZDogc3RhcnQgKyBjb3VudCAtIDFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhIWxvb3A7XG4gICAgfVxuIGRyYXcoY3R4LCBjaGFydEFyZWEsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zIHx8IHt9O1xuICAgICAgICBjb25zdCBwb2ludHMgPSB0aGlzLnBvaW50cyB8fCBbXTtcbiAgICAgICAgaWYgKHBvaW50cy5sZW5ndGggJiYgb3B0aW9ucy5ib3JkZXJXaWR0aCkge1xuICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgIGRyYXcoY3R4LCB0aGlzLCBzdGFydCwgY291bnQpO1xuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5hbmltYXRlZCkge1xuICAgICAgICAgICAgdGhpcy5fcG9pbnRzVXBkYXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5fcGF0aCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gaW5SYW5nZSQxKGVsLCBwb3MsIGF4aXMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBjb25zdCBvcHRpb25zID0gZWwub3B0aW9ucztcbiAgICBjb25zdCB7IFtheGlzXTogdmFsdWUgIH0gPSBlbC5nZXRQcm9wcyhbXG4gICAgICAgIGF4aXNcbiAgICBdLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICByZXR1cm4gTWF0aC5hYnMocG9zIC0gdmFsdWUpIDwgb3B0aW9ucy5yYWRpdXMgKyBvcHRpb25zLmhpdFJhZGl1cztcbn1cbmNsYXNzIFBvaW50RWxlbWVudCBleHRlbmRzIEVsZW1lbnQge1xuICAgIHN0YXRpYyBpZCA9ICdwb2ludCc7XG4gICAgLyoqXG4gICAqIEB0eXBlIHthbnl9XG4gICAqLyBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gICAgICAgIGJvcmRlcldpZHRoOiAxLFxuICAgICAgICBoaXRSYWRpdXM6IDEsXG4gICAgICAgIGhvdmVyQm9yZGVyV2lkdGg6IDEsXG4gICAgICAgIGhvdmVyUmFkaXVzOiA0LFxuICAgICAgICBwb2ludFN0eWxlOiAnY2lyY2xlJyxcbiAgICAgICAgcmFkaXVzOiAzLFxuICAgICAgICByb3RhdGlvbjogMFxuICAgIH07XG4gICAgLyoqXG4gICAqIEB0eXBlIHthbnl9XG4gICAqLyBzdGF0aWMgZGVmYXVsdFJvdXRlcyA9IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnYmFja2dyb3VuZENvbG9yJyxcbiAgICAgICAgYm9yZGVyQ29sb3I6ICdib3JkZXJDb2xvcidcbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKGNmZyl7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5wYXJzZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuc2tpcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5zdG9wID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoY2ZnKSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGNmZyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaW5SYW5nZShtb3VzZVgsIG1vdXNlWSwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB7IHggLCB5ICB9ID0gdGhpcy5nZXRQcm9wcyhbXG4gICAgICAgICAgICAneCcsXG4gICAgICAgICAgICAneSdcbiAgICAgICAgXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIHJldHVybiBNYXRoLnBvdyhtb3VzZVggLSB4LCAyKSArIE1hdGgucG93KG1vdXNlWSAtIHksIDIpIDwgTWF0aC5wb3cob3B0aW9ucy5oaXRSYWRpdXMgKyBvcHRpb25zLnJhZGl1cywgMik7XG4gICAgfVxuICAgIGluWFJhbmdlKG1vdXNlWCwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gaW5SYW5nZSQxKHRoaXMsIG1vdXNlWCwgJ3gnLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICB9XG4gICAgaW5ZUmFuZ2UobW91c2VZLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiBpblJhbmdlJDEodGhpcywgbW91c2VZLCAneScsIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIH1cbiAgICBnZXRDZW50ZXJQb2ludCh1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgIGNvbnN0IHsgeCAsIHkgIH0gPSB0aGlzLmdldFByb3BzKFtcbiAgICAgICAgICAgICd4JyxcbiAgICAgICAgICAgICd5J1xuICAgICAgICBdLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHgsXG4gICAgICAgICAgICB5XG4gICAgICAgIH07XG4gICAgfVxuICAgIHNpemUob3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB0aGlzLm9wdGlvbnMgfHwge307XG4gICAgICAgIGxldCByYWRpdXMgPSBvcHRpb25zLnJhZGl1cyB8fCAwO1xuICAgICAgICByYWRpdXMgPSBNYXRoLm1heChyYWRpdXMsIHJhZGl1cyAmJiBvcHRpb25zLmhvdmVyUmFkaXVzIHx8IDApO1xuICAgICAgICBjb25zdCBib3JkZXJXaWR0aCA9IHJhZGl1cyAmJiBvcHRpb25zLmJvcmRlcldpZHRoIHx8IDA7XG4gICAgICAgIHJldHVybiAocmFkaXVzICsgYm9yZGVyV2lkdGgpICogMjtcbiAgICB9XG4gICAgZHJhdyhjdHgsIGFyZWEpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgaWYgKHRoaXMuc2tpcCB8fCBvcHRpb25zLnJhZGl1cyA8IDAuMSB8fCAhX2lzUG9pbnRJbkFyZWEodGhpcywgYXJlYSwgdGhpcy5zaXplKG9wdGlvbnMpIC8gMikpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBvcHRpb25zLmJvcmRlckNvbG9yO1xuICAgICAgICBjdHgubGluZVdpZHRoID0gb3B0aW9ucy5ib3JkZXJXaWR0aDtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yO1xuICAgICAgICBkcmF3UG9pbnQoY3R4LCBvcHRpb25zLCB0aGlzLngsIHRoaXMueSk7XG4gICAgfVxuICAgIGdldFJhbmdlKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zIHx8IHt9O1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIEZhbGxiYWNrcyBzaG91bGQgbmV2ZXIgYmUgaGl0IGluIHByYWN0aWNlXG4gICAgICAgIHJldHVybiBvcHRpb25zLnJhZGl1cyArIG9wdGlvbnMuaGl0UmFkaXVzO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0QmFyQm91bmRzKGJhciwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIGNvbnN0IHsgeCAsIHkgLCBiYXNlICwgd2lkdGggLCBoZWlnaHQgIH0gPSAgYmFyLmdldFByb3BzKFtcbiAgICAgICAgJ3gnLFxuICAgICAgICAneScsXG4gICAgICAgICdiYXNlJyxcbiAgICAgICAgJ3dpZHRoJyxcbiAgICAgICAgJ2hlaWdodCdcbiAgICBdLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICBsZXQgbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCBoYWxmO1xuICAgIGlmIChiYXIuaG9yaXpvbnRhbCkge1xuICAgICAgICBoYWxmID0gaGVpZ2h0IC8gMjtcbiAgICAgICAgbGVmdCA9IE1hdGgubWluKHgsIGJhc2UpO1xuICAgICAgICByaWdodCA9IE1hdGgubWF4KHgsIGJhc2UpO1xuICAgICAgICB0b3AgPSB5IC0gaGFsZjtcbiAgICAgICAgYm90dG9tID0geSArIGhhbGY7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaGFsZiA9IHdpZHRoIC8gMjtcbiAgICAgICAgbGVmdCA9IHggLSBoYWxmO1xuICAgICAgICByaWdodCA9IHggKyBoYWxmO1xuICAgICAgICB0b3AgPSBNYXRoLm1pbih5LCBiYXNlKTtcbiAgICAgICAgYm90dG9tID0gTWF0aC5tYXgoeSwgYmFzZSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQsXG4gICAgICAgIHRvcCxcbiAgICAgICAgcmlnaHQsXG4gICAgICAgIGJvdHRvbVxuICAgIH07XG59XG5mdW5jdGlvbiBza2lwT3JMaW1pdChza2lwLCB2YWx1ZSwgbWluLCBtYXgpIHtcbiAgICByZXR1cm4gc2tpcCA/IDAgOiBfbGltaXRWYWx1ZSh2YWx1ZSwgbWluLCBtYXgpO1xufVxuZnVuY3Rpb24gcGFyc2VCb3JkZXJXaWR0aChiYXIsIG1heFcsIG1heEgpIHtcbiAgICBjb25zdCB2YWx1ZSA9IGJhci5vcHRpb25zLmJvcmRlcldpZHRoO1xuICAgIGNvbnN0IHNraXAgPSBiYXIuYm9yZGVyU2tpcHBlZDtcbiAgICBjb25zdCBvID0gdG9UUkJMKHZhbHVlKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0OiBza2lwT3JMaW1pdChza2lwLnRvcCwgby50b3AsIDAsIG1heEgpLFxuICAgICAgICByOiBza2lwT3JMaW1pdChza2lwLnJpZ2h0LCBvLnJpZ2h0LCAwLCBtYXhXKSxcbiAgICAgICAgYjogc2tpcE9yTGltaXQoc2tpcC5ib3R0b20sIG8uYm90dG9tLCAwLCBtYXhIKSxcbiAgICAgICAgbDogc2tpcE9yTGltaXQoc2tpcC5sZWZ0LCBvLmxlZnQsIDAsIG1heFcpXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHBhcnNlQm9yZGVyUmFkaXVzKGJhciwgbWF4VywgbWF4SCkge1xuICAgIGNvbnN0IHsgZW5hYmxlQm9yZGVyUmFkaXVzICB9ID0gYmFyLmdldFByb3BzKFtcbiAgICAgICAgJ2VuYWJsZUJvcmRlclJhZGl1cydcbiAgICBdKTtcbiAgICBjb25zdCB2YWx1ZSA9IGJhci5vcHRpb25zLmJvcmRlclJhZGl1cztcbiAgICBjb25zdCBvID0gdG9UUkJMQ29ybmVycyh2YWx1ZSk7XG4gICAgY29uc3QgbWF4UiA9IE1hdGgubWluKG1heFcsIG1heEgpO1xuICAgIGNvbnN0IHNraXAgPSBiYXIuYm9yZGVyU2tpcHBlZDtcbiAgICBjb25zdCBlbmFibGVCb3JkZXIgPSBlbmFibGVCb3JkZXJSYWRpdXMgfHwgaXNPYmplY3QodmFsdWUpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHRvcExlZnQ6IHNraXBPckxpbWl0KCFlbmFibGVCb3JkZXIgfHwgc2tpcC50b3AgfHwgc2tpcC5sZWZ0LCBvLnRvcExlZnQsIDAsIG1heFIpLFxuICAgICAgICB0b3BSaWdodDogc2tpcE9yTGltaXQoIWVuYWJsZUJvcmRlciB8fCBza2lwLnRvcCB8fCBza2lwLnJpZ2h0LCBvLnRvcFJpZ2h0LCAwLCBtYXhSKSxcbiAgICAgICAgYm90dG9tTGVmdDogc2tpcE9yTGltaXQoIWVuYWJsZUJvcmRlciB8fCBza2lwLmJvdHRvbSB8fCBza2lwLmxlZnQsIG8uYm90dG9tTGVmdCwgMCwgbWF4UiksXG4gICAgICAgIGJvdHRvbVJpZ2h0OiBza2lwT3JMaW1pdCghZW5hYmxlQm9yZGVyIHx8IHNraXAuYm90dG9tIHx8IHNraXAucmlnaHQsIG8uYm90dG9tUmlnaHQsIDAsIG1heFIpXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGJvdW5kaW5nUmVjdHMoYmFyKSB7XG4gICAgY29uc3QgYm91bmRzID0gZ2V0QmFyQm91bmRzKGJhcik7XG4gICAgY29uc3Qgd2lkdGggPSBib3VuZHMucmlnaHQgLSBib3VuZHMubGVmdDtcbiAgICBjb25zdCBoZWlnaHQgPSBib3VuZHMuYm90dG9tIC0gYm91bmRzLnRvcDtcbiAgICBjb25zdCBib3JkZXIgPSBwYXJzZUJvcmRlcldpZHRoKGJhciwgd2lkdGggLyAyLCBoZWlnaHQgLyAyKTtcbiAgICBjb25zdCByYWRpdXMgPSBwYXJzZUJvcmRlclJhZGl1cyhiYXIsIHdpZHRoIC8gMiwgaGVpZ2h0IC8gMik7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgb3V0ZXI6IHtcbiAgICAgICAgICAgIHg6IGJvdW5kcy5sZWZ0LFxuICAgICAgICAgICAgeTogYm91bmRzLnRvcCxcbiAgICAgICAgICAgIHc6IHdpZHRoLFxuICAgICAgICAgICAgaDogaGVpZ2h0LFxuICAgICAgICAgICAgcmFkaXVzXG4gICAgICAgIH0sXG4gICAgICAgIGlubmVyOiB7XG4gICAgICAgICAgICB4OiBib3VuZHMubGVmdCArIGJvcmRlci5sLFxuICAgICAgICAgICAgeTogYm91bmRzLnRvcCArIGJvcmRlci50LFxuICAgICAgICAgICAgdzogd2lkdGggLSBib3JkZXIubCAtIGJvcmRlci5yLFxuICAgICAgICAgICAgaDogaGVpZ2h0IC0gYm9yZGVyLnQgLSBib3JkZXIuYixcbiAgICAgICAgICAgIHJhZGl1czoge1xuICAgICAgICAgICAgICAgIHRvcExlZnQ6IE1hdGgubWF4KDAsIHJhZGl1cy50b3BMZWZ0IC0gTWF0aC5tYXgoYm9yZGVyLnQsIGJvcmRlci5sKSksXG4gICAgICAgICAgICAgICAgdG9wUmlnaHQ6IE1hdGgubWF4KDAsIHJhZGl1cy50b3BSaWdodCAtIE1hdGgubWF4KGJvcmRlci50LCBib3JkZXIucikpLFxuICAgICAgICAgICAgICAgIGJvdHRvbUxlZnQ6IE1hdGgubWF4KDAsIHJhZGl1cy5ib3R0b21MZWZ0IC0gTWF0aC5tYXgoYm9yZGVyLmIsIGJvcmRlci5sKSksXG4gICAgICAgICAgICAgICAgYm90dG9tUmlnaHQ6IE1hdGgubWF4KDAsIHJhZGl1cy5ib3R0b21SaWdodCAtIE1hdGgubWF4KGJvcmRlci5iLCBib3JkZXIucikpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gaW5SYW5nZShiYXIsIHgsIHksIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBjb25zdCBza2lwWCA9IHggPT09IG51bGw7XG4gICAgY29uc3Qgc2tpcFkgPSB5ID09PSBudWxsO1xuICAgIGNvbnN0IHNraXBCb3RoID0gc2tpcFggJiYgc2tpcFk7XG4gICAgY29uc3QgYm91bmRzID0gYmFyICYmICFza2lwQm90aCAmJiBnZXRCYXJCb3VuZHMoYmFyLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICByZXR1cm4gYm91bmRzICYmIChza2lwWCB8fCBfaXNCZXR3ZWVuKHgsIGJvdW5kcy5sZWZ0LCBib3VuZHMucmlnaHQpKSAmJiAoc2tpcFkgfHwgX2lzQmV0d2Vlbih5LCBib3VuZHMudG9wLCBib3VuZHMuYm90dG9tKSk7XG59XG5mdW5jdGlvbiBoYXNSYWRpdXMocmFkaXVzKSB7XG4gICAgcmV0dXJuIHJhZGl1cy50b3BMZWZ0IHx8IHJhZGl1cy50b3BSaWdodCB8fCByYWRpdXMuYm90dG9tTGVmdCB8fCByYWRpdXMuYm90dG9tUmlnaHQ7XG59XG4gZnVuY3Rpb24gYWRkTm9ybWFsUmVjdFBhdGgoY3R4LCByZWN0KSB7XG4gICAgY3R4LnJlY3QocmVjdC54LCByZWN0LnksIHJlY3QudywgcmVjdC5oKTtcbn1cbmZ1bmN0aW9uIGluZmxhdGVSZWN0KHJlY3QsIGFtb3VudCwgcmVmUmVjdCA9IHt9KSB7XG4gICAgY29uc3QgeCA9IHJlY3QueCAhPT0gcmVmUmVjdC54ID8gLWFtb3VudCA6IDA7XG4gICAgY29uc3QgeSA9IHJlY3QueSAhPT0gcmVmUmVjdC55ID8gLWFtb3VudCA6IDA7XG4gICAgY29uc3QgdyA9IChyZWN0LnggKyByZWN0LncgIT09IHJlZlJlY3QueCArIHJlZlJlY3QudyA/IGFtb3VudCA6IDApIC0geDtcbiAgICBjb25zdCBoID0gKHJlY3QueSArIHJlY3QuaCAhPT0gcmVmUmVjdC55ICsgcmVmUmVjdC5oID8gYW1vdW50IDogMCkgLSB5O1xuICAgIHJldHVybiB7XG4gICAgICAgIHg6IHJlY3QueCArIHgsXG4gICAgICAgIHk6IHJlY3QueSArIHksXG4gICAgICAgIHc6IHJlY3QudyArIHcsXG4gICAgICAgIGg6IHJlY3QuaCArIGgsXG4gICAgICAgIHJhZGl1czogcmVjdC5yYWRpdXNcbiAgICB9O1xufVxuY2xhc3MgQmFyRWxlbWVudCBleHRlbmRzIEVsZW1lbnQge1xuICAgIHN0YXRpYyBpZCA9ICdiYXInO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgYm9yZGVyU2tpcHBlZDogJ3N0YXJ0JyxcbiAgICAgICAgYm9yZGVyV2lkdGg6IDAsXG4gICAgICAgIGJvcmRlclJhZGl1czogMCxcbiAgICAgICAgaW5mbGF0ZUFtb3VudDogJ2F1dG8nLFxuICAgICAgICBwb2ludFN0eWxlOiB1bmRlZmluZWRcbiAgICB9O1xuIHN0YXRpYyBkZWZhdWx0Um91dGVzID0ge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdiYWNrZ3JvdW5kQ29sb3InLFxuICAgICAgICBib3JkZXJDb2xvcjogJ2JvcmRlckNvbG9yJ1xuICAgIH07XG4gICAgY29uc3RydWN0b3IoY2ZnKXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmhvcml6b250YWwgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuYmFzZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy53aWR0aCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuaW5mbGF0ZUFtb3VudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGNmZykge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjZmcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRyYXcoY3R4KSB7XG4gICAgICAgIGNvbnN0IHsgaW5mbGF0ZUFtb3VudCAsIG9wdGlvbnM6IHsgYm9yZGVyQ29sb3IgLCBiYWNrZ3JvdW5kQ29sb3IgIH0gIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IGlubmVyICwgb3V0ZXIgIH0gPSBib3VuZGluZ1JlY3RzKHRoaXMpO1xuICAgICAgICBjb25zdCBhZGRSZWN0UGF0aCA9IGhhc1JhZGl1cyhvdXRlci5yYWRpdXMpID8gYWRkUm91bmRlZFJlY3RQYXRoIDogYWRkTm9ybWFsUmVjdFBhdGg7XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGlmIChvdXRlci53ICE9PSBpbm5lci53IHx8IG91dGVyLmggIT09IGlubmVyLmgpIHtcbiAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIGFkZFJlY3RQYXRoKGN0eCwgaW5mbGF0ZVJlY3Qob3V0ZXIsIGluZmxhdGVBbW91bnQsIGlubmVyKSk7XG4gICAgICAgICAgICBjdHguY2xpcCgpO1xuICAgICAgICAgICAgYWRkUmVjdFBhdGgoY3R4LCBpbmZsYXRlUmVjdChpbm5lciwgLWluZmxhdGVBbW91bnQsIG91dGVyKSk7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gYm9yZGVyQ29sb3I7XG4gICAgICAgICAgICBjdHguZmlsbCgnZXZlbm9kZCcpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgYWRkUmVjdFBhdGgoY3R4LCBpbmZsYXRlUmVjdChpbm5lciwgaW5mbGF0ZUFtb3VudCkpO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gYmFja2dyb3VuZENvbG9yO1xuICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cbiAgICBpblJhbmdlKG1vdXNlWCwgbW91c2VZLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiBpblJhbmdlKHRoaXMsIG1vdXNlWCwgbW91c2VZLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICB9XG4gICAgaW5YUmFuZ2UobW91c2VYLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiBpblJhbmdlKHRoaXMsIG1vdXNlWCwgbnVsbCwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgfVxuICAgIGluWVJhbmdlKG1vdXNlWSwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gaW5SYW5nZSh0aGlzLCBudWxsLCBtb3VzZVksIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIH1cbiAgICBnZXRDZW50ZXJQb2ludCh1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgIGNvbnN0IHsgeCAsIHkgLCBiYXNlICwgaG9yaXpvbnRhbCAgfSA9ICB0aGlzLmdldFByb3BzKFtcbiAgICAgICAgICAgICd4JyxcbiAgICAgICAgICAgICd5JyxcbiAgICAgICAgICAgICdiYXNlJyxcbiAgICAgICAgICAgICdob3Jpem9udGFsJ1xuICAgICAgICBdLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IGhvcml6b250YWwgPyAoeCArIGJhc2UpIC8gMiA6IHgsXG4gICAgICAgICAgICB5OiBob3Jpem9udGFsID8geSA6ICh5ICsgYmFzZSkgLyAyXG4gICAgICAgIH07XG4gICAgfVxuICAgIGdldFJhbmdlKGF4aXMpIHtcbiAgICAgICAgcmV0dXJuIGF4aXMgPT09ICd4JyA/IHRoaXMud2lkdGggLyAyIDogdGhpcy5oZWlnaHQgLyAyO1xuICAgIH1cbn1cblxudmFyIGVsZW1lbnRzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuX19wcm90b19fOiBudWxsLFxuQXJjRWxlbWVudDogQXJjRWxlbWVudCxcbkxpbmVFbGVtZW50OiBMaW5lRWxlbWVudCxcblBvaW50RWxlbWVudDogUG9pbnRFbGVtZW50LFxuQmFyRWxlbWVudDogQmFyRWxlbWVudFxufSk7XG5cbmNvbnN0IEJPUkRFUl9DT0xPUlMgPSBbXG4gICAgJ3JnYig1NCwgMTYyLCAyMzUpJyxcbiAgICAncmdiKDI1NSwgOTksIDEzMiknLFxuICAgICdyZ2IoMjU1LCAxNTksIDY0KScsXG4gICAgJ3JnYigyNTUsIDIwNSwgODYpJyxcbiAgICAncmdiKDc1LCAxOTIsIDE5MiknLFxuICAgICdyZ2IoMTUzLCAxMDIsIDI1NSknLFxuICAgICdyZ2IoMjAxLCAyMDMsIDIwNyknIC8vIGdyZXlcbl07XG4vLyBCb3JkZXIgY29sb3JzIHdpdGggNTAlIHRyYW5zcGFyZW5jeVxuY29uc3QgQkFDS0dST1VORF9DT0xPUlMgPSAvKiAjX19QVVJFX18gKi8gQk9SREVSX0NPTE9SUy5tYXAoKGNvbG9yKT0+Y29sb3IucmVwbGFjZSgncmdiKCcsICdyZ2JhKCcpLnJlcGxhY2UoJyknLCAnLCAwLjUpJykpO1xuZnVuY3Rpb24gZ2V0Qm9yZGVyQ29sb3IoaSkge1xuICAgIHJldHVybiBCT1JERVJfQ09MT1JTW2kgJSBCT1JERVJfQ09MT1JTLmxlbmd0aF07XG59XG5mdW5jdGlvbiBnZXRCYWNrZ3JvdW5kQ29sb3IoaSkge1xuICAgIHJldHVybiBCQUNLR1JPVU5EX0NPTE9SU1tpICUgQkFDS0dST1VORF9DT0xPUlMubGVuZ3RoXTtcbn1cbmZ1bmN0aW9uIGNvbG9yaXplRGVmYXVsdERhdGFzZXQoZGF0YXNldCwgaSkge1xuICAgIGRhdGFzZXQuYm9yZGVyQ29sb3IgPSBnZXRCb3JkZXJDb2xvcihpKTtcbiAgICBkYXRhc2V0LmJhY2tncm91bmRDb2xvciA9IGdldEJhY2tncm91bmRDb2xvcihpKTtcbiAgICByZXR1cm4gKytpO1xufVxuZnVuY3Rpb24gY29sb3JpemVEb3VnaG51dERhdGFzZXQoZGF0YXNldCwgaSkge1xuICAgIGRhdGFzZXQuYmFja2dyb3VuZENvbG9yID0gZGF0YXNldC5kYXRhLm1hcCgoKT0+Z2V0Qm9yZGVyQ29sb3IoaSsrKSk7XG4gICAgcmV0dXJuIGk7XG59XG5mdW5jdGlvbiBjb2xvcml6ZVBvbGFyQXJlYURhdGFzZXQoZGF0YXNldCwgaSkge1xuICAgIGRhdGFzZXQuYmFja2dyb3VuZENvbG9yID0gZGF0YXNldC5kYXRhLm1hcCgoKT0+Z2V0QmFja2dyb3VuZENvbG9yKGkrKykpO1xuICAgIHJldHVybiBpO1xufVxuZnVuY3Rpb24gZ2V0Q29sb3JpemVyKGNoYXJ0KSB7XG4gICAgbGV0IGkgPSAwO1xuICAgIHJldHVybiAoZGF0YXNldCwgZGF0YXNldEluZGV4KT0+e1xuICAgICAgICBjb25zdCBjb250cm9sbGVyID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KS5jb250cm9sbGVyO1xuICAgICAgICBpZiAoY29udHJvbGxlciBpbnN0YW5jZW9mIERvdWdobnV0Q29udHJvbGxlcikge1xuICAgICAgICAgICAgaSA9IGNvbG9yaXplRG91Z2hudXREYXRhc2V0KGRhdGFzZXQsIGkpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbnRyb2xsZXIgaW5zdGFuY2VvZiBQb2xhckFyZWFDb250cm9sbGVyKSB7XG4gICAgICAgICAgICBpID0gY29sb3JpemVQb2xhckFyZWFEYXRhc2V0KGRhdGFzZXQsIGkpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIGkgPSBjb2xvcml6ZURlZmF1bHREYXRhc2V0KGRhdGFzZXQsIGkpO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNvbnRhaW5zQ29sb3JzRGVmaW5pdGlvbnMoZGVzY3JpcHRvcnMpIHtcbiAgICBsZXQgaztcbiAgICBmb3IoayBpbiBkZXNjcmlwdG9ycyl7XG4gICAgICAgIGlmIChkZXNjcmlwdG9yc1trXS5ib3JkZXJDb2xvciB8fCBkZXNjcmlwdG9yc1trXS5iYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGNvbnRhaW5zQ29sb3JzRGVmaW5pdGlvbihkZXNjcmlwdG9yKSB7XG4gICAgcmV0dXJuIGRlc2NyaXB0b3IgJiYgKGRlc2NyaXB0b3IuYm9yZGVyQ29sb3IgfHwgZGVzY3JpcHRvci5iYWNrZ3JvdW5kQ29sb3IpO1xufVxudmFyIHBsdWdpbl9jb2xvcnMgPSB7XG4gICAgaWQ6ICdjb2xvcnMnLFxuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgIGZvcmNlT3ZlcnJpZGU6IGZhbHNlXG4gICAgfSxcbiAgICBiZWZvcmVMYXlvdXQgKGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgICAgICBpZiAoIW9wdGlvbnMuZW5hYmxlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgZGF0YTogeyBkYXRhc2V0cyAgfSAsIG9wdGlvbnM6IGNoYXJ0T3B0aW9ucyAgfSA9IGNoYXJ0LmNvbmZpZztcbiAgICAgICAgY29uc3QgeyBlbGVtZW50cyAgfSA9IGNoYXJ0T3B0aW9ucztcbiAgICAgICAgaWYgKCFvcHRpb25zLmZvcmNlT3ZlcnJpZGUgJiYgKGNvbnRhaW5zQ29sb3JzRGVmaW5pdGlvbnMoZGF0YXNldHMpIHx8IGNvbnRhaW5zQ29sb3JzRGVmaW5pdGlvbihjaGFydE9wdGlvbnMpIHx8IGVsZW1lbnRzICYmIGNvbnRhaW5zQ29sb3JzRGVmaW5pdGlvbnMoZWxlbWVudHMpKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbG9yaXplciA9IGdldENvbG9yaXplcihjaGFydCk7XG4gICAgICAgIGRhdGFzZXRzLmZvckVhY2goY29sb3JpemVyKTtcbiAgICB9XG59O1xuXG5mdW5jdGlvbiBsdHRiRGVjaW1hdGlvbihkYXRhLCBzdGFydCwgY291bnQsIGF2YWlsYWJsZVdpZHRoLCBvcHRpb25zKSB7XG4gY29uc3Qgc2FtcGxlcyA9IG9wdGlvbnMuc2FtcGxlcyB8fCBhdmFpbGFibGVXaWR0aDtcbiAgICBpZiAoc2FtcGxlcyA+PSBjb3VudCkge1xuICAgICAgICByZXR1cm4gZGF0YS5zbGljZShzdGFydCwgc3RhcnQgKyBjb3VudCk7XG4gICAgfVxuICAgIGNvbnN0IGRlY2ltYXRlZCA9IFtdO1xuICAgIGNvbnN0IGJ1Y2tldFdpZHRoID0gKGNvdW50IC0gMikgLyAoc2FtcGxlcyAtIDIpO1xuICAgIGxldCBzYW1wbGVkSW5kZXggPSAwO1xuICAgIGNvbnN0IGVuZEluZGV4ID0gc3RhcnQgKyBjb3VudCAtIDE7XG4gICAgbGV0IGEgPSBzdGFydDtcbiAgICBsZXQgaSwgbWF4QXJlYVBvaW50LCBtYXhBcmVhLCBhcmVhLCBuZXh0QTtcbiAgICBkZWNpbWF0ZWRbc2FtcGxlZEluZGV4KytdID0gZGF0YVthXTtcbiAgICBmb3IoaSA9IDA7IGkgPCBzYW1wbGVzIC0gMjsgaSsrKXtcbiAgICAgICAgbGV0IGF2Z1ggPSAwO1xuICAgICAgICBsZXQgYXZnWSA9IDA7XG4gICAgICAgIGxldCBqO1xuICAgICAgICBjb25zdCBhdmdSYW5nZVN0YXJ0ID0gTWF0aC5mbG9vcigoaSArIDEpICogYnVja2V0V2lkdGgpICsgMSArIHN0YXJ0O1xuICAgICAgICBjb25zdCBhdmdSYW5nZUVuZCA9IE1hdGgubWluKE1hdGguZmxvb3IoKGkgKyAyKSAqIGJ1Y2tldFdpZHRoKSArIDEsIGNvdW50KSArIHN0YXJ0O1xuICAgICAgICBjb25zdCBhdmdSYW5nZUxlbmd0aCA9IGF2Z1JhbmdlRW5kIC0gYXZnUmFuZ2VTdGFydDtcbiAgICAgICAgZm9yKGogPSBhdmdSYW5nZVN0YXJ0OyBqIDwgYXZnUmFuZ2VFbmQ7IGorKyl7XG4gICAgICAgICAgICBhdmdYICs9IGRhdGFbal0ueDtcbiAgICAgICAgICAgIGF2Z1kgKz0gZGF0YVtqXS55O1xuICAgICAgICB9XG4gICAgICAgIGF2Z1ggLz0gYXZnUmFuZ2VMZW5ndGg7XG4gICAgICAgIGF2Z1kgLz0gYXZnUmFuZ2VMZW5ndGg7XG4gICAgICAgIGNvbnN0IHJhbmdlT2ZmcyA9IE1hdGguZmxvb3IoaSAqIGJ1Y2tldFdpZHRoKSArIDEgKyBzdGFydDtcbiAgICAgICAgY29uc3QgcmFuZ2VUbyA9IE1hdGgubWluKE1hdGguZmxvb3IoKGkgKyAxKSAqIGJ1Y2tldFdpZHRoKSArIDEsIGNvdW50KSArIHN0YXJ0O1xuICAgICAgICBjb25zdCB7IHg6IHBvaW50QXggLCB5OiBwb2ludEF5ICB9ID0gZGF0YVthXTtcbiAgICAgICAgbWF4QXJlYSA9IGFyZWEgPSAtMTtcbiAgICAgICAgZm9yKGogPSByYW5nZU9mZnM7IGogPCByYW5nZVRvOyBqKyspe1xuICAgICAgICAgICAgYXJlYSA9IDAuNSAqIE1hdGguYWJzKChwb2ludEF4IC0gYXZnWCkgKiAoZGF0YVtqXS55IC0gcG9pbnRBeSkgLSAocG9pbnRBeCAtIGRhdGFbal0ueCkgKiAoYXZnWSAtIHBvaW50QXkpKTtcbiAgICAgICAgICAgIGlmIChhcmVhID4gbWF4QXJlYSkge1xuICAgICAgICAgICAgICAgIG1heEFyZWEgPSBhcmVhO1xuICAgICAgICAgICAgICAgIG1heEFyZWFQb2ludCA9IGRhdGFbal07XG4gICAgICAgICAgICAgICAgbmV4dEEgPSBqO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGRlY2ltYXRlZFtzYW1wbGVkSW5kZXgrK10gPSBtYXhBcmVhUG9pbnQ7XG4gICAgICAgIGEgPSBuZXh0QTtcbiAgICB9XG4gICAgZGVjaW1hdGVkW3NhbXBsZWRJbmRleCsrXSA9IGRhdGFbZW5kSW5kZXhdO1xuICAgIHJldHVybiBkZWNpbWF0ZWQ7XG59XG5mdW5jdGlvbiBtaW5NYXhEZWNpbWF0aW9uKGRhdGEsIHN0YXJ0LCBjb3VudCwgYXZhaWxhYmxlV2lkdGgpIHtcbiAgICBsZXQgYXZnWCA9IDA7XG4gICAgbGV0IGNvdW50WCA9IDA7XG4gICAgbGV0IGksIHBvaW50LCB4LCB5LCBwcmV2WCwgbWluSW5kZXgsIG1heEluZGV4LCBzdGFydEluZGV4LCBtaW5ZLCBtYXhZO1xuICAgIGNvbnN0IGRlY2ltYXRlZCA9IFtdO1xuICAgIGNvbnN0IGVuZEluZGV4ID0gc3RhcnQgKyBjb3VudCAtIDE7XG4gICAgY29uc3QgeE1pbiA9IGRhdGFbc3RhcnRdLng7XG4gICAgY29uc3QgeE1heCA9IGRhdGFbZW5kSW5kZXhdLng7XG4gICAgY29uc3QgZHggPSB4TWF4IC0geE1pbjtcbiAgICBmb3IoaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBjb3VudDsgKytpKXtcbiAgICAgICAgcG9pbnQgPSBkYXRhW2ldO1xuICAgICAgICB4ID0gKHBvaW50LnggLSB4TWluKSAvIGR4ICogYXZhaWxhYmxlV2lkdGg7XG4gICAgICAgIHkgPSBwb2ludC55O1xuICAgICAgICBjb25zdCB0cnVuY1ggPSB4IHwgMDtcbiAgICAgICAgaWYgKHRydW5jWCA9PT0gcHJldlgpIHtcbiAgICAgICAgICAgIGlmICh5IDwgbWluWSkge1xuICAgICAgICAgICAgICAgIG1pblkgPSB5O1xuICAgICAgICAgICAgICAgIG1pbkluZGV4ID0gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoeSA+IG1heFkpIHtcbiAgICAgICAgICAgICAgICBtYXhZID0geTtcbiAgICAgICAgICAgICAgICBtYXhJbmRleCA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhdmdYID0gKGNvdW50WCAqIGF2Z1ggKyBwb2ludC54KSAvICsrY291bnRYO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbGFzdEluZGV4ID0gaSAtIDE7XG4gICAgICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWYobWluSW5kZXgpICYmICFpc051bGxPclVuZGVmKG1heEluZGV4KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGludGVybWVkaWF0ZUluZGV4MSA9IE1hdGgubWluKG1pbkluZGV4LCBtYXhJbmRleCk7XG4gICAgICAgICAgICAgICAgY29uc3QgaW50ZXJtZWRpYXRlSW5kZXgyID0gTWF0aC5tYXgobWluSW5kZXgsIG1heEluZGV4KTtcbiAgICAgICAgICAgICAgICBpZiAoaW50ZXJtZWRpYXRlSW5kZXgxICE9PSBzdGFydEluZGV4ICYmIGludGVybWVkaWF0ZUluZGV4MSAhPT0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlY2ltYXRlZC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmRhdGFbaW50ZXJtZWRpYXRlSW5kZXgxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IGF2Z1hcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpbnRlcm1lZGlhdGVJbmRleDIgIT09IHN0YXJ0SW5kZXggJiYgaW50ZXJtZWRpYXRlSW5kZXgyICE9PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVjaW1hdGVkLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uZGF0YVtpbnRlcm1lZGlhdGVJbmRleDJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgeDogYXZnWFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaSA+IDAgJiYgbGFzdEluZGV4ICE9PSBzdGFydEluZGV4KSB7XG4gICAgICAgICAgICAgICAgZGVjaW1hdGVkLnB1c2goZGF0YVtsYXN0SW5kZXhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlY2ltYXRlZC5wdXNoKHBvaW50KTtcbiAgICAgICAgICAgIHByZXZYID0gdHJ1bmNYO1xuICAgICAgICAgICAgY291bnRYID0gMDtcbiAgICAgICAgICAgIG1pblkgPSBtYXhZID0geTtcbiAgICAgICAgICAgIG1pbkluZGV4ID0gbWF4SW5kZXggPSBzdGFydEluZGV4ID0gaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGVjaW1hdGVkO1xufVxuZnVuY3Rpb24gY2xlYW5EZWNpbWF0ZWREYXRhc2V0KGRhdGFzZXQpIHtcbiAgICBpZiAoZGF0YXNldC5fZGVjaW1hdGVkKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBkYXRhc2V0Ll9kYXRhO1xuICAgICAgICBkZWxldGUgZGF0YXNldC5fZGVjaW1hdGVkO1xuICAgICAgICBkZWxldGUgZGF0YXNldC5fZGF0YTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRhdGFzZXQsICdkYXRhJywge1xuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IGRhdGFcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZnVuY3Rpb24gY2xlYW5EZWNpbWF0ZWREYXRhKGNoYXJ0KSB7XG4gICAgY2hhcnQuZGF0YS5kYXRhc2V0cy5mb3JFYWNoKChkYXRhc2V0KT0+e1xuICAgICAgICBjbGVhbkRlY2ltYXRlZERhdGFzZXQoZGF0YXNldCk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBnZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzU2ltcGxpZmllZChtZXRhLCBwb2ludHMpIHtcbiAgICBjb25zdCBwb2ludENvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgICBsZXQgc3RhcnQgPSAwO1xuICAgIGxldCBjb3VudDtcbiAgICBjb25zdCB7IGlTY2FsZSAgfSA9IG1ldGE7XG4gICAgY29uc3QgeyBtaW4gLCBtYXggLCBtaW5EZWZpbmVkICwgbWF4RGVmaW5lZCAgfSA9IGlTY2FsZS5nZXRVc2VyQm91bmRzKCk7XG4gICAgaWYgKG1pbkRlZmluZWQpIHtcbiAgICAgICAgc3RhcnQgPSBfbGltaXRWYWx1ZShfbG9va3VwQnlLZXkocG9pbnRzLCBpU2NhbGUuYXhpcywgbWluKS5sbywgMCwgcG9pbnRDb3VudCAtIDEpO1xuICAgIH1cbiAgICBpZiAobWF4RGVmaW5lZCkge1xuICAgICAgICBjb3VudCA9IF9saW1pdFZhbHVlKF9sb29rdXBCeUtleShwb2ludHMsIGlTY2FsZS5heGlzLCBtYXgpLmhpICsgMSwgc3RhcnQsIHBvaW50Q291bnQpIC0gc3RhcnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY291bnQgPSBwb2ludENvdW50IC0gc3RhcnQ7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBjb3VudFxuICAgIH07XG59XG52YXIgcGx1Z2luX2RlY2ltYXRpb24gPSB7XG4gICAgaWQ6ICdkZWNpbWF0aW9uJyxcbiAgICBkZWZhdWx0czoge1xuICAgICAgICBhbGdvcml0aG06ICdtaW4tbWF4JyxcbiAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICB9LFxuICAgIGJlZm9yZUVsZW1lbnRzVXBkYXRlOiAoY2hhcnQsIGFyZ3MsIG9wdGlvbnMpPT57XG4gICAgICAgIGlmICghb3B0aW9ucy5lbmFibGVkKSB7XG4gICAgICAgICAgICBjbGVhbkRlY2ltYXRlZERhdGEoY2hhcnQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGF2YWlsYWJsZVdpZHRoID0gY2hhcnQud2lkdGg7XG4gICAgICAgIGNoYXJ0LmRhdGEuZGF0YXNldHMuZm9yRWFjaCgoZGF0YXNldCwgZGF0YXNldEluZGV4KT0+e1xuICAgICAgICAgICAgY29uc3QgeyBfZGF0YSAsIGluZGV4QXhpcyAgfSA9IGRhdGFzZXQ7XG4gICAgICAgICAgICBjb25zdCBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBfZGF0YSB8fCBkYXRhc2V0LmRhdGE7XG4gICAgICAgICAgICBpZiAocmVzb2x2ZShbXG4gICAgICAgICAgICAgICAgaW5kZXhBeGlzLFxuICAgICAgICAgICAgICAgIGNoYXJ0Lm9wdGlvbnMuaW5kZXhBeGlzXG4gICAgICAgICAgICBdKSA9PT0gJ3knKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFtZXRhLmNvbnRyb2xsZXIuc3VwcG9ydHNEZWNpbWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeEF4aXMgPSBjaGFydC5zY2FsZXNbbWV0YS54QXhpc0lEXTtcbiAgICAgICAgICAgIGlmICh4QXhpcy50eXBlICE9PSAnbGluZWFyJyAmJiB4QXhpcy50eXBlICE9PSAndGltZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2hhcnQub3B0aW9ucy5wYXJzaW5nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHsgc3RhcnQgLCBjb3VudCAgfSA9IGdldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHNTaW1wbGlmaWVkKG1ldGEsIGRhdGEpO1xuICAgICAgICAgICAgY29uc3QgdGhyZXNob2xkID0gb3B0aW9ucy50aHJlc2hvbGQgfHwgNCAqIGF2YWlsYWJsZVdpZHRoO1xuICAgICAgICAgICAgaWYgKGNvdW50IDw9IHRocmVzaG9sZCkge1xuICAgICAgICAgICAgICAgIGNsZWFuRGVjaW1hdGVkRGF0YXNldChkYXRhc2V0KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNOdWxsT3JVbmRlZihfZGF0YSkpIHtcbiAgICAgICAgICAgICAgICBkYXRhc2V0Ll9kYXRhID0gZGF0YTtcbiAgICAgICAgICAgICAgICBkZWxldGUgZGF0YXNldC5kYXRhO1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkYXRhc2V0LCAnZGF0YScsIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RlY2ltYXRlZDtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kYXRhID0gZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGRlY2ltYXRlZDtcbiAgICAgICAgICAgIHN3aXRjaChvcHRpb25zLmFsZ29yaXRobSl7XG4gICAgICAgICAgICAgICAgY2FzZSAnbHR0Yic6XG4gICAgICAgICAgICAgICAgICAgIGRlY2ltYXRlZCA9IGx0dGJEZWNpbWF0aW9uKGRhdGEsIHN0YXJ0LCBjb3VudCwgYXZhaWxhYmxlV2lkdGgsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdtaW4tbWF4JzpcbiAgICAgICAgICAgICAgICAgICAgZGVjaW1hdGVkID0gbWluTWF4RGVjaW1hdGlvbihkYXRhLCBzdGFydCwgY291bnQsIGF2YWlsYWJsZVdpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBkZWNpbWF0aW9uIGFsZ29yaXRobSAnJHtvcHRpb25zLmFsZ29yaXRobX0nYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkYXRhc2V0Ll9kZWNpbWF0ZWQgPSBkZWNpbWF0ZWQ7XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgZGVzdHJveSAoY2hhcnQpIHtcbiAgICAgICAgY2xlYW5EZWNpbWF0ZWREYXRhKGNoYXJ0KTtcbiAgICB9XG59O1xuXG5mdW5jdGlvbiBfc2VnbWVudHMobGluZSwgdGFyZ2V0LCBwcm9wZXJ0eSkge1xuICAgIGNvbnN0IHNlZ21lbnRzID0gbGluZS5zZWdtZW50cztcbiAgICBjb25zdCBwb2ludHMgPSBsaW5lLnBvaW50cztcbiAgICBjb25zdCB0cG9pbnRzID0gdGFyZ2V0LnBvaW50cztcbiAgICBjb25zdCBwYXJ0cyA9IFtdO1xuICAgIGZvciAoY29uc3Qgc2VnbWVudCBvZiBzZWdtZW50cyl7XG4gICAgICAgIGxldCB7IHN0YXJ0ICwgZW5kICB9ID0gc2VnbWVudDtcbiAgICAgICAgZW5kID0gX2ZpbmRTZWdtZW50RW5kKHN0YXJ0LCBlbmQsIHBvaW50cyk7XG4gICAgICAgIGNvbnN0IGJvdW5kcyA9IF9nZXRCb3VuZHMocHJvcGVydHksIHBvaW50c1tzdGFydF0sIHBvaW50c1tlbmRdLCBzZWdtZW50Lmxvb3ApO1xuICAgICAgICBpZiAoIXRhcmdldC5zZWdtZW50cykge1xuICAgICAgICAgICAgcGFydHMucHVzaCh7XG4gICAgICAgICAgICAgICAgc291cmNlOiBzZWdtZW50LFxuICAgICAgICAgICAgICAgIHRhcmdldDogYm91bmRzLFxuICAgICAgICAgICAgICAgIHN0YXJ0OiBwb2ludHNbc3RhcnRdLFxuICAgICAgICAgICAgICAgIGVuZDogcG9pbnRzW2VuZF1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGFyZ2V0U2VnbWVudHMgPSBfYm91bmRTZWdtZW50cyh0YXJnZXQsIGJvdW5kcyk7XG4gICAgICAgIGZvciAoY29uc3QgdGd0IG9mIHRhcmdldFNlZ21lbnRzKXtcbiAgICAgICAgICAgIGNvbnN0IHN1YkJvdW5kcyA9IF9nZXRCb3VuZHMocHJvcGVydHksIHRwb2ludHNbdGd0LnN0YXJ0XSwgdHBvaW50c1t0Z3QuZW5kXSwgdGd0Lmxvb3ApO1xuICAgICAgICAgICAgY29uc3QgZmlsbFNvdXJjZXMgPSBfYm91bmRTZWdtZW50KHNlZ21lbnQsIHBvaW50cywgc3ViQm91bmRzKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZmlsbFNvdXJjZSBvZiBmaWxsU291cmNlcyl7XG4gICAgICAgICAgICAgICAgcGFydHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogZmlsbFNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiB0Z3QsXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBbcHJvcGVydHldOiBfZ2V0RWRnZShib3VuZHMsIHN1YkJvdW5kcywgJ3N0YXJ0JywgTWF0aC5tYXgpXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGVuZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgW3Byb3BlcnR5XTogX2dldEVkZ2UoYm91bmRzLCBzdWJCb3VuZHMsICdlbmQnLCBNYXRoLm1pbilcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYXJ0cztcbn1cbmZ1bmN0aW9uIF9nZXRCb3VuZHMocHJvcGVydHksIGZpcnN0LCBsYXN0LCBsb29wKSB7XG4gICAgaWYgKGxvb3ApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgc3RhcnQgPSBmaXJzdFtwcm9wZXJ0eV07XG4gICAgbGV0IGVuZCA9IGxhc3RbcHJvcGVydHldO1xuICAgIGlmIChwcm9wZXJ0eSA9PT0gJ2FuZ2xlJykge1xuICAgICAgICBzdGFydCA9IF9ub3JtYWxpemVBbmdsZShzdGFydCk7XG4gICAgICAgIGVuZCA9IF9ub3JtYWxpemVBbmdsZShlbmQpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBwcm9wZXJ0eSxcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIGVuZFxuICAgIH07XG59XG5mdW5jdGlvbiBfcG9pbnRzRnJvbVNlZ21lbnRzKGJvdW5kYXJ5LCBsaW5lKSB7XG4gICAgY29uc3QgeyB4ID1udWxsICwgeSA9bnVsbCAgfSA9IGJvdW5kYXJ5IHx8IHt9O1xuICAgIGNvbnN0IGxpbmVQb2ludHMgPSBsaW5lLnBvaW50cztcbiAgICBjb25zdCBwb2ludHMgPSBbXTtcbiAgICBsaW5lLnNlZ21lbnRzLmZvckVhY2goKHsgc3RhcnQgLCBlbmQgIH0pPT57XG4gICAgICAgIGVuZCA9IF9maW5kU2VnbWVudEVuZChzdGFydCwgZW5kLCBsaW5lUG9pbnRzKTtcbiAgICAgICAgY29uc3QgZmlyc3QgPSBsaW5lUG9pbnRzW3N0YXJ0XTtcbiAgICAgICAgY29uc3QgbGFzdCA9IGxpbmVQb2ludHNbZW5kXTtcbiAgICAgICAgaWYgKHkgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgICB4OiBmaXJzdC54LFxuICAgICAgICAgICAgICAgIHlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcG9pbnRzLnB1c2goe1xuICAgICAgICAgICAgICAgIHg6IGxhc3QueCxcbiAgICAgICAgICAgICAgICB5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh4ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBwb2ludHMucHVzaCh7XG4gICAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAgICB5OiBmaXJzdC55XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgICB4LFxuICAgICAgICAgICAgICAgIHk6IGxhc3QueVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcG9pbnRzO1xufVxuZnVuY3Rpb24gX2ZpbmRTZWdtZW50RW5kKHN0YXJ0LCBlbmQsIHBvaW50cykge1xuICAgIGZvcig7IGVuZCA+IHN0YXJ0OyBlbmQtLSl7XG4gICAgICAgIGNvbnN0IHBvaW50ID0gcG9pbnRzW2VuZF07XG4gICAgICAgIGlmICghaXNOYU4ocG9pbnQueCkgJiYgIWlzTmFOKHBvaW50LnkpKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZW5kO1xufVxuZnVuY3Rpb24gX2dldEVkZ2UoYSwgYiwgcHJvcCwgZm4pIHtcbiAgICBpZiAoYSAmJiBiKSB7XG4gICAgICAgIHJldHVybiBmbihhW3Byb3BdLCBiW3Byb3BdKTtcbiAgICB9XG4gICAgcmV0dXJuIGEgPyBhW3Byb3BdIDogYiA/IGJbcHJvcF0gOiAwO1xufVxuXG5mdW5jdGlvbiBfY3JlYXRlQm91bmRhcnlMaW5lKGJvdW5kYXJ5LCBsaW5lKSB7XG4gICAgbGV0IHBvaW50cyA9IFtdO1xuICAgIGxldCBfbG9vcCA9IGZhbHNlO1xuICAgIGlmIChpc0FycmF5KGJvdW5kYXJ5KSkge1xuICAgICAgICBfbG9vcCA9IHRydWU7XG4gICAgICAgIHBvaW50cyA9IGJvdW5kYXJ5O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHBvaW50cyA9IF9wb2ludHNGcm9tU2VnbWVudHMoYm91bmRhcnksIGxpbmUpO1xuICAgIH1cbiAgICByZXR1cm4gcG9pbnRzLmxlbmd0aCA/IG5ldyBMaW5lRWxlbWVudCh7XG4gICAgICAgIHBvaW50cyxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgdGVuc2lvbjogMFxuICAgICAgICB9LFxuICAgICAgICBfbG9vcCxcbiAgICAgICAgX2Z1bGxMb29wOiBfbG9vcFxuICAgIH0pIDogbnVsbDtcbn1cbmZ1bmN0aW9uIF9zaG91bGRBcHBseUZpbGwoc291cmNlKSB7XG4gICAgcmV0dXJuIHNvdXJjZSAmJiBzb3VyY2UuZmlsbCAhPT0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIF9yZXNvbHZlVGFyZ2V0KHNvdXJjZXMsIGluZGV4LCBwcm9wYWdhdGUpIHtcbiAgICBjb25zdCBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICBsZXQgZmlsbCA9IHNvdXJjZS5maWxsO1xuICAgIGNvbnN0IHZpc2l0ZWQgPSBbXG4gICAgICAgIGluZGV4XG4gICAgXTtcbiAgICBsZXQgdGFyZ2V0O1xuICAgIGlmICghcHJvcGFnYXRlKSB7XG4gICAgICAgIHJldHVybiBmaWxsO1xuICAgIH1cbiAgICB3aGlsZShmaWxsICE9PSBmYWxzZSAmJiB2aXNpdGVkLmluZGV4T2YoZmlsbCkgPT09IC0xKXtcbiAgICAgICAgaWYgKCFpc051bWJlckZpbml0ZShmaWxsKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZpbGw7XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0ID0gc291cmNlc1tmaWxsXTtcbiAgICAgICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFyZ2V0LnZpc2libGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmaWxsO1xuICAgICAgICB9XG4gICAgICAgIHZpc2l0ZWQucHVzaChmaWxsKTtcbiAgICAgICAgZmlsbCA9IHRhcmdldC5maWxsO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4gZnVuY3Rpb24gX2RlY29kZUZpbGwobGluZSwgaW5kZXgsIGNvdW50KSB7XG4gICAgIGNvbnN0IGZpbGwgPSBwYXJzZUZpbGxPcHRpb24obGluZSk7XG4gICAgaWYgKGlzT2JqZWN0KGZpbGwpKSB7XG4gICAgICAgIHJldHVybiBpc05hTihmaWxsLnZhbHVlKSA/IGZhbHNlIDogZmlsbDtcbiAgICB9XG4gICAgbGV0IHRhcmdldCA9IHBhcnNlRmxvYXQoZmlsbCk7XG4gICAgaWYgKGlzTnVtYmVyRmluaXRlKHRhcmdldCkgJiYgTWF0aC5mbG9vcih0YXJnZXQpID09PSB0YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIGRlY29kZVRhcmdldEluZGV4KGZpbGxbMF0sIGluZGV4LCB0YXJnZXQsIGNvdW50KTtcbiAgICB9XG4gICAgcmV0dXJuIFtcbiAgICAgICAgJ29yaWdpbicsXG4gICAgICAgICdzdGFydCcsXG4gICAgICAgICdlbmQnLFxuICAgICAgICAnc3RhY2snLFxuICAgICAgICAnc2hhcGUnXG4gICAgXS5pbmRleE9mKGZpbGwpID49IDAgJiYgZmlsbDtcbn1cbmZ1bmN0aW9uIGRlY29kZVRhcmdldEluZGV4KGZpcnN0Q2gsIGluZGV4LCB0YXJnZXQsIGNvdW50KSB7XG4gICAgaWYgKGZpcnN0Q2ggPT09ICctJyB8fCBmaXJzdENoID09PSAnKycpIHtcbiAgICAgICAgdGFyZ2V0ID0gaW5kZXggKyB0YXJnZXQ7XG4gICAgfVxuICAgIGlmICh0YXJnZXQgPT09IGluZGV4IHx8IHRhcmdldCA8IDAgfHwgdGFyZ2V0ID49IGNvdW50KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cbiBmdW5jdGlvbiBfZ2V0VGFyZ2V0UGl4ZWwoZmlsbCwgc2NhbGUpIHtcbiAgICBsZXQgcGl4ZWwgPSBudWxsO1xuICAgIGlmIChmaWxsID09PSAnc3RhcnQnKSB7XG4gICAgICAgIHBpeGVsID0gc2NhbGUuYm90dG9tO1xuICAgIH0gZWxzZSBpZiAoZmlsbCA9PT0gJ2VuZCcpIHtcbiAgICAgICAgcGl4ZWwgPSBzY2FsZS50b3A7XG4gICAgfSBlbHNlIGlmIChpc09iamVjdChmaWxsKSkge1xuICAgICAgICBwaXhlbCA9IHNjYWxlLmdldFBpeGVsRm9yVmFsdWUoZmlsbC52YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChzY2FsZS5nZXRCYXNlUGl4ZWwpIHtcbiAgICAgICAgcGl4ZWwgPSBzY2FsZS5nZXRCYXNlUGl4ZWwoKTtcbiAgICB9XG4gICAgcmV0dXJuIHBpeGVsO1xufVxuIGZ1bmN0aW9uIF9nZXRUYXJnZXRWYWx1ZShmaWxsLCBzY2FsZSwgc3RhcnRWYWx1ZSkge1xuICAgIGxldCB2YWx1ZTtcbiAgICBpZiAoZmlsbCA9PT0gJ3N0YXJ0Jykge1xuICAgICAgICB2YWx1ZSA9IHN0YXJ0VmFsdWU7XG4gICAgfSBlbHNlIGlmIChmaWxsID09PSAnZW5kJykge1xuICAgICAgICB2YWx1ZSA9IHNjYWxlLm9wdGlvbnMucmV2ZXJzZSA/IHNjYWxlLm1pbiA6IHNjYWxlLm1heDtcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGZpbGwpKSB7XG4gICAgICAgIHZhbHVlID0gZmlsbC52YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IHNjYWxlLmdldEJhc2VWYWx1ZSgpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG4gZnVuY3Rpb24gcGFyc2VGaWxsT3B0aW9uKGxpbmUpIHtcbiAgICBjb25zdCBvcHRpb25zID0gbGluZS5vcHRpb25zO1xuICAgIGNvbnN0IGZpbGxPcHRpb24gPSBvcHRpb25zLmZpbGw7XG4gICAgbGV0IGZpbGwgPSB2YWx1ZU9yRGVmYXVsdChmaWxsT3B0aW9uICYmIGZpbGxPcHRpb24udGFyZ2V0LCBmaWxsT3B0aW9uKTtcbiAgICBpZiAoZmlsbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGZpbGwgPSAhIW9wdGlvbnMuYmFja2dyb3VuZENvbG9yO1xuICAgIH1cbiAgICBpZiAoZmlsbCA9PT0gZmFsc2UgfHwgZmlsbCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChmaWxsID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiAnb3JpZ2luJztcbiAgICB9XG4gICAgcmV0dXJuIGZpbGw7XG59XG5cbmZ1bmN0aW9uIF9idWlsZFN0YWNrTGluZShzb3VyY2UpIHtcbiAgICBjb25zdCB7IHNjYWxlICwgaW5kZXggLCBsaW5lICB9ID0gc291cmNlO1xuICAgIGNvbnN0IHBvaW50cyA9IFtdO1xuICAgIGNvbnN0IHNlZ21lbnRzID0gbGluZS5zZWdtZW50cztcbiAgICBjb25zdCBzb3VyY2VQb2ludHMgPSBsaW5lLnBvaW50cztcbiAgICBjb25zdCBsaW5lc0JlbG93ID0gZ2V0TGluZXNCZWxvdyhzY2FsZSwgaW5kZXgpO1xuICAgIGxpbmVzQmVsb3cucHVzaChfY3JlYXRlQm91bmRhcnlMaW5lKHtcbiAgICAgICAgeDogbnVsbCxcbiAgICAgICAgeTogc2NhbGUuYm90dG9tXG4gICAgfSwgbGluZSkpO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGNvbnN0IHNlZ21lbnQgPSBzZWdtZW50c1tpXTtcbiAgICAgICAgZm9yKGxldCBqID0gc2VnbWVudC5zdGFydDsgaiA8PSBzZWdtZW50LmVuZDsgaisrKXtcbiAgICAgICAgICAgIGFkZFBvaW50c0JlbG93KHBvaW50cywgc291cmNlUG9pbnRzW2pdLCBsaW5lc0JlbG93KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IExpbmVFbGVtZW50KHtcbiAgICAgICAgcG9pbnRzLFxuICAgICAgICBvcHRpb25zOiB7fVxuICAgIH0pO1xufVxuIGZ1bmN0aW9uIGdldExpbmVzQmVsb3coc2NhbGUsIGluZGV4KSB7XG4gICAgY29uc3QgYmVsb3cgPSBbXTtcbiAgICBjb25zdCBtZXRhcyA9IHNjYWxlLmdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKCdsaW5lJyk7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IG1ldGFzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgY29uc3QgbWV0YSA9IG1ldGFzW2ldO1xuICAgICAgICBpZiAobWV0YS5pbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbWV0YS5oaWRkZW4pIHtcbiAgICAgICAgICAgIGJlbG93LnVuc2hpZnQobWV0YS5kYXRhc2V0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYmVsb3c7XG59XG4gZnVuY3Rpb24gYWRkUG9pbnRzQmVsb3cocG9pbnRzLCBzb3VyY2VQb2ludCwgbGluZXNCZWxvdykge1xuICAgIGNvbnN0IHBvc3Rwb25lZCA9IFtdO1xuICAgIGZvcihsZXQgaiA9IDA7IGogPCBsaW5lc0JlbG93Lmxlbmd0aDsgaisrKXtcbiAgICAgICAgY29uc3QgbGluZSA9IGxpbmVzQmVsb3dbal07XG4gICAgICAgIGNvbnN0IHsgZmlyc3QgLCBsYXN0ICwgcG9pbnQgIH0gPSBmaW5kUG9pbnQobGluZSwgc291cmNlUG9pbnQsICd4Jyk7XG4gICAgICAgIGlmICghcG9pbnQgfHwgZmlyc3QgJiYgbGFzdCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpcnN0KSB7XG4gICAgICAgICAgICBwb3N0cG9uZWQudW5zaGlmdChwb2ludCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwb2ludHMucHVzaChwb2ludCk7XG4gICAgICAgICAgICBpZiAoIWxhc3QpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBwb2ludHMucHVzaCguLi5wb3N0cG9uZWQpO1xufVxuIGZ1bmN0aW9uIGZpbmRQb2ludChsaW5lLCBzb3VyY2VQb2ludCwgcHJvcGVydHkpIHtcbiAgICBjb25zdCBwb2ludCA9IGxpbmUuaW50ZXJwb2xhdGUoc291cmNlUG9pbnQsIHByb3BlcnR5KTtcbiAgICBpZiAoIXBvaW50KSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgY29uc3QgcG9pbnRWYWx1ZSA9IHBvaW50W3Byb3BlcnR5XTtcbiAgICBjb25zdCBzZWdtZW50cyA9IGxpbmUuc2VnbWVudHM7XG4gICAgY29uc3QgbGluZVBvaW50cyA9IGxpbmUucG9pbnRzO1xuICAgIGxldCBmaXJzdCA9IGZhbHNlO1xuICAgIGxldCBsYXN0ID0gZmFsc2U7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgY29uc3Qgc2VnbWVudCA9IHNlZ21lbnRzW2ldO1xuICAgICAgICBjb25zdCBmaXJzdFZhbHVlID0gbGluZVBvaW50c1tzZWdtZW50LnN0YXJ0XVtwcm9wZXJ0eV07XG4gICAgICAgIGNvbnN0IGxhc3RWYWx1ZSA9IGxpbmVQb2ludHNbc2VnbWVudC5lbmRdW3Byb3BlcnR5XTtcbiAgICAgICAgaWYgKF9pc0JldHdlZW4ocG9pbnRWYWx1ZSwgZmlyc3RWYWx1ZSwgbGFzdFZhbHVlKSkge1xuICAgICAgICAgICAgZmlyc3QgPSBwb2ludFZhbHVlID09PSBmaXJzdFZhbHVlO1xuICAgICAgICAgICAgbGFzdCA9IHBvaW50VmFsdWUgPT09IGxhc3RWYWx1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGZpcnN0LFxuICAgICAgICBsYXN0LFxuICAgICAgICBwb2ludFxuICAgIH07XG59XG5cbmNsYXNzIHNpbXBsZUFyYyB7XG4gICAgY29uc3RydWN0b3Iob3B0cyl7XG4gICAgICAgIHRoaXMueCA9IG9wdHMueDtcbiAgICAgICAgdGhpcy55ID0gb3B0cy55O1xuICAgICAgICB0aGlzLnJhZGl1cyA9IG9wdHMucmFkaXVzO1xuICAgIH1cbiAgICBwYXRoU2VnbWVudChjdHgsIGJvdW5kcywgb3B0cykge1xuICAgICAgICBjb25zdCB7IHggLCB5ICwgcmFkaXVzICB9ID0gdGhpcztcbiAgICAgICAgYm91bmRzID0gYm91bmRzIHx8IHtcbiAgICAgICAgICAgIHN0YXJ0OiAwLFxuICAgICAgICAgICAgZW5kOiBUQVVcbiAgICAgICAgfTtcbiAgICAgICAgY3R4LmFyYyh4LCB5LCByYWRpdXMsIGJvdW5kcy5lbmQsIGJvdW5kcy5zdGFydCwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiAhb3B0cy5ib3VuZHM7XG4gICAgfVxuICAgIGludGVycG9sYXRlKHBvaW50KSB7XG4gICAgICAgIGNvbnN0IHsgeCAsIHkgLCByYWRpdXMgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBhbmdsZSA9IHBvaW50LmFuZ2xlO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogeCArIE1hdGguY29zKGFuZ2xlKSAqIHJhZGl1cyxcbiAgICAgICAgICAgIHk6IHkgKyBNYXRoLnNpbihhbmdsZSkgKiByYWRpdXMsXG4gICAgICAgICAgICBhbmdsZVxuICAgICAgICB9O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gX2dldFRhcmdldChzb3VyY2UpIHtcbiAgICBjb25zdCB7IGNoYXJ0ICwgZmlsbCAsIGxpbmUgIH0gPSBzb3VyY2U7XG4gICAgaWYgKGlzTnVtYmVyRmluaXRlKGZpbGwpKSB7XG4gICAgICAgIHJldHVybiBnZXRMaW5lQnlJbmRleChjaGFydCwgZmlsbCk7XG4gICAgfVxuICAgIGlmIChmaWxsID09PSAnc3RhY2snKSB7XG4gICAgICAgIHJldHVybiBfYnVpbGRTdGFja0xpbmUoc291cmNlKTtcbiAgICB9XG4gICAgaWYgKGZpbGwgPT09ICdzaGFwZScpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNvbnN0IGJvdW5kYXJ5ID0gY29tcHV0ZUJvdW5kYXJ5KHNvdXJjZSk7XG4gICAgaWYgKGJvdW5kYXJ5IGluc3RhbmNlb2Ygc2ltcGxlQXJjKSB7XG4gICAgICAgIHJldHVybiBib3VuZGFyeTtcbiAgICB9XG4gICAgcmV0dXJuIF9jcmVhdGVCb3VuZGFyeUxpbmUoYm91bmRhcnksIGxpbmUpO1xufVxuIGZ1bmN0aW9uIGdldExpbmVCeUluZGV4KGNoYXJ0LCBpbmRleCkge1xuICAgIGNvbnN0IG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShpbmRleCk7XG4gICAgY29uc3QgdmlzaWJsZSA9IG1ldGEgJiYgY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpbmRleCk7XG4gICAgcmV0dXJuIHZpc2libGUgPyBtZXRhLmRhdGFzZXQgOiBudWxsO1xufVxuZnVuY3Rpb24gY29tcHV0ZUJvdW5kYXJ5KHNvdXJjZSkge1xuICAgIGNvbnN0IHNjYWxlID0gc291cmNlLnNjYWxlIHx8IHt9O1xuICAgIGlmIChzY2FsZS5nZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGNvbXB1dGVDaXJjdWxhckJvdW5kYXJ5KHNvdXJjZSk7XG4gICAgfVxuICAgIHJldHVybiBjb21wdXRlTGluZWFyQm91bmRhcnkoc291cmNlKTtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVMaW5lYXJCb3VuZGFyeShzb3VyY2UpIHtcbiAgICBjb25zdCB7IHNjYWxlID17fSAsIGZpbGwgIH0gPSBzb3VyY2U7XG4gICAgY29uc3QgcGl4ZWwgPSBfZ2V0VGFyZ2V0UGl4ZWwoZmlsbCwgc2NhbGUpO1xuICAgIGlmIChpc051bWJlckZpbml0ZShwaXhlbCkpIHtcbiAgICAgICAgY29uc3QgaG9yaXpvbnRhbCA9IHNjYWxlLmlzSG9yaXpvbnRhbCgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogaG9yaXpvbnRhbCA/IHBpeGVsIDogbnVsbCxcbiAgICAgICAgICAgIHk6IGhvcml6b250YWwgPyBudWxsIDogcGl4ZWxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBjb21wdXRlQ2lyY3VsYXJCb3VuZGFyeShzb3VyY2UpIHtcbiAgICBjb25zdCB7IHNjYWxlICwgZmlsbCAgfSA9IHNvdXJjZTtcbiAgICBjb25zdCBvcHRpb25zID0gc2NhbGUub3B0aW9ucztcbiAgICBjb25zdCBsZW5ndGggPSBzY2FsZS5nZXRMYWJlbHMoKS5sZW5ndGg7XG4gICAgY29uc3Qgc3RhcnQgPSBvcHRpb25zLnJldmVyc2UgPyBzY2FsZS5tYXggOiBzY2FsZS5taW47XG4gICAgY29uc3QgdmFsdWUgPSBfZ2V0VGFyZ2V0VmFsdWUoZmlsbCwgc2NhbGUsIHN0YXJ0KTtcbiAgICBjb25zdCB0YXJnZXQgPSBbXTtcbiAgICBpZiAob3B0aW9ucy5ncmlkLmNpcmN1bGFyKSB7XG4gICAgICAgIGNvbnN0IGNlbnRlciA9IHNjYWxlLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZSgwLCBzdGFydCk7XG4gICAgICAgIHJldHVybiBuZXcgc2ltcGxlQXJjKHtcbiAgICAgICAgICAgIHg6IGNlbnRlci54LFxuICAgICAgICAgICAgeTogY2VudGVyLnksXG4gICAgICAgICAgICByYWRpdXM6IHNjYWxlLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHZhbHVlKVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKXtcbiAgICAgICAgdGFyZ2V0LnB1c2goc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlKGksIHZhbHVlKSk7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF9kcmF3ZmlsbChjdHgsIHNvdXJjZSwgYXJlYSkge1xuICAgIGNvbnN0IHRhcmdldCA9IF9nZXRUYXJnZXQoc291cmNlKTtcbiAgICBjb25zdCB7IGxpbmUgLCBzY2FsZSAsIGF4aXMgIH0gPSBzb3VyY2U7XG4gICAgY29uc3QgbGluZU9wdHMgPSBsaW5lLm9wdGlvbnM7XG4gICAgY29uc3QgZmlsbE9wdGlvbiA9IGxpbmVPcHRzLmZpbGw7XG4gICAgY29uc3QgY29sb3IgPSBsaW5lT3B0cy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgY29uc3QgeyBhYm92ZSA9Y29sb3IgLCBiZWxvdyA9Y29sb3IgIH0gPSBmaWxsT3B0aW9uIHx8IHt9O1xuICAgIGlmICh0YXJnZXQgJiYgbGluZS5wb2ludHMubGVuZ3RoKSB7XG4gICAgICAgIGNsaXBBcmVhKGN0eCwgYXJlYSk7XG4gICAgICAgIGRvRmlsbChjdHgsIHtcbiAgICAgICAgICAgIGxpbmUsXG4gICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICBhYm92ZSxcbiAgICAgICAgICAgIGJlbG93LFxuICAgICAgICAgICAgYXJlYSxcbiAgICAgICAgICAgIHNjYWxlLFxuICAgICAgICAgICAgYXhpc1xuICAgICAgICB9KTtcbiAgICAgICAgdW5jbGlwQXJlYShjdHgpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRvRmlsbChjdHgsIGNmZykge1xuICAgIGNvbnN0IHsgbGluZSAsIHRhcmdldCAsIGFib3ZlICwgYmVsb3cgLCBhcmVhICwgc2NhbGUgIH0gPSBjZmc7XG4gICAgY29uc3QgcHJvcGVydHkgPSBsaW5lLl9sb29wID8gJ2FuZ2xlJyA6IGNmZy5heGlzO1xuICAgIGN0eC5zYXZlKCk7XG4gICAgaWYgKHByb3BlcnR5ID09PSAneCcgJiYgYmVsb3cgIT09IGFib3ZlKSB7XG4gICAgICAgIGNsaXBWZXJ0aWNhbChjdHgsIHRhcmdldCwgYXJlYS50b3ApO1xuICAgICAgICBmaWxsKGN0eCwge1xuICAgICAgICAgICAgbGluZSxcbiAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgIGNvbG9yOiBhYm92ZSxcbiAgICAgICAgICAgIHNjYWxlLFxuICAgICAgICAgICAgcHJvcGVydHlcbiAgICAgICAgfSk7XG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGNsaXBWZXJ0aWNhbChjdHgsIHRhcmdldCwgYXJlYS5ib3R0b20pO1xuICAgIH1cbiAgICBmaWxsKGN0eCwge1xuICAgICAgICBsaW5lLFxuICAgICAgICB0YXJnZXQsXG4gICAgICAgIGNvbG9yOiBiZWxvdyxcbiAgICAgICAgc2NhbGUsXG4gICAgICAgIHByb3BlcnR5XG4gICAgfSk7XG4gICAgY3R4LnJlc3RvcmUoKTtcbn1cbmZ1bmN0aW9uIGNsaXBWZXJ0aWNhbChjdHgsIHRhcmdldCwgY2xpcFkpIHtcbiAgICBjb25zdCB7IHNlZ21lbnRzICwgcG9pbnRzICB9ID0gdGFyZ2V0O1xuICAgIGxldCBmaXJzdCA9IHRydWU7XG4gICAgbGV0IGxpbmVMb29wID0gZmFsc2U7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGZvciAoY29uc3Qgc2VnbWVudCBvZiBzZWdtZW50cyl7XG4gICAgICAgIGNvbnN0IHsgc3RhcnQgLCBlbmQgIH0gPSBzZWdtZW50O1xuICAgICAgICBjb25zdCBmaXJzdFBvaW50ID0gcG9pbnRzW3N0YXJ0XTtcbiAgICAgICAgY29uc3QgbGFzdFBvaW50ID0gcG9pbnRzW19maW5kU2VnbWVudEVuZChzdGFydCwgZW5kLCBwb2ludHMpXTtcbiAgICAgICAgaWYgKGZpcnN0KSB7XG4gICAgICAgICAgICBjdHgubW92ZVRvKGZpcnN0UG9pbnQueCwgZmlyc3RQb2ludC55KTtcbiAgICAgICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdHgubGluZVRvKGZpcnN0UG9pbnQueCwgY2xpcFkpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyhmaXJzdFBvaW50LngsIGZpcnN0UG9pbnQueSk7XG4gICAgICAgIH1cbiAgICAgICAgbGluZUxvb3AgPSAhIXRhcmdldC5wYXRoU2VnbWVudChjdHgsIHNlZ21lbnQsIHtcbiAgICAgICAgICAgIG1vdmU6IGxpbmVMb29wXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAobGluZUxvb3ApIHtcbiAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN0eC5saW5lVG8obGFzdFBvaW50LngsIGNsaXBZKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjdHgubGluZVRvKHRhcmdldC5maXJzdCgpLngsIGNsaXBZKTtcbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgY3R4LmNsaXAoKTtcbn1cbmZ1bmN0aW9uIGZpbGwoY3R4LCBjZmcpIHtcbiAgICBjb25zdCB7IGxpbmUgLCB0YXJnZXQgLCBwcm9wZXJ0eSAsIGNvbG9yICwgc2NhbGUgIH0gPSBjZmc7XG4gICAgY29uc3Qgc2VnbWVudHMgPSBfc2VnbWVudHMobGluZSwgdGFyZ2V0LCBwcm9wZXJ0eSk7XG4gICAgZm9yIChjb25zdCB7IHNvdXJjZTogc3JjICwgdGFyZ2V0OiB0Z3QgLCBzdGFydCAsIGVuZCAgfSBvZiBzZWdtZW50cyl7XG4gICAgICAgIGNvbnN0IHsgc3R5bGU6IHsgYmFja2dyb3VuZENvbG9yID1jb2xvciAgfSA9IHt9ICB9ID0gc3JjO1xuICAgICAgICBjb25zdCBub3RTaGFwZSA9IHRhcmdldCAhPT0gdHJ1ZTtcbiAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgY2xpcEJvdW5kcyhjdHgsIHNjYWxlLCBub3RTaGFwZSAmJiBfZ2V0Qm91bmRzKHByb3BlcnR5LCBzdGFydCwgZW5kKSk7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY29uc3QgbGluZUxvb3AgPSAhIWxpbmUucGF0aFNlZ21lbnQoY3R4LCBzcmMpO1xuICAgICAgICBsZXQgbG9vcDtcbiAgICAgICAgaWYgKG5vdFNoYXBlKSB7XG4gICAgICAgICAgICBpZiAobGluZUxvb3ApIHtcbiAgICAgICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGludGVycG9sYXRlZExpbmVUbyhjdHgsIHRhcmdldCwgZW5kLCBwcm9wZXJ0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB0YXJnZXRMb29wID0gISF0YXJnZXQucGF0aFNlZ21lbnQoY3R4LCB0Z3QsIHtcbiAgICAgICAgICAgICAgICBtb3ZlOiBsaW5lTG9vcCxcbiAgICAgICAgICAgICAgICByZXZlcnNlOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxvb3AgPSBsaW5lTG9vcCAmJiB0YXJnZXRMb29wO1xuICAgICAgICAgICAgaWYgKCFsb29wKSB7XG4gICAgICAgICAgICAgICAgaW50ZXJwb2xhdGVkTGluZVRvKGN0eCwgdGFyZ2V0LCBzdGFydCwgcHJvcGVydHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgY3R4LmZpbGwobG9vcCA/ICdldmVub2RkJyA6ICdub256ZXJvJyk7XG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gY2xpcEJvdW5kcyhjdHgsIHNjYWxlLCBib3VuZHMpIHtcbiAgICBjb25zdCB7IHRvcCAsIGJvdHRvbSAgfSA9IHNjYWxlLmNoYXJ0LmNoYXJ0QXJlYTtcbiAgICBjb25zdCB7IHByb3BlcnR5ICwgc3RhcnQgLCBlbmQgIH0gPSBib3VuZHMgfHwge307XG4gICAgaWYgKHByb3BlcnR5ID09PSAneCcpIHtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHgucmVjdChzdGFydCwgdG9wLCBlbmQgLSBzdGFydCwgYm90dG9tIC0gdG9wKTtcbiAgICAgICAgY3R4LmNsaXAoKTtcbiAgICB9XG59XG5mdW5jdGlvbiBpbnRlcnBvbGF0ZWRMaW5lVG8oY3R4LCB0YXJnZXQsIHBvaW50LCBwcm9wZXJ0eSkge1xuICAgIGNvbnN0IGludGVycG9sYXRlZFBvaW50ID0gdGFyZ2V0LmludGVycG9sYXRlKHBvaW50LCBwcm9wZXJ0eSk7XG4gICAgaWYgKGludGVycG9sYXRlZFBvaW50KSB7XG4gICAgICAgIGN0eC5saW5lVG8oaW50ZXJwb2xhdGVkUG9pbnQueCwgaW50ZXJwb2xhdGVkUG9pbnQueSk7XG4gICAgfVxufVxuXG52YXIgaW5kZXggPSB7XG4gICAgaWQ6ICdmaWxsZXInLFxuICAgIGFmdGVyRGF0YXNldHNVcGRhdGUgKGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBjb3VudCA9IChjaGFydC5kYXRhLmRhdGFzZXRzIHx8IFtdKS5sZW5ndGg7XG4gICAgICAgIGNvbnN0IHNvdXJjZXMgPSBbXTtcbiAgICAgICAgbGV0IG1ldGEsIGksIGxpbmUsIHNvdXJjZTtcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgY291bnQ7ICsraSl7XG4gICAgICAgICAgICBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoaSk7XG4gICAgICAgICAgICBsaW5lID0gbWV0YS5kYXRhc2V0O1xuICAgICAgICAgICAgc291cmNlID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChsaW5lICYmIGxpbmUub3B0aW9ucyAmJiBsaW5lIGluc3RhbmNlb2YgTGluZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBzb3VyY2UgPSB7XG4gICAgICAgICAgICAgICAgICAgIHZpc2libGU6IGNoYXJ0LmlzRGF0YXNldFZpc2libGUoaSksXG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiBpLFxuICAgICAgICAgICAgICAgICAgICBmaWxsOiBfZGVjb2RlRmlsbChsaW5lLCBpLCBjb3VudCksXG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0LFxuICAgICAgICAgICAgICAgICAgICBheGlzOiBtZXRhLmNvbnRyb2xsZXIub3B0aW9ucy5pbmRleEF4aXMsXG4gICAgICAgICAgICAgICAgICAgIHNjYWxlOiBtZXRhLnZTY2FsZSxcbiAgICAgICAgICAgICAgICAgICAgbGluZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtZXRhLiRmaWxsZXIgPSBzb3VyY2U7XG4gICAgICAgICAgICBzb3VyY2VzLnB1c2goc291cmNlKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IoaSA9IDA7IGkgPCBjb3VudDsgKytpKXtcbiAgICAgICAgICAgIHNvdXJjZSA9IHNvdXJjZXNbaV07XG4gICAgICAgICAgICBpZiAoIXNvdXJjZSB8fCBzb3VyY2UuZmlsbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNvdXJjZS5maWxsID0gX3Jlc29sdmVUYXJnZXQoc291cmNlcywgaSwgb3B0aW9ucy5wcm9wYWdhdGUpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBiZWZvcmVEcmF3IChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgZHJhdyA9IG9wdGlvbnMuZHJhd1RpbWUgPT09ICdiZWZvcmVEcmF3JztcbiAgICAgICAgY29uc3QgbWV0YXNldHMgPSBjaGFydC5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCk7XG4gICAgICAgIGNvbnN0IGFyZWEgPSBjaGFydC5jaGFydEFyZWE7XG4gICAgICAgIGZvcihsZXQgaSA9IG1ldGFzZXRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKXtcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IG1ldGFzZXRzW2ldLiRmaWxsZXI7XG4gICAgICAgICAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc291cmNlLmxpbmUudXBkYXRlQ29udHJvbFBvaW50cyhhcmVhLCBzb3VyY2UuYXhpcyk7XG4gICAgICAgICAgICBpZiAoZHJhdyAmJiBzb3VyY2UuZmlsbCkge1xuICAgICAgICAgICAgICAgIF9kcmF3ZmlsbChjaGFydC5jdHgsIHNvdXJjZSwgYXJlYSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGJlZm9yZURhdGFzZXRzRHJhdyAoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmRyYXdUaW1lICE9PSAnYmVmb3JlRGF0YXNldHNEcmF3Jykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGFzZXRzID0gY2hhcnQuZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpO1xuICAgICAgICBmb3IobGV0IGkgPSBtZXRhc2V0cy5sZW5ndGggLSAxOyBpID49IDA7IC0taSl7XG4gICAgICAgICAgICBjb25zdCBzb3VyY2UgPSBtZXRhc2V0c1tpXS4kZmlsbGVyO1xuICAgICAgICAgICAgaWYgKF9zaG91bGRBcHBseUZpbGwoc291cmNlKSkge1xuICAgICAgICAgICAgICAgIF9kcmF3ZmlsbChjaGFydC5jdHgsIHNvdXJjZSwgY2hhcnQuY2hhcnRBcmVhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgYmVmb3JlRGF0YXNldERyYXcgKGNoYXJ0LCBhcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IGFyZ3MubWV0YS4kZmlsbGVyO1xuICAgICAgICBpZiAoIV9zaG91bGRBcHBseUZpbGwoc291cmNlKSB8fCBvcHRpb25zLmRyYXdUaW1lICE9PSAnYmVmb3JlRGF0YXNldERyYXcnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgX2RyYXdmaWxsKGNoYXJ0LmN0eCwgc291cmNlLCBjaGFydC5jaGFydEFyZWEpO1xuICAgIH0sXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgcHJvcGFnYXRlOiB0cnVlLFxuICAgICAgICBkcmF3VGltZTogJ2JlZm9yZURhdGFzZXREcmF3J1xuICAgIH1cbn07XG5cbmNvbnN0IGdldEJveFNpemUgPSAobGFiZWxPcHRzLCBmb250U2l6ZSk9PntcbiAgICBsZXQgeyBib3hIZWlnaHQgPWZvbnRTaXplICwgYm94V2lkdGggPWZvbnRTaXplICB9ID0gbGFiZWxPcHRzO1xuICAgIGlmIChsYWJlbE9wdHMudXNlUG9pbnRTdHlsZSkge1xuICAgICAgICBib3hIZWlnaHQgPSBNYXRoLm1pbihib3hIZWlnaHQsIGZvbnRTaXplKTtcbiAgICAgICAgYm94V2lkdGggPSBsYWJlbE9wdHMucG9pbnRTdHlsZVdpZHRoIHx8IE1hdGgubWluKGJveFdpZHRoLCBmb250U2l6ZSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGJveFdpZHRoLFxuICAgICAgICBib3hIZWlnaHQsXG4gICAgICAgIGl0ZW1IZWlnaHQ6IE1hdGgubWF4KGZvbnRTaXplLCBib3hIZWlnaHQpXG4gICAgfTtcbn07XG5jb25zdCBpdGVtc0VxdWFsID0gKGEsIGIpPT5hICE9PSBudWxsICYmIGIgIT09IG51bGwgJiYgYS5kYXRhc2V0SW5kZXggPT09IGIuZGF0YXNldEluZGV4ICYmIGEuaW5kZXggPT09IGIuaW5kZXg7XG5jbGFzcyBMZWdlbmQgZXh0ZW5kcyBFbGVtZW50IHtcbiBjb25zdHJ1Y3Rvcihjb25maWcpe1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9hZGRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmxlZ2VuZEhpdEJveGVzID0gW107XG4gdGhpcy5faG92ZXJlZEl0ZW0gPSBudWxsO1xuICAgICAgICB0aGlzLmRvdWdobnV0TW9kZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNoYXJ0ID0gY29uZmlnLmNoYXJ0O1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBjb25maWcub3B0aW9ucztcbiAgICAgICAgdGhpcy5jdHggPSBjb25maWcuY3R4O1xuICAgICAgICB0aGlzLmxlZ2VuZEl0ZW1zID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmNvbHVtblNpemVzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmxpbmVXaWR0aHMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubWF4SGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm1heFdpZHRoID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnRvcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5ib3R0b20gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubGVmdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5yaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMud2lkdGggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX21hcmdpbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMud2VpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmZ1bGxTaXplID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB1cGRhdGUobWF4V2lkdGgsIG1heEhlaWdodCwgbWFyZ2lucykge1xuICAgICAgICB0aGlzLm1heFdpZHRoID0gbWF4V2lkdGg7XG4gICAgICAgIHRoaXMubWF4SGVpZ2h0ID0gbWF4SGVpZ2h0O1xuICAgICAgICB0aGlzLl9tYXJnaW5zID0gbWFyZ2lucztcbiAgICAgICAgdGhpcy5zZXREaW1lbnNpb25zKCk7XG4gICAgICAgIHRoaXMuYnVpbGRMYWJlbHMoKTtcbiAgICAgICAgdGhpcy5maXQoKTtcbiAgICB9XG4gICAgc2V0RGltZW5zaW9ucygpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSB0aGlzLm1heFdpZHRoO1xuICAgICAgICAgICAgdGhpcy5sZWZ0ID0gdGhpcy5fbWFyZ2lucy5sZWZ0O1xuICAgICAgICAgICAgdGhpcy5yaWdodCA9IHRoaXMud2lkdGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMubWF4SGVpZ2h0O1xuICAgICAgICAgICAgdGhpcy50b3AgPSB0aGlzLl9tYXJnaW5zLnRvcDtcbiAgICAgICAgICAgIHRoaXMuYm90dG9tID0gdGhpcy5oZWlnaHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYnVpbGRMYWJlbHMoKSB7XG4gICAgICAgIGNvbnN0IGxhYmVsT3B0cyA9IHRoaXMub3B0aW9ucy5sYWJlbHMgfHwge307XG4gICAgICAgIGxldCBsZWdlbmRJdGVtcyA9IGNhbGxiYWNrKGxhYmVsT3B0cy5nZW5lcmF0ZUxhYmVscywgW1xuICAgICAgICAgICAgdGhpcy5jaGFydFxuICAgICAgICBdLCB0aGlzKSB8fCBbXTtcbiAgICAgICAgaWYgKGxhYmVsT3B0cy5maWx0ZXIpIHtcbiAgICAgICAgICAgIGxlZ2VuZEl0ZW1zID0gbGVnZW5kSXRlbXMuZmlsdGVyKChpdGVtKT0+bGFiZWxPcHRzLmZpbHRlcihpdGVtLCB0aGlzLmNoYXJ0LmRhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGFiZWxPcHRzLnNvcnQpIHtcbiAgICAgICAgICAgIGxlZ2VuZEl0ZW1zID0gbGVnZW5kSXRlbXMuc29ydCgoYSwgYik9PmxhYmVsT3B0cy5zb3J0KGEsIGIsIHRoaXMuY2hhcnQuZGF0YSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucmV2ZXJzZSkge1xuICAgICAgICAgICAgbGVnZW5kSXRlbXMucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGVnZW5kSXRlbXMgPSBsZWdlbmRJdGVtcztcbiAgICB9XG4gICAgZml0KCkge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnMgLCBjdHggIH0gPSB0aGlzO1xuICAgICAgICBpZiAoIW9wdGlvbnMuZGlzcGxheSkge1xuICAgICAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMuaGVpZ2h0ID0gMDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYWJlbE9wdHMgPSBvcHRpb25zLmxhYmVscztcbiAgICAgICAgY29uc3QgbGFiZWxGb250ID0gdG9Gb250KGxhYmVsT3B0cy5mb250KTtcbiAgICAgICAgY29uc3QgZm9udFNpemUgPSBsYWJlbEZvbnQuc2l6ZTtcbiAgICAgICAgY29uc3QgdGl0bGVIZWlnaHQgPSB0aGlzLl9jb21wdXRlVGl0bGVIZWlnaHQoKTtcbiAgICAgICAgY29uc3QgeyBib3hXaWR0aCAsIGl0ZW1IZWlnaHQgIH0gPSBnZXRCb3hTaXplKGxhYmVsT3B0cywgZm9udFNpemUpO1xuICAgICAgICBsZXQgd2lkdGgsIGhlaWdodDtcbiAgICAgICAgY3R4LmZvbnQgPSBsYWJlbEZvbnQuc3RyaW5nO1xuICAgICAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgd2lkdGggPSB0aGlzLm1heFdpZHRoO1xuICAgICAgICAgICAgaGVpZ2h0ID0gdGhpcy5fZml0Um93cyh0aXRsZUhlaWdodCwgZm9udFNpemUsIGJveFdpZHRoLCBpdGVtSGVpZ2h0KSArIDEwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGVpZ2h0ID0gdGhpcy5tYXhIZWlnaHQ7XG4gICAgICAgICAgICB3aWR0aCA9IHRoaXMuX2ZpdENvbHModGl0bGVIZWlnaHQsIGxhYmVsRm9udCwgYm94V2lkdGgsIGl0ZW1IZWlnaHQpICsgMTA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy53aWR0aCA9IE1hdGgubWluKHdpZHRoLCBvcHRpb25zLm1heFdpZHRoIHx8IHRoaXMubWF4V2lkdGgpO1xuICAgICAgICB0aGlzLmhlaWdodCA9IE1hdGgubWluKGhlaWdodCwgb3B0aW9ucy5tYXhIZWlnaHQgfHwgdGhpcy5tYXhIZWlnaHQpO1xuICAgIH1cbiBfZml0Um93cyh0aXRsZUhlaWdodCwgZm9udFNpemUsIGJveFdpZHRoLCBpdGVtSGVpZ2h0KSB7XG4gICAgICAgIGNvbnN0IHsgY3R4ICwgbWF4V2lkdGggLCBvcHRpb25zOiB7IGxhYmVsczogeyBwYWRkaW5nICB9ICB9ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgaGl0Ym94ZXMgPSB0aGlzLmxlZ2VuZEhpdEJveGVzID0gW107XG4gICAgICAgIGNvbnN0IGxpbmVXaWR0aHMgPSB0aGlzLmxpbmVXaWR0aHMgPSBbXG4gICAgICAgICAgICAwXG4gICAgICAgIF07XG4gICAgICAgIGNvbnN0IGxpbmVIZWlnaHQgPSBpdGVtSGVpZ2h0ICsgcGFkZGluZztcbiAgICAgICAgbGV0IHRvdGFsSGVpZ2h0ID0gdGl0bGVIZWlnaHQ7XG4gICAgICAgIGN0eC50ZXh0QWxpZ24gPSAnbGVmdCc7XG4gICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICAgICAgbGV0IHJvdyA9IC0xO1xuICAgICAgICBsZXQgdG9wID0gLWxpbmVIZWlnaHQ7XG4gICAgICAgIHRoaXMubGVnZW5kSXRlbXMuZm9yRWFjaCgobGVnZW5kSXRlbSwgaSk9PntcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1XaWR0aCA9IGJveFdpZHRoICsgZm9udFNpemUgLyAyICsgY3R4Lm1lYXN1cmVUZXh0KGxlZ2VuZEl0ZW0udGV4dCkud2lkdGg7XG4gICAgICAgICAgICBpZiAoaSA9PT0gMCB8fCBsaW5lV2lkdGhzW2xpbmVXaWR0aHMubGVuZ3RoIC0gMV0gKyBpdGVtV2lkdGggKyAyICogcGFkZGluZyA+IG1heFdpZHRoKSB7XG4gICAgICAgICAgICAgICAgdG90YWxIZWlnaHQgKz0gbGluZUhlaWdodDtcbiAgICAgICAgICAgICAgICBsaW5lV2lkdGhzW2xpbmVXaWR0aHMubGVuZ3RoIC0gKGkgPiAwID8gMCA6IDEpXSA9IDA7XG4gICAgICAgICAgICAgICAgdG9wICs9IGxpbmVIZWlnaHQ7XG4gICAgICAgICAgICAgICAgcm93Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoaXRib3hlc1tpXSA9IHtcbiAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgIHRvcCxcbiAgICAgICAgICAgICAgICByb3csXG4gICAgICAgICAgICAgICAgd2lkdGg6IGl0ZW1XaWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGl0ZW1IZWlnaHRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBsaW5lV2lkdGhzW2xpbmVXaWR0aHMubGVuZ3RoIC0gMV0gKz0gaXRlbVdpZHRoICsgcGFkZGluZztcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0b3RhbEhlaWdodDtcbiAgICB9XG4gICAgX2ZpdENvbHModGl0bGVIZWlnaHQsIGxhYmVsRm9udCwgYm94V2lkdGgsIF9pdGVtSGVpZ2h0KSB7XG4gICAgICAgIGNvbnN0IHsgY3R4ICwgbWF4SGVpZ2h0ICwgb3B0aW9uczogeyBsYWJlbHM6IHsgcGFkZGluZyAgfSAgfSAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGhpdGJveGVzID0gdGhpcy5sZWdlbmRIaXRCb3hlcyA9IFtdO1xuICAgICAgICBjb25zdCBjb2x1bW5TaXplcyA9IHRoaXMuY29sdW1uU2l6ZXMgPSBbXTtcbiAgICAgICAgY29uc3QgaGVpZ2h0TGltaXQgPSBtYXhIZWlnaHQgLSB0aXRsZUhlaWdodDtcbiAgICAgICAgbGV0IHRvdGFsV2lkdGggPSBwYWRkaW5nO1xuICAgICAgICBsZXQgY3VycmVudENvbFdpZHRoID0gMDtcbiAgICAgICAgbGV0IGN1cnJlbnRDb2xIZWlnaHQgPSAwO1xuICAgICAgICBsZXQgbGVmdCA9IDA7XG4gICAgICAgIGxldCBjb2wgPSAwO1xuICAgICAgICB0aGlzLmxlZ2VuZEl0ZW1zLmZvckVhY2goKGxlZ2VuZEl0ZW0sIGkpPT57XG4gICAgICAgICAgICBjb25zdCB7IGl0ZW1XaWR0aCAsIGl0ZW1IZWlnaHQgIH0gPSBjYWxjdWxhdGVJdGVtU2l6ZShib3hXaWR0aCwgbGFiZWxGb250LCBjdHgsIGxlZ2VuZEl0ZW0sIF9pdGVtSGVpZ2h0KTtcbiAgICAgICAgICAgIGlmIChpID4gMCAmJiBjdXJyZW50Q29sSGVpZ2h0ICsgaXRlbUhlaWdodCArIDIgKiBwYWRkaW5nID4gaGVpZ2h0TGltaXQpIHtcbiAgICAgICAgICAgICAgICB0b3RhbFdpZHRoICs9IGN1cnJlbnRDb2xXaWR0aCArIHBhZGRpbmc7XG4gICAgICAgICAgICAgICAgY29sdW1uU2l6ZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBjdXJyZW50Q29sV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogY3VycmVudENvbEhlaWdodFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGxlZnQgKz0gY3VycmVudENvbFdpZHRoICsgcGFkZGluZztcbiAgICAgICAgICAgICAgICBjb2wrKztcbiAgICAgICAgICAgICAgICBjdXJyZW50Q29sV2lkdGggPSBjdXJyZW50Q29sSGVpZ2h0ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhpdGJveGVzW2ldID0ge1xuICAgICAgICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgICAgICAgdG9wOiBjdXJyZW50Q29sSGVpZ2h0LFxuICAgICAgICAgICAgICAgIGNvbCxcbiAgICAgICAgICAgICAgICB3aWR0aDogaXRlbVdpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogaXRlbUhlaWdodFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGN1cnJlbnRDb2xXaWR0aCA9IE1hdGgubWF4KGN1cnJlbnRDb2xXaWR0aCwgaXRlbVdpZHRoKTtcbiAgICAgICAgICAgIGN1cnJlbnRDb2xIZWlnaHQgKz0gaXRlbUhlaWdodCArIHBhZGRpbmc7XG4gICAgICAgIH0pO1xuICAgICAgICB0b3RhbFdpZHRoICs9IGN1cnJlbnRDb2xXaWR0aDtcbiAgICAgICAgY29sdW1uU2l6ZXMucHVzaCh7XG4gICAgICAgICAgICB3aWR0aDogY3VycmVudENvbFdpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiBjdXJyZW50Q29sSGVpZ2h0XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdG90YWxXaWR0aDtcbiAgICB9XG4gICAgYWRqdXN0SGl0Qm94ZXMoKSB7XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0aXRsZUhlaWdodCA9IHRoaXMuX2NvbXB1dGVUaXRsZUhlaWdodCgpO1xuICAgICAgICBjb25zdCB7IGxlZ2VuZEhpdEJveGVzOiBoaXRib3hlcyAsIG9wdGlvbnM6IHsgYWxpZ24gLCBsYWJlbHM6IHsgcGFkZGluZyAgfSAsIHJ0bCAgfSAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHJ0bEhlbHBlciA9IGdldFJ0bEFkYXB0ZXIocnRsLCB0aGlzLmxlZnQsIHRoaXMud2lkdGgpO1xuICAgICAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgbGV0IHJvdyA9IDA7XG4gICAgICAgICAgICBsZXQgbGVmdCA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLmxlZnQgKyBwYWRkaW5nLCB0aGlzLnJpZ2h0IC0gdGhpcy5saW5lV2lkdGhzW3Jvd10pO1xuICAgICAgICAgICAgZm9yIChjb25zdCBoaXRib3ggb2YgaGl0Ym94ZXMpe1xuICAgICAgICAgICAgICAgIGlmIChyb3cgIT09IGhpdGJveC5yb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgcm93ID0gaGl0Ym94LnJvdztcbiAgICAgICAgICAgICAgICAgICAgbGVmdCA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLmxlZnQgKyBwYWRkaW5nLCB0aGlzLnJpZ2h0IC0gdGhpcy5saW5lV2lkdGhzW3Jvd10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBoaXRib3gudG9wICs9IHRoaXMudG9wICsgdGl0bGVIZWlnaHQgKyBwYWRkaW5nO1xuICAgICAgICAgICAgICAgIGhpdGJveC5sZWZ0ID0gcnRsSGVscGVyLmxlZnRGb3JMdHIocnRsSGVscGVyLngobGVmdCksIGhpdGJveC53aWR0aCk7XG4gICAgICAgICAgICAgICAgbGVmdCArPSBoaXRib3gud2lkdGggKyBwYWRkaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IGNvbCA9IDA7XG4gICAgICAgICAgICBsZXQgdG9wID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMudG9wICsgdGl0bGVIZWlnaHQgKyBwYWRkaW5nLCB0aGlzLmJvdHRvbSAtIHRoaXMuY29sdW1uU2l6ZXNbY29sXS5oZWlnaHQpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBoaXRib3gxIG9mIGhpdGJveGVzKXtcbiAgICAgICAgICAgICAgICBpZiAoaGl0Ym94MS5jb2wgIT09IGNvbCkge1xuICAgICAgICAgICAgICAgICAgICBjb2wgPSBoaXRib3gxLmNvbDtcbiAgICAgICAgICAgICAgICAgICAgdG9wID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMudG9wICsgdGl0bGVIZWlnaHQgKyBwYWRkaW5nLCB0aGlzLmJvdHRvbSAtIHRoaXMuY29sdW1uU2l6ZXNbY29sXS5oZWlnaHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBoaXRib3gxLnRvcCA9IHRvcDtcbiAgICAgICAgICAgICAgICBoaXRib3gxLmxlZnQgKz0gdGhpcy5sZWZ0ICsgcGFkZGluZztcbiAgICAgICAgICAgICAgICBoaXRib3gxLmxlZnQgPSBydGxIZWxwZXIubGVmdEZvckx0cihydGxIZWxwZXIueChoaXRib3gxLmxlZnQpLCBoaXRib3gxLndpZHRoKTtcbiAgICAgICAgICAgICAgICB0b3AgKz0gaGl0Ym94MS5oZWlnaHQgKyBwYWRkaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlzSG9yaXpvbnRhbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5wb3NpdGlvbiA9PT0gJ3RvcCcgfHwgdGhpcy5vcHRpb25zLnBvc2l0aW9uID09PSAnYm90dG9tJztcbiAgICB9XG4gICAgZHJhdygpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5kaXNwbGF5KSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgICAgIGNsaXBBcmVhKGN0eCwgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLl9kcmF3KCk7XG4gICAgICAgICAgICB1bmNsaXBBcmVhKGN0eCk7XG4gICAgICAgIH1cbiAgICB9XG4gX2RyYXcoKSB7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9uczogb3B0cyAsIGNvbHVtblNpemVzICwgbGluZVdpZHRocyAsIGN0eCAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgYWxpZ24gLCBsYWJlbHM6IGxhYmVsT3B0cyAgfSA9IG9wdHM7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRDb2xvciA9IGRlZmF1bHRzLmNvbG9yO1xuICAgICAgICBjb25zdCBydGxIZWxwZXIgPSBnZXRSdGxBZGFwdGVyKG9wdHMucnRsLCB0aGlzLmxlZnQsIHRoaXMud2lkdGgpO1xuICAgICAgICBjb25zdCBsYWJlbEZvbnQgPSB0b0ZvbnQobGFiZWxPcHRzLmZvbnQpO1xuICAgICAgICBjb25zdCB7IHBhZGRpbmcgIH0gPSBsYWJlbE9wdHM7XG4gICAgICAgIGNvbnN0IGZvbnRTaXplID0gbGFiZWxGb250LnNpemU7XG4gICAgICAgIGNvbnN0IGhhbGZGb250U2l6ZSA9IGZvbnRTaXplIC8gMjtcbiAgICAgICAgbGV0IGN1cnNvcjtcbiAgICAgICAgdGhpcy5kcmF3VGl0bGUoKTtcbiAgICAgICAgY3R4LnRleHRBbGlnbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24oJ2xlZnQnKTtcbiAgICAgICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgICAgICBjdHgubGluZVdpZHRoID0gMC41O1xuICAgICAgICBjdHguZm9udCA9IGxhYmVsRm9udC5zdHJpbmc7XG4gICAgICAgIGNvbnN0IHsgYm94V2lkdGggLCBib3hIZWlnaHQgLCBpdGVtSGVpZ2h0ICB9ID0gZ2V0Qm94U2l6ZShsYWJlbE9wdHMsIGZvbnRTaXplKTtcbiAgICAgICAgY29uc3QgZHJhd0xlZ2VuZEJveCA9IGZ1bmN0aW9uKHgsIHksIGxlZ2VuZEl0ZW0pIHtcbiAgICAgICAgICAgIGlmIChpc05hTihib3hXaWR0aCkgfHwgYm94V2lkdGggPD0gMCB8fCBpc05hTihib3hIZWlnaHQpIHx8IGJveEhlaWdodCA8IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgY29uc3QgbGluZVdpZHRoID0gdmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5saW5lV2lkdGgsIDEpO1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0uZmlsbFN0eWxlLCBkZWZhdWx0Q29sb3IpO1xuICAgICAgICAgICAgY3R4LmxpbmVDYXAgPSB2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLmxpbmVDYXAsICdidXR0Jyk7XG4gICAgICAgICAgICBjdHgubGluZURhc2hPZmZzZXQgPSB2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLmxpbmVEYXNoT2Zmc2V0LCAwKTtcbiAgICAgICAgICAgIGN0eC5saW5lSm9pbiA9IHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0ubGluZUpvaW4sICdtaXRlcicpO1xuICAgICAgICAgICAgY3R4LmxpbmVXaWR0aCA9IGxpbmVXaWR0aDtcbiAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0uc3Ryb2tlU3R5bGUsIGRlZmF1bHRDb2xvcik7XG4gICAgICAgICAgICBjdHguc2V0TGluZURhc2godmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5saW5lRGFzaCwgW10pKTtcbiAgICAgICAgICAgIGlmIChsYWJlbE9wdHMudXNlUG9pbnRTdHlsZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRyYXdPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICByYWRpdXM6IGJveEhlaWdodCAqIE1hdGguU1FSVDIgLyAyLFxuICAgICAgICAgICAgICAgICAgICBwb2ludFN0eWxlOiBsZWdlbmRJdGVtLnBvaW50U3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiBsZWdlbmRJdGVtLnJvdGF0aW9uLFxuICAgICAgICAgICAgICAgICAgICBib3JkZXJXaWR0aDogbGluZVdpZHRoXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCBjZW50ZXJYID0gcnRsSGVscGVyLnhQbHVzKHgsIGJveFdpZHRoIC8gMik7XG4gICAgICAgICAgICAgICAgY29uc3QgY2VudGVyWSA9IHkgKyBoYWxmRm9udFNpemU7XG4gICAgICAgICAgICAgICAgZHJhd1BvaW50TGVnZW5kKGN0eCwgZHJhd09wdGlvbnMsIGNlbnRlclgsIGNlbnRlclksIGxhYmVsT3B0cy5wb2ludFN0eWxlV2lkdGggJiYgYm94V2lkdGgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCB5Qm94VG9wID0geSArIE1hdGgubWF4KChmb250U2l6ZSAtIGJveEhlaWdodCkgLyAyLCAwKTtcbiAgICAgICAgICAgICAgICBjb25zdCB4Qm94TGVmdCA9IHJ0bEhlbHBlci5sZWZ0Rm9yTHRyKHgsIGJveFdpZHRoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBib3JkZXJSYWRpdXMgPSB0b1RSQkxDb3JuZXJzKGxlZ2VuZEl0ZW0uYm9yZGVyUmFkaXVzKTtcbiAgICAgICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC52YWx1ZXMoYm9yZGVyUmFkaXVzKS5zb21lKCh2KT0+diAhPT0gMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkUm91bmRlZFJlY3RQYXRoKGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogeEJveExlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiB5Qm94VG9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgdzogYm94V2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBoOiBib3hIZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICByYWRpdXM6IGJvcmRlclJhZGl1c1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjdHgucmVjdCh4Qm94TGVmdCwgeUJveFRvcCwgYm94V2lkdGgsIGJveEhlaWdodCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgICAgICAgICAgaWYgKGxpbmVXaWR0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZmlsbFRleHQgPSBmdW5jdGlvbih4LCB5LCBsZWdlbmRJdGVtKSB7XG4gICAgICAgICAgICByZW5kZXJUZXh0KGN0eCwgbGVnZW5kSXRlbS50ZXh0LCB4LCB5ICsgaXRlbUhlaWdodCAvIDIsIGxhYmVsRm9udCwge1xuICAgICAgICAgICAgICAgIHN0cmlrZXRocm91Z2g6IGxlZ2VuZEl0ZW0uaGlkZGVuLFxuICAgICAgICAgICAgICAgIHRleHRBbGlnbjogcnRsSGVscGVyLnRleHRBbGlnbihsZWdlbmRJdGVtLnRleHRBbGlnbilcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBpc0hvcml6b250YWwgPSB0aGlzLmlzSG9yaXpvbnRhbCgpO1xuICAgICAgICBjb25zdCB0aXRsZUhlaWdodCA9IHRoaXMuX2NvbXB1dGVUaXRsZUhlaWdodCgpO1xuICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICBjdXJzb3IgPSB7XG4gICAgICAgICAgICAgICAgeDogX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMubGVmdCArIHBhZGRpbmcsIHRoaXMucmlnaHQgLSBsaW5lV2lkdGhzWzBdKSxcbiAgICAgICAgICAgICAgICB5OiB0aGlzLnRvcCArIHBhZGRpbmcgKyB0aXRsZUhlaWdodCxcbiAgICAgICAgICAgICAgICBsaW5lOiAwXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3Vyc29yID0ge1xuICAgICAgICAgICAgICAgIHg6IHRoaXMubGVmdCArIHBhZGRpbmcsXG4gICAgICAgICAgICAgICAgeTogX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMudG9wICsgdGl0bGVIZWlnaHQgKyBwYWRkaW5nLCB0aGlzLmJvdHRvbSAtIGNvbHVtblNpemVzWzBdLmhlaWdodCksXG4gICAgICAgICAgICAgICAgbGluZTogMFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBvdmVycmlkZVRleHREaXJlY3Rpb24odGhpcy5jdHgsIG9wdHMudGV4dERpcmVjdGlvbik7XG4gICAgICAgIGNvbnN0IGxpbmVIZWlnaHQgPSBpdGVtSGVpZ2h0ICsgcGFkZGluZztcbiAgICAgICAgdGhpcy5sZWdlbmRJdGVtcy5mb3JFYWNoKChsZWdlbmRJdGVtLCBpKT0+e1xuICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gbGVnZW5kSXRlbS5mb250Q29sb3I7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gbGVnZW5kSXRlbS5mb250Q29sb3I7XG4gICAgICAgICAgICBjb25zdCB0ZXh0V2lkdGggPSBjdHgubWVhc3VyZVRleHQobGVnZW5kSXRlbS50ZXh0KS53aWR0aDtcbiAgICAgICAgICAgIGNvbnN0IHRleHRBbGlnbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24obGVnZW5kSXRlbS50ZXh0QWxpZ24gfHwgKGxlZ2VuZEl0ZW0udGV4dEFsaWduID0gbGFiZWxPcHRzLnRleHRBbGlnbikpO1xuICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBib3hXaWR0aCArIGhhbGZGb250U2l6ZSArIHRleHRXaWR0aDtcbiAgICAgICAgICAgIGxldCB4ID0gY3Vyc29yLng7XG4gICAgICAgICAgICBsZXQgeSA9IGN1cnNvci55O1xuICAgICAgICAgICAgcnRsSGVscGVyLnNldFdpZHRoKHRoaXMud2lkdGgpO1xuICAgICAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgICAgIGlmIChpID4gMCAmJiB4ICsgd2lkdGggKyBwYWRkaW5nID4gdGhpcy5yaWdodCkge1xuICAgICAgICAgICAgICAgICAgICB5ID0gY3Vyc29yLnkgKz0gbGluZUhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yLmxpbmUrKztcbiAgICAgICAgICAgICAgICAgICAgeCA9IGN1cnNvci54ID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMubGVmdCArIHBhZGRpbmcsIHRoaXMucmlnaHQgLSBsaW5lV2lkdGhzW2N1cnNvci5saW5lXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChpID4gMCAmJiB5ICsgbGluZUhlaWdodCA+IHRoaXMuYm90dG9tKSB7XG4gICAgICAgICAgICAgICAgeCA9IGN1cnNvci54ID0geCArIGNvbHVtblNpemVzW2N1cnNvci5saW5lXS53aWR0aCArIHBhZGRpbmc7XG4gICAgICAgICAgICAgICAgY3Vyc29yLmxpbmUrKztcbiAgICAgICAgICAgICAgICB5ID0gY3Vyc29yLnkgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgdGhpcy50b3AgKyB0aXRsZUhlaWdodCArIHBhZGRpbmcsIHRoaXMuYm90dG9tIC0gY29sdW1uU2l6ZXNbY3Vyc29yLmxpbmVdLmhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZWFsWCA9IHJ0bEhlbHBlci54KHgpO1xuICAgICAgICAgICAgZHJhd0xlZ2VuZEJveChyZWFsWCwgeSwgbGVnZW5kSXRlbSk7XG4gICAgICAgICAgICB4ID0gX3RleHRYKHRleHRBbGlnbiwgeCArIGJveFdpZHRoICsgaGFsZkZvbnRTaXplLCBpc0hvcml6b250YWwgPyB4ICsgd2lkdGggOiB0aGlzLnJpZ2h0LCBvcHRzLnJ0bCk7XG4gICAgICAgICAgICBmaWxsVGV4dChydGxIZWxwZXIueCh4KSwgeSwgbGVnZW5kSXRlbSk7XG4gICAgICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICAgICAgY3Vyc29yLnggKz0gd2lkdGggKyBwYWRkaW5nO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbGVnZW5kSXRlbS50ZXh0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZvbnRMaW5lSGVpZ2h0ID0gbGFiZWxGb250LmxpbmVIZWlnaHQ7XG4gICAgICAgICAgICAgICAgY3Vyc29yLnkgKz0gY2FsY3VsYXRlTGVnZW5kSXRlbUhlaWdodChsZWdlbmRJdGVtLCBmb250TGluZUhlaWdodCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGN1cnNvci55ICs9IGxpbmVIZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXN0b3JlVGV4dERpcmVjdGlvbih0aGlzLmN0eCwgb3B0cy50ZXh0RGlyZWN0aW9uKTtcbiAgICB9XG4gZHJhd1RpdGxlKCkge1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB0aXRsZU9wdHMgPSBvcHRzLnRpdGxlO1xuICAgICAgICBjb25zdCB0aXRsZUZvbnQgPSB0b0ZvbnQodGl0bGVPcHRzLmZvbnQpO1xuICAgICAgICBjb25zdCB0aXRsZVBhZGRpbmcgPSB0b1BhZGRpbmcodGl0bGVPcHRzLnBhZGRpbmcpO1xuICAgICAgICBpZiAoIXRpdGxlT3B0cy5kaXNwbGF5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcnRsSGVscGVyID0gZ2V0UnRsQWRhcHRlcihvcHRzLnJ0bCwgdGhpcy5sZWZ0LCB0aGlzLndpZHRoKTtcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gdGl0bGVPcHRzLnBvc2l0aW9uO1xuICAgICAgICBjb25zdCBoYWxmRm9udFNpemUgPSB0aXRsZUZvbnQuc2l6ZSAvIDI7XG4gICAgICAgIGNvbnN0IHRvcFBhZGRpbmdQbHVzSGFsZkZvbnRTaXplID0gdGl0bGVQYWRkaW5nLnRvcCArIGhhbGZGb250U2l6ZTtcbiAgICAgICAgbGV0IHk7XG4gICAgICAgIGxldCBsZWZ0ID0gdGhpcy5sZWZ0O1xuICAgICAgICBsZXQgbWF4V2lkdGggPSB0aGlzLndpZHRoO1xuICAgICAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgbWF4V2lkdGggPSBNYXRoLm1heCguLi50aGlzLmxpbmVXaWR0aHMpO1xuICAgICAgICAgICAgeSA9IHRoaXMudG9wICsgdG9wUGFkZGluZ1BsdXNIYWxmRm9udFNpemU7XG4gICAgICAgICAgICBsZWZ0ID0gX2FsaWduU3RhcnRFbmQob3B0cy5hbGlnbiwgbGVmdCwgdGhpcy5yaWdodCAtIG1heFdpZHRoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG1heEhlaWdodCA9IHRoaXMuY29sdW1uU2l6ZXMucmVkdWNlKChhY2MsIHNpemUpPT5NYXRoLm1heChhY2MsIHNpemUuaGVpZ2h0KSwgMCk7XG4gICAgICAgICAgICB5ID0gdG9wUGFkZGluZ1BsdXNIYWxmRm9udFNpemUgKyBfYWxpZ25TdGFydEVuZChvcHRzLmFsaWduLCB0aGlzLnRvcCwgdGhpcy5ib3R0b20gLSBtYXhIZWlnaHQgLSBvcHRzLmxhYmVscy5wYWRkaW5nIC0gdGhpcy5fY29tcHV0ZVRpdGxlSGVpZ2h0KCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHggPSBfYWxpZ25TdGFydEVuZChwb3NpdGlvbiwgbGVmdCwgbGVmdCArIG1heFdpZHRoKTtcbiAgICAgICAgY3R4LnRleHRBbGlnbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24oX3RvTGVmdFJpZ2h0Q2VudGVyKHBvc2l0aW9uKSk7XG4gICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gdGl0bGVPcHRzLmNvbG9yO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gdGl0bGVPcHRzLmNvbG9yO1xuICAgICAgICBjdHguZm9udCA9IHRpdGxlRm9udC5zdHJpbmc7XG4gICAgICAgIHJlbmRlclRleHQoY3R4LCB0aXRsZU9wdHMudGV4dCwgeCwgeSwgdGl0bGVGb250KTtcbiAgICB9XG4gX2NvbXB1dGVUaXRsZUhlaWdodCgpIHtcbiAgICAgICAgY29uc3QgdGl0bGVPcHRzID0gdGhpcy5vcHRpb25zLnRpdGxlO1xuICAgICAgICBjb25zdCB0aXRsZUZvbnQgPSB0b0ZvbnQodGl0bGVPcHRzLmZvbnQpO1xuICAgICAgICBjb25zdCB0aXRsZVBhZGRpbmcgPSB0b1BhZGRpbmcodGl0bGVPcHRzLnBhZGRpbmcpO1xuICAgICAgICByZXR1cm4gdGl0bGVPcHRzLmRpc3BsYXkgPyB0aXRsZUZvbnQubGluZUhlaWdodCArIHRpdGxlUGFkZGluZy5oZWlnaHQgOiAwO1xuICAgIH1cbiBfZ2V0TGVnZW5kSXRlbUF0KHgsIHkpIHtcbiAgICAgICAgbGV0IGksIGhpdEJveCwgbGg7XG4gICAgICAgIGlmIChfaXNCZXR3ZWVuKHgsIHRoaXMubGVmdCwgdGhpcy5yaWdodCkgJiYgX2lzQmV0d2Vlbih5LCB0aGlzLnRvcCwgdGhpcy5ib3R0b20pKSB7XG4gICAgICAgICAgICBsaCA9IHRoaXMubGVnZW5kSGl0Qm94ZXM7XG4gICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBsaC5sZW5ndGg7ICsraSl7XG4gICAgICAgICAgICAgICAgaGl0Qm94ID0gbGhbaV07XG4gICAgICAgICAgICAgICAgaWYgKF9pc0JldHdlZW4oeCwgaGl0Qm94LmxlZnQsIGhpdEJveC5sZWZ0ICsgaGl0Qm94LndpZHRoKSAmJiBfaXNCZXR3ZWVuKHksIGhpdEJveC50b3AsIGhpdEJveC50b3AgKyBoaXRCb3guaGVpZ2h0KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sZWdlbmRJdGVtc1tpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuIGhhbmRsZUV2ZW50KGUpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgaWYgKCFpc0xpc3RlbmVkKGUudHlwZSwgb3B0cykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBob3ZlcmVkSXRlbSA9IHRoaXMuX2dldExlZ2VuZEl0ZW1BdChlLngsIGUueSk7XG4gICAgICAgIGlmIChlLnR5cGUgPT09ICdtb3VzZW1vdmUnIHx8IGUudHlwZSA9PT0gJ21vdXNlb3V0Jykge1xuICAgICAgICAgICAgY29uc3QgcHJldmlvdXMgPSB0aGlzLl9ob3ZlcmVkSXRlbTtcbiAgICAgICAgICAgIGNvbnN0IHNhbWVJdGVtID0gaXRlbXNFcXVhbChwcmV2aW91cywgaG92ZXJlZEl0ZW0pO1xuICAgICAgICAgICAgaWYgKHByZXZpb3VzICYmICFzYW1lSXRlbSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG9wdHMub25MZWF2ZSwgW1xuICAgICAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgICAgICBwcmV2aW91cyxcbiAgICAgICAgICAgICAgICAgICAgdGhpc1xuICAgICAgICAgICAgICAgIF0sIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5faG92ZXJlZEl0ZW0gPSBob3ZlcmVkSXRlbTtcbiAgICAgICAgICAgIGlmIChob3ZlcmVkSXRlbSAmJiAhc2FtZUl0ZW0pIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhvcHRzLm9uSG92ZXIsIFtcbiAgICAgICAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgICAgICAgaG92ZXJlZEl0ZW0sXG4gICAgICAgICAgICAgICAgICAgIHRoaXNcbiAgICAgICAgICAgICAgICBdLCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChob3ZlcmVkSXRlbSkge1xuICAgICAgICAgICAgY2FsbGJhY2sob3B0cy5vbkNsaWNrLCBbXG4gICAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgICBob3ZlcmVkSXRlbSxcbiAgICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICBdLCB0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGNhbGN1bGF0ZUl0ZW1TaXplKGJveFdpZHRoLCBsYWJlbEZvbnQsIGN0eCwgbGVnZW5kSXRlbSwgX2l0ZW1IZWlnaHQpIHtcbiAgICBjb25zdCBpdGVtV2lkdGggPSBjYWxjdWxhdGVJdGVtV2lkdGgobGVnZW5kSXRlbSwgYm94V2lkdGgsIGxhYmVsRm9udCwgY3R4KTtcbiAgICBjb25zdCBpdGVtSGVpZ2h0ID0gY2FsY3VsYXRlSXRlbUhlaWdodChfaXRlbUhlaWdodCwgbGVnZW5kSXRlbSwgbGFiZWxGb250LmxpbmVIZWlnaHQpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGl0ZW1XaWR0aCxcbiAgICAgICAgaXRlbUhlaWdodFxuICAgIH07XG59XG5mdW5jdGlvbiBjYWxjdWxhdGVJdGVtV2lkdGgobGVnZW5kSXRlbSwgYm94V2lkdGgsIGxhYmVsRm9udCwgY3R4KSB7XG4gICAgbGV0IGxlZ2VuZEl0ZW1UZXh0ID0gbGVnZW5kSXRlbS50ZXh0O1xuICAgIGlmIChsZWdlbmRJdGVtVGV4dCAmJiB0eXBlb2YgbGVnZW5kSXRlbVRleHQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGxlZ2VuZEl0ZW1UZXh0ID0gbGVnZW5kSXRlbVRleHQucmVkdWNlKChhLCBiKT0+YS5sZW5ndGggPiBiLmxlbmd0aCA/IGEgOiBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGJveFdpZHRoICsgbGFiZWxGb250LnNpemUgLyAyICsgY3R4Lm1lYXN1cmVUZXh0KGxlZ2VuZEl0ZW1UZXh0KS53aWR0aDtcbn1cbmZ1bmN0aW9uIGNhbGN1bGF0ZUl0ZW1IZWlnaHQoX2l0ZW1IZWlnaHQsIGxlZ2VuZEl0ZW0sIGZvbnRMaW5lSGVpZ2h0KSB7XG4gICAgbGV0IGl0ZW1IZWlnaHQgPSBfaXRlbUhlaWdodDtcbiAgICBpZiAodHlwZW9mIGxlZ2VuZEl0ZW0udGV4dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgaXRlbUhlaWdodCA9IGNhbGN1bGF0ZUxlZ2VuZEl0ZW1IZWlnaHQobGVnZW5kSXRlbSwgZm9udExpbmVIZWlnaHQpO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbUhlaWdodDtcbn1cbmZ1bmN0aW9uIGNhbGN1bGF0ZUxlZ2VuZEl0ZW1IZWlnaHQobGVnZW5kSXRlbSwgZm9udExpbmVIZWlnaHQpIHtcbiAgICBjb25zdCBsYWJlbEhlaWdodCA9IGxlZ2VuZEl0ZW0udGV4dCA/IGxlZ2VuZEl0ZW0udGV4dC5sZW5ndGggKyAwLjUgOiAwO1xuICAgIHJldHVybiBmb250TGluZUhlaWdodCAqIGxhYmVsSGVpZ2h0O1xufVxuZnVuY3Rpb24gaXNMaXN0ZW5lZCh0eXBlLCBvcHRzKSB7XG4gICAgaWYgKCh0eXBlID09PSAnbW91c2Vtb3ZlJyB8fCB0eXBlID09PSAnbW91c2VvdXQnKSAmJiAob3B0cy5vbkhvdmVyIHx8IG9wdHMub25MZWF2ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChvcHRzLm9uQ2xpY2sgJiYgKHR5cGUgPT09ICdjbGljaycgfHwgdHlwZSA9PT0gJ21vdXNldXAnKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxudmFyIHBsdWdpbl9sZWdlbmQgPSB7XG4gICAgaWQ6ICdsZWdlbmQnLFxuIF9lbGVtZW50OiBMZWdlbmQsXG4gICAgc3RhcnQgKGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBsZWdlbmQgPSBjaGFydC5sZWdlbmQgPSBuZXcgTGVnZW5kKHtcbiAgICAgICAgICAgIGN0eDogY2hhcnQuY3R4LFxuICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgIGNoYXJ0XG4gICAgICAgIH0pO1xuICAgICAgICBsYXlvdXRzLmNvbmZpZ3VyZShjaGFydCwgbGVnZW5kLCBvcHRpb25zKTtcbiAgICAgICAgbGF5b3V0cy5hZGRCb3goY2hhcnQsIGxlZ2VuZCk7XG4gICAgfSxcbiAgICBzdG9wIChjaGFydCkge1xuICAgICAgICBsYXlvdXRzLnJlbW92ZUJveChjaGFydCwgY2hhcnQubGVnZW5kKTtcbiAgICAgICAgZGVsZXRlIGNoYXJ0LmxlZ2VuZDtcbiAgICB9LFxuICAgIGJlZm9yZVVwZGF0ZSAoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGxlZ2VuZCA9IGNoYXJ0LmxlZ2VuZDtcbiAgICAgICAgbGF5b3V0cy5jb25maWd1cmUoY2hhcnQsIGxlZ2VuZCwgb3B0aW9ucyk7XG4gICAgICAgIGxlZ2VuZC5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9LFxuICAgIGFmdGVyVXBkYXRlIChjaGFydCkge1xuICAgICAgICBjb25zdCBsZWdlbmQgPSBjaGFydC5sZWdlbmQ7XG4gICAgICAgIGxlZ2VuZC5idWlsZExhYmVscygpO1xuICAgICAgICBsZWdlbmQuYWRqdXN0SGl0Qm94ZXMoKTtcbiAgICB9LFxuICAgIGFmdGVyRXZlbnQgKGNoYXJ0LCBhcmdzKSB7XG4gICAgICAgIGlmICghYXJncy5yZXBsYXkpIHtcbiAgICAgICAgICAgIGNoYXJ0LmxlZ2VuZC5oYW5kbGVFdmVudChhcmdzLmV2ZW50KTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgcG9zaXRpb246ICd0b3AnLFxuICAgICAgICBhbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIGZ1bGxTaXplOiB0cnVlLFxuICAgICAgICByZXZlcnNlOiBmYWxzZSxcbiAgICAgICAgd2VpZ2h0OiAxMDAwLFxuICAgICAgICBvbkNsaWNrIChlLCBsZWdlbmRJdGVtLCBsZWdlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gbGVnZW5kSXRlbS5kYXRhc2V0SW5kZXg7XG4gICAgICAgICAgICBjb25zdCBjaSA9IGxlZ2VuZC5jaGFydDtcbiAgICAgICAgICAgIGlmIChjaS5pc0RhdGFzZXRWaXNpYmxlKGluZGV4KSkge1xuICAgICAgICAgICAgICAgIGNpLmhpZGUoaW5kZXgpO1xuICAgICAgICAgICAgICAgIGxlZ2VuZEl0ZW0uaGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2kuc2hvdyhpbmRleCk7XG4gICAgICAgICAgICAgICAgbGVnZW5kSXRlbS5oaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb25Ib3ZlcjogbnVsbCxcbiAgICAgICAgb25MZWF2ZTogbnVsbCxcbiAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICBjb2xvcjogKGN0eCk9PmN0eC5jaGFydC5vcHRpb25zLmNvbG9yLFxuICAgICAgICAgICAgYm94V2lkdGg6IDQwLFxuICAgICAgICAgICAgcGFkZGluZzogMTAsXG4gICAgICAgICAgICBnZW5lcmF0ZUxhYmVscyAoY2hhcnQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhc2V0cyA9IGNoYXJ0LmRhdGEuZGF0YXNldHM7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBsYWJlbHM6IHsgdXNlUG9pbnRTdHlsZSAsIHBvaW50U3R5bGUgLCB0ZXh0QWxpZ24gLCBjb2xvciAsIHVzZUJvcmRlclJhZGl1cyAsIGJvcmRlclJhZGl1cyAgfSAgfSA9IGNoYXJ0LmxlZ2VuZC5vcHRpb25zO1xuICAgICAgICAgICAgICAgIHJldHVybiBjaGFydC5fZ2V0U29ydGVkRGF0YXNldE1ldGFzKCkubWFwKChtZXRhKT0+e1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHlsZSA9IG1ldGEuY29udHJvbGxlci5nZXRTdHlsZSh1c2VQb2ludFN0eWxlID8gMCA6IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJvcmRlcldpZHRoID0gdG9QYWRkaW5nKHN0eWxlLmJvcmRlcldpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGRhdGFzZXRzW21ldGEuaW5kZXhdLmxhYmVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbFN0eWxlOiBzdHlsZS5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250Q29sb3I6IGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGlkZGVuOiAhbWV0YS52aXNpYmxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZUNhcDogc3R5bGUuYm9yZGVyQ2FwU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lRGFzaDogc3R5bGUuYm9yZGVyRGFzaCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVEYXNoT2Zmc2V0OiBzdHlsZS5ib3JkZXJEYXNoT2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZUpvaW46IHN0eWxlLmJvcmRlckpvaW5TdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVXaWR0aDogKGJvcmRlcldpZHRoLndpZHRoICsgYm9yZGVyV2lkdGguaGVpZ2h0KSAvIDQsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VTdHlsZTogc3R5bGUuYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludFN0eWxlOiBwb2ludFN0eWxlIHx8IHN0eWxlLnBvaW50U3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogc3R5bGUucm90YXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ246IHRleHRBbGlnbiB8fCBzdHlsZS50ZXh0QWxpZ24sXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IHVzZUJvcmRlclJhZGl1cyAmJiAoYm9yZGVyUmFkaXVzIHx8IHN0eWxlLmJvcmRlclJhZGl1cyksXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhc2V0SW5kZXg6IG1ldGEuaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICAgIGNvbG9yOiAoY3R4KT0+Y3R4LmNoYXJ0Lm9wdGlvbnMuY29sb3IsXG4gICAgICAgICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnY2VudGVyJyxcbiAgICAgICAgICAgIHRleHQ6ICcnXG4gICAgICAgIH1cbiAgICB9LFxuICAgIGRlc2NyaXB0b3JzOiB7XG4gICAgICAgIF9zY3JpcHRhYmxlOiAobmFtZSk9PiFuYW1lLnN0YXJ0c1dpdGgoJ29uJyksXG4gICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgX3NjcmlwdGFibGU6IChuYW1lKT0+IVtcbiAgICAgICAgICAgICAgICAgICAgJ2dlbmVyYXRlTGFiZWxzJyxcbiAgICAgICAgICAgICAgICAgICAgJ2ZpbHRlcicsXG4gICAgICAgICAgICAgICAgICAgICdzb3J0J1xuICAgICAgICAgICAgICAgIF0uaW5jbHVkZXMobmFtZSlcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmNsYXNzIFRpdGxlIGV4dGVuZHMgRWxlbWVudCB7XG4gY29uc3RydWN0b3IoY29uZmlnKXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5jaGFydCA9IGNvbmZpZy5jaGFydDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gY29uZmlnLm9wdGlvbnM7XG4gICAgICAgIHRoaXMuY3R4ID0gY29uZmlnLmN0eDtcbiAgICAgICAgdGhpcy5fcGFkZGluZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy50b3AgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuYm90dG9tID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmxlZnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucmlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMud2lkdGggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLndlaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5mdWxsU2l6ZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdXBkYXRlKG1heFdpZHRoLCBtYXhIZWlnaHQpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgdGhpcy5sZWZ0ID0gMDtcbiAgICAgICAgdGhpcy50b3AgPSAwO1xuICAgICAgICBpZiAoIW9wdHMuZGlzcGxheSkge1xuICAgICAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMuaGVpZ2h0ID0gdGhpcy5yaWdodCA9IHRoaXMuYm90dG9tID0gMDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5yaWdodCA9IG1heFdpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMuYm90dG9tID0gbWF4SGVpZ2h0O1xuICAgICAgICBjb25zdCBsaW5lQ291bnQgPSBpc0FycmF5KG9wdHMudGV4dCkgPyBvcHRzLnRleHQubGVuZ3RoIDogMTtcbiAgICAgICAgdGhpcy5fcGFkZGluZyA9IHRvUGFkZGluZyhvcHRzLnBhZGRpbmcpO1xuICAgICAgICBjb25zdCB0ZXh0U2l6ZSA9IGxpbmVDb3VudCAqIHRvRm9udChvcHRzLmZvbnQpLmxpbmVIZWlnaHQgKyB0aGlzLl9wYWRkaW5nLmhlaWdodDtcbiAgICAgICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gdGV4dFNpemU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLndpZHRoID0gdGV4dFNpemU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaXNIb3Jpem9udGFsKCkge1xuICAgICAgICBjb25zdCBwb3MgPSB0aGlzLm9wdGlvbnMucG9zaXRpb247XG4gICAgICAgIHJldHVybiBwb3MgPT09ICd0b3AnIHx8IHBvcyA9PT0gJ2JvdHRvbSc7XG4gICAgfVxuICAgIF9kcmF3QXJncyhvZmZzZXQpIHtcbiAgICAgICAgY29uc3QgeyB0b3AgLCBsZWZ0ICwgYm90dG9tICwgcmlnaHQgLCBvcHRpb25zICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgYWxpZ24gPSBvcHRpb25zLmFsaWduO1xuICAgICAgICBsZXQgcm90YXRpb24gPSAwO1xuICAgICAgICBsZXQgbWF4V2lkdGgsIHRpdGxlWCwgdGl0bGVZO1xuICAgICAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgdGl0bGVYID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIGxlZnQsIHJpZ2h0KTtcbiAgICAgICAgICAgIHRpdGxlWSA9IHRvcCArIG9mZnNldDtcbiAgICAgICAgICAgIG1heFdpZHRoID0gcmlnaHQgLSBsZWZ0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMucG9zaXRpb24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgICAgIHRpdGxlWCA9IGxlZnQgKyBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgdGl0bGVZID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIGJvdHRvbSwgdG9wKTtcbiAgICAgICAgICAgICAgICByb3RhdGlvbiA9IFBJICogLTAuNTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGl0bGVYID0gcmlnaHQgLSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgdGl0bGVZID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRvcCwgYm90dG9tKTtcbiAgICAgICAgICAgICAgICByb3RhdGlvbiA9IFBJICogMC41O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWF4V2lkdGggPSBib3R0b20gLSB0b3A7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRpdGxlWCxcbiAgICAgICAgICAgIHRpdGxlWSxcbiAgICAgICAgICAgIG1heFdpZHRoLFxuICAgICAgICAgICAgcm90YXRpb25cbiAgICAgICAgfTtcbiAgICB9XG4gICAgZHJhdygpIHtcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGlmICghb3B0cy5kaXNwbGF5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZm9udE9wdHMgPSB0b0ZvbnQob3B0cy5mb250KTtcbiAgICAgICAgY29uc3QgbGluZUhlaWdodCA9IGZvbnRPcHRzLmxpbmVIZWlnaHQ7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IGxpbmVIZWlnaHQgLyAyICsgdGhpcy5fcGFkZGluZy50b3A7XG4gICAgICAgIGNvbnN0IHsgdGl0bGVYICwgdGl0bGVZICwgbWF4V2lkdGggLCByb3RhdGlvbiAgfSA9IHRoaXMuX2RyYXdBcmdzKG9mZnNldCk7XG4gICAgICAgIHJlbmRlclRleHQoY3R4LCBvcHRzLnRleHQsIDAsIDAsIGZvbnRPcHRzLCB7XG4gICAgICAgICAgICBjb2xvcjogb3B0cy5jb2xvcixcbiAgICAgICAgICAgIG1heFdpZHRoLFxuICAgICAgICAgICAgcm90YXRpb24sXG4gICAgICAgICAgICB0ZXh0QWxpZ246IF90b0xlZnRSaWdodENlbnRlcihvcHRzLmFsaWduKSxcbiAgICAgICAgICAgIHRleHRCYXNlbGluZTogJ21pZGRsZScsXG4gICAgICAgICAgICB0cmFuc2xhdGlvbjogW1xuICAgICAgICAgICAgICAgIHRpdGxlWCxcbiAgICAgICAgICAgICAgICB0aXRsZVlcbiAgICAgICAgICAgIF1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlVGl0bGUoY2hhcnQsIHRpdGxlT3B0cykge1xuICAgIGNvbnN0IHRpdGxlID0gbmV3IFRpdGxlKHtcbiAgICAgICAgY3R4OiBjaGFydC5jdHgsXG4gICAgICAgIG9wdGlvbnM6IHRpdGxlT3B0cyxcbiAgICAgICAgY2hhcnRcbiAgICB9KTtcbiAgICBsYXlvdXRzLmNvbmZpZ3VyZShjaGFydCwgdGl0bGUsIHRpdGxlT3B0cyk7XG4gICAgbGF5b3V0cy5hZGRCb3goY2hhcnQsIHRpdGxlKTtcbiAgICBjaGFydC50aXRsZUJsb2NrID0gdGl0bGU7XG59XG52YXIgcGx1Z2luX3RpdGxlID0ge1xuICAgIGlkOiAndGl0bGUnLFxuIF9lbGVtZW50OiBUaXRsZSxcbiAgICBzdGFydCAoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGNyZWF0ZVRpdGxlKGNoYXJ0LCBvcHRpb25zKTtcbiAgICB9LFxuICAgIHN0b3AgKGNoYXJ0KSB7XG4gICAgICAgIGNvbnN0IHRpdGxlQmxvY2sgPSBjaGFydC50aXRsZUJsb2NrO1xuICAgICAgICBsYXlvdXRzLnJlbW92ZUJveChjaGFydCwgdGl0bGVCbG9jayk7XG4gICAgICAgIGRlbGV0ZSBjaGFydC50aXRsZUJsb2NrO1xuICAgIH0sXG4gICAgYmVmb3JlVXBkYXRlIChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgdGl0bGUgPSBjaGFydC50aXRsZUJsb2NrO1xuICAgICAgICBsYXlvdXRzLmNvbmZpZ3VyZShjaGFydCwgdGl0bGUsIG9wdGlvbnMpO1xuICAgICAgICB0aXRsZS5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9LFxuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIGFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgZGlzcGxheTogZmFsc2UsXG4gICAgICAgIGZvbnQ6IHtcbiAgICAgICAgICAgIHdlaWdodDogJ2JvbGQnXG4gICAgICAgIH0sXG4gICAgICAgIGZ1bGxTaXplOiB0cnVlLFxuICAgICAgICBwYWRkaW5nOiAxMCxcbiAgICAgICAgcG9zaXRpb246ICd0b3AnLFxuICAgICAgICB0ZXh0OiAnJyxcbiAgICAgICAgd2VpZ2h0OiAyMDAwXG4gICAgfSxcbiAgICBkZWZhdWx0Um91dGVzOiB7XG4gICAgICAgIGNvbG9yOiAnY29sb3InXG4gICAgfSxcbiAgICBkZXNjcmlwdG9yczoge1xuICAgICAgICBfc2NyaXB0YWJsZTogdHJ1ZSxcbiAgICAgICAgX2luZGV4YWJsZTogZmFsc2VcbiAgICB9XG59O1xuXG5jb25zdCBtYXAgPSBuZXcgV2Vha01hcCgpO1xudmFyIHBsdWdpbl9zdWJ0aXRsZSA9IHtcbiAgICBpZDogJ3N1YnRpdGxlJyxcbiAgICBzdGFydCAoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHRpdGxlID0gbmV3IFRpdGxlKHtcbiAgICAgICAgICAgIGN0eDogY2hhcnQuY3R4LFxuICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgIGNoYXJ0XG4gICAgICAgIH0pO1xuICAgICAgICBsYXlvdXRzLmNvbmZpZ3VyZShjaGFydCwgdGl0bGUsIG9wdGlvbnMpO1xuICAgICAgICBsYXlvdXRzLmFkZEJveChjaGFydCwgdGl0bGUpO1xuICAgICAgICBtYXAuc2V0KGNoYXJ0LCB0aXRsZSk7XG4gICAgfSxcbiAgICBzdG9wIChjaGFydCkge1xuICAgICAgICBsYXlvdXRzLnJlbW92ZUJveChjaGFydCwgbWFwLmdldChjaGFydCkpO1xuICAgICAgICBtYXAuZGVsZXRlKGNoYXJ0KTtcbiAgICB9LFxuICAgIGJlZm9yZVVwZGF0ZSAoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHRpdGxlID0gbWFwLmdldChjaGFydCk7XG4gICAgICAgIGxheW91dHMuY29uZmlndXJlKGNoYXJ0LCB0aXRsZSwgb3B0aW9ucyk7XG4gICAgICAgIHRpdGxlLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH0sXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgYWxpZ246ICdjZW50ZXInLFxuICAgICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgICAgZm9udDoge1xuICAgICAgICAgICAgd2VpZ2h0OiAnbm9ybWFsJ1xuICAgICAgICB9LFxuICAgICAgICBmdWxsU2l6ZTogdHJ1ZSxcbiAgICAgICAgcGFkZGluZzogMCxcbiAgICAgICAgcG9zaXRpb246ICd0b3AnLFxuICAgICAgICB0ZXh0OiAnJyxcbiAgICAgICAgd2VpZ2h0OiAxNTAwXG4gICAgfSxcbiAgICBkZWZhdWx0Um91dGVzOiB7XG4gICAgICAgIGNvbG9yOiAnY29sb3InXG4gICAgfSxcbiAgICBkZXNjcmlwdG9yczoge1xuICAgICAgICBfc2NyaXB0YWJsZTogdHJ1ZSxcbiAgICAgICAgX2luZGV4YWJsZTogZmFsc2VcbiAgICB9XG59O1xuXG5jb25zdCBwb3NpdGlvbmVycyA9IHtcbiBhdmVyYWdlIChpdGVtcykge1xuICAgICAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBpLCBsZW47XG4gICAgICAgIGxldCB4ID0gMDtcbiAgICAgICAgbGV0IHkgPSAwO1xuICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICBmb3IoaSA9IDAsIGxlbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGxlbjsgKytpKXtcbiAgICAgICAgICAgIGNvbnN0IGVsID0gaXRlbXNbaV0uZWxlbWVudDtcbiAgICAgICAgICAgIGlmIChlbCAmJiBlbC5oYXNWYWx1ZSgpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9zID0gZWwudG9vbHRpcFBvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgeCArPSBwb3MueDtcbiAgICAgICAgICAgICAgICB5ICs9IHBvcy55O1xuICAgICAgICAgICAgICAgICsrY291bnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IHggLyBjb3VudCxcbiAgICAgICAgICAgIHk6IHkgLyBjb3VudFxuICAgICAgICB9O1xuICAgIH0sXG4gbmVhcmVzdCAoaXRlbXMsIGV2ZW50UG9zaXRpb24pIHtcbiAgICAgICAgaWYgKCFpdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgeCA9IGV2ZW50UG9zaXRpb24ueDtcbiAgICAgICAgbGV0IHkgPSBldmVudFBvc2l0aW9uLnk7XG4gICAgICAgIGxldCBtaW5EaXN0YW5jZSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgbGV0IGksIGxlbiwgbmVhcmVzdEVsZW1lbnQ7XG4gICAgICAgIGZvcihpID0gMCwgbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpe1xuICAgICAgICAgICAgY29uc3QgZWwgPSBpdGVtc1tpXS5lbGVtZW50O1xuICAgICAgICAgICAgaWYgKGVsICYmIGVsLmhhc1ZhbHVlKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjZW50ZXIgPSBlbC5nZXRDZW50ZXJQb2ludCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGQgPSBkaXN0YW5jZUJldHdlZW5Qb2ludHMoZXZlbnRQb3NpdGlvbiwgY2VudGVyKTtcbiAgICAgICAgICAgICAgICBpZiAoZCA8IG1pbkRpc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIG1pbkRpc3RhbmNlID0gZDtcbiAgICAgICAgICAgICAgICAgICAgbmVhcmVzdEVsZW1lbnQgPSBlbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5lYXJlc3RFbGVtZW50KSB7XG4gICAgICAgICAgICBjb25zdCB0cCA9IG5lYXJlc3RFbGVtZW50LnRvb2x0aXBQb3NpdGlvbigpO1xuICAgICAgICAgICAgeCA9IHRwLng7XG4gICAgICAgICAgICB5ID0gdHAueTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeCxcbiAgICAgICAgICAgIHlcbiAgICAgICAgfTtcbiAgICB9XG59O1xuZnVuY3Rpb24gcHVzaE9yQ29uY2F0KGJhc2UsIHRvUHVzaCkge1xuICAgIGlmICh0b1B1c2gpIHtcbiAgICAgICAgaWYgKGlzQXJyYXkodG9QdXNoKSkge1xuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoYmFzZSwgdG9QdXNoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJhc2UucHVzaCh0b1B1c2gpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBiYXNlO1xufVxuIGZ1bmN0aW9uIHNwbGl0TmV3bGluZXMoc3RyKSB7XG4gICAgaWYgKCh0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyB8fCBzdHIgaW5zdGFuY2VvZiBTdHJpbmcpICYmIHN0ci5pbmRleE9mKCdcXG4nKSA+IC0xKSB7XG4gICAgICAgIHJldHVybiBzdHIuc3BsaXQoJ1xcbicpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufVxuIGZ1bmN0aW9uIGNyZWF0ZVRvb2x0aXBJdGVtKGNoYXJ0LCBpdGVtKSB7XG4gICAgY29uc3QgeyBlbGVtZW50ICwgZGF0YXNldEluZGV4ICwgaW5kZXggIH0gPSBpdGVtO1xuICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBjaGFydC5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpLmNvbnRyb2xsZXI7XG4gICAgY29uc3QgeyBsYWJlbCAsIHZhbHVlICB9ID0gY29udHJvbGxlci5nZXRMYWJlbEFuZFZhbHVlKGluZGV4KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBjaGFydCxcbiAgICAgICAgbGFiZWwsXG4gICAgICAgIHBhcnNlZDogY29udHJvbGxlci5nZXRQYXJzZWQoaW5kZXgpLFxuICAgICAgICByYXc6IGNoYXJ0LmRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XS5kYXRhW2luZGV4XSxcbiAgICAgICAgZm9ybWF0dGVkVmFsdWU6IHZhbHVlLFxuICAgICAgICBkYXRhc2V0OiBjb250cm9sbGVyLmdldERhdGFzZXQoKSxcbiAgICAgICAgZGF0YUluZGV4OiBpbmRleCxcbiAgICAgICAgZGF0YXNldEluZGV4LFxuICAgICAgICBlbGVtZW50XG4gICAgfTtcbn1cbiBmdW5jdGlvbiBnZXRUb29sdGlwU2l6ZSh0b29sdGlwLCBvcHRpb25zKSB7XG4gICAgY29uc3QgY3R4ID0gdG9vbHRpcC5jaGFydC5jdHg7XG4gICAgY29uc3QgeyBib2R5ICwgZm9vdGVyICwgdGl0bGUgIH0gPSB0b29sdGlwO1xuICAgIGNvbnN0IHsgYm94V2lkdGggLCBib3hIZWlnaHQgIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IGJvZHlGb250ID0gdG9Gb250KG9wdGlvbnMuYm9keUZvbnQpO1xuICAgIGNvbnN0IHRpdGxlRm9udCA9IHRvRm9udChvcHRpb25zLnRpdGxlRm9udCk7XG4gICAgY29uc3QgZm9vdGVyRm9udCA9IHRvRm9udChvcHRpb25zLmZvb3RlckZvbnQpO1xuICAgIGNvbnN0IHRpdGxlTGluZUNvdW50ID0gdGl0bGUubGVuZ3RoO1xuICAgIGNvbnN0IGZvb3RlckxpbmVDb3VudCA9IGZvb3Rlci5sZW5ndGg7XG4gICAgY29uc3QgYm9keUxpbmVJdGVtQ291bnQgPSBib2R5Lmxlbmd0aDtcbiAgICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKG9wdGlvbnMucGFkZGluZyk7XG4gICAgbGV0IGhlaWdodCA9IHBhZGRpbmcuaGVpZ2h0O1xuICAgIGxldCB3aWR0aCA9IDA7XG4gICAgbGV0IGNvbWJpbmVkQm9keUxlbmd0aCA9IGJvZHkucmVkdWNlKChjb3VudCwgYm9keUl0ZW0pPT5jb3VudCArIGJvZHlJdGVtLmJlZm9yZS5sZW5ndGggKyBib2R5SXRlbS5saW5lcy5sZW5ndGggKyBib2R5SXRlbS5hZnRlci5sZW5ndGgsIDApO1xuICAgIGNvbWJpbmVkQm9keUxlbmd0aCArPSB0b29sdGlwLmJlZm9yZUJvZHkubGVuZ3RoICsgdG9vbHRpcC5hZnRlckJvZHkubGVuZ3RoO1xuICAgIGlmICh0aXRsZUxpbmVDb3VudCkge1xuICAgICAgICBoZWlnaHQgKz0gdGl0bGVMaW5lQ291bnQgKiB0aXRsZUZvbnQubGluZUhlaWdodCArICh0aXRsZUxpbmVDb3VudCAtIDEpICogb3B0aW9ucy50aXRsZVNwYWNpbmcgKyBvcHRpb25zLnRpdGxlTWFyZ2luQm90dG9tO1xuICAgIH1cbiAgICBpZiAoY29tYmluZWRCb2R5TGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGJvZHlMaW5lSGVpZ2h0ID0gb3B0aW9ucy5kaXNwbGF5Q29sb3JzID8gTWF0aC5tYXgoYm94SGVpZ2h0LCBib2R5Rm9udC5saW5lSGVpZ2h0KSA6IGJvZHlGb250LmxpbmVIZWlnaHQ7XG4gICAgICAgIGhlaWdodCArPSBib2R5TGluZUl0ZW1Db3VudCAqIGJvZHlMaW5lSGVpZ2h0ICsgKGNvbWJpbmVkQm9keUxlbmd0aCAtIGJvZHlMaW5lSXRlbUNvdW50KSAqIGJvZHlGb250LmxpbmVIZWlnaHQgKyAoY29tYmluZWRCb2R5TGVuZ3RoIC0gMSkgKiBvcHRpb25zLmJvZHlTcGFjaW5nO1xuICAgIH1cbiAgICBpZiAoZm9vdGVyTGluZUNvdW50KSB7XG4gICAgICAgIGhlaWdodCArPSBvcHRpb25zLmZvb3Rlck1hcmdpblRvcCArIGZvb3RlckxpbmVDb3VudCAqIGZvb3RlckZvbnQubGluZUhlaWdodCArIChmb290ZXJMaW5lQ291bnQgLSAxKSAqIG9wdGlvbnMuZm9vdGVyU3BhY2luZztcbiAgICB9XG4gICAgbGV0IHdpZHRoUGFkZGluZyA9IDA7XG4gICAgY29uc3QgbWF4TGluZVdpZHRoID0gZnVuY3Rpb24obGluZSkge1xuICAgICAgICB3aWR0aCA9IE1hdGgubWF4KHdpZHRoLCBjdHgubWVhc3VyZVRleHQobGluZSkud2lkdGggKyB3aWR0aFBhZGRpbmcpO1xuICAgIH07XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHguZm9udCA9IHRpdGxlRm9udC5zdHJpbmc7XG4gICAgZWFjaCh0b29sdGlwLnRpdGxlLCBtYXhMaW5lV2lkdGgpO1xuICAgIGN0eC5mb250ID0gYm9keUZvbnQuc3RyaW5nO1xuICAgIGVhY2godG9vbHRpcC5iZWZvcmVCb2R5LmNvbmNhdCh0b29sdGlwLmFmdGVyQm9keSksIG1heExpbmVXaWR0aCk7XG4gICAgd2lkdGhQYWRkaW5nID0gb3B0aW9ucy5kaXNwbGF5Q29sb3JzID8gYm94V2lkdGggKyAyICsgb3B0aW9ucy5ib3hQYWRkaW5nIDogMDtcbiAgICBlYWNoKGJvZHksIChib2R5SXRlbSk9PntcbiAgICAgICAgZWFjaChib2R5SXRlbS5iZWZvcmUsIG1heExpbmVXaWR0aCk7XG4gICAgICAgIGVhY2goYm9keUl0ZW0ubGluZXMsIG1heExpbmVXaWR0aCk7XG4gICAgICAgIGVhY2goYm9keUl0ZW0uYWZ0ZXIsIG1heExpbmVXaWR0aCk7XG4gICAgfSk7XG4gICAgd2lkdGhQYWRkaW5nID0gMDtcbiAgICBjdHguZm9udCA9IGZvb3RlckZvbnQuc3RyaW5nO1xuICAgIGVhY2godG9vbHRpcC5mb290ZXIsIG1heExpbmVXaWR0aCk7XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgICB3aWR0aCArPSBwYWRkaW5nLndpZHRoO1xuICAgIHJldHVybiB7XG4gICAgICAgIHdpZHRoLFxuICAgICAgICBoZWlnaHRcbiAgICB9O1xufVxuZnVuY3Rpb24gZGV0ZXJtaW5lWUFsaWduKGNoYXJ0LCBzaXplKSB7XG4gICAgY29uc3QgeyB5ICwgaGVpZ2h0ICB9ID0gc2l6ZTtcbiAgICBpZiAoeSA8IGhlaWdodCAvIDIpIHtcbiAgICAgICAgcmV0dXJuICd0b3AnO1xuICAgIH0gZWxzZSBpZiAoeSA+IGNoYXJ0LmhlaWdodCAtIGhlaWdodCAvIDIpIHtcbiAgICAgICAgcmV0dXJuICdib3R0b20nO1xuICAgIH1cbiAgICByZXR1cm4gJ2NlbnRlcic7XG59XG5mdW5jdGlvbiBkb2VzTm90Rml0V2l0aEFsaWduKHhBbGlnbiwgY2hhcnQsIG9wdGlvbnMsIHNpemUpIHtcbiAgICBjb25zdCB7IHggLCB3aWR0aCAgfSA9IHNpemU7XG4gICAgY29uc3QgY2FyZXQgPSBvcHRpb25zLmNhcmV0U2l6ZSArIG9wdGlvbnMuY2FyZXRQYWRkaW5nO1xuICAgIGlmICh4QWxpZ24gPT09ICdsZWZ0JyAmJiB4ICsgd2lkdGggKyBjYXJldCA+IGNoYXJ0LndpZHRoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoeEFsaWduID09PSAncmlnaHQnICYmIHggLSB3aWR0aCAtIGNhcmV0IDwgMCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVYQWxpZ24oY2hhcnQsIG9wdGlvbnMsIHNpemUsIHlBbGlnbikge1xuICAgIGNvbnN0IHsgeCAsIHdpZHRoICB9ID0gc2l6ZTtcbiAgICBjb25zdCB7IHdpZHRoOiBjaGFydFdpZHRoICwgY2hhcnRBcmVhOiB7IGxlZnQgLCByaWdodCAgfSAgfSA9IGNoYXJ0O1xuICAgIGxldCB4QWxpZ24gPSAnY2VudGVyJztcbiAgICBpZiAoeUFsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICB4QWxpZ24gPSB4IDw9IChsZWZ0ICsgcmlnaHQpIC8gMiA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgfSBlbHNlIGlmICh4IDw9IHdpZHRoIC8gMikge1xuICAgICAgICB4QWxpZ24gPSAnbGVmdCc7XG4gICAgfSBlbHNlIGlmICh4ID49IGNoYXJ0V2lkdGggLSB3aWR0aCAvIDIpIHtcbiAgICAgICAgeEFsaWduID0gJ3JpZ2h0JztcbiAgICB9XG4gICAgaWYgKGRvZXNOb3RGaXRXaXRoQWxpZ24oeEFsaWduLCBjaGFydCwgb3B0aW9ucywgc2l6ZSkpIHtcbiAgICAgICAgeEFsaWduID0gJ2NlbnRlcic7XG4gICAgfVxuICAgIHJldHVybiB4QWxpZ247XG59XG4gZnVuY3Rpb24gZGV0ZXJtaW5lQWxpZ25tZW50KGNoYXJ0LCBvcHRpb25zLCBzaXplKSB7XG4gICAgY29uc3QgeUFsaWduID0gc2l6ZS55QWxpZ24gfHwgb3B0aW9ucy55QWxpZ24gfHwgZGV0ZXJtaW5lWUFsaWduKGNoYXJ0LCBzaXplKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB4QWxpZ246IHNpemUueEFsaWduIHx8IG9wdGlvbnMueEFsaWduIHx8IGRldGVybWluZVhBbGlnbihjaGFydCwgb3B0aW9ucywgc2l6ZSwgeUFsaWduKSxcbiAgICAgICAgeUFsaWduXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGFsaWduWChzaXplLCB4QWxpZ24pIHtcbiAgICBsZXQgeyB4ICwgd2lkdGggIH0gPSBzaXplO1xuICAgIGlmICh4QWxpZ24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgeCAtPSB3aWR0aDtcbiAgICB9IGVsc2UgaWYgKHhBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgeCAtPSB3aWR0aCAvIDI7XG4gICAgfVxuICAgIHJldHVybiB4O1xufVxuZnVuY3Rpb24gYWxpZ25ZKHNpemUsIHlBbGlnbiwgcGFkZGluZ0FuZFNpemUpIHtcbiAgICBsZXQgeyB5ICwgaGVpZ2h0ICB9ID0gc2l6ZTtcbiAgICBpZiAoeUFsaWduID09PSAndG9wJykge1xuICAgICAgICB5ICs9IHBhZGRpbmdBbmRTaXplO1xuICAgIH0gZWxzZSBpZiAoeUFsaWduID09PSAnYm90dG9tJykge1xuICAgICAgICB5IC09IGhlaWdodCArIHBhZGRpbmdBbmRTaXplO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHkgLT0gaGVpZ2h0IC8gMjtcbiAgICB9XG4gICAgcmV0dXJuIHk7XG59XG4gZnVuY3Rpb24gZ2V0QmFja2dyb3VuZFBvaW50KG9wdGlvbnMsIHNpemUsIGFsaWdubWVudCwgY2hhcnQpIHtcbiAgICBjb25zdCB7IGNhcmV0U2l6ZSAsIGNhcmV0UGFkZGluZyAsIGNvcm5lclJhZGl1cyAgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgeyB4QWxpZ24gLCB5QWxpZ24gIH0gPSBhbGlnbm1lbnQ7XG4gICAgY29uc3QgcGFkZGluZ0FuZFNpemUgPSBjYXJldFNpemUgKyBjYXJldFBhZGRpbmc7XG4gICAgY29uc3QgeyB0b3BMZWZ0ICwgdG9wUmlnaHQgLCBib3R0b21MZWZ0ICwgYm90dG9tUmlnaHQgIH0gPSB0b1RSQkxDb3JuZXJzKGNvcm5lclJhZGl1cyk7XG4gICAgbGV0IHggPSBhbGlnblgoc2l6ZSwgeEFsaWduKTtcbiAgICBjb25zdCB5ID0gYWxpZ25ZKHNpemUsIHlBbGlnbiwgcGFkZGluZ0FuZFNpemUpO1xuICAgIGlmICh5QWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgIGlmICh4QWxpZ24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgeCArPSBwYWRkaW5nQW5kU2l6ZTtcbiAgICAgICAgfSBlbHNlIGlmICh4QWxpZ24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgIHggLT0gcGFkZGluZ0FuZFNpemU7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHhBbGlnbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgIHggLT0gTWF0aC5tYXgodG9wTGVmdCwgYm90dG9tTGVmdCkgKyBjYXJldFNpemU7XG4gICAgfSBlbHNlIGlmICh4QWxpZ24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgeCArPSBNYXRoLm1heCh0b3BSaWdodCwgYm90dG9tUmlnaHQpICsgY2FyZXRTaXplO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICB4OiBfbGltaXRWYWx1ZSh4LCAwLCBjaGFydC53aWR0aCAtIHNpemUud2lkdGgpLFxuICAgICAgICB5OiBfbGltaXRWYWx1ZSh5LCAwLCBjaGFydC5oZWlnaHQgLSBzaXplLmhlaWdodClcbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0QWxpZ25lZFgodG9vbHRpcCwgYWxpZ24sIG9wdGlvbnMpIHtcbiAgICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKG9wdGlvbnMucGFkZGluZyk7XG4gICAgcmV0dXJuIGFsaWduID09PSAnY2VudGVyJyA/IHRvb2x0aXAueCArIHRvb2x0aXAud2lkdGggLyAyIDogYWxpZ24gPT09ICdyaWdodCcgPyB0b29sdGlwLnggKyB0b29sdGlwLndpZHRoIC0gcGFkZGluZy5yaWdodCA6IHRvb2x0aXAueCArIHBhZGRpbmcubGVmdDtcbn1cbiBmdW5jdGlvbiBnZXRCZWZvcmVBZnRlckJvZHlMaW5lcyhjYWxsYmFjaykge1xuICAgIHJldHVybiBwdXNoT3JDb25jYXQoW10sIHNwbGl0TmV3bGluZXMoY2FsbGJhY2spKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVRvb2x0aXBDb250ZXh0KHBhcmVudCwgdG9vbHRpcCwgdG9vbHRpcEl0ZW1zKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUNvbnRleHQocGFyZW50LCB7XG4gICAgICAgIHRvb2x0aXAsXG4gICAgICAgIHRvb2x0aXBJdGVtcyxcbiAgICAgICAgdHlwZTogJ3Rvb2x0aXAnXG4gICAgfSk7XG59XG5mdW5jdGlvbiBvdmVycmlkZUNhbGxiYWNrcyhjYWxsYmFja3MsIGNvbnRleHQpIHtcbiAgICBjb25zdCBvdmVycmlkZSA9IGNvbnRleHQgJiYgY29udGV4dC5kYXRhc2V0ICYmIGNvbnRleHQuZGF0YXNldC50b29sdGlwICYmIGNvbnRleHQuZGF0YXNldC50b29sdGlwLmNhbGxiYWNrcztcbiAgICByZXR1cm4gb3ZlcnJpZGUgPyBjYWxsYmFja3Mub3ZlcnJpZGUob3ZlcnJpZGUpIDogY2FsbGJhY2tzO1xufVxuY29uc3QgZGVmYXVsdENhbGxiYWNrcyA9IHtcbiAgICBiZWZvcmVUaXRsZTogbm9vcCxcbiAgICB0aXRsZSAodG9vbHRpcEl0ZW1zKSB7XG4gICAgICAgIGlmICh0b29sdGlwSXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IHRvb2x0aXBJdGVtc1swXTtcbiAgICAgICAgICAgIGNvbnN0IGxhYmVscyA9IGl0ZW0uY2hhcnQuZGF0YS5sYWJlbHM7XG4gICAgICAgICAgICBjb25zdCBsYWJlbENvdW50ID0gbGFiZWxzID8gbGFiZWxzLmxlbmd0aCA6IDA7XG4gICAgICAgICAgICBpZiAodGhpcyAmJiB0aGlzLm9wdGlvbnMgJiYgdGhpcy5vcHRpb25zLm1vZGUgPT09ICdkYXRhc2V0Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmRhdGFzZXQubGFiZWwgfHwgJyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW0ubGFiZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5sYWJlbDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFiZWxDb3VudCA+IDAgJiYgaXRlbS5kYXRhSW5kZXggPCBsYWJlbENvdW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxhYmVsc1tpdGVtLmRhdGFJbmRleF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH0sXG4gICAgYWZ0ZXJUaXRsZTogbm9vcCxcbiAgICBiZWZvcmVCb2R5OiBub29wLFxuICAgIGJlZm9yZUxhYmVsOiBub29wLFxuICAgIGxhYmVsICh0b29sdGlwSXRlbSkge1xuICAgICAgICBpZiAodGhpcyAmJiB0aGlzLm9wdGlvbnMgJiYgdGhpcy5vcHRpb25zLm1vZGUgPT09ICdkYXRhc2V0Jykge1xuICAgICAgICAgICAgcmV0dXJuIHRvb2x0aXBJdGVtLmxhYmVsICsgJzogJyArIHRvb2x0aXBJdGVtLmZvcm1hdHRlZFZhbHVlIHx8IHRvb2x0aXBJdGVtLmZvcm1hdHRlZFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBsYWJlbCA9IHRvb2x0aXBJdGVtLmRhdGFzZXQubGFiZWwgfHwgJyc7XG4gICAgICAgIGlmIChsYWJlbCkge1xuICAgICAgICAgICAgbGFiZWwgKz0gJzogJztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2YWx1ZSA9IHRvb2x0aXBJdGVtLmZvcm1hdHRlZFZhbHVlO1xuICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWYodmFsdWUpKSB7XG4gICAgICAgICAgICBsYWJlbCArPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGFiZWw7XG4gICAgfSxcbiAgICBsYWJlbENvbG9yICh0b29sdGlwSXRlbSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdG9vbHRpcEl0ZW0uY2hhcnQuZ2V0RGF0YXNldE1ldGEodG9vbHRpcEl0ZW0uZGF0YXNldEluZGV4KTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IG1ldGEuY29udHJvbGxlci5nZXRTdHlsZSh0b29sdGlwSXRlbS5kYXRhSW5kZXgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYm9yZGVyQ29sb3I6IG9wdGlvbnMuYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgYm9yZGVyV2lkdGg6IG9wdGlvbnMuYm9yZGVyV2lkdGgsXG4gICAgICAgICAgICBib3JkZXJEYXNoOiBvcHRpb25zLmJvcmRlckRhc2gsXG4gICAgICAgICAgICBib3JkZXJEYXNoT2Zmc2V0OiBvcHRpb25zLmJvcmRlckRhc2hPZmZzZXQsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IDBcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGxhYmVsVGV4dENvbG9yICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5ib2R5Q29sb3I7XG4gICAgfSxcbiAgICBsYWJlbFBvaW50U3R5bGUgKHRvb2x0aXBJdGVtKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0b29sdGlwSXRlbS5jaGFydC5nZXREYXRhc2V0TWV0YSh0b29sdGlwSXRlbS5kYXRhc2V0SW5kZXgpO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gbWV0YS5jb250cm9sbGVyLmdldFN0eWxlKHRvb2x0aXBJdGVtLmRhdGFJbmRleCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwb2ludFN0eWxlOiBvcHRpb25zLnBvaW50U3R5bGUsXG4gICAgICAgICAgICByb3RhdGlvbjogb3B0aW9ucy5yb3RhdGlvblxuICAgICAgICB9O1xuICAgIH0sXG4gICAgYWZ0ZXJMYWJlbDogbm9vcCxcbiAgICBhZnRlckJvZHk6IG5vb3AsXG4gICAgYmVmb3JlRm9vdGVyOiBub29wLFxuICAgIGZvb3Rlcjogbm9vcCxcbiAgICBhZnRlckZvb3Rlcjogbm9vcFxufTtcbiBmdW5jdGlvbiBpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhjYWxsYmFja3MsIG5hbWUsIGN0eCwgYXJnKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gY2FsbGJhY2tzW25hbWVdLmNhbGwoY3R4LCBhcmcpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gZGVmYXVsdENhbGxiYWNrc1tuYW1lXS5jYWxsKGN0eCwgYXJnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmNsYXNzIFRvb2x0aXAgZXh0ZW5kcyBFbGVtZW50IHtcbiBzdGF0aWMgcG9zaXRpb25lcnMgPSBwb3NpdGlvbmVycztcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpe1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm9wYWNpdHkgPSAwO1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSBbXTtcbiAgICAgICAgdGhpcy5fZXZlbnRQb3NpdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fc2l6ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fY2FjaGVkQW5pbWF0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fdG9vbHRpcEl0ZW1zID0gW107XG4gICAgICAgIHRoaXMuJGFuaW1hdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuY2hhcnQgPSBjb25maWcuY2hhcnQ7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IGNvbmZpZy5vcHRpb25zO1xuICAgICAgICB0aGlzLmRhdGFQb2ludHMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMudGl0bGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuYmVmb3JlQm9keSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5ib2R5ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmFmdGVyQm9keSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5mb290ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMueEFsaWduID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnlBbGlnbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy54ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnkgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLndpZHRoID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmNhcmV0WCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jYXJldFkgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubGFiZWxDb2xvcnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubGFiZWxQb2ludFN0eWxlcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5sYWJlbFRleHRDb2xvcnMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGluaXRpYWxpemUob3B0aW9ucykge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLl9jYWNoZWRBbmltYXRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLiRjb250ZXh0ID0gdW5kZWZpbmVkO1xuICAgIH1cbiBfcmVzb2x2ZUFuaW1hdGlvbnMoKSB7XG4gICAgICAgIGNvbnN0IGNhY2hlZCA9IHRoaXMuX2NhY2hlZEFuaW1hdGlvbnM7XG4gICAgICAgIGlmIChjYWNoZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICBjb25zdCBvcHRzID0gb3B0aW9ucy5lbmFibGVkICYmIGNoYXJ0Lm9wdGlvbnMuYW5pbWF0aW9uICYmIG9wdGlvbnMuYW5pbWF0aW9ucztcbiAgICAgICAgY29uc3QgYW5pbWF0aW9ucyA9IG5ldyBBbmltYXRpb25zKHRoaXMuY2hhcnQsIG9wdHMpO1xuICAgICAgICBpZiAob3B0cy5fY2FjaGVhYmxlKSB7XG4gICAgICAgICAgICB0aGlzLl9jYWNoZWRBbmltYXRpb25zID0gT2JqZWN0LmZyZWV6ZShhbmltYXRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYW5pbWF0aW9ucztcbiAgICB9XG4gZ2V0Q29udGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJGNvbnRleHQgfHwgKHRoaXMuJGNvbnRleHQgPSBjcmVhdGVUb29sdGlwQ29udGV4dCh0aGlzLmNoYXJ0LmdldENvbnRleHQoKSwgdGhpcywgdGhpcy5fdG9vbHRpcEl0ZW1zKSk7XG4gICAgfVxuICAgIGdldFRpdGxlKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBjYWxsYmFja3MgIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBiZWZvcmVUaXRsZSA9IGludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrKGNhbGxiYWNrcywgJ2JlZm9yZVRpdGxlJywgdGhpcywgY29udGV4dCk7XG4gICAgICAgIGNvbnN0IHRpdGxlID0gaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2soY2FsbGJhY2tzLCAndGl0bGUnLCB0aGlzLCBjb250ZXh0KTtcbiAgICAgICAgY29uc3QgYWZ0ZXJUaXRsZSA9IGludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrKGNhbGxiYWNrcywgJ2FmdGVyVGl0bGUnLCB0aGlzLCBjb250ZXh0KTtcbiAgICAgICAgbGV0IGxpbmVzID0gW107XG4gICAgICAgIGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKGJlZm9yZVRpdGxlKSk7XG4gICAgICAgIGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKHRpdGxlKSk7XG4gICAgICAgIGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKGFmdGVyVGl0bGUpKTtcbiAgICAgICAgcmV0dXJuIGxpbmVzO1xuICAgIH1cbiAgICBnZXRCZWZvcmVCb2R5KHRvb2x0aXBJdGVtcywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZ2V0QmVmb3JlQWZ0ZXJCb2R5TGluZXMoaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2sob3B0aW9ucy5jYWxsYmFja3MsICdiZWZvcmVCb2R5JywgdGhpcywgdG9vbHRpcEl0ZW1zKSk7XG4gICAgfVxuICAgIGdldEJvZHkodG9vbHRpcEl0ZW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgY2FsbGJhY2tzICB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3QgYm9keUl0ZW1zID0gW107XG4gICAgICAgIGVhY2godG9vbHRpcEl0ZW1zLCAoY29udGV4dCk9PntcbiAgICAgICAgICAgIGNvbnN0IGJvZHlJdGVtID0ge1xuICAgICAgICAgICAgICAgIGJlZm9yZTogW10sXG4gICAgICAgICAgICAgICAgbGluZXM6IFtdLFxuICAgICAgICAgICAgICAgIGFmdGVyOiBbXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHNjb3BlZCA9IG92ZXJyaWRlQ2FsbGJhY2tzKGNhbGxiYWNrcywgY29udGV4dCk7XG4gICAgICAgICAgICBwdXNoT3JDb25jYXQoYm9keUl0ZW0uYmVmb3JlLCBzcGxpdE5ld2xpbmVzKGludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrKHNjb3BlZCwgJ2JlZm9yZUxhYmVsJywgdGhpcywgY29udGV4dCkpKTtcbiAgICAgICAgICAgIHB1c2hPckNvbmNhdChib2R5SXRlbS5saW5lcywgaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2soc2NvcGVkLCAnbGFiZWwnLCB0aGlzLCBjb250ZXh0KSk7XG4gICAgICAgICAgICBwdXNoT3JDb25jYXQoYm9keUl0ZW0uYWZ0ZXIsIHNwbGl0TmV3bGluZXMoaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2soc2NvcGVkLCAnYWZ0ZXJMYWJlbCcsIHRoaXMsIGNvbnRleHQpKSk7XG4gICAgICAgICAgICBib2R5SXRlbXMucHVzaChib2R5SXRlbSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYm9keUl0ZW1zO1xuICAgIH1cbiAgICBnZXRBZnRlckJvZHkodG9vbHRpcEl0ZW1zLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBnZXRCZWZvcmVBZnRlckJvZHlMaW5lcyhpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhvcHRpb25zLmNhbGxiYWNrcywgJ2FmdGVyQm9keScsIHRoaXMsIHRvb2x0aXBJdGVtcykpO1xuICAgIH1cbiAgICBnZXRGb290ZXIodG9vbHRpcEl0ZW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgY2FsbGJhY2tzICB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3QgYmVmb3JlRm9vdGVyID0gaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2soY2FsbGJhY2tzLCAnYmVmb3JlRm9vdGVyJywgdGhpcywgdG9vbHRpcEl0ZW1zKTtcbiAgICAgICAgY29uc3QgZm9vdGVyID0gaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2soY2FsbGJhY2tzLCAnZm9vdGVyJywgdGhpcywgdG9vbHRpcEl0ZW1zKTtcbiAgICAgICAgY29uc3QgYWZ0ZXJGb290ZXIgPSBpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhjYWxsYmFja3MsICdhZnRlckZvb3RlcicsIHRoaXMsIHRvb2x0aXBJdGVtcyk7XG4gICAgICAgIGxldCBsaW5lcyA9IFtdO1xuICAgICAgICBsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgc3BsaXROZXdsaW5lcyhiZWZvcmVGb290ZXIpKTtcbiAgICAgICAgbGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXMoZm9vdGVyKSk7XG4gICAgICAgIGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKGFmdGVyRm9vdGVyKSk7XG4gICAgICAgIHJldHVybiBsaW5lcztcbiAgICB9XG4gX2NyZWF0ZUl0ZW1zKG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYWN0aXZlID0gdGhpcy5fYWN0aXZlO1xuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5jaGFydC5kYXRhO1xuICAgICAgICBjb25zdCBsYWJlbENvbG9ycyA9IFtdO1xuICAgICAgICBjb25zdCBsYWJlbFBvaW50U3R5bGVzID0gW107XG4gICAgICAgIGNvbnN0IGxhYmVsVGV4dENvbG9ycyA9IFtdO1xuICAgICAgICBsZXQgdG9vbHRpcEl0ZW1zID0gW107XG4gICAgICAgIGxldCBpLCBsZW47XG4gICAgICAgIGZvcihpID0gMCwgbGVuID0gYWN0aXZlLmxlbmd0aDsgaSA8IGxlbjsgKytpKXtcbiAgICAgICAgICAgIHRvb2x0aXBJdGVtcy5wdXNoKGNyZWF0ZVRvb2x0aXBJdGVtKHRoaXMuY2hhcnQsIGFjdGl2ZVtpXSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmZpbHRlcikge1xuICAgICAgICAgICAgdG9vbHRpcEl0ZW1zID0gdG9vbHRpcEl0ZW1zLmZpbHRlcigoZWxlbWVudCwgaW5kZXgsIGFycmF5KT0+b3B0aW9ucy5maWx0ZXIoZWxlbWVudCwgaW5kZXgsIGFycmF5LCBkYXRhKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuaXRlbVNvcnQpIHtcbiAgICAgICAgICAgIHRvb2x0aXBJdGVtcyA9IHRvb2x0aXBJdGVtcy5zb3J0KChhLCBiKT0+b3B0aW9ucy5pdGVtU29ydChhLCBiLCBkYXRhKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWFjaCh0b29sdGlwSXRlbXMsIChjb250ZXh0KT0+e1xuICAgICAgICAgICAgY29uc3Qgc2NvcGVkID0gb3ZlcnJpZGVDYWxsYmFja3Mob3B0aW9ucy5jYWxsYmFja3MsIGNvbnRleHQpO1xuICAgICAgICAgICAgbGFiZWxDb2xvcnMucHVzaChpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhzY29wZWQsICdsYWJlbENvbG9yJywgdGhpcywgY29udGV4dCkpO1xuICAgICAgICAgICAgbGFiZWxQb2ludFN0eWxlcy5wdXNoKGludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrKHNjb3BlZCwgJ2xhYmVsUG9pbnRTdHlsZScsIHRoaXMsIGNvbnRleHQpKTtcbiAgICAgICAgICAgIGxhYmVsVGV4dENvbG9ycy5wdXNoKGludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrKHNjb3BlZCwgJ2xhYmVsVGV4dENvbG9yJywgdGhpcywgY29udGV4dCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5sYWJlbENvbG9ycyA9IGxhYmVsQ29sb3JzO1xuICAgICAgICB0aGlzLmxhYmVsUG9pbnRTdHlsZXMgPSBsYWJlbFBvaW50U3R5bGVzO1xuICAgICAgICB0aGlzLmxhYmVsVGV4dENvbG9ycyA9IGxhYmVsVGV4dENvbG9ycztcbiAgICAgICAgdGhpcy5kYXRhUG9pbnRzID0gdG9vbHRpcEl0ZW1zO1xuICAgICAgICByZXR1cm4gdG9vbHRpcEl0ZW1zO1xuICAgIH1cbiAgICB1cGRhdGUoY2hhbmdlZCwgcmVwbGF5KSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoKSk7XG4gICAgICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuX2FjdGl2ZTtcbiAgICAgICAgbGV0IHByb3BlcnRpZXM7XG4gICAgICAgIGxldCB0b29sdGlwSXRlbXMgPSBbXTtcbiAgICAgICAgaWYgKCFhY3RpdmUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5vcGFjaXR5ICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHBvc2l0aW9uZXJzW29wdGlvbnMucG9zaXRpb25dLmNhbGwodGhpcywgYWN0aXZlLCB0aGlzLl9ldmVudFBvc2l0aW9uKTtcbiAgICAgICAgICAgIHRvb2x0aXBJdGVtcyA9IHRoaXMuX2NyZWF0ZUl0ZW1zKG9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy50aXRsZSA9IHRoaXMuZ2V0VGl0bGUodG9vbHRpcEl0ZW1zLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXMuYmVmb3JlQm9keSA9IHRoaXMuZ2V0QmVmb3JlQm9keSh0b29sdGlwSXRlbXMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy5ib2R5ID0gdGhpcy5nZXRCb2R5KHRvb2x0aXBJdGVtcywgb3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLmFmdGVyQm9keSA9IHRoaXMuZ2V0QWZ0ZXJCb2R5KHRvb2x0aXBJdGVtcywgb3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLmZvb3RlciA9IHRoaXMuZ2V0Rm9vdGVyKHRvb2x0aXBJdGVtcywgb3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBzaXplID0gdGhpcy5fc2l6ZSA9IGdldFRvb2x0aXBTaXplKHRoaXMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgcG9zaXRpb25BbmRTaXplID0gT2JqZWN0LmFzc2lnbih7fSwgcG9zaXRpb24sIHNpemUpO1xuICAgICAgICAgICAgY29uc3QgYWxpZ25tZW50ID0gZGV0ZXJtaW5lQWxpZ25tZW50KHRoaXMuY2hhcnQsIG9wdGlvbnMsIHBvc2l0aW9uQW5kU2l6ZSk7XG4gICAgICAgICAgICBjb25zdCBiYWNrZ3JvdW5kUG9pbnQgPSBnZXRCYWNrZ3JvdW5kUG9pbnQob3B0aW9ucywgcG9zaXRpb25BbmRTaXplLCBhbGlnbm1lbnQsIHRoaXMuY2hhcnQpO1xuICAgICAgICAgICAgdGhpcy54QWxpZ24gPSBhbGlnbm1lbnQueEFsaWduO1xuICAgICAgICAgICAgdGhpcy55QWxpZ24gPSBhbGlnbm1lbnQueUFsaWduO1xuICAgICAgICAgICAgcHJvcGVydGllcyA9IHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgICAgIHg6IGJhY2tncm91bmRQb2ludC54LFxuICAgICAgICAgICAgICAgIHk6IGJhY2tncm91bmRQb2ludC55LFxuICAgICAgICAgICAgICAgIHdpZHRoOiBzaXplLndpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogc2l6ZS5oZWlnaHQsXG4gICAgICAgICAgICAgICAgY2FyZXRYOiBwb3NpdGlvbi54LFxuICAgICAgICAgICAgICAgIGNhcmV0WTogcG9zaXRpb24ueVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90b29sdGlwSXRlbXMgPSB0b29sdGlwSXRlbXM7XG4gICAgICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlQW5pbWF0aW9ucygpLnVwZGF0ZSh0aGlzLCBwcm9wZXJ0aWVzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hhbmdlZCAmJiBvcHRpb25zLmV4dGVybmFsKSB7XG4gICAgICAgICAgICBvcHRpb25zLmV4dGVybmFsLmNhbGwodGhpcywge1xuICAgICAgICAgICAgICAgIGNoYXJ0OiB0aGlzLmNoYXJ0LFxuICAgICAgICAgICAgICAgIHRvb2x0aXA6IHRoaXMsXG4gICAgICAgICAgICAgICAgcmVwbGF5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkcmF3Q2FyZXQodG9vbHRpcFBvaW50LCBjdHgsIHNpemUsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgY2FyZXRQb3NpdGlvbiA9IHRoaXMuZ2V0Q2FyZXRQb3NpdGlvbih0b29sdGlwUG9pbnQsIHNpemUsIG9wdGlvbnMpO1xuICAgICAgICBjdHgubGluZVRvKGNhcmV0UG9zaXRpb24ueDEsIGNhcmV0UG9zaXRpb24ueTEpO1xuICAgICAgICBjdHgubGluZVRvKGNhcmV0UG9zaXRpb24ueDIsIGNhcmV0UG9zaXRpb24ueTIpO1xuICAgICAgICBjdHgubGluZVRvKGNhcmV0UG9zaXRpb24ueDMsIGNhcmV0UG9zaXRpb24ueTMpO1xuICAgIH1cbiAgICBnZXRDYXJldFBvc2l0aW9uKHRvb2x0aXBQb2ludCwgc2l6ZSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IHhBbGlnbiAsIHlBbGlnbiAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgY2FyZXRTaXplICwgY29ybmVyUmFkaXVzICB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3QgeyB0b3BMZWZ0ICwgdG9wUmlnaHQgLCBib3R0b21MZWZ0ICwgYm90dG9tUmlnaHQgIH0gPSB0b1RSQkxDb3JuZXJzKGNvcm5lclJhZGl1cyk7XG4gICAgICAgIGNvbnN0IHsgeDogcHRYICwgeTogcHRZICB9ID0gdG9vbHRpcFBvaW50O1xuICAgICAgICBjb25zdCB7IHdpZHRoICwgaGVpZ2h0ICB9ID0gc2l6ZTtcbiAgICAgICAgbGV0IHgxLCB4MiwgeDMsIHkxLCB5MiwgeTM7XG4gICAgICAgIGlmICh5QWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICB5MiA9IHB0WSArIGhlaWdodCAvIDI7XG4gICAgICAgICAgICBpZiAoeEFsaWduID09PSAnbGVmdCcpIHtcbiAgICAgICAgICAgICAgICB4MSA9IHB0WDtcbiAgICAgICAgICAgICAgICB4MiA9IHgxIC0gY2FyZXRTaXplO1xuICAgICAgICAgICAgICAgIHkxID0geTIgKyBjYXJldFNpemU7XG4gICAgICAgICAgICAgICAgeTMgPSB5MiAtIGNhcmV0U2l6ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgeDEgPSBwdFggKyB3aWR0aDtcbiAgICAgICAgICAgICAgICB4MiA9IHgxICsgY2FyZXRTaXplO1xuICAgICAgICAgICAgICAgIHkxID0geTIgLSBjYXJldFNpemU7XG4gICAgICAgICAgICAgICAgeTMgPSB5MiArIGNhcmV0U2l6ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHgzID0geDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoeEFsaWduID09PSAnbGVmdCcpIHtcbiAgICAgICAgICAgICAgICB4MiA9IHB0WCArIE1hdGgubWF4KHRvcExlZnQsIGJvdHRvbUxlZnQpICsgY2FyZXRTaXplO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh4QWxpZ24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgICAgICB4MiA9IHB0WCArIHdpZHRoIC0gTWF0aC5tYXgodG9wUmlnaHQsIGJvdHRvbVJpZ2h0KSAtIGNhcmV0U2l6ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgeDIgPSB0aGlzLmNhcmV0WDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh5QWxpZ24gPT09ICd0b3AnKSB7XG4gICAgICAgICAgICAgICAgeTEgPSBwdFk7XG4gICAgICAgICAgICAgICAgeTIgPSB5MSAtIGNhcmV0U2l6ZTtcbiAgICAgICAgICAgICAgICB4MSA9IHgyIC0gY2FyZXRTaXplO1xuICAgICAgICAgICAgICAgIHgzID0geDIgKyBjYXJldFNpemU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHkxID0gcHRZICsgaGVpZ2h0O1xuICAgICAgICAgICAgICAgIHkyID0geTEgKyBjYXJldFNpemU7XG4gICAgICAgICAgICAgICAgeDEgPSB4MiArIGNhcmV0U2l6ZTtcbiAgICAgICAgICAgICAgICB4MyA9IHgyIC0gY2FyZXRTaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeTMgPSB5MTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICB4MixcbiAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgeTEsXG4gICAgICAgICAgICB5MixcbiAgICAgICAgICAgIHkzXG4gICAgICAgIH07XG4gICAgfVxuICAgIGRyYXdUaXRsZShwdCwgY3R4LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHRpdGxlID0gdGhpcy50aXRsZTtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gdGl0bGUubGVuZ3RoO1xuICAgICAgICBsZXQgdGl0bGVGb250LCB0aXRsZVNwYWNpbmcsIGk7XG4gICAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHJ0bEhlbHBlciA9IGdldFJ0bEFkYXB0ZXIob3B0aW9ucy5ydGwsIHRoaXMueCwgdGhpcy53aWR0aCk7XG4gICAgICAgICAgICBwdC54ID0gZ2V0QWxpZ25lZFgodGhpcywgb3B0aW9ucy50aXRsZUFsaWduLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGN0eC50ZXh0QWxpZ24gPSBydGxIZWxwZXIudGV4dEFsaWduKG9wdGlvbnMudGl0bGVBbGlnbik7XG4gICAgICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgICAgICAgICB0aXRsZUZvbnQgPSB0b0ZvbnQob3B0aW9ucy50aXRsZUZvbnQpO1xuICAgICAgICAgICAgdGl0bGVTcGFjaW5nID0gb3B0aW9ucy50aXRsZVNwYWNpbmc7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy50aXRsZUNvbG9yO1xuICAgICAgICAgICAgY3R4LmZvbnQgPSB0aXRsZUZvbnQuc3RyaW5nO1xuICAgICAgICAgICAgZm9yKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpe1xuICAgICAgICAgICAgICAgIGN0eC5maWxsVGV4dCh0aXRsZVtpXSwgcnRsSGVscGVyLngocHQueCksIHB0LnkgKyB0aXRsZUZvbnQubGluZUhlaWdodCAvIDIpO1xuICAgICAgICAgICAgICAgIHB0LnkgKz0gdGl0bGVGb250LmxpbmVIZWlnaHQgKyB0aXRsZVNwYWNpbmc7XG4gICAgICAgICAgICAgICAgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcHQueSArPSBvcHRpb25zLnRpdGxlTWFyZ2luQm90dG9tIC0gdGl0bGVTcGFjaW5nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiBfZHJhd0NvbG9yQm94KGN0eCwgcHQsIGksIHJ0bEhlbHBlciwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBsYWJlbENvbG9ycyA9IHRoaXMubGFiZWxDb2xvcnNbaV07XG4gICAgICAgIGNvbnN0IGxhYmVsUG9pbnRTdHlsZSA9IHRoaXMubGFiZWxQb2ludFN0eWxlc1tpXTtcbiAgICAgICAgY29uc3QgeyBib3hIZWlnaHQgLCBib3hXaWR0aCAsIGJveFBhZGRpbmcgIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBib2R5Rm9udCA9IHRvRm9udChvcHRpb25zLmJvZHlGb250KTtcbiAgICAgICAgY29uc3QgY29sb3JYID0gZ2V0QWxpZ25lZFgodGhpcywgJ2xlZnQnLCBvcHRpb25zKTtcbiAgICAgICAgY29uc3QgcnRsQ29sb3JYID0gcnRsSGVscGVyLngoY29sb3JYKTtcbiAgICAgICAgY29uc3QgeU9mZlNldCA9IGJveEhlaWdodCA8IGJvZHlGb250LmxpbmVIZWlnaHQgPyAoYm9keUZvbnQubGluZUhlaWdodCAtIGJveEhlaWdodCkgLyAyIDogMDtcbiAgICAgICAgY29uc3QgY29sb3JZID0gcHQueSArIHlPZmZTZXQ7XG4gICAgICAgIGlmIChvcHRpb25zLnVzZVBvaW50U3R5bGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGRyYXdPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIHJhZGl1czogTWF0aC5taW4oYm94V2lkdGgsIGJveEhlaWdodCkgLyAyLFxuICAgICAgICAgICAgICAgIHBvaW50U3R5bGU6IGxhYmVsUG9pbnRTdHlsZS5wb2ludFN0eWxlLFxuICAgICAgICAgICAgICAgIHJvdGF0aW9uOiBsYWJlbFBvaW50U3R5bGUucm90YXRpb24sXG4gICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDFcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBjZW50ZXJYID0gcnRsSGVscGVyLmxlZnRGb3JMdHIocnRsQ29sb3JYLCBib3hXaWR0aCkgKyBib3hXaWR0aCAvIDI7XG4gICAgICAgICAgICBjb25zdCBjZW50ZXJZID0gY29sb3JZICsgYm94SGVpZ2h0IC8gMjtcbiAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IG9wdGlvbnMubXVsdGlLZXlCYWNrZ3JvdW5kO1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMubXVsdGlLZXlCYWNrZ3JvdW5kO1xuICAgICAgICAgICAgZHJhd1BvaW50KGN0eCwgZHJhd09wdGlvbnMsIGNlbnRlclgsIGNlbnRlclkpO1xuICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gbGFiZWxDb2xvcnMuYm9yZGVyQ29sb3I7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gbGFiZWxDb2xvcnMuYmFja2dyb3VuZENvbG9yO1xuICAgICAgICAgICAgZHJhd1BvaW50KGN0eCwgZHJhd09wdGlvbnMsIGNlbnRlclgsIGNlbnRlclkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3R4LmxpbmVXaWR0aCA9IGlzT2JqZWN0KGxhYmVsQ29sb3JzLmJvcmRlcldpZHRoKSA/IE1hdGgubWF4KC4uLk9iamVjdC52YWx1ZXMobGFiZWxDb2xvcnMuYm9yZGVyV2lkdGgpKSA6IGxhYmVsQ29sb3JzLmJvcmRlcldpZHRoIHx8IDE7XG4gICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBsYWJlbENvbG9ycy5ib3JkZXJDb2xvcjtcbiAgICAgICAgICAgIGN0eC5zZXRMaW5lRGFzaChsYWJlbENvbG9ycy5ib3JkZXJEYXNoIHx8IFtdKTtcbiAgICAgICAgICAgIGN0eC5saW5lRGFzaE9mZnNldCA9IGxhYmVsQ29sb3JzLmJvcmRlckRhc2hPZmZzZXQgfHwgMDtcbiAgICAgICAgICAgIGNvbnN0IG91dGVyWCA9IHJ0bEhlbHBlci5sZWZ0Rm9yTHRyKHJ0bENvbG9yWCwgYm94V2lkdGggLSBib3hQYWRkaW5nKTtcbiAgICAgICAgICAgIGNvbnN0IGlubmVyWCA9IHJ0bEhlbHBlci5sZWZ0Rm9yTHRyKHJ0bEhlbHBlci54UGx1cyhydGxDb2xvclgsIDEpLCBib3hXaWR0aCAtIGJveFBhZGRpbmcgLSAyKTtcbiAgICAgICAgICAgIGNvbnN0IGJvcmRlclJhZGl1cyA9IHRvVFJCTENvcm5lcnMobGFiZWxDb2xvcnMuYm9yZGVyUmFkaXVzKTtcbiAgICAgICAgICAgIGlmIChPYmplY3QudmFsdWVzKGJvcmRlclJhZGl1cykuc29tZSgodik9PnYgIT09IDApKSB7XG4gICAgICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLm11bHRpS2V5QmFja2dyb3VuZDtcbiAgICAgICAgICAgICAgICBhZGRSb3VuZGVkUmVjdFBhdGgoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgIHg6IG91dGVyWCxcbiAgICAgICAgICAgICAgICAgICAgeTogY29sb3JZLFxuICAgICAgICAgICAgICAgICAgICB3OiBib3hXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgaDogYm94SGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICByYWRpdXM6IGJvcmRlclJhZGl1c1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBsYWJlbENvbG9ycy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgIGFkZFJvdW5kZWRSZWN0UGF0aChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgeDogaW5uZXJYLFxuICAgICAgICAgICAgICAgICAgICB5OiBjb2xvclkgKyAxLFxuICAgICAgICAgICAgICAgICAgICB3OiBib3hXaWR0aCAtIDIsXG4gICAgICAgICAgICAgICAgICAgIGg6IGJveEhlaWdodCAtIDIsXG4gICAgICAgICAgICAgICAgICAgIHJhZGl1czogYm9yZGVyUmFkaXVzXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMubXVsdGlLZXlCYWNrZ3JvdW5kO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsUmVjdChvdXRlclgsIGNvbG9yWSwgYm94V2lkdGgsIGJveEhlaWdodCk7XG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZVJlY3Qob3V0ZXJYLCBjb2xvclksIGJveFdpZHRoLCBib3hIZWlnaHQpO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBsYWJlbENvbG9ycy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxSZWN0KGlubmVyWCwgY29sb3JZICsgMSwgYm94V2lkdGggLSAyLCBib3hIZWlnaHQgLSAyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjdHguZmlsbFN0eWxlID0gdGhpcy5sYWJlbFRleHRDb2xvcnNbaV07XG4gICAgfVxuICAgIGRyYXdCb2R5KHB0LCBjdHgsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBib2R5ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBib2R5U3BhY2luZyAsIGJvZHlBbGlnbiAsIGRpc3BsYXlDb2xvcnMgLCBib3hIZWlnaHQgLCBib3hXaWR0aCAsIGJveFBhZGRpbmcgIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBib2R5Rm9udCA9IHRvRm9udChvcHRpb25zLmJvZHlGb250KTtcbiAgICAgICAgbGV0IGJvZHlMaW5lSGVpZ2h0ID0gYm9keUZvbnQubGluZUhlaWdodDtcbiAgICAgICAgbGV0IHhMaW5lUGFkZGluZyA9IDA7XG4gICAgICAgIGNvbnN0IHJ0bEhlbHBlciA9IGdldFJ0bEFkYXB0ZXIob3B0aW9ucy5ydGwsIHRoaXMueCwgdGhpcy53aWR0aCk7XG4gICAgICAgIGNvbnN0IGZpbGxMaW5lT2ZUZXh0ID0gZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgY3R4LmZpbGxUZXh0KGxpbmUsIHJ0bEhlbHBlci54KHB0LnggKyB4TGluZVBhZGRpbmcpLCBwdC55ICsgYm9keUxpbmVIZWlnaHQgLyAyKTtcbiAgICAgICAgICAgIHB0LnkgKz0gYm9keUxpbmVIZWlnaHQgKyBib2R5U3BhY2luZztcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgYm9keUFsaWduRm9yQ2FsY3VsYXRpb24gPSBydGxIZWxwZXIudGV4dEFsaWduKGJvZHlBbGlnbik7XG4gICAgICAgIGxldCBib2R5SXRlbSwgdGV4dENvbG9yLCBsaW5lcywgaSwgaiwgaWxlbiwgamxlbjtcbiAgICAgICAgY3R4LnRleHRBbGlnbiA9IGJvZHlBbGlnbjtcbiAgICAgICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgICAgICBjdHguZm9udCA9IGJvZHlGb250LnN0cmluZztcbiAgICAgICAgcHQueCA9IGdldEFsaWduZWRYKHRoaXMsIGJvZHlBbGlnbkZvckNhbGN1bGF0aW9uLCBvcHRpb25zKTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMuYm9keUNvbG9yO1xuICAgICAgICBlYWNoKHRoaXMuYmVmb3JlQm9keSwgZmlsbExpbmVPZlRleHQpO1xuICAgICAgICB4TGluZVBhZGRpbmcgPSBkaXNwbGF5Q29sb3JzICYmIGJvZHlBbGlnbkZvckNhbGN1bGF0aW9uICE9PSAncmlnaHQnID8gYm9keUFsaWduID09PSAnY2VudGVyJyA/IGJveFdpZHRoIC8gMiArIGJveFBhZGRpbmcgOiBib3hXaWR0aCArIDIgKyBib3hQYWRkaW5nIDogMDtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gYm9keS5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgYm9keUl0ZW0gPSBib2R5W2ldO1xuICAgICAgICAgICAgdGV4dENvbG9yID0gdGhpcy5sYWJlbFRleHRDb2xvcnNbaV07XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gdGV4dENvbG9yO1xuICAgICAgICAgICAgZWFjaChib2R5SXRlbS5iZWZvcmUsIGZpbGxMaW5lT2ZUZXh0KTtcbiAgICAgICAgICAgIGxpbmVzID0gYm9keUl0ZW0ubGluZXM7XG4gICAgICAgICAgICBpZiAoZGlzcGxheUNvbG9ycyAmJiBsaW5lcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kcmF3Q29sb3JCb3goY3R4LCBwdCwgaSwgcnRsSGVscGVyLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBib2R5TGluZUhlaWdodCA9IE1hdGgubWF4KGJvZHlGb250LmxpbmVIZWlnaHQsIGJveEhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IoaiA9IDAsIGpsZW4gPSBsaW5lcy5sZW5ndGg7IGogPCBqbGVuOyArK2ope1xuICAgICAgICAgICAgICAgIGZpbGxMaW5lT2ZUZXh0KGxpbmVzW2pdKTtcbiAgICAgICAgICAgICAgICBib2R5TGluZUhlaWdodCA9IGJvZHlGb250LmxpbmVIZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlYWNoKGJvZHlJdGVtLmFmdGVyLCBmaWxsTGluZU9mVGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgeExpbmVQYWRkaW5nID0gMDtcbiAgICAgICAgYm9keUxpbmVIZWlnaHQgPSBib2R5Rm9udC5saW5lSGVpZ2h0O1xuICAgICAgICBlYWNoKHRoaXMuYWZ0ZXJCb2R5LCBmaWxsTGluZU9mVGV4dCk7XG4gICAgICAgIHB0LnkgLT0gYm9keVNwYWNpbmc7XG4gICAgfVxuICAgIGRyYXdGb290ZXIocHQsIGN0eCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBmb290ZXIgPSB0aGlzLmZvb3RlcjtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gZm9vdGVyLmxlbmd0aDtcbiAgICAgICAgbGV0IGZvb3RlckZvbnQsIGk7XG4gICAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHJ0bEhlbHBlciA9IGdldFJ0bEFkYXB0ZXIob3B0aW9ucy5ydGwsIHRoaXMueCwgdGhpcy53aWR0aCk7XG4gICAgICAgICAgICBwdC54ID0gZ2V0QWxpZ25lZFgodGhpcywgb3B0aW9ucy5mb290ZXJBbGlnbiwgb3B0aW9ucyk7XG4gICAgICAgICAgICBwdC55ICs9IG9wdGlvbnMuZm9vdGVyTWFyZ2luVG9wO1xuICAgICAgICAgICAgY3R4LnRleHRBbGlnbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24ob3B0aW9ucy5mb290ZXJBbGlnbik7XG4gICAgICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgICAgICAgICBmb290ZXJGb250ID0gdG9Gb250KG9wdGlvbnMuZm9vdGVyRm9udCk7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5mb290ZXJDb2xvcjtcbiAgICAgICAgICAgIGN0eC5mb250ID0gZm9vdGVyRm9udC5zdHJpbmc7XG4gICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSl7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxUZXh0KGZvb3RlcltpXSwgcnRsSGVscGVyLngocHQueCksIHB0LnkgKyBmb290ZXJGb250LmxpbmVIZWlnaHQgLyAyKTtcbiAgICAgICAgICAgICAgICBwdC55ICs9IGZvb3RlckZvbnQubGluZUhlaWdodCArIG9wdGlvbnMuZm9vdGVyU3BhY2luZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBkcmF3QmFja2dyb3VuZChwdCwgY3R4LCB0b29sdGlwU2l6ZSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IHhBbGlnbiAsIHlBbGlnbiAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgeCAsIHkgIH0gPSBwdDtcbiAgICAgICAgY29uc3QgeyB3aWR0aCAsIGhlaWdodCAgfSA9IHRvb2x0aXBTaXplO1xuICAgICAgICBjb25zdCB7IHRvcExlZnQgLCB0b3BSaWdodCAsIGJvdHRvbUxlZnQgLCBib3R0b21SaWdodCAgfSA9IHRvVFJCTENvcm5lcnMob3B0aW9ucy5jb3JuZXJSYWRpdXMpO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IG9wdGlvbnMuYm9yZGVyQ29sb3I7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSBvcHRpb25zLmJvcmRlcldpZHRoO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5tb3ZlVG8oeCArIHRvcExlZnQsIHkpO1xuICAgICAgICBpZiAoeUFsaWduID09PSAndG9wJykge1xuICAgICAgICAgICAgdGhpcy5kcmF3Q2FyZXQocHQsIGN0eCwgdG9vbHRpcFNpemUsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5saW5lVG8oeCArIHdpZHRoIC0gdG9wUmlnaHQsIHkpO1xuICAgICAgICBjdHgucXVhZHJhdGljQ3VydmVUbyh4ICsgd2lkdGgsIHksIHggKyB3aWR0aCwgeSArIHRvcFJpZ2h0KTtcbiAgICAgICAgaWYgKHlBbGlnbiA9PT0gJ2NlbnRlcicgJiYgeEFsaWduID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgICB0aGlzLmRyYXdDYXJldChwdCwgY3R4LCB0b29sdGlwU2l6ZSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LmxpbmVUbyh4ICsgd2lkdGgsIHkgKyBoZWlnaHQgLSBib3R0b21SaWdodCk7XG4gICAgICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHggKyB3aWR0aCwgeSArIGhlaWdodCwgeCArIHdpZHRoIC0gYm90dG9tUmlnaHQsIHkgKyBoZWlnaHQpO1xuICAgICAgICBpZiAoeUFsaWduID09PSAnYm90dG9tJykge1xuICAgICAgICAgICAgdGhpcy5kcmF3Q2FyZXQocHQsIGN0eCwgdG9vbHRpcFNpemUsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5saW5lVG8oeCArIGJvdHRvbUxlZnQsIHkgKyBoZWlnaHQpO1xuICAgICAgICBjdHgucXVhZHJhdGljQ3VydmVUbyh4LCB5ICsgaGVpZ2h0LCB4LCB5ICsgaGVpZ2h0IC0gYm90dG9tTGVmdCk7XG4gICAgICAgIGlmICh5QWxpZ24gPT09ICdjZW50ZXInICYmIHhBbGlnbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgICB0aGlzLmRyYXdDYXJldChwdCwgY3R4LCB0b29sdGlwU2l6ZSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LmxpbmVUbyh4LCB5ICsgdG9wTGVmdCk7XG4gICAgICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHgsIHksIHggKyB0b3BMZWZ0LCB5KTtcbiAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICBpZiAob3B0aW9ucy5ib3JkZXJXaWR0aCA+IDApIHtcbiAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgfVxuICAgIH1cbiBfdXBkYXRlQW5pbWF0aW9uVGFyZ2V0KG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICBjb25zdCBhbmltcyA9IHRoaXMuJGFuaW1hdGlvbnM7XG4gICAgICAgIGNvbnN0IGFuaW1YID0gYW5pbXMgJiYgYW5pbXMueDtcbiAgICAgICAgY29uc3QgYW5pbVkgPSBhbmltcyAmJiBhbmltcy55O1xuICAgICAgICBpZiAoYW5pbVggfHwgYW5pbVkpIHtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gcG9zaXRpb25lcnNbb3B0aW9ucy5wb3NpdGlvbl0uY2FsbCh0aGlzLCB0aGlzLl9hY3RpdmUsIHRoaXMuX2V2ZW50UG9zaXRpb24pO1xuICAgICAgICAgICAgaWYgKCFwb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHNpemUgPSB0aGlzLl9zaXplID0gZ2V0VG9vbHRpcFNpemUodGhpcywgb3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbkFuZFNpemUgPSBPYmplY3QuYXNzaWduKHt9LCBwb3NpdGlvbiwgdGhpcy5fc2l6ZSk7XG4gICAgICAgICAgICBjb25zdCBhbGlnbm1lbnQgPSBkZXRlcm1pbmVBbGlnbm1lbnQoY2hhcnQsIG9wdGlvbnMsIHBvc2l0aW9uQW5kU2l6ZSk7XG4gICAgICAgICAgICBjb25zdCBwb2ludCA9IGdldEJhY2tncm91bmRQb2ludChvcHRpb25zLCBwb3NpdGlvbkFuZFNpemUsIGFsaWdubWVudCwgY2hhcnQpO1xuICAgICAgICAgICAgaWYgKGFuaW1YLl90byAhPT0gcG9pbnQueCB8fCBhbmltWS5fdG8gIT09IHBvaW50LnkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnhBbGlnbiA9IGFsaWdubWVudC54QWxpZ247XG4gICAgICAgICAgICAgICAgdGhpcy55QWxpZ24gPSBhbGlnbm1lbnQueUFsaWduO1xuICAgICAgICAgICAgICAgIHRoaXMud2lkdGggPSBzaXplLndpZHRoO1xuICAgICAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gc2l6ZS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgdGhpcy5jYXJldFggPSBwb3NpdGlvbi54O1xuICAgICAgICAgICAgICAgIHRoaXMuY2FyZXRZID0gcG9zaXRpb24ueTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXNvbHZlQW5pbWF0aW9ucygpLnVwZGF0ZSh0aGlzLCBwb2ludCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gX3dpbGxSZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMub3BhY2l0eTtcbiAgICB9XG4gICAgZHJhdyhjdHgpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICAgICAgbGV0IG9wYWNpdHkgPSB0aGlzLm9wYWNpdHk7XG4gICAgICAgIGlmICghb3BhY2l0eSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3VwZGF0ZUFuaW1hdGlvblRhcmdldChvcHRpb25zKTtcbiAgICAgICAgY29uc3QgdG9vbHRpcFNpemUgPSB7XG4gICAgICAgICAgICB3aWR0aDogdGhpcy53aWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogdGhpcy5oZWlnaHRcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcHQgPSB7XG4gICAgICAgICAgICB4OiB0aGlzLngsXG4gICAgICAgICAgICB5OiB0aGlzLnlcbiAgICAgICAgfTtcbiAgICAgICAgb3BhY2l0eSA9IE1hdGguYWJzKG9wYWNpdHkpIDwgMWUtMyA/IDAgOiBvcGFjaXR5O1xuICAgICAgICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKG9wdGlvbnMucGFkZGluZyk7XG4gICAgICAgIGNvbnN0IGhhc1Rvb2x0aXBDb250ZW50ID0gdGhpcy50aXRsZS5sZW5ndGggfHwgdGhpcy5iZWZvcmVCb2R5Lmxlbmd0aCB8fCB0aGlzLmJvZHkubGVuZ3RoIHx8IHRoaXMuYWZ0ZXJCb2R5Lmxlbmd0aCB8fCB0aGlzLmZvb3Rlci5sZW5ndGg7XG4gICAgICAgIGlmIChvcHRpb25zLmVuYWJsZWQgJiYgaGFzVG9vbHRpcENvbnRlbnQpIHtcbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICBjdHguZ2xvYmFsQWxwaGEgPSBvcGFjaXR5O1xuICAgICAgICAgICAgdGhpcy5kcmF3QmFja2dyb3VuZChwdCwgY3R4LCB0b29sdGlwU2l6ZSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBvdmVycmlkZVRleHREaXJlY3Rpb24oY3R4LCBvcHRpb25zLnRleHREaXJlY3Rpb24pO1xuICAgICAgICAgICAgcHQueSArPSBwYWRkaW5nLnRvcDtcbiAgICAgICAgICAgIHRoaXMuZHJhd1RpdGxlKHB0LCBjdHgsIG9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy5kcmF3Qm9keShwdCwgY3R4LCBvcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXMuZHJhd0Zvb3RlcihwdCwgY3R4LCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJlc3RvcmVUZXh0RGlyZWN0aW9uKGN0eCwgb3B0aW9ucy50ZXh0RGlyZWN0aW9uKTtcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gZ2V0QWN0aXZlRWxlbWVudHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmUgfHwgW107XG4gICAgfVxuIHNldEFjdGl2ZUVsZW1lbnRzKGFjdGl2ZUVsZW1lbnRzLCBldmVudFBvc2l0aW9uKSB7XG4gICAgICAgIGNvbnN0IGxhc3RBY3RpdmUgPSB0aGlzLl9hY3RpdmU7XG4gICAgICAgIGNvbnN0IGFjdGl2ZSA9IGFjdGl2ZUVsZW1lbnRzLm1hcCgoeyBkYXRhc2V0SW5kZXggLCBpbmRleCAgfSk9PntcbiAgICAgICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLmNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG4gICAgICAgICAgICBpZiAoIW1ldGEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBmaW5kIGEgZGF0YXNldCBhdCBpbmRleCAnICsgZGF0YXNldEluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZGF0YXNldEluZGV4LFxuICAgICAgICAgICAgICAgIGVsZW1lbnQ6IG1ldGEuZGF0YVtpbmRleF0sXG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBjaGFuZ2VkID0gIV9lbGVtZW50c0VxdWFsKGxhc3RBY3RpdmUsIGFjdGl2ZSk7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uQ2hhbmdlZCA9IHRoaXMuX3Bvc2l0aW9uQ2hhbmdlZChhY3RpdmUsIGV2ZW50UG9zaXRpb24pO1xuICAgICAgICBpZiAoY2hhbmdlZCB8fCBwb3NpdGlvbkNoYW5nZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZSA9IGFjdGl2ZTtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50UG9zaXRpb24gPSBldmVudFBvc2l0aW9uO1xuICAgICAgICAgICAgdGhpcy5faWdub3JlUmVwbGF5RXZlbnRzID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuIGhhbmRsZUV2ZW50KGUsIHJlcGxheSwgaW5DaGFydEFyZWEgPSB0cnVlKSB7XG4gICAgICAgIGlmIChyZXBsYXkgJiYgdGhpcy5faWdub3JlUmVwbGF5RXZlbnRzKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faWdub3JlUmVwbGF5RXZlbnRzID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGxhc3RBY3RpdmUgPSB0aGlzLl9hY3RpdmUgfHwgW107XG4gICAgICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuX2dldEFjdGl2ZUVsZW1lbnRzKGUsIGxhc3RBY3RpdmUsIHJlcGxheSwgaW5DaGFydEFyZWEpO1xuICAgICAgICBjb25zdCBwb3NpdGlvbkNoYW5nZWQgPSB0aGlzLl9wb3NpdGlvbkNoYW5nZWQoYWN0aXZlLCBlKTtcbiAgICAgICAgY29uc3QgY2hhbmdlZCA9IHJlcGxheSB8fCAhX2VsZW1lbnRzRXF1YWwoYWN0aXZlLCBsYXN0QWN0aXZlKSB8fCBwb3NpdGlvbkNoYW5nZWQ7XG4gICAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmUgPSBhY3RpdmU7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5lbmFibGVkIHx8IG9wdGlvbnMuZXh0ZXJuYWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudFBvc2l0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICB4OiBlLngsXG4gICAgICAgICAgICAgICAgICAgIHk6IGUueVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGUodHJ1ZSwgcmVwbGF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hhbmdlZDtcbiAgICB9XG4gX2dldEFjdGl2ZUVsZW1lbnRzKGUsIGxhc3RBY3RpdmUsIHJlcGxheSwgaW5DaGFydEFyZWEpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgaWYgKGUudHlwZSA9PT0gJ21vdXNlb3V0Jykge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaW5DaGFydEFyZWEpIHtcbiAgICAgICAgICAgIHJldHVybiBsYXN0QWN0aXZlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuY2hhcnQuZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZShlLCBvcHRpb25zLm1vZGUsIG9wdGlvbnMsIHJlcGxheSk7XG4gICAgICAgIGlmIChvcHRpb25zLnJldmVyc2UpIHtcbiAgICAgICAgICAgIGFjdGl2ZS5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjdGl2ZTtcbiAgICB9XG4gX3Bvc2l0aW9uQ2hhbmdlZChhY3RpdmUsIGUpIHtcbiAgICAgICAgY29uc3QgeyBjYXJldFggLCBjYXJldFkgLCBvcHRpb25zICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSBwb3NpdGlvbmVyc1tvcHRpb25zLnBvc2l0aW9uXS5jYWxsKHRoaXMsIGFjdGl2ZSwgZSk7XG4gICAgICAgIHJldHVybiBwb3NpdGlvbiAhPT0gZmFsc2UgJiYgKGNhcmV0WCAhPT0gcG9zaXRpb24ueCB8fCBjYXJldFkgIT09IHBvc2l0aW9uLnkpO1xuICAgIH1cbn1cbnZhciBwbHVnaW5fdG9vbHRpcCA9IHtcbiAgICBpZDogJ3Rvb2x0aXAnLFxuICAgIF9lbGVtZW50OiBUb29sdGlwLFxuICAgIHBvc2l0aW9uZXJzLFxuICAgIGFmdGVySW5pdCAoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgICAgICBjaGFydC50b29sdGlwID0gbmV3IFRvb2x0aXAoe1xuICAgICAgICAgICAgICAgIGNoYXJ0LFxuICAgICAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBiZWZvcmVVcGRhdGUgKGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgICAgICBpZiAoY2hhcnQudG9vbHRpcCkge1xuICAgICAgICAgICAgY2hhcnQudG9vbHRpcC5pbml0aWFsaXplKG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICByZXNldCAoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChjaGFydC50b29sdGlwKSB7XG4gICAgICAgICAgICBjaGFydC50b29sdGlwLmluaXRpYWxpemUob3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGFmdGVyRHJhdyAoY2hhcnQpIHtcbiAgICAgICAgY29uc3QgdG9vbHRpcCA9IGNoYXJ0LnRvb2x0aXA7XG4gICAgICAgIGlmICh0b29sdGlwICYmIHRvb2x0aXAuX3dpbGxSZW5kZXIoKSkge1xuICAgICAgICAgICAgY29uc3QgYXJncyA9IHtcbiAgICAgICAgICAgICAgICB0b29sdGlwXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGNoYXJ0Lm5vdGlmeVBsdWdpbnMoJ2JlZm9yZVRvb2x0aXBEcmF3Jywge1xuICAgICAgICAgICAgICAgIC4uLmFyZ3MsXG4gICAgICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG9vbHRpcC5kcmF3KGNoYXJ0LmN0eCk7XG4gICAgICAgICAgICBjaGFydC5ub3RpZnlQbHVnaW5zKCdhZnRlclRvb2x0aXBEcmF3JywgYXJncyk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGFmdGVyRXZlbnQgKGNoYXJ0LCBhcmdzKSB7XG4gICAgICAgIGlmIChjaGFydC50b29sdGlwKSB7XG4gICAgICAgICAgICBjb25zdCB1c2VGaW5hbFBvc2l0aW9uID0gYXJncy5yZXBsYXk7XG4gICAgICAgICAgICBpZiAoY2hhcnQudG9vbHRpcC5oYW5kbGVFdmVudChhcmdzLmV2ZW50LCB1c2VGaW5hbFBvc2l0aW9uLCBhcmdzLmluQ2hhcnRBcmVhKSkge1xuICAgICAgICAgICAgICAgIGFyZ3MuY2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgIGV4dGVybmFsOiBudWxsLFxuICAgICAgICBwb3NpdGlvbjogJ2F2ZXJhZ2UnLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsMCwwLDAuOCknLFxuICAgICAgICB0aXRsZUNvbG9yOiAnI2ZmZicsXG4gICAgICAgIHRpdGxlRm9udDoge1xuICAgICAgICAgICAgd2VpZ2h0OiAnYm9sZCdcbiAgICAgICAgfSxcbiAgICAgICAgdGl0bGVTcGFjaW5nOiAyLFxuICAgICAgICB0aXRsZU1hcmdpbkJvdHRvbTogNixcbiAgICAgICAgdGl0bGVBbGlnbjogJ2xlZnQnLFxuICAgICAgICBib2R5Q29sb3I6ICcjZmZmJyxcbiAgICAgICAgYm9keVNwYWNpbmc6IDIsXG4gICAgICAgIGJvZHlGb250OiB7fSxcbiAgICAgICAgYm9keUFsaWduOiAnbGVmdCcsXG4gICAgICAgIGZvb3RlckNvbG9yOiAnI2ZmZicsXG4gICAgICAgIGZvb3RlclNwYWNpbmc6IDIsXG4gICAgICAgIGZvb3Rlck1hcmdpblRvcDogNixcbiAgICAgICAgZm9vdGVyRm9udDoge1xuICAgICAgICAgICAgd2VpZ2h0OiAnYm9sZCdcbiAgICAgICAgfSxcbiAgICAgICAgZm9vdGVyQWxpZ246ICdsZWZ0JyxcbiAgICAgICAgcGFkZGluZzogNixcbiAgICAgICAgY2FyZXRQYWRkaW5nOiAyLFxuICAgICAgICBjYXJldFNpemU6IDUsXG4gICAgICAgIGNvcm5lclJhZGl1czogNixcbiAgICAgICAgYm94SGVpZ2h0OiAoY3R4LCBvcHRzKT0+b3B0cy5ib2R5Rm9udC5zaXplLFxuICAgICAgICBib3hXaWR0aDogKGN0eCwgb3B0cyk9Pm9wdHMuYm9keUZvbnQuc2l6ZSxcbiAgICAgICAgbXVsdGlLZXlCYWNrZ3JvdW5kOiAnI2ZmZicsXG4gICAgICAgIGRpc3BsYXlDb2xvcnM6IHRydWUsXG4gICAgICAgIGJveFBhZGRpbmc6IDAsXG4gICAgICAgIGJvcmRlckNvbG9yOiAncmdiYSgwLDAsMCwwKScsXG4gICAgICAgIGJvcmRlcldpZHRoOiAwLFxuICAgICAgICBhbmltYXRpb246IHtcbiAgICAgICAgICAgIGR1cmF0aW9uOiA0MDAsXG4gICAgICAgICAgICBlYXNpbmc6ICdlYXNlT3V0UXVhcnQnXG4gICAgICAgIH0sXG4gICAgICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgICAgICAgIG51bWJlcnM6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiBbXG4gICAgICAgICAgICAgICAgICAgICd4JyxcbiAgICAgICAgICAgICAgICAgICAgJ3knLFxuICAgICAgICAgICAgICAgICAgICAnd2lkdGgnLFxuICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JyxcbiAgICAgICAgICAgICAgICAgICAgJ2NhcmV0WCcsXG4gICAgICAgICAgICAgICAgICAgICdjYXJldFknXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9wYWNpdHk6IHtcbiAgICAgICAgICAgICAgICBlYXNpbmc6ICdsaW5lYXInLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAyMDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsbGJhY2tzOiBkZWZhdWx0Q2FsbGJhY2tzXG4gICAgfSxcbiAgICBkZWZhdWx0Um91dGVzOiB7XG4gICAgICAgIGJvZHlGb250OiAnZm9udCcsXG4gICAgICAgIGZvb3RlckZvbnQ6ICdmb250JyxcbiAgICAgICAgdGl0bGVGb250OiAnZm9udCdcbiAgICB9LFxuICAgIGRlc2NyaXB0b3JzOiB7XG4gICAgICAgIF9zY3JpcHRhYmxlOiAobmFtZSk9Pm5hbWUgIT09ICdmaWx0ZXInICYmIG5hbWUgIT09ICdpdGVtU29ydCcgJiYgbmFtZSAhPT0gJ2V4dGVybmFsJyxcbiAgICAgICAgX2luZGV4YWJsZTogZmFsc2UsXG4gICAgICAgIGNhbGxiYWNrczoge1xuICAgICAgICAgICAgX3NjcmlwdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgX2luZGV4YWJsZTogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgYW5pbWF0aW9uOiB7XG4gICAgICAgICAgICBfZmFsbGJhY2s6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgICAgICAgIF9mYWxsYmFjazogJ2FuaW1hdGlvbidcbiAgICAgICAgfVxuICAgIH0sXG4gICAgYWRkaXRpb25hbE9wdGlvblNjb3BlczogW1xuICAgICAgICAnaW50ZXJhY3Rpb24nXG4gICAgXVxufTtcblxudmFyIHBsdWdpbnMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5fX3Byb3RvX186IG51bGwsXG5Db2xvcnM6IHBsdWdpbl9jb2xvcnMsXG5EZWNpbWF0aW9uOiBwbHVnaW5fZGVjaW1hdGlvbixcbkZpbGxlcjogaW5kZXgsXG5MZWdlbmQ6IHBsdWdpbl9sZWdlbmQsXG5TdWJUaXRsZTogcGx1Z2luX3N1YnRpdGxlLFxuVGl0bGU6IHBsdWdpbl90aXRsZSxcblRvb2x0aXA6IHBsdWdpbl90b29sdGlwXG59KTtcblxuY29uc3QgYWRkSWZTdHJpbmcgPSAobGFiZWxzLCByYXcsIGluZGV4LCBhZGRlZExhYmVscyk9PntcbiAgICBpZiAodHlwZW9mIHJhdyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaW5kZXggPSBsYWJlbHMucHVzaChyYXcpIC0gMTtcbiAgICAgICAgYWRkZWRMYWJlbHMudW5zaGlmdCh7XG4gICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgIGxhYmVsOiByYXdcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChpc05hTihyYXcpKSB7XG4gICAgICAgIGluZGV4ID0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGluZGV4O1xufTtcbmZ1bmN0aW9uIGZpbmRPckFkZExhYmVsKGxhYmVscywgcmF3LCBpbmRleCwgYWRkZWRMYWJlbHMpIHtcbiAgICBjb25zdCBmaXJzdCA9IGxhYmVscy5pbmRleE9mKHJhdyk7XG4gICAgaWYgKGZpcnN0ID09PSAtMSkge1xuICAgICAgICByZXR1cm4gYWRkSWZTdHJpbmcobGFiZWxzLCByYXcsIGluZGV4LCBhZGRlZExhYmVscyk7XG4gICAgfVxuICAgIGNvbnN0IGxhc3QgPSBsYWJlbHMubGFzdEluZGV4T2YocmF3KTtcbiAgICByZXR1cm4gZmlyc3QgIT09IGxhc3QgPyBpbmRleCA6IGZpcnN0O1xufVxuY29uc3QgdmFsaWRJbmRleCA9IChpbmRleCwgbWF4KT0+aW5kZXggPT09IG51bGwgPyBudWxsIDogX2xpbWl0VmFsdWUoTWF0aC5yb3VuZChpbmRleCksIDAsIG1heCk7XG5mdW5jdGlvbiBfZ2V0TGFiZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgIGNvbnN0IGxhYmVscyA9IHRoaXMuZ2V0TGFiZWxzKCk7XG4gICAgaWYgKHZhbHVlID49IDAgJiYgdmFsdWUgPCBsYWJlbHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBsYWJlbHNbdmFsdWVdO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5jbGFzcyBDYXRlZ29yeVNjYWxlIGV4dGVuZHMgU2NhbGUge1xuICAgIHN0YXRpYyBpZCA9ICdjYXRlZ29yeSc7XG4gc3RhdGljIGRlZmF1bHRzID0ge1xuICAgICAgICB0aWNrczoge1xuICAgICAgICAgICAgY2FsbGJhY2s6IF9nZXRMYWJlbEZvclZhbHVlXG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKGNmZyl7XG4gICAgICAgIHN1cGVyKGNmZyk7XG4gICAgICAgICB0aGlzLl9zdGFydFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl92YWx1ZVJhbmdlID0gMDtcbiAgICAgICAgdGhpcy5fYWRkZWRMYWJlbHMgPSBbXTtcbiAgICB9XG4gICAgaW5pdChzY2FsZU9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYWRkZWQgPSB0aGlzLl9hZGRlZExhYmVscztcbiAgICAgICAgaWYgKGFkZGVkLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgbGFiZWxzID0gdGhpcy5nZXRMYWJlbHMoKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgeyBpbmRleCAsIGxhYmVsICB9IG9mIGFkZGVkKXtcbiAgICAgICAgICAgICAgICBpZiAobGFiZWxzW2luZGV4XSA9PT0gbGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWxzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fYWRkZWRMYWJlbHMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlci5pbml0KHNjYWxlT3B0aW9ucyk7XG4gICAgfVxuICAgIHBhcnNlKHJhdywgaW5kZXgpIHtcbiAgICAgICAgaWYgKGlzTnVsbE9yVW5kZWYocmF3KSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGFiZWxzID0gdGhpcy5nZXRMYWJlbHMoKTtcbiAgICAgICAgaW5kZXggPSBpc0Zpbml0ZShpbmRleCkgJiYgbGFiZWxzW2luZGV4XSA9PT0gcmF3ID8gaW5kZXggOiBmaW5kT3JBZGRMYWJlbChsYWJlbHMsIHJhdywgdmFsdWVPckRlZmF1bHQoaW5kZXgsIHJhdyksIHRoaXMuX2FkZGVkTGFiZWxzKTtcbiAgICAgICAgcmV0dXJuIHZhbGlkSW5kZXgoaW5kZXgsIGxhYmVscy5sZW5ndGggLSAxKTtcbiAgICB9XG4gICAgZGV0ZXJtaW5lRGF0YUxpbWl0cygpIHtcbiAgICAgICAgY29uc3QgeyBtaW5EZWZpbmVkICwgbWF4RGVmaW5lZCAgfSA9IHRoaXMuZ2V0VXNlckJvdW5kcygpO1xuICAgICAgICBsZXQgeyBtaW4gLCBtYXggIH0gPSB0aGlzLmdldE1pbk1heCh0cnVlKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5ib3VuZHMgPT09ICd0aWNrcycpIHtcbiAgICAgICAgICAgIGlmICghbWluRGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG1pbiA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIW1heERlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBtYXggPSB0aGlzLmdldExhYmVscygpLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5taW4gPSBtaW47XG4gICAgICAgIHRoaXMubWF4ID0gbWF4O1xuICAgIH1cbiAgICBidWlsZFRpY2tzKCkge1xuICAgICAgICBjb25zdCBtaW4gPSB0aGlzLm1pbjtcbiAgICAgICAgY29uc3QgbWF4ID0gdGhpcy5tYXg7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IHRoaXMub3B0aW9ucy5vZmZzZXQ7XG4gICAgICAgIGNvbnN0IHRpY2tzID0gW107XG4gICAgICAgIGxldCBsYWJlbHMgPSB0aGlzLmdldExhYmVscygpO1xuICAgICAgICBsYWJlbHMgPSBtaW4gPT09IDAgJiYgbWF4ID09PSBsYWJlbHMubGVuZ3RoIC0gMSA/IGxhYmVscyA6IGxhYmVscy5zbGljZShtaW4sIG1heCArIDEpO1xuICAgICAgICB0aGlzLl92YWx1ZVJhbmdlID0gTWF0aC5tYXgobGFiZWxzLmxlbmd0aCAtIChvZmZzZXQgPyAwIDogMSksIDEpO1xuICAgICAgICB0aGlzLl9zdGFydFZhbHVlID0gdGhpcy5taW4gLSAob2Zmc2V0ID8gMC41IDogMCk7XG4gICAgICAgIGZvcihsZXQgdmFsdWUgPSBtaW47IHZhbHVlIDw9IG1heDsgdmFsdWUrKyl7XG4gICAgICAgICAgICB0aWNrcy5wdXNoKHtcbiAgICAgICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRpY2tzO1xuICAgIH1cbiAgICBnZXRMYWJlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBfZ2V0TGFiZWxGb3JWYWx1ZS5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICB9XG4gY29uZmlndXJlKCkge1xuICAgICAgICBzdXBlci5jb25maWd1cmUoKTtcbiAgICAgICAgaWYgKCF0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICB0aGlzLl9yZXZlcnNlUGl4ZWxzID0gIXRoaXMuX3JldmVyc2VQaXhlbHM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdmFsdWUgPSB0aGlzLnBhcnNlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgPyBOYU4gOiB0aGlzLmdldFBpeGVsRm9yRGVjaW1hbCgodmFsdWUgLSB0aGlzLl9zdGFydFZhbHVlKSAvIHRoaXMuX3ZhbHVlUmFuZ2UpO1xuICAgIH1cbiAgICBnZXRQaXhlbEZvclRpY2soaW5kZXgpIHtcbiAgICAgICAgY29uc3QgdGlja3MgPSB0aGlzLnRpY2tzO1xuICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID4gdGlja3MubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGl4ZWxGb3JWYWx1ZSh0aWNrc1tpbmRleF0udmFsdWUpO1xuICAgIH1cbiAgICBnZXRWYWx1ZUZvclBpeGVsKHBpeGVsKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHRoaXMuX3N0YXJ0VmFsdWUgKyB0aGlzLmdldERlY2ltYWxGb3JQaXhlbChwaXhlbCkgKiB0aGlzLl92YWx1ZVJhbmdlKTtcbiAgICB9XG4gICAgZ2V0QmFzZVBpeGVsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ib3R0b207XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVRpY2tzJDEoZ2VuZXJhdGlvbk9wdGlvbnMsIGRhdGFSYW5nZSkge1xuICAgIGNvbnN0IHRpY2tzID0gW107XG4gICAgY29uc3QgTUlOX1NQQUNJTkcgPSAxZS0xNDtcbiAgICBjb25zdCB7IGJvdW5kcyAsIHN0ZXAgLCBtaW4gLCBtYXggLCBwcmVjaXNpb24gLCBjb3VudCAsIG1heFRpY2tzICwgbWF4RGlnaXRzICwgaW5jbHVkZUJvdW5kcyAgfSA9IGdlbmVyYXRpb25PcHRpb25zO1xuICAgIGNvbnN0IHVuaXQgPSBzdGVwIHx8IDE7XG4gICAgY29uc3QgbWF4U3BhY2VzID0gbWF4VGlja3MgLSAxO1xuICAgIGNvbnN0IHsgbWluOiBybWluICwgbWF4OiBybWF4ICB9ID0gZGF0YVJhbmdlO1xuICAgIGNvbnN0IG1pbkRlZmluZWQgPSAhaXNOdWxsT3JVbmRlZihtaW4pO1xuICAgIGNvbnN0IG1heERlZmluZWQgPSAhaXNOdWxsT3JVbmRlZihtYXgpO1xuICAgIGNvbnN0IGNvdW50RGVmaW5lZCA9ICFpc051bGxPclVuZGVmKGNvdW50KTtcbiAgICBjb25zdCBtaW5TcGFjaW5nID0gKHJtYXggLSBybWluKSAvIChtYXhEaWdpdHMgKyAxKTtcbiAgICBsZXQgc3BhY2luZyA9IG5pY2VOdW0oKHJtYXggLSBybWluKSAvIG1heFNwYWNlcyAvIHVuaXQpICogdW5pdDtcbiAgICBsZXQgZmFjdG9yLCBuaWNlTWluLCBuaWNlTWF4LCBudW1TcGFjZXM7XG4gICAgaWYgKHNwYWNpbmcgPCBNSU5fU1BBQ0lORyAmJiAhbWluRGVmaW5lZCAmJiAhbWF4RGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBybWluXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBybWF4XG4gICAgICAgICAgICB9XG4gICAgICAgIF07XG4gICAgfVxuICAgIG51bVNwYWNlcyA9IE1hdGguY2VpbChybWF4IC8gc3BhY2luZykgLSBNYXRoLmZsb29yKHJtaW4gLyBzcGFjaW5nKTtcbiAgICBpZiAobnVtU3BhY2VzID4gbWF4U3BhY2VzKSB7XG4gICAgICAgIHNwYWNpbmcgPSBuaWNlTnVtKG51bVNwYWNlcyAqIHNwYWNpbmcgLyBtYXhTcGFjZXMgLyB1bml0KSAqIHVuaXQ7XG4gICAgfVxuICAgIGlmICghaXNOdWxsT3JVbmRlZihwcmVjaXNpb24pKSB7XG4gICAgICAgIGZhY3RvciA9IE1hdGgucG93KDEwLCBwcmVjaXNpb24pO1xuICAgICAgICBzcGFjaW5nID0gTWF0aC5jZWlsKHNwYWNpbmcgKiBmYWN0b3IpIC8gZmFjdG9yO1xuICAgIH1cbiAgICBpZiAoYm91bmRzID09PSAndGlja3MnKSB7XG4gICAgICAgIG5pY2VNaW4gPSBNYXRoLmZsb29yKHJtaW4gLyBzcGFjaW5nKSAqIHNwYWNpbmc7XG4gICAgICAgIG5pY2VNYXggPSBNYXRoLmNlaWwocm1heCAvIHNwYWNpbmcpICogc3BhY2luZztcbiAgICB9IGVsc2Uge1xuICAgICAgICBuaWNlTWluID0gcm1pbjtcbiAgICAgICAgbmljZU1heCA9IHJtYXg7XG4gICAgfVxuICAgIGlmIChtaW5EZWZpbmVkICYmIG1heERlZmluZWQgJiYgc3RlcCAmJiBhbG1vc3RXaG9sZSgobWF4IC0gbWluKSAvIHN0ZXAsIHNwYWNpbmcgLyAxMDAwKSkge1xuICAgICAgICBudW1TcGFjZXMgPSBNYXRoLnJvdW5kKE1hdGgubWluKChtYXggLSBtaW4pIC8gc3BhY2luZywgbWF4VGlja3MpKTtcbiAgICAgICAgc3BhY2luZyA9IChtYXggLSBtaW4pIC8gbnVtU3BhY2VzO1xuICAgICAgICBuaWNlTWluID0gbWluO1xuICAgICAgICBuaWNlTWF4ID0gbWF4O1xuICAgIH0gZWxzZSBpZiAoY291bnREZWZpbmVkKSB7XG4gICAgICAgIG5pY2VNaW4gPSBtaW5EZWZpbmVkID8gbWluIDogbmljZU1pbjtcbiAgICAgICAgbmljZU1heCA9IG1heERlZmluZWQgPyBtYXggOiBuaWNlTWF4O1xuICAgICAgICBudW1TcGFjZXMgPSBjb3VudCAtIDE7XG4gICAgICAgIHNwYWNpbmcgPSAobmljZU1heCAtIG5pY2VNaW4pIC8gbnVtU3BhY2VzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG51bVNwYWNlcyA9IChuaWNlTWF4IC0gbmljZU1pbikgLyBzcGFjaW5nO1xuICAgICAgICBpZiAoYWxtb3N0RXF1YWxzKG51bVNwYWNlcywgTWF0aC5yb3VuZChudW1TcGFjZXMpLCBzcGFjaW5nIC8gMTAwMCkpIHtcbiAgICAgICAgICAgIG51bVNwYWNlcyA9IE1hdGgucm91bmQobnVtU3BhY2VzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG51bVNwYWNlcyA9IE1hdGguY2VpbChudW1TcGFjZXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGRlY2ltYWxQbGFjZXMgPSBNYXRoLm1heChfZGVjaW1hbFBsYWNlcyhzcGFjaW5nKSwgX2RlY2ltYWxQbGFjZXMobmljZU1pbikpO1xuICAgIGZhY3RvciA9IE1hdGgucG93KDEwLCBpc051bGxPclVuZGVmKHByZWNpc2lvbikgPyBkZWNpbWFsUGxhY2VzIDogcHJlY2lzaW9uKTtcbiAgICBuaWNlTWluID0gTWF0aC5yb3VuZChuaWNlTWluICogZmFjdG9yKSAvIGZhY3RvcjtcbiAgICBuaWNlTWF4ID0gTWF0aC5yb3VuZChuaWNlTWF4ICogZmFjdG9yKSAvIGZhY3RvcjtcbiAgICBsZXQgaiA9IDA7XG4gICAgaWYgKG1pbkRlZmluZWQpIHtcbiAgICAgICAgaWYgKGluY2x1ZGVCb3VuZHMgJiYgbmljZU1pbiAhPT0gbWluKSB7XG4gICAgICAgICAgICB0aWNrcy5wdXNoKHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogbWluXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChuaWNlTWluIDwgbWluKSB7XG4gICAgICAgICAgICAgICAgaisrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFsbW9zdEVxdWFscyhNYXRoLnJvdW5kKChuaWNlTWluICsgaiAqIHNwYWNpbmcpICogZmFjdG9yKSAvIGZhY3RvciwgbWluLCByZWxhdGl2ZUxhYmVsU2l6ZShtaW4sIG1pblNwYWNpbmcsIGdlbmVyYXRpb25PcHRpb25zKSkpIHtcbiAgICAgICAgICAgICAgICBqKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobmljZU1pbiA8IG1pbikge1xuICAgICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvcig7IGogPCBudW1TcGFjZXM7ICsrail7XG4gICAgICAgIHRpY2tzLnB1c2goe1xuICAgICAgICAgICAgdmFsdWU6IE1hdGgucm91bmQoKG5pY2VNaW4gKyBqICogc3BhY2luZykgKiBmYWN0b3IpIC8gZmFjdG9yXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAobWF4RGVmaW5lZCAmJiBpbmNsdWRlQm91bmRzICYmIG5pY2VNYXggIT09IG1heCkge1xuICAgICAgICBpZiAodGlja3MubGVuZ3RoICYmIGFsbW9zdEVxdWFscyh0aWNrc1t0aWNrcy5sZW5ndGggLSAxXS52YWx1ZSwgbWF4LCByZWxhdGl2ZUxhYmVsU2l6ZShtYXgsIG1pblNwYWNpbmcsIGdlbmVyYXRpb25PcHRpb25zKSkpIHtcbiAgICAgICAgICAgIHRpY2tzW3RpY2tzLmxlbmd0aCAtIDFdLnZhbHVlID0gbWF4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGlja3MucHVzaCh7XG4gICAgICAgICAgICAgICAgdmFsdWU6IG1heFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFtYXhEZWZpbmVkIHx8IG5pY2VNYXggPT09IG1heCkge1xuICAgICAgICB0aWNrcy5wdXNoKHtcbiAgICAgICAgICAgIHZhbHVlOiBuaWNlTWF4XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdGlja3M7XG59XG5mdW5jdGlvbiByZWxhdGl2ZUxhYmVsU2l6ZSh2YWx1ZSwgbWluU3BhY2luZywgeyBob3Jpem9udGFsICwgbWluUm90YXRpb24gIH0pIHtcbiAgICBjb25zdCByYWQgPSB0b1JhZGlhbnMobWluUm90YXRpb24pO1xuICAgIGNvbnN0IHJhdGlvID0gKGhvcml6b250YWwgPyBNYXRoLnNpbihyYWQpIDogTWF0aC5jb3MocmFkKSkgfHwgMC4wMDE7XG4gICAgY29uc3QgbGVuZ3RoID0gMC43NSAqIG1pblNwYWNpbmcgKiAoJycgKyB2YWx1ZSkubGVuZ3RoO1xuICAgIHJldHVybiBNYXRoLm1pbihtaW5TcGFjaW5nIC8gcmF0aW8sIGxlbmd0aCk7XG59XG5jbGFzcyBMaW5lYXJTY2FsZUJhc2UgZXh0ZW5kcyBTY2FsZSB7XG4gICAgY29uc3RydWN0b3IoY2ZnKXtcbiAgICAgICAgc3VwZXIoY2ZnKTtcbiAgICAgICAgIHRoaXMuc3RhcnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLmVuZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMuX3N0YXJ0VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLl9lbmRWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fdmFsdWVSYW5nZSA9IDA7XG4gICAgfVxuICAgIHBhcnNlKHJhdywgaW5kZXgpIHtcbiAgICAgICAgaWYgKGlzTnVsbE9yVW5kZWYocmF3KSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCh0eXBlb2YgcmF3ID09PSAnbnVtYmVyJyB8fCByYXcgaW5zdGFuY2VvZiBOdW1iZXIpICYmICFpc0Zpbml0ZSgrcmF3KSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICtyYXc7XG4gICAgfVxuICAgIGhhbmRsZVRpY2tSYW5nZU9wdGlvbnMoKSB7XG4gICAgICAgIGNvbnN0IHsgYmVnaW5BdFplcm8gIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHsgbWluRGVmaW5lZCAsIG1heERlZmluZWQgIH0gPSB0aGlzLmdldFVzZXJCb3VuZHMoKTtcbiAgICAgICAgbGV0IHsgbWluICwgbWF4ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3Qgc2V0TWluID0gKHYpPT5taW4gPSBtaW5EZWZpbmVkID8gbWluIDogdjtcbiAgICAgICAgY29uc3Qgc2V0TWF4ID0gKHYpPT5tYXggPSBtYXhEZWZpbmVkID8gbWF4IDogdjtcbiAgICAgICAgaWYgKGJlZ2luQXRaZXJvKSB7XG4gICAgICAgICAgICBjb25zdCBtaW5TaWduID0gc2lnbihtaW4pO1xuICAgICAgICAgICAgY29uc3QgbWF4U2lnbiA9IHNpZ24obWF4KTtcbiAgICAgICAgICAgIGlmIChtaW5TaWduIDwgMCAmJiBtYXhTaWduIDwgMCkge1xuICAgICAgICAgICAgICAgIHNldE1heCgwKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWluU2lnbiA+IDAgJiYgbWF4U2lnbiA+IDApIHtcbiAgICAgICAgICAgICAgICBzZXRNaW4oMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1pbiA9PT0gbWF4KSB7XG4gICAgICAgICAgICBsZXQgb2Zmc2V0ID0gbWF4ID09PSAwID8gMSA6IE1hdGguYWJzKG1heCAqIDAuMDUpO1xuICAgICAgICAgICAgc2V0TWF4KG1heCArIG9mZnNldCk7XG4gICAgICAgICAgICBpZiAoIWJlZ2luQXRaZXJvKSB7XG4gICAgICAgICAgICAgICAgc2V0TWluKG1pbiAtIG9mZnNldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5taW4gPSBtaW47XG4gICAgICAgIHRoaXMubWF4ID0gbWF4O1xuICAgIH1cbiAgICBnZXRUaWNrTGltaXQoKSB7XG4gICAgICAgIGNvbnN0IHRpY2tPcHRzID0gdGhpcy5vcHRpb25zLnRpY2tzO1xuICAgICAgICBsZXQgeyBtYXhUaWNrc0xpbWl0ICwgc3RlcFNpemUgIH0gPSB0aWNrT3B0cztcbiAgICAgICAgbGV0IG1heFRpY2tzO1xuICAgICAgICBpZiAoc3RlcFNpemUpIHtcbiAgICAgICAgICAgIG1heFRpY2tzID0gTWF0aC5jZWlsKHRoaXMubWF4IC8gc3RlcFNpemUpIC0gTWF0aC5mbG9vcih0aGlzLm1pbiAvIHN0ZXBTaXplKSArIDE7XG4gICAgICAgICAgICBpZiAobWF4VGlja3MgPiAxMDAwKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBzY2FsZXMuJHt0aGlzLmlkfS50aWNrcy5zdGVwU2l6ZTogJHtzdGVwU2l6ZX0gd291bGQgcmVzdWx0IGdlbmVyYXRpbmcgdXAgdG8gJHttYXhUaWNrc30gdGlja3MuIExpbWl0aW5nIHRvIDEwMDAuYCk7XG4gICAgICAgICAgICAgICAgbWF4VGlja3MgPSAxMDAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWF4VGlja3MgPSB0aGlzLmNvbXB1dGVUaWNrTGltaXQoKTtcbiAgICAgICAgICAgIG1heFRpY2tzTGltaXQgPSBtYXhUaWNrc0xpbWl0IHx8IDExO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXhUaWNrc0xpbWl0KSB7XG4gICAgICAgICAgICBtYXhUaWNrcyA9IE1hdGgubWluKG1heFRpY2tzTGltaXQsIG1heFRpY2tzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWF4VGlja3M7XG4gICAgfVxuIGNvbXB1dGVUaWNrTGltaXQoKSB7XG4gICAgICAgIHJldHVybiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgfVxuICAgIGJ1aWxkVGlja3MoKSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHRpY2tPcHRzID0gb3B0cy50aWNrcztcbiAgICAgICAgbGV0IG1heFRpY2tzID0gdGhpcy5nZXRUaWNrTGltaXQoKTtcbiAgICAgICAgbWF4VGlja3MgPSBNYXRoLm1heCgyLCBtYXhUaWNrcyk7XG4gICAgICAgIGNvbnN0IG51bWVyaWNHZW5lcmF0b3JPcHRpb25zID0ge1xuICAgICAgICAgICAgbWF4VGlja3MsXG4gICAgICAgICAgICBib3VuZHM6IG9wdHMuYm91bmRzLFxuICAgICAgICAgICAgbWluOiBvcHRzLm1pbixcbiAgICAgICAgICAgIG1heDogb3B0cy5tYXgsXG4gICAgICAgICAgICBwcmVjaXNpb246IHRpY2tPcHRzLnByZWNpc2lvbixcbiAgICAgICAgICAgIHN0ZXA6IHRpY2tPcHRzLnN0ZXBTaXplLFxuICAgICAgICAgICAgY291bnQ6IHRpY2tPcHRzLmNvdW50LFxuICAgICAgICAgICAgbWF4RGlnaXRzOiB0aGlzLl9tYXhEaWdpdHMoKSxcbiAgICAgICAgICAgIGhvcml6b250YWw6IHRoaXMuaXNIb3Jpem9udGFsKCksXG4gICAgICAgICAgICBtaW5Sb3RhdGlvbjogdGlja09wdHMubWluUm90YXRpb24gfHwgMCxcbiAgICAgICAgICAgIGluY2x1ZGVCb3VuZHM6IHRpY2tPcHRzLmluY2x1ZGVCb3VuZHMgIT09IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGRhdGFSYW5nZSA9IHRoaXMuX3JhbmdlIHx8IHRoaXM7XG4gICAgICAgIGNvbnN0IHRpY2tzID0gZ2VuZXJhdGVUaWNrcyQxKG51bWVyaWNHZW5lcmF0b3JPcHRpb25zLCBkYXRhUmFuZ2UpO1xuICAgICAgICBpZiAob3B0cy5ib3VuZHMgPT09ICd0aWNrcycpIHtcbiAgICAgICAgICAgIF9zZXRNaW5BbmRNYXhCeUtleSh0aWNrcywgdGhpcywgJ3ZhbHVlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdHMucmV2ZXJzZSkge1xuICAgICAgICAgICAgdGlja3MucmV2ZXJzZSgpO1xuICAgICAgICAgICAgdGhpcy5zdGFydCA9IHRoaXMubWF4O1xuICAgICAgICAgICAgdGhpcy5lbmQgPSB0aGlzLm1pbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnQgPSB0aGlzLm1pbjtcbiAgICAgICAgICAgIHRoaXMuZW5kID0gdGhpcy5tYXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRpY2tzO1xuICAgIH1cbiBjb25maWd1cmUoKSB7XG4gICAgICAgIGNvbnN0IHRpY2tzID0gdGhpcy50aWNrcztcbiAgICAgICAgbGV0IHN0YXJ0ID0gdGhpcy5taW47XG4gICAgICAgIGxldCBlbmQgPSB0aGlzLm1heDtcbiAgICAgICAgc3VwZXIuY29uZmlndXJlKCk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMub2Zmc2V0ICYmIHRpY2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gKGVuZCAtIHN0YXJ0KSAvIE1hdGgubWF4KHRpY2tzLmxlbmd0aCAtIDEsIDEpIC8gMjtcbiAgICAgICAgICAgIHN0YXJ0IC09IG9mZnNldDtcbiAgICAgICAgICAgIGVuZCArPSBvZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3RhcnRWYWx1ZSA9IHN0YXJ0O1xuICAgICAgICB0aGlzLl9lbmRWYWx1ZSA9IGVuZDtcbiAgICAgICAgdGhpcy5fdmFsdWVSYW5nZSA9IGVuZCAtIHN0YXJ0O1xuICAgIH1cbiAgICBnZXRMYWJlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBmb3JtYXROdW1iZXIodmFsdWUsIHRoaXMuY2hhcnQub3B0aW9ucy5sb2NhbGUsIHRoaXMub3B0aW9ucy50aWNrcy5mb3JtYXQpO1xuICAgIH1cbn1cblxuY2xhc3MgTGluZWFyU2NhbGUgZXh0ZW5kcyBMaW5lYXJTY2FsZUJhc2Uge1xuICAgIHN0YXRpYyBpZCA9ICdsaW5lYXInO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgIGNhbGxiYWNrOiBUaWNrcy5mb3JtYXR0ZXJzLm51bWVyaWNcbiAgICAgICAgfVxuICAgIH07XG4gICAgZGV0ZXJtaW5lRGF0YUxpbWl0cygpIHtcbiAgICAgICAgY29uc3QgeyBtaW4gLCBtYXggIH0gPSB0aGlzLmdldE1pbk1heCh0cnVlKTtcbiAgICAgICAgdGhpcy5taW4gPSBpc051bWJlckZpbml0ZShtaW4pID8gbWluIDogMDtcbiAgICAgICAgdGhpcy5tYXggPSBpc051bWJlckZpbml0ZShtYXgpID8gbWF4IDogMTtcbiAgICAgICAgdGhpcy5oYW5kbGVUaWNrUmFuZ2VPcHRpb25zKCk7XG4gICAgfVxuIGNvbXB1dGVUaWNrTGltaXQoKSB7XG4gICAgICAgIGNvbnN0IGhvcml6b250YWwgPSB0aGlzLmlzSG9yaXpvbnRhbCgpO1xuICAgICAgICBjb25zdCBsZW5ndGggPSBob3Jpem9udGFsID8gdGhpcy53aWR0aCA6IHRoaXMuaGVpZ2h0O1xuICAgICAgICBjb25zdCBtaW5Sb3RhdGlvbiA9IHRvUmFkaWFucyh0aGlzLm9wdGlvbnMudGlja3MubWluUm90YXRpb24pO1xuICAgICAgICBjb25zdCByYXRpbyA9IChob3Jpem9udGFsID8gTWF0aC5zaW4obWluUm90YXRpb24pIDogTWF0aC5jb3MobWluUm90YXRpb24pKSB8fCAwLjAwMTtcbiAgICAgICAgY29uc3QgdGlja0ZvbnQgPSB0aGlzLl9yZXNvbHZlVGlja0ZvbnRPcHRpb25zKDApO1xuICAgICAgICByZXR1cm4gTWF0aC5jZWlsKGxlbmd0aCAvIE1hdGgubWluKDQwLCB0aWNrRm9udC5saW5lSGVpZ2h0IC8gcmF0aW8pKTtcbiAgICB9XG4gICAgZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgPyBOYU4gOiB0aGlzLmdldFBpeGVsRm9yRGVjaW1hbCgodmFsdWUgLSB0aGlzLl9zdGFydFZhbHVlKSAvIHRoaXMuX3ZhbHVlUmFuZ2UpO1xuICAgIH1cbiAgICBnZXRWYWx1ZUZvclBpeGVsKHBpeGVsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGFydFZhbHVlICsgdGhpcy5nZXREZWNpbWFsRm9yUGl4ZWwocGl4ZWwpICogdGhpcy5fdmFsdWVSYW5nZTtcbiAgICB9XG59XG5cbmNvbnN0IGxvZzEwRmxvb3IgPSAodik9Pk1hdGguZmxvb3IobG9nMTAodikpO1xuY29uc3QgY2hhbmdlRXhwb25lbnQgPSAodiwgbSk9Pk1hdGgucG93KDEwLCBsb2cxMEZsb29yKHYpICsgbSk7XG5mdW5jdGlvbiBpc01ham9yKHRpY2tWYWwpIHtcbiAgICBjb25zdCByZW1haW4gPSB0aWNrVmFsIC8gTWF0aC5wb3coMTAsIGxvZzEwRmxvb3IodGlja1ZhbCkpO1xuICAgIHJldHVybiByZW1haW4gPT09IDE7XG59XG5mdW5jdGlvbiBzdGVwcyhtaW4sIG1heCwgcmFuZ2VFeHApIHtcbiAgICBjb25zdCByYW5nZVN0ZXAgPSBNYXRoLnBvdygxMCwgcmFuZ2VFeHApO1xuICAgIGNvbnN0IHN0YXJ0ID0gTWF0aC5mbG9vcihtaW4gLyByYW5nZVN0ZXApO1xuICAgIGNvbnN0IGVuZCA9IE1hdGguY2VpbChtYXggLyByYW5nZVN0ZXApO1xuICAgIHJldHVybiBlbmQgLSBzdGFydDtcbn1cbmZ1bmN0aW9uIHN0YXJ0RXhwKG1pbiwgbWF4KSB7XG4gICAgY29uc3QgcmFuZ2UgPSBtYXggLSBtaW47XG4gICAgbGV0IHJhbmdlRXhwID0gbG9nMTBGbG9vcihyYW5nZSk7XG4gICAgd2hpbGUoc3RlcHMobWluLCBtYXgsIHJhbmdlRXhwKSA+IDEwKXtcbiAgICAgICAgcmFuZ2VFeHArKztcbiAgICB9XG4gICAgd2hpbGUoc3RlcHMobWluLCBtYXgsIHJhbmdlRXhwKSA8IDEwKXtcbiAgICAgICAgcmFuZ2VFeHAtLTtcbiAgICB9XG4gICAgcmV0dXJuIE1hdGgubWluKHJhbmdlRXhwLCBsb2cxMEZsb29yKG1pbikpO1xufVxuIGZ1bmN0aW9uIGdlbmVyYXRlVGlja3MoZ2VuZXJhdGlvbk9wdGlvbnMsIHsgbWluICwgbWF4ICB9KSB7XG4gICAgbWluID0gZmluaXRlT3JEZWZhdWx0KGdlbmVyYXRpb25PcHRpb25zLm1pbiwgbWluKTtcbiAgICBjb25zdCB0aWNrcyA9IFtdO1xuICAgIGNvbnN0IG1pbkV4cCA9IGxvZzEwRmxvb3IobWluKTtcbiAgICBsZXQgZXhwID0gc3RhcnRFeHAobWluLCBtYXgpO1xuICAgIGxldCBwcmVjaXNpb24gPSBleHAgPCAwID8gTWF0aC5wb3coMTAsIE1hdGguYWJzKGV4cCkpIDogMTtcbiAgICBjb25zdCBzdGVwU2l6ZSA9IE1hdGgucG93KDEwLCBleHApO1xuICAgIGNvbnN0IGJhc2UgPSBtaW5FeHAgPiBleHAgPyBNYXRoLnBvdygxMCwgbWluRXhwKSA6IDA7XG4gICAgY29uc3Qgc3RhcnQgPSBNYXRoLnJvdW5kKChtaW4gLSBiYXNlKSAqIHByZWNpc2lvbikgLyBwcmVjaXNpb247XG4gICAgY29uc3Qgb2Zmc2V0ID0gTWF0aC5mbG9vcigobWluIC0gYmFzZSkgLyBzdGVwU2l6ZSAvIDEwKSAqIHN0ZXBTaXplICogMTA7XG4gICAgbGV0IHNpZ25pZmljYW5kID0gTWF0aC5mbG9vcigoc3RhcnQgLSBvZmZzZXQpIC8gTWF0aC5wb3coMTAsIGV4cCkpO1xuICAgIGxldCB2YWx1ZSA9IGZpbml0ZU9yRGVmYXVsdChnZW5lcmF0aW9uT3B0aW9ucy5taW4sIE1hdGgucm91bmQoKGJhc2UgKyBvZmZzZXQgKyBzaWduaWZpY2FuZCAqIE1hdGgucG93KDEwLCBleHApKSAqIHByZWNpc2lvbikgLyBwcmVjaXNpb24pO1xuICAgIHdoaWxlKHZhbHVlIDwgbWF4KXtcbiAgICAgICAgdGlja3MucHVzaCh7XG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIG1ham9yOiBpc01ham9yKHZhbHVlKSxcbiAgICAgICAgICAgIHNpZ25pZmljYW5kXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoc2lnbmlmaWNhbmQgPj0gMTApIHtcbiAgICAgICAgICAgIHNpZ25pZmljYW5kID0gc2lnbmlmaWNhbmQgPCAxNSA/IDE1IDogMjA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzaWduaWZpY2FuZCsrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaWduaWZpY2FuZCA+PSAyMCkge1xuICAgICAgICAgICAgZXhwKys7XG4gICAgICAgICAgICBzaWduaWZpY2FuZCA9IDI7XG4gICAgICAgICAgICBwcmVjaXNpb24gPSBleHAgPj0gMCA/IDEgOiBwcmVjaXNpb247XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgPSBNYXRoLnJvdW5kKChiYXNlICsgb2Zmc2V0ICsgc2lnbmlmaWNhbmQgKiBNYXRoLnBvdygxMCwgZXhwKSkgKiBwcmVjaXNpb24pIC8gcHJlY2lzaW9uO1xuICAgIH1cbiAgICBjb25zdCBsYXN0VGljayA9IGZpbml0ZU9yRGVmYXVsdChnZW5lcmF0aW9uT3B0aW9ucy5tYXgsIHZhbHVlKTtcbiAgICB0aWNrcy5wdXNoKHtcbiAgICAgICAgdmFsdWU6IGxhc3RUaWNrLFxuICAgICAgICBtYWpvcjogaXNNYWpvcihsYXN0VGljayksXG4gICAgICAgIHNpZ25pZmljYW5kXG4gICAgfSk7XG4gICAgcmV0dXJuIHRpY2tzO1xufVxuY2xhc3MgTG9nYXJpdGhtaWNTY2FsZSBleHRlbmRzIFNjYWxlIHtcbiAgICBzdGF0aWMgaWQgPSAnbG9nYXJpdGhtaWMnO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgIGNhbGxiYWNrOiBUaWNrcy5mb3JtYXR0ZXJzLmxvZ2FyaXRobWljLFxuICAgICAgICAgICAgbWFqb3I6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKGNmZyl7XG4gICAgICAgIHN1cGVyKGNmZyk7XG4gICAgICAgICB0aGlzLnN0YXJ0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5lbmQgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLl9zdGFydFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl92YWx1ZVJhbmdlID0gMDtcbiAgICB9XG4gICAgcGFyc2UocmF3LCBpbmRleCkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IExpbmVhclNjYWxlQmFzZS5wcm90b3R5cGUucGFyc2UuYXBwbHkodGhpcywgW1xuICAgICAgICAgICAgcmF3LFxuICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgXSk7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5femVybyA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc051bWJlckZpbml0ZSh2YWx1ZSkgJiYgdmFsdWUgPiAwID8gdmFsdWUgOiBudWxsO1xuICAgIH1cbiAgICBkZXRlcm1pbmVEYXRhTGltaXRzKCkge1xuICAgICAgICBjb25zdCB7IG1pbiAsIG1heCAgfSA9IHRoaXMuZ2V0TWluTWF4KHRydWUpO1xuICAgICAgICB0aGlzLm1pbiA9IGlzTnVtYmVyRmluaXRlKG1pbikgPyBNYXRoLm1heCgwLCBtaW4pIDogbnVsbDtcbiAgICAgICAgdGhpcy5tYXggPSBpc051bWJlckZpbml0ZShtYXgpID8gTWF0aC5tYXgoMCwgbWF4KSA6IG51bGw7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYmVnaW5BdFplcm8pIHtcbiAgICAgICAgICAgIHRoaXMuX3plcm8gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl96ZXJvICYmIHRoaXMubWluICE9PSB0aGlzLl9zdWdnZXN0ZWRNaW4gJiYgIWlzTnVtYmVyRmluaXRlKHRoaXMuX3VzZXJNaW4pKSB7XG4gICAgICAgICAgICB0aGlzLm1pbiA9IG1pbiA9PT0gY2hhbmdlRXhwb25lbnQodGhpcy5taW4sIDApID8gY2hhbmdlRXhwb25lbnQodGhpcy5taW4sIC0xKSA6IGNoYW5nZUV4cG9uZW50KHRoaXMubWluLCAwKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhhbmRsZVRpY2tSYW5nZU9wdGlvbnMoKTtcbiAgICB9XG4gICAgaGFuZGxlVGlja1JhbmdlT3B0aW9ucygpIHtcbiAgICAgICAgY29uc3QgeyBtaW5EZWZpbmVkICwgbWF4RGVmaW5lZCAgfSA9IHRoaXMuZ2V0VXNlckJvdW5kcygpO1xuICAgICAgICBsZXQgbWluID0gdGhpcy5taW47XG4gICAgICAgIGxldCBtYXggPSB0aGlzLm1heDtcbiAgICAgICAgY29uc3Qgc2V0TWluID0gKHYpPT5taW4gPSBtaW5EZWZpbmVkID8gbWluIDogdjtcbiAgICAgICAgY29uc3Qgc2V0TWF4ID0gKHYpPT5tYXggPSBtYXhEZWZpbmVkID8gbWF4IDogdjtcbiAgICAgICAgaWYgKG1pbiA9PT0gbWF4KSB7XG4gICAgICAgICAgICBpZiAobWluIDw9IDApIHtcbiAgICAgICAgICAgICAgICBzZXRNaW4oMSk7XG4gICAgICAgICAgICAgICAgc2V0TWF4KDEwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0TWluKGNoYW5nZUV4cG9uZW50KG1pbiwgLTEpKTtcbiAgICAgICAgICAgICAgICBzZXRNYXgoY2hhbmdlRXhwb25lbnQobWF4LCArMSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChtaW4gPD0gMCkge1xuICAgICAgICAgICAgc2V0TWluKGNoYW5nZUV4cG9uZW50KG1heCwgLTEpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF4IDw9IDApIHtcbiAgICAgICAgICAgIHNldE1heChjaGFuZ2VFeHBvbmVudChtaW4sICsxKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5taW4gPSBtaW47XG4gICAgICAgIHRoaXMubWF4ID0gbWF4O1xuICAgIH1cbiAgICBidWlsZFRpY2tzKCkge1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBnZW5lcmF0aW9uT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIG1pbjogdGhpcy5fdXNlck1pbixcbiAgICAgICAgICAgIG1heDogdGhpcy5fdXNlck1heFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCB0aWNrcyA9IGdlbmVyYXRlVGlja3MoZ2VuZXJhdGlvbk9wdGlvbnMsIHRoaXMpO1xuICAgICAgICBpZiAob3B0cy5ib3VuZHMgPT09ICd0aWNrcycpIHtcbiAgICAgICAgICAgIF9zZXRNaW5BbmRNYXhCeUtleSh0aWNrcywgdGhpcywgJ3ZhbHVlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdHMucmV2ZXJzZSkge1xuICAgICAgICAgICAgdGlja3MucmV2ZXJzZSgpO1xuICAgICAgICAgICAgdGhpcy5zdGFydCA9IHRoaXMubWF4O1xuICAgICAgICAgICAgdGhpcy5lbmQgPSB0aGlzLm1pbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnQgPSB0aGlzLm1pbjtcbiAgICAgICAgICAgIHRoaXMuZW5kID0gdGhpcy5tYXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRpY2tzO1xuICAgIH1cbiBnZXRMYWJlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gJzAnIDogZm9ybWF0TnVtYmVyKHZhbHVlLCB0aGlzLmNoYXJ0Lm9wdGlvbnMubG9jYWxlLCB0aGlzLm9wdGlvbnMudGlja3MuZm9ybWF0KTtcbiAgICB9XG4gY29uZmlndXJlKCkge1xuICAgICAgICBjb25zdCBzdGFydCA9IHRoaXMubWluO1xuICAgICAgICBzdXBlci5jb25maWd1cmUoKTtcbiAgICAgICAgdGhpcy5fc3RhcnRWYWx1ZSA9IGxvZzEwKHN0YXJ0KTtcbiAgICAgICAgdGhpcy5fdmFsdWVSYW5nZSA9IGxvZzEwKHRoaXMubWF4KSAtIGxvZzEwKHN0YXJ0KTtcbiAgICB9XG4gICAgZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gMCkge1xuICAgICAgICAgICAgdmFsdWUgPSB0aGlzLm1pbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgaXNOYU4odmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBpeGVsRm9yRGVjaW1hbCh2YWx1ZSA9PT0gdGhpcy5taW4gPyAwIDogKGxvZzEwKHZhbHVlKSAtIHRoaXMuX3N0YXJ0VmFsdWUpIC8gdGhpcy5fdmFsdWVSYW5nZSk7XG4gICAgfVxuICAgIGdldFZhbHVlRm9yUGl4ZWwocGl4ZWwpIHtcbiAgICAgICAgY29uc3QgZGVjaW1hbCA9IHRoaXMuZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKTtcbiAgICAgICAgcmV0dXJuIE1hdGgucG93KDEwLCB0aGlzLl9zdGFydFZhbHVlICsgZGVjaW1hbCAqIHRoaXMuX3ZhbHVlUmFuZ2UpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGlja0JhY2tkcm9wSGVpZ2h0KG9wdHMpIHtcbiAgICBjb25zdCB0aWNrT3B0cyA9IG9wdHMudGlja3M7XG4gICAgaWYgKHRpY2tPcHRzLmRpc3BsYXkgJiYgb3B0cy5kaXNwbGF5KSB7XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcodGlja09wdHMuYmFja2Ryb3BQYWRkaW5nKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlT3JEZWZhdWx0KHRpY2tPcHRzLmZvbnQgJiYgdGlja09wdHMuZm9udC5zaXplLCBkZWZhdWx0cy5mb250LnNpemUpICsgcGFkZGluZy5oZWlnaHQ7XG4gICAgfVxuICAgIHJldHVybiAwO1xufVxuZnVuY3Rpb24gbWVhc3VyZUxhYmVsU2l6ZShjdHgsIGZvbnQsIGxhYmVsKSB7XG4gICAgbGFiZWwgPSBpc0FycmF5KGxhYmVsKSA/IGxhYmVsIDogW1xuICAgICAgICBsYWJlbFxuICAgIF07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdzogX2xvbmdlc3RUZXh0KGN0eCwgZm9udC5zdHJpbmcsIGxhYmVsKSxcbiAgICAgICAgaDogbGFiZWwubGVuZ3RoICogZm9udC5saW5lSGVpZ2h0XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGRldGVybWluZUxpbWl0cyhhbmdsZSwgcG9zLCBzaXplLCBtaW4sIG1heCkge1xuICAgIGlmIChhbmdsZSA9PT0gbWluIHx8IGFuZ2xlID09PSBtYXgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXJ0OiBwb3MgLSBzaXplIC8gMixcbiAgICAgICAgICAgIGVuZDogcG9zICsgc2l6ZSAvIDJcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGFuZ2xlIDwgbWluIHx8IGFuZ2xlID4gbWF4KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGFydDogcG9zIC0gc2l6ZSxcbiAgICAgICAgICAgIGVuZDogcG9zXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0OiBwb3MsXG4gICAgICAgIGVuZDogcG9zICsgc2l6ZVxuICAgIH07XG59XG4gZnVuY3Rpb24gZml0V2l0aFBvaW50TGFiZWxzKHNjYWxlKSB7XG4gICAgY29uc3Qgb3JpZyA9IHtcbiAgICAgICAgbDogc2NhbGUubGVmdCArIHNjYWxlLl9wYWRkaW5nLmxlZnQsXG4gICAgICAgIHI6IHNjYWxlLnJpZ2h0IC0gc2NhbGUuX3BhZGRpbmcucmlnaHQsXG4gICAgICAgIHQ6IHNjYWxlLnRvcCArIHNjYWxlLl9wYWRkaW5nLnRvcCxcbiAgICAgICAgYjogc2NhbGUuYm90dG9tIC0gc2NhbGUuX3BhZGRpbmcuYm90dG9tXG4gICAgfTtcbiAgICBjb25zdCBsaW1pdHMgPSBPYmplY3QuYXNzaWduKHt9LCBvcmlnKTtcbiAgICBjb25zdCBsYWJlbFNpemVzID0gW107XG4gICAgY29uc3QgcGFkZGluZyA9IFtdO1xuICAgIGNvbnN0IHZhbHVlQ291bnQgPSBzY2FsZS5fcG9pbnRMYWJlbHMubGVuZ3RoO1xuICAgIGNvbnN0IHBvaW50TGFiZWxPcHRzID0gc2NhbGUub3B0aW9ucy5wb2ludExhYmVscztcbiAgICBjb25zdCBhZGRpdGlvbmFsQW5nbGUgPSBwb2ludExhYmVsT3B0cy5jZW50ZXJQb2ludExhYmVscyA/IFBJIC8gdmFsdWVDb3VudCA6IDA7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHZhbHVlQ291bnQ7IGkrKyl7XG4gICAgICAgIGNvbnN0IG9wdHMgPSBwb2ludExhYmVsT3B0cy5zZXRDb250ZXh0KHNjYWxlLmdldFBvaW50TGFiZWxDb250ZXh0KGkpKTtcbiAgICAgICAgcGFkZGluZ1tpXSA9IG9wdHMucGFkZGluZztcbiAgICAgICAgY29uc3QgcG9pbnRQb3NpdGlvbiA9IHNjYWxlLmdldFBvaW50UG9zaXRpb24oaSwgc2NhbGUuZHJhd2luZ0FyZWEgKyBwYWRkaW5nW2ldLCBhZGRpdGlvbmFsQW5nbGUpO1xuICAgICAgICBjb25zdCBwbEZvbnQgPSB0b0ZvbnQob3B0cy5mb250KTtcbiAgICAgICAgY29uc3QgdGV4dFNpemUgPSBtZWFzdXJlTGFiZWxTaXplKHNjYWxlLmN0eCwgcGxGb250LCBzY2FsZS5fcG9pbnRMYWJlbHNbaV0pO1xuICAgICAgICBsYWJlbFNpemVzW2ldID0gdGV4dFNpemU7XG4gICAgICAgIGNvbnN0IGFuZ2xlUmFkaWFucyA9IF9ub3JtYWxpemVBbmdsZShzY2FsZS5nZXRJbmRleEFuZ2xlKGkpICsgYWRkaXRpb25hbEFuZ2xlKTtcbiAgICAgICAgY29uc3QgYW5nbGUgPSBNYXRoLnJvdW5kKHRvRGVncmVlcyhhbmdsZVJhZGlhbnMpKTtcbiAgICAgICAgY29uc3QgaExpbWl0cyA9IGRldGVybWluZUxpbWl0cyhhbmdsZSwgcG9pbnRQb3NpdGlvbi54LCB0ZXh0U2l6ZS53LCAwLCAxODApO1xuICAgICAgICBjb25zdCB2TGltaXRzID0gZGV0ZXJtaW5lTGltaXRzKGFuZ2xlLCBwb2ludFBvc2l0aW9uLnksIHRleHRTaXplLmgsIDkwLCAyNzApO1xuICAgICAgICB1cGRhdGVMaW1pdHMobGltaXRzLCBvcmlnLCBhbmdsZVJhZGlhbnMsIGhMaW1pdHMsIHZMaW1pdHMpO1xuICAgIH1cbiAgICBzY2FsZS5zZXRDZW50ZXJQb2ludChvcmlnLmwgLSBsaW1pdHMubCwgbGltaXRzLnIgLSBvcmlnLnIsIG9yaWcudCAtIGxpbWl0cy50LCBsaW1pdHMuYiAtIG9yaWcuYik7XG4gICAgc2NhbGUuX3BvaW50TGFiZWxJdGVtcyA9IGJ1aWxkUG9pbnRMYWJlbEl0ZW1zKHNjYWxlLCBsYWJlbFNpemVzLCBwYWRkaW5nKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUxpbWl0cyhsaW1pdHMsIG9yaWcsIGFuZ2xlLCBoTGltaXRzLCB2TGltaXRzKSB7XG4gICAgY29uc3Qgc2luID0gTWF0aC5hYnMoTWF0aC5zaW4oYW5nbGUpKTtcbiAgICBjb25zdCBjb3MgPSBNYXRoLmFicyhNYXRoLmNvcyhhbmdsZSkpO1xuICAgIGxldCB4ID0gMDtcbiAgICBsZXQgeSA9IDA7XG4gICAgaWYgKGhMaW1pdHMuc3RhcnQgPCBvcmlnLmwpIHtcbiAgICAgICAgeCA9IChvcmlnLmwgLSBoTGltaXRzLnN0YXJ0KSAvIHNpbjtcbiAgICAgICAgbGltaXRzLmwgPSBNYXRoLm1pbihsaW1pdHMubCwgb3JpZy5sIC0geCk7XG4gICAgfSBlbHNlIGlmIChoTGltaXRzLmVuZCA+IG9yaWcucikge1xuICAgICAgICB4ID0gKGhMaW1pdHMuZW5kIC0gb3JpZy5yKSAvIHNpbjtcbiAgICAgICAgbGltaXRzLnIgPSBNYXRoLm1heChsaW1pdHMuciwgb3JpZy5yICsgeCk7XG4gICAgfVxuICAgIGlmICh2TGltaXRzLnN0YXJ0IDwgb3JpZy50KSB7XG4gICAgICAgIHkgPSAob3JpZy50IC0gdkxpbWl0cy5zdGFydCkgLyBjb3M7XG4gICAgICAgIGxpbWl0cy50ID0gTWF0aC5taW4obGltaXRzLnQsIG9yaWcudCAtIHkpO1xuICAgIH0gZWxzZSBpZiAodkxpbWl0cy5lbmQgPiBvcmlnLmIpIHtcbiAgICAgICAgeSA9ICh2TGltaXRzLmVuZCAtIG9yaWcuYikgLyBjb3M7XG4gICAgICAgIGxpbWl0cy5iID0gTWF0aC5tYXgobGltaXRzLmIsIG9yaWcuYiArIHkpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGJ1aWxkUG9pbnRMYWJlbEl0ZW1zKHNjYWxlLCBsYWJlbFNpemVzLCBwYWRkaW5nKSB7XG4gICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICBjb25zdCB2YWx1ZUNvdW50ID0gc2NhbGUuX3BvaW50TGFiZWxzLmxlbmd0aDtcbiAgICBjb25zdCBvcHRzID0gc2NhbGUub3B0aW9ucztcbiAgICBjb25zdCBleHRyYSA9IGdldFRpY2tCYWNrZHJvcEhlaWdodChvcHRzKSAvIDI7XG4gICAgY29uc3Qgb3V0ZXJEaXN0YW5jZSA9IHNjYWxlLmRyYXdpbmdBcmVhO1xuICAgIGNvbnN0IGFkZGl0aW9uYWxBbmdsZSA9IG9wdHMucG9pbnRMYWJlbHMuY2VudGVyUG9pbnRMYWJlbHMgPyBQSSAvIHZhbHVlQ291bnQgOiAwO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCB2YWx1ZUNvdW50OyBpKyspe1xuICAgICAgICBjb25zdCBwb2ludExhYmVsUG9zaXRpb24gPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uKGksIG91dGVyRGlzdGFuY2UgKyBleHRyYSArIHBhZGRpbmdbaV0sIGFkZGl0aW9uYWxBbmdsZSk7XG4gICAgICAgIGNvbnN0IGFuZ2xlID0gTWF0aC5yb3VuZCh0b0RlZ3JlZXMoX25vcm1hbGl6ZUFuZ2xlKHBvaW50TGFiZWxQb3NpdGlvbi5hbmdsZSArIEhBTEZfUEkpKSk7XG4gICAgICAgIGNvbnN0IHNpemUgPSBsYWJlbFNpemVzW2ldO1xuICAgICAgICBjb25zdCB5ID0geUZvckFuZ2xlKHBvaW50TGFiZWxQb3NpdGlvbi55LCBzaXplLmgsIGFuZ2xlKTtcbiAgICAgICAgY29uc3QgdGV4dEFsaWduID0gZ2V0VGV4dEFsaWduRm9yQW5nbGUoYW5nbGUpO1xuICAgICAgICBjb25zdCBsZWZ0ID0gbGVmdEZvclRleHRBbGlnbihwb2ludExhYmVsUG9zaXRpb24ueCwgc2l6ZS53LCB0ZXh0QWxpZ24pO1xuICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICAgIHg6IHBvaW50TGFiZWxQb3NpdGlvbi54LFxuICAgICAgICAgICAgeSxcbiAgICAgICAgICAgIHRleHRBbGlnbixcbiAgICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgICB0b3A6IHksXG4gICAgICAgICAgICByaWdodDogbGVmdCArIHNpemUudyxcbiAgICAgICAgICAgIGJvdHRvbTogeSArIHNpemUuaFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW1zO1xufVxuZnVuY3Rpb24gZ2V0VGV4dEFsaWduRm9yQW5nbGUoYW5nbGUpIHtcbiAgICBpZiAoYW5nbGUgPT09IDAgfHwgYW5nbGUgPT09IDE4MCkge1xuICAgICAgICByZXR1cm4gJ2NlbnRlcic7XG4gICAgfSBlbHNlIGlmIChhbmdsZSA8IDE4MCkge1xuICAgICAgICByZXR1cm4gJ2xlZnQnO1xuICAgIH1cbiAgICByZXR1cm4gJ3JpZ2h0Jztcbn1cbmZ1bmN0aW9uIGxlZnRGb3JUZXh0QWxpZ24oeCwgdywgYWxpZ24pIHtcbiAgICBpZiAoYWxpZ24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgeCAtPSB3O1xuICAgIH0gZWxzZSBpZiAoYWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgIHggLT0gdyAvIDI7XG4gICAgfVxuICAgIHJldHVybiB4O1xufVxuZnVuY3Rpb24geUZvckFuZ2xlKHksIGgsIGFuZ2xlKSB7XG4gICAgaWYgKGFuZ2xlID09PSA5MCB8fCBhbmdsZSA9PT0gMjcwKSB7XG4gICAgICAgIHkgLT0gaCAvIDI7XG4gICAgfSBlbHNlIGlmIChhbmdsZSA+IDI3MCB8fCBhbmdsZSA8IDkwKSB7XG4gICAgICAgIHkgLT0gaDtcbiAgICB9XG4gICAgcmV0dXJuIHk7XG59XG5mdW5jdGlvbiBkcmF3UG9pbnRMYWJlbHMoc2NhbGUsIGxhYmVsQ291bnQpIHtcbiAgICBjb25zdCB7IGN0eCAsIG9wdGlvbnM6IHsgcG9pbnRMYWJlbHMgIH0gIH0gPSBzY2FsZTtcbiAgICBmb3IobGV0IGkgPSBsYWJlbENvdW50IC0gMTsgaSA+PSAwOyBpLS0pe1xuICAgICAgICBjb25zdCBvcHRzQXRJbmRleCA9IHBvaW50TGFiZWxzLnNldENvbnRleHQoc2NhbGUuZ2V0UG9pbnRMYWJlbENvbnRleHQoaSkpO1xuICAgICAgICBjb25zdCBwbEZvbnQgPSB0b0ZvbnQob3B0c0F0SW5kZXguZm9udCk7XG4gICAgICAgIGNvbnN0IHsgeCAsIHkgLCB0ZXh0QWxpZ24gLCBsZWZ0ICwgdG9wICwgcmlnaHQgLCBib3R0b20gIH0gPSBzY2FsZS5fcG9pbnRMYWJlbEl0ZW1zW2ldO1xuICAgICAgICBjb25zdCB7IGJhY2tkcm9wQ29sb3IgIH0gPSBvcHRzQXRJbmRleDtcbiAgICAgICAgaWYgKCFpc051bGxPclVuZGVmKGJhY2tkcm9wQ29sb3IpKSB7XG4gICAgICAgICAgICBjb25zdCBib3JkZXJSYWRpdXMgPSB0b1RSQkxDb3JuZXJzKG9wdHNBdEluZGV4LmJvcmRlclJhZGl1cyk7XG4gICAgICAgICAgICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKG9wdHNBdEluZGV4LmJhY2tkcm9wUGFkZGluZyk7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gYmFja2Ryb3BDb2xvcjtcbiAgICAgICAgICAgIGNvbnN0IGJhY2tkcm9wTGVmdCA9IGxlZnQgLSBwYWRkaW5nLmxlZnQ7XG4gICAgICAgICAgICBjb25zdCBiYWNrZHJvcFRvcCA9IHRvcCAtIHBhZGRpbmcudG9wO1xuICAgICAgICAgICAgY29uc3QgYmFja2Ryb3BXaWR0aCA9IHJpZ2h0IC0gbGVmdCArIHBhZGRpbmcud2lkdGg7XG4gICAgICAgICAgICBjb25zdCBiYWNrZHJvcEhlaWdodCA9IGJvdHRvbSAtIHRvcCArIHBhZGRpbmcuaGVpZ2h0O1xuICAgICAgICAgICAgaWYgKE9iamVjdC52YWx1ZXMoYm9yZGVyUmFkaXVzKS5zb21lKCh2KT0+diAhPT0gMCkpIHtcbiAgICAgICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgYWRkUm91bmRlZFJlY3RQYXRoKGN0eCwge1xuICAgICAgICAgICAgICAgICAgICB4OiBiYWNrZHJvcExlZnQsXG4gICAgICAgICAgICAgICAgICAgIHk6IGJhY2tkcm9wVG9wLFxuICAgICAgICAgICAgICAgICAgICB3OiBiYWNrZHJvcFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICBoOiBiYWNrZHJvcEhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiBib3JkZXJSYWRpdXNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFJlY3QoYmFja2Ryb3BMZWZ0LCBiYWNrZHJvcFRvcCwgYmFja2Ryb3BXaWR0aCwgYmFja2Ryb3BIZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlbmRlclRleHQoY3R4LCBzY2FsZS5fcG9pbnRMYWJlbHNbaV0sIHgsIHkgKyBwbEZvbnQubGluZUhlaWdodCAvIDIsIHBsRm9udCwge1xuICAgICAgICAgICAgY29sb3I6IG9wdHNBdEluZGV4LmNvbG9yLFxuICAgICAgICAgICAgdGV4dEFsaWduOiB0ZXh0QWxpZ24sXG4gICAgICAgICAgICB0ZXh0QmFzZWxpbmU6ICdtaWRkbGUnXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHBhdGhSYWRpdXNMaW5lKHNjYWxlLCByYWRpdXMsIGNpcmN1bGFyLCBsYWJlbENvdW50KSB7XG4gICAgY29uc3QgeyBjdHggIH0gPSBzY2FsZTtcbiAgICBpZiAoY2lyY3VsYXIpIHtcbiAgICAgICAgY3R4LmFyYyhzY2FsZS54Q2VudGVyLCBzY2FsZS55Q2VudGVyLCByYWRpdXMsIDAsIFRBVSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHBvaW50UG9zaXRpb24gPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uKDAsIHJhZGl1cyk7XG4gICAgICAgIGN0eC5tb3ZlVG8ocG9pbnRQb3NpdGlvbi54LCBwb2ludFBvc2l0aW9uLnkpO1xuICAgICAgICBmb3IobGV0IGkgPSAxOyBpIDwgbGFiZWxDb3VudDsgaSsrKXtcbiAgICAgICAgICAgIHBvaW50UG9zaXRpb24gPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uKGksIHJhZGl1cyk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHBvaW50UG9zaXRpb24ueCwgcG9pbnRQb3NpdGlvbi55KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGRyYXdSYWRpdXNMaW5lKHNjYWxlLCBncmlkTGluZU9wdHMsIHJhZGl1cywgbGFiZWxDb3VudCwgYm9yZGVyT3B0cykge1xuICAgIGNvbnN0IGN0eCA9IHNjYWxlLmN0eDtcbiAgICBjb25zdCBjaXJjdWxhciA9IGdyaWRMaW5lT3B0cy5jaXJjdWxhcjtcbiAgICBjb25zdCB7IGNvbG9yICwgbGluZVdpZHRoICB9ID0gZ3JpZExpbmVPcHRzO1xuICAgIGlmICghY2lyY3VsYXIgJiYgIWxhYmVsQ291bnQgfHwgIWNvbG9yIHx8ICFsaW5lV2lkdGggfHwgcmFkaXVzIDwgMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4LnN0cm9rZVN0eWxlID0gY29sb3I7XG4gICAgY3R4LmxpbmVXaWR0aCA9IGxpbmVXaWR0aDtcbiAgICBjdHguc2V0TGluZURhc2goYm9yZGVyT3B0cy5kYXNoKTtcbiAgICBjdHgubGluZURhc2hPZmZzZXQgPSBib3JkZXJPcHRzLmRhc2hPZmZzZXQ7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIHBhdGhSYWRpdXNMaW5lKHNjYWxlLCByYWRpdXMsIGNpcmN1bGFyLCBsYWJlbENvdW50KTtcbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgY3R4LnN0cm9rZSgpO1xuICAgIGN0eC5yZXN0b3JlKCk7XG59XG5mdW5jdGlvbiBjcmVhdGVQb2ludExhYmVsQ29udGV4dChwYXJlbnQsIGluZGV4LCBsYWJlbCkge1xuICAgIHJldHVybiBjcmVhdGVDb250ZXh0KHBhcmVudCwge1xuICAgICAgICBsYWJlbCxcbiAgICAgICAgaW5kZXgsXG4gICAgICAgIHR5cGU6ICdwb2ludExhYmVsJ1xuICAgIH0pO1xufVxuY2xhc3MgUmFkaWFsTGluZWFyU2NhbGUgZXh0ZW5kcyBMaW5lYXJTY2FsZUJhc2Uge1xuICAgIHN0YXRpYyBpZCA9ICdyYWRpYWxMaW5lYXInO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgYW5pbWF0ZTogdHJ1ZSxcbiAgICAgICAgcG9zaXRpb246ICdjaGFydEFyZWEnLFxuICAgICAgICBhbmdsZUxpbmVzOiB7XG4gICAgICAgICAgICBkaXNwbGF5OiB0cnVlLFxuICAgICAgICAgICAgbGluZVdpZHRoOiAxLFxuICAgICAgICAgICAgYm9yZGVyRGFzaDogW10sXG4gICAgICAgICAgICBib3JkZXJEYXNoT2Zmc2V0OiAwLjBcbiAgICAgICAgfSxcbiAgICAgICAgZ3JpZDoge1xuICAgICAgICAgICAgY2lyY3VsYXI6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHN0YXJ0QW5nbGU6IDAsXG4gICAgICAgIHRpY2tzOiB7XG4gICAgICAgICAgICBzaG93TGFiZWxCYWNrZHJvcDogdHJ1ZSxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBUaWNrcy5mb3JtYXR0ZXJzLm51bWVyaWNcbiAgICAgICAgfSxcbiAgICAgICAgcG9pbnRMYWJlbHM6IHtcbiAgICAgICAgICAgIGJhY2tkcm9wQ29sb3I6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGJhY2tkcm9wUGFkZGluZzogMixcbiAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgICAgICBmb250OiB7XG4gICAgICAgICAgICAgICAgc2l6ZTogMTBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYWxsYmFjayAobGFiZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGFiZWw7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGFkZGluZzogNSxcbiAgICAgICAgICAgIGNlbnRlclBvaW50TGFiZWxzOiBmYWxzZVxuICAgICAgICB9XG4gICAgfTtcbiAgICBzdGF0aWMgZGVmYXVsdFJvdXRlcyA9IHtcbiAgICAgICAgJ2FuZ2xlTGluZXMuY29sb3InOiAnYm9yZGVyQ29sb3InLFxuICAgICAgICAncG9pbnRMYWJlbHMuY29sb3InOiAnY29sb3InLFxuICAgICAgICAndGlja3MuY29sb3InOiAnY29sb3InXG4gICAgfTtcbiAgICBzdGF0aWMgZGVzY3JpcHRvcnMgPSB7XG4gICAgICAgIGFuZ2xlTGluZXM6IHtcbiAgICAgICAgICAgIF9mYWxsYmFjazogJ2dyaWQnXG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKGNmZyl7XG4gICAgICAgIHN1cGVyKGNmZyk7XG4gICAgICAgICB0aGlzLnhDZW50ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLnlDZW50ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLmRyYXdpbmdBcmVhID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5fcG9pbnRMYWJlbHMgPSBbXTtcbiAgICAgICAgdGhpcy5fcG9pbnRMYWJlbEl0ZW1zID0gW107XG4gICAgfVxuICAgIHNldERpbWVuc2lvbnMoKSB7XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSB0aGlzLl9wYWRkaW5nID0gdG9QYWRkaW5nKGdldFRpY2tCYWNrZHJvcEhlaWdodCh0aGlzLm9wdGlvbnMpIC8gMik7XG4gICAgICAgIGNvbnN0IHcgPSB0aGlzLndpZHRoID0gdGhpcy5tYXhXaWR0aCAtIHBhZGRpbmcud2lkdGg7XG4gICAgICAgIGNvbnN0IGggPSB0aGlzLmhlaWdodCA9IHRoaXMubWF4SGVpZ2h0IC0gcGFkZGluZy5oZWlnaHQ7XG4gICAgICAgIHRoaXMueENlbnRlciA9IE1hdGguZmxvb3IodGhpcy5sZWZ0ICsgdyAvIDIgKyBwYWRkaW5nLmxlZnQpO1xuICAgICAgICB0aGlzLnlDZW50ZXIgPSBNYXRoLmZsb29yKHRoaXMudG9wICsgaCAvIDIgKyBwYWRkaW5nLnRvcCk7XG4gICAgICAgIHRoaXMuZHJhd2luZ0FyZWEgPSBNYXRoLmZsb29yKE1hdGgubWluKHcsIGgpIC8gMik7XG4gICAgfVxuICAgIGRldGVybWluZURhdGFMaW1pdHMoKSB7XG4gICAgICAgIGNvbnN0IHsgbWluICwgbWF4ICB9ID0gdGhpcy5nZXRNaW5NYXgoZmFsc2UpO1xuICAgICAgICB0aGlzLm1pbiA9IGlzTnVtYmVyRmluaXRlKG1pbikgJiYgIWlzTmFOKG1pbikgPyBtaW4gOiAwO1xuICAgICAgICB0aGlzLm1heCA9IGlzTnVtYmVyRmluaXRlKG1heCkgJiYgIWlzTmFOKG1heCkgPyBtYXggOiAwO1xuICAgICAgICB0aGlzLmhhbmRsZVRpY2tSYW5nZU9wdGlvbnMoKTtcbiAgICB9XG4gY29tcHV0ZVRpY2tMaW1pdCgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguY2VpbCh0aGlzLmRyYXdpbmdBcmVhIC8gZ2V0VGlja0JhY2tkcm9wSGVpZ2h0KHRoaXMub3B0aW9ucykpO1xuICAgIH1cbiAgICBnZW5lcmF0ZVRpY2tMYWJlbHModGlja3MpIHtcbiAgICAgICAgTGluZWFyU2NhbGVCYXNlLnByb3RvdHlwZS5nZW5lcmF0ZVRpY2tMYWJlbHMuY2FsbCh0aGlzLCB0aWNrcyk7XG4gICAgICAgIHRoaXMuX3BvaW50TGFiZWxzID0gdGhpcy5nZXRMYWJlbHMoKS5tYXAoKHZhbHVlLCBpbmRleCk9PntcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gY2FsbGJhY2sodGhpcy5vcHRpb25zLnBvaW50TGFiZWxzLmNhbGxiYWNrLCBbXG4gICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgIF0sIHRoaXMpO1xuICAgICAgICAgICAgcmV0dXJuIGxhYmVsIHx8IGxhYmVsID09PSAwID8gbGFiZWwgOiAnJztcbiAgICAgICAgfSkuZmlsdGVyKCh2LCBpKT0+dGhpcy5jaGFydC5nZXREYXRhVmlzaWJpbGl0eShpKSk7XG4gICAgfVxuICAgIGZpdCgpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgaWYgKG9wdHMuZGlzcGxheSAmJiBvcHRzLnBvaW50TGFiZWxzLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIGZpdFdpdGhQb2ludExhYmVscyh0aGlzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q2VudGVyUG9pbnQoMCwgMCwgMCwgMCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0Q2VudGVyUG9pbnQobGVmdE1vdmVtZW50LCByaWdodE1vdmVtZW50LCB0b3BNb3ZlbWVudCwgYm90dG9tTW92ZW1lbnQpIHtcbiAgICAgICAgdGhpcy54Q2VudGVyICs9IE1hdGguZmxvb3IoKGxlZnRNb3ZlbWVudCAtIHJpZ2h0TW92ZW1lbnQpIC8gMik7XG4gICAgICAgIHRoaXMueUNlbnRlciArPSBNYXRoLmZsb29yKCh0b3BNb3ZlbWVudCAtIGJvdHRvbU1vdmVtZW50KSAvIDIpO1xuICAgICAgICB0aGlzLmRyYXdpbmdBcmVhIC09IE1hdGgubWluKHRoaXMuZHJhd2luZ0FyZWEgLyAyLCBNYXRoLm1heChsZWZ0TW92ZW1lbnQsIHJpZ2h0TW92ZW1lbnQsIHRvcE1vdmVtZW50LCBib3R0b21Nb3ZlbWVudCkpO1xuICAgIH1cbiAgICBnZXRJbmRleEFuZ2xlKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IGFuZ2xlTXVsdGlwbGllciA9IFRBVSAvICh0aGlzLl9wb2ludExhYmVscy5sZW5ndGggfHwgMSk7XG4gICAgICAgIGNvbnN0IHN0YXJ0QW5nbGUgPSB0aGlzLm9wdGlvbnMuc3RhcnRBbmdsZSB8fCAwO1xuICAgICAgICByZXR1cm4gX25vcm1hbGl6ZUFuZ2xlKGluZGV4ICogYW5nbGVNdWx0aXBsaWVyICsgdG9SYWRpYW5zKHN0YXJ0QW5nbGUpKTtcbiAgICB9XG4gICAgZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUodmFsdWUpIHtcbiAgICAgICAgaWYgKGlzTnVsbE9yVW5kZWYodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNjYWxpbmdGYWN0b3IgPSB0aGlzLmRyYXdpbmdBcmVhIC8gKHRoaXMubWF4IC0gdGhpcy5taW4pO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJldmVyc2UpIHtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5tYXggLSB2YWx1ZSkgKiBzY2FsaW5nRmFjdG9yO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAodmFsdWUgLSB0aGlzLm1pbikgKiBzY2FsaW5nRmFjdG9yO1xuICAgIH1cbiAgICBnZXRWYWx1ZUZvckRpc3RhbmNlRnJvbUNlbnRlcihkaXN0YW5jZSkge1xuICAgICAgICBpZiAoaXNOdWxsT3JVbmRlZihkaXN0YW5jZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2NhbGVkRGlzdGFuY2UgPSBkaXN0YW5jZSAvICh0aGlzLmRyYXdpbmdBcmVhIC8gKHRoaXMubWF4IC0gdGhpcy5taW4pKTtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5yZXZlcnNlID8gdGhpcy5tYXggLSBzY2FsZWREaXN0YW5jZSA6IHRoaXMubWluICsgc2NhbGVkRGlzdGFuY2U7XG4gICAgfVxuICAgIGdldFBvaW50TGFiZWxDb250ZXh0KGluZGV4KSB7XG4gICAgICAgIGNvbnN0IHBvaW50TGFiZWxzID0gdGhpcy5fcG9pbnRMYWJlbHMgfHwgW107XG4gICAgICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgcG9pbnRMYWJlbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBwb2ludExhYmVsID0gcG9pbnRMYWJlbHNbaW5kZXhdO1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVBvaW50TGFiZWxDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpLCBpbmRleCwgcG9pbnRMYWJlbCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0UG9pbnRQb3NpdGlvbihpbmRleCwgZGlzdGFuY2VGcm9tQ2VudGVyLCBhZGRpdGlvbmFsQW5nbGUgPSAwKSB7XG4gICAgICAgIGNvbnN0IGFuZ2xlID0gdGhpcy5nZXRJbmRleEFuZ2xlKGluZGV4KSAtIEhBTEZfUEkgKyBhZGRpdGlvbmFsQW5nbGU7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiBNYXRoLmNvcyhhbmdsZSkgKiBkaXN0YW5jZUZyb21DZW50ZXIgKyB0aGlzLnhDZW50ZXIsXG4gICAgICAgICAgICB5OiBNYXRoLnNpbihhbmdsZSkgKiBkaXN0YW5jZUZyb21DZW50ZXIgKyB0aGlzLnlDZW50ZXIsXG4gICAgICAgICAgICBhbmdsZVxuICAgICAgICB9O1xuICAgIH1cbiAgICBnZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUoaW5kZXgsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBvaW50UG9zaXRpb24oaW5kZXgsIHRoaXMuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUodmFsdWUpKTtcbiAgICB9XG4gICAgZ2V0QmFzZVBvc2l0aW9uKGluZGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZShpbmRleCB8fCAwLCB0aGlzLmdldEJhc2VWYWx1ZSgpKTtcbiAgICB9XG4gICAgZ2V0UG9pbnRMYWJlbFBvc2l0aW9uKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IHsgbGVmdCAsIHRvcCAsIHJpZ2h0ICwgYm90dG9tICB9ID0gdGhpcy5fcG9pbnRMYWJlbEl0ZW1zW2luZGV4XTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgICB0b3AsXG4gICAgICAgICAgICByaWdodCxcbiAgICAgICAgICAgIGJvdHRvbVxuICAgICAgICB9O1xuICAgIH1cbiBkcmF3QmFja2dyb3VuZCgpIHtcbiAgICAgICAgY29uc3QgeyBiYWNrZ3JvdW5kQ29sb3IgLCBncmlkOiB7IGNpcmN1bGFyICB9ICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBpZiAoYmFja2dyb3VuZENvbG9yKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBwYXRoUmFkaXVzTGluZSh0aGlzLCB0aGlzLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHRoaXMuX2VuZFZhbHVlKSwgY2lyY3VsYXIsIHRoaXMuX3BvaW50TGFiZWxzLmxlbmd0aCk7XG4gICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gYmFja2dyb3VuZENvbG9yO1xuICAgICAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gZHJhd0dyaWQoKSB7XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB7IGFuZ2xlTGluZXMgLCBncmlkICwgYm9yZGVyICB9ID0gb3B0cztcbiAgICAgICAgY29uc3QgbGFiZWxDb3VudCA9IHRoaXMuX3BvaW50TGFiZWxzLmxlbmd0aDtcbiAgICAgICAgbGV0IGksIG9mZnNldCwgcG9zaXRpb247XG4gICAgICAgIGlmIChvcHRzLnBvaW50TGFiZWxzLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIGRyYXdQb2ludExhYmVscyh0aGlzLCBsYWJlbENvdW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ3JpZC5kaXNwbGF5KSB7XG4gICAgICAgICAgICB0aGlzLnRpY2tzLmZvckVhY2goKHRpY2ssIGluZGV4KT0+e1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSB0aGlzLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHRpY2sudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5nZXRDb250ZXh0KGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3B0c0F0SW5kZXggPSBncmlkLnNldENvbnRleHQoY29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdHNBdEluZGV4Qm9yZGVyID0gYm9yZGVyLnNldENvbnRleHQoY29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIGRyYXdSYWRpdXNMaW5lKHRoaXMsIG9wdHNBdEluZGV4LCBvZmZzZXQsIGxhYmVsQ291bnQsIG9wdHNBdEluZGV4Qm9yZGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYW5nbGVMaW5lcy5kaXNwbGF5KSB7XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgZm9yKGkgPSBsYWJlbENvdW50IC0gMTsgaSA+PSAwOyBpLS0pe1xuICAgICAgICAgICAgICAgIGNvbnN0IG9wdHNBdEluZGV4ID0gYW5nbGVMaW5lcy5zZXRDb250ZXh0KHRoaXMuZ2V0UG9pbnRMYWJlbENvbnRleHQoaSkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgY29sb3IgLCBsaW5lV2lkdGggIH0gPSBvcHRzQXRJbmRleDtcbiAgICAgICAgICAgICAgICBpZiAoIWxpbmVXaWR0aCB8fCAhY29sb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSBsaW5lV2lkdGg7XG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gY29sb3I7XG4gICAgICAgICAgICAgICAgY3R4LnNldExpbmVEYXNoKG9wdHNBdEluZGV4LmJvcmRlckRhc2gpO1xuICAgICAgICAgICAgICAgIGN0eC5saW5lRGFzaE9mZnNldCA9IG9wdHNBdEluZGV4LmJvcmRlckRhc2hPZmZzZXQ7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gdGhpcy5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZShvcHRzLnRpY2tzLnJldmVyc2UgPyB0aGlzLm1pbiA6IHRoaXMubWF4KTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IHRoaXMuZ2V0UG9pbnRQb3NpdGlvbihpLCBvZmZzZXQpO1xuICAgICAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICBjdHgubW92ZVRvKHRoaXMueENlbnRlciwgdGhpcy55Q2VudGVyKTtcbiAgICAgICAgICAgICAgICBjdHgubGluZVRvKHBvc2l0aW9uLngsIHBvc2l0aW9uLnkpO1xuICAgICAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gZHJhd0JvcmRlcigpIHt9XG4gZHJhd0xhYmVscygpIHtcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHRpY2tPcHRzID0gb3B0cy50aWNrcztcbiAgICAgICAgaWYgKCF0aWNrT3B0cy5kaXNwbGF5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RhcnRBbmdsZSA9IHRoaXMuZ2V0SW5kZXhBbmdsZSgwKTtcbiAgICAgICAgbGV0IG9mZnNldCwgd2lkdGg7XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGN0eC50cmFuc2xhdGUodGhpcy54Q2VudGVyLCB0aGlzLnlDZW50ZXIpO1xuICAgICAgICBjdHgucm90YXRlKHN0YXJ0QW5nbGUpO1xuICAgICAgICBjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICAgICAgdGhpcy50aWNrcy5mb3JFYWNoKCh0aWNrLCBpbmRleCk9PntcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCAmJiAhb3B0cy5yZXZlcnNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgb3B0c0F0SW5kZXggPSB0aWNrT3B0cy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dChpbmRleCkpO1xuICAgICAgICAgICAgY29uc3QgdGlja0ZvbnQgPSB0b0ZvbnQob3B0c0F0SW5kZXguZm9udCk7XG4gICAgICAgICAgICBvZmZzZXQgPSB0aGlzLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHRoaXMudGlja3NbaW5kZXhdLnZhbHVlKTtcbiAgICAgICAgICAgIGlmIChvcHRzQXRJbmRleC5zaG93TGFiZWxCYWNrZHJvcCkge1xuICAgICAgICAgICAgICAgIGN0eC5mb250ID0gdGlja0ZvbnQuc3RyaW5nO1xuICAgICAgICAgICAgICAgIHdpZHRoID0gY3R4Lm1lYXN1cmVUZXh0KHRpY2subGFiZWwpLndpZHRoO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRzQXRJbmRleC5iYWNrZHJvcENvbG9yO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcob3B0c0F0SW5kZXguYmFja2Ryb3BQYWRkaW5nKTtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFJlY3QoLXdpZHRoIC8gMiAtIHBhZGRpbmcubGVmdCwgLW9mZnNldCAtIHRpY2tGb250LnNpemUgLyAyIC0gcGFkZGluZy50b3AsIHdpZHRoICsgcGFkZGluZy53aWR0aCwgdGlja0ZvbnQuc2l6ZSArIHBhZGRpbmcuaGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlbmRlclRleHQoY3R4LCB0aWNrLmxhYmVsLCAwLCAtb2Zmc2V0LCB0aWNrRm9udCwge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBvcHRzQXRJbmRleC5jb2xvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cbiBkcmF3VGl0bGUoKSB7fVxufVxuXG5jb25zdCBJTlRFUlZBTFMgPSB7XG4gICAgbWlsbGlzZWNvbmQ6IHtcbiAgICAgICAgY29tbW9uOiB0cnVlLFxuICAgICAgICBzaXplOiAxLFxuICAgICAgICBzdGVwczogMTAwMFxuICAgIH0sXG4gICAgc2Vjb25kOiB7XG4gICAgICAgIGNvbW1vbjogdHJ1ZSxcbiAgICAgICAgc2l6ZTogMTAwMCxcbiAgICAgICAgc3RlcHM6IDYwXG4gICAgfSxcbiAgICBtaW51dGU6IHtcbiAgICAgICAgY29tbW9uOiB0cnVlLFxuICAgICAgICBzaXplOiA2MDAwMCxcbiAgICAgICAgc3RlcHM6IDYwXG4gICAgfSxcbiAgICBob3VyOiB7XG4gICAgICAgIGNvbW1vbjogdHJ1ZSxcbiAgICAgICAgc2l6ZTogMzYwMDAwMCxcbiAgICAgICAgc3RlcHM6IDI0XG4gICAgfSxcbiAgICBkYXk6IHtcbiAgICAgICAgY29tbW9uOiB0cnVlLFxuICAgICAgICBzaXplOiA4NjQwMDAwMCxcbiAgICAgICAgc3RlcHM6IDMwXG4gICAgfSxcbiAgICB3ZWVrOiB7XG4gICAgICAgIGNvbW1vbjogZmFsc2UsXG4gICAgICAgIHNpemU6IDYwNDgwMDAwMCxcbiAgICAgICAgc3RlcHM6IDRcbiAgICB9LFxuICAgIG1vbnRoOiB7XG4gICAgICAgIGNvbW1vbjogdHJ1ZSxcbiAgICAgICAgc2l6ZTogMi42MjhlOSxcbiAgICAgICAgc3RlcHM6IDEyXG4gICAgfSxcbiAgICBxdWFydGVyOiB7XG4gICAgICAgIGNvbW1vbjogZmFsc2UsXG4gICAgICAgIHNpemU6IDcuODg0ZTksXG4gICAgICAgIHN0ZXBzOiA0XG4gICAgfSxcbiAgICB5ZWFyOiB7XG4gICAgICAgIGNvbW1vbjogdHJ1ZSxcbiAgICAgICAgc2l6ZTogMy4xNTRlMTBcbiAgICB9XG59O1xuIGNvbnN0IFVOSVRTID0gIC8qICNfX1BVUkVfXyAqLyBPYmplY3Qua2V5cyhJTlRFUlZBTFMpO1xuIGZ1bmN0aW9uIHNvcnRlcihhLCBiKSB7XG4gICAgcmV0dXJuIGEgLSBiO1xufVxuIGZ1bmN0aW9uIHBhcnNlKHNjYWxlLCBpbnB1dCkge1xuICAgIGlmIChpc051bGxPclVuZGVmKGlucHV0KSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgYWRhcHRlciA9IHNjYWxlLl9hZGFwdGVyO1xuICAgIGNvbnN0IHsgcGFyc2VyICwgcm91bmQgLCBpc29XZWVrZGF5ICB9ID0gc2NhbGUuX3BhcnNlT3B0cztcbiAgICBsZXQgdmFsdWUgPSBpbnB1dDtcbiAgICBpZiAodHlwZW9mIHBhcnNlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9IHBhcnNlcih2YWx1ZSk7XG4gICAgfVxuICAgIGlmICghaXNOdW1iZXJGaW5pdGUodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gdHlwZW9mIHBhcnNlciA9PT0gJ3N0cmluZycgPyBhZGFwdGVyLnBhcnNlKHZhbHVlLCAgcGFyc2VyKSA6IGFkYXB0ZXIucGFyc2UodmFsdWUpO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChyb3VuZCkge1xuICAgICAgICB2YWx1ZSA9IHJvdW5kID09PSAnd2VlaycgJiYgKGlzTnVtYmVyKGlzb1dlZWtkYXkpIHx8IGlzb1dlZWtkYXkgPT09IHRydWUpID8gYWRhcHRlci5zdGFydE9mKHZhbHVlLCAnaXNvV2VlaycsIGlzb1dlZWtkYXkpIDogYWRhcHRlci5zdGFydE9mKHZhbHVlLCByb3VuZCk7XG4gICAgfVxuICAgIHJldHVybiArdmFsdWU7XG59XG4gZnVuY3Rpb24gZGV0ZXJtaW5lVW5pdEZvckF1dG9UaWNrcyhtaW5Vbml0LCBtaW4sIG1heCwgY2FwYWNpdHkpIHtcbiAgICBjb25zdCBpbGVuID0gVU5JVFMubGVuZ3RoO1xuICAgIGZvcihsZXQgaSA9IFVOSVRTLmluZGV4T2YobWluVW5pdCk7IGkgPCBpbGVuIC0gMTsgKytpKXtcbiAgICAgICAgY29uc3QgaW50ZXJ2YWwgPSBJTlRFUlZBTFNbVU5JVFNbaV1dO1xuICAgICAgICBjb25zdCBmYWN0b3IgPSBpbnRlcnZhbC5zdGVwcyA/IGludGVydmFsLnN0ZXBzIDogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XG4gICAgICAgIGlmIChpbnRlcnZhbC5jb21tb24gJiYgTWF0aC5jZWlsKChtYXggLSBtaW4pIC8gKGZhY3RvciAqIGludGVydmFsLnNpemUpKSA8PSBjYXBhY2l0eSkge1xuICAgICAgICAgICAgcmV0dXJuIFVOSVRTW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBVTklUU1tpbGVuIC0gMV07XG59XG4gZnVuY3Rpb24gZGV0ZXJtaW5lVW5pdEZvckZvcm1hdHRpbmcoc2NhbGUsIG51bVRpY2tzLCBtaW5Vbml0LCBtaW4sIG1heCkge1xuICAgIGZvcihsZXQgaSA9IFVOSVRTLmxlbmd0aCAtIDE7IGkgPj0gVU5JVFMuaW5kZXhPZihtaW5Vbml0KTsgaS0tKXtcbiAgICAgICAgY29uc3QgdW5pdCA9IFVOSVRTW2ldO1xuICAgICAgICBpZiAoSU5URVJWQUxTW3VuaXRdLmNvbW1vbiAmJiBzY2FsZS5fYWRhcHRlci5kaWZmKG1heCwgbWluLCB1bml0KSA+PSBudW1UaWNrcyAtIDEpIHtcbiAgICAgICAgICAgIHJldHVybiB1bml0O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBVTklUU1ttaW5Vbml0ID8gVU5JVFMuaW5kZXhPZihtaW5Vbml0KSA6IDBdO1xufVxuIGZ1bmN0aW9uIGRldGVybWluZU1ham9yVW5pdCh1bml0KSB7XG4gICAgZm9yKGxldCBpID0gVU5JVFMuaW5kZXhPZih1bml0KSArIDEsIGlsZW4gPSBVTklUUy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBpZiAoSU5URVJWQUxTW1VOSVRTW2ldXS5jb21tb24pIHtcbiAgICAgICAgICAgIHJldHVybiBVTklUU1tpXTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiBmdW5jdGlvbiBhZGRUaWNrKHRpY2tzLCB0aW1lLCB0aW1lc3RhbXBzKSB7XG4gICAgaWYgKCF0aW1lc3RhbXBzKSB7XG4gICAgICAgIHRpY2tzW3RpbWVdID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHsgbG8gLCBoaSAgfSA9IF9sb29rdXAodGltZXN0YW1wcywgdGltZSk7XG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IHRpbWVzdGFtcHNbbG9dID49IHRpbWUgPyB0aW1lc3RhbXBzW2xvXSA6IHRpbWVzdGFtcHNbaGldO1xuICAgICAgICB0aWNrc1t0aW1lc3RhbXBdID0gdHJ1ZTtcbiAgICB9XG59XG4gZnVuY3Rpb24gc2V0TWFqb3JUaWNrcyhzY2FsZSwgdGlja3MsIG1hcCwgbWFqb3JVbml0KSB7XG4gICAgY29uc3QgYWRhcHRlciA9IHNjYWxlLl9hZGFwdGVyO1xuICAgIGNvbnN0IGZpcnN0ID0gK2FkYXB0ZXIuc3RhcnRPZih0aWNrc1swXS52YWx1ZSwgbWFqb3JVbml0KTtcbiAgICBjb25zdCBsYXN0ID0gdGlja3NbdGlja3MubGVuZ3RoIC0gMV0udmFsdWU7XG4gICAgbGV0IG1ham9yLCBpbmRleDtcbiAgICBmb3IobWFqb3IgPSBmaXJzdDsgbWFqb3IgPD0gbGFzdDsgbWFqb3IgPSArYWRhcHRlci5hZGQobWFqb3IsIDEsIG1ham9yVW5pdCkpe1xuICAgICAgICBpbmRleCA9IG1hcFttYWpvcl07XG4gICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICB0aWNrc1tpbmRleF0ubWFqb3IgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aWNrcztcbn1cbiBmdW5jdGlvbiB0aWNrc0Zyb21UaW1lc3RhbXBzKHNjYWxlLCB2YWx1ZXMsIG1ham9yVW5pdCkge1xuICAgIGNvbnN0IHRpY2tzID0gW107XG4gICAgIGNvbnN0IG1hcCA9IHt9O1xuICAgIGNvbnN0IGlsZW4gPSB2YWx1ZXMubGVuZ3RoO1xuICAgIGxldCBpLCB2YWx1ZTtcbiAgICBmb3IoaSA9IDA7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICB2YWx1ZSA9IHZhbHVlc1tpXTtcbiAgICAgICAgbWFwW3ZhbHVlXSA9IGk7XG4gICAgICAgIHRpY2tzLnB1c2goe1xuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICBtYWpvcjogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBpbGVuID09PSAwIHx8ICFtYWpvclVuaXQgPyB0aWNrcyA6IHNldE1ham9yVGlja3Moc2NhbGUsIHRpY2tzLCBtYXAsIG1ham9yVW5pdCk7XG59XG5jbGFzcyBUaW1lU2NhbGUgZXh0ZW5kcyBTY2FsZSB7XG4gICAgc3RhdGljIGlkID0gJ3RpbWUnO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiBib3VuZHM6ICdkYXRhJyxcbiAgICAgICAgYWRhcHRlcnM6IHt9LFxuICAgICAgICB0aW1lOiB7XG4gICAgICAgICAgICBwYXJzZXI6IGZhbHNlLFxuICAgICAgICAgICAgdW5pdDogZmFsc2UsXG4gICAgICAgICAgICByb3VuZDogZmFsc2UsXG4gICAgICAgICAgICBpc29XZWVrZGF5OiBmYWxzZSxcbiAgICAgICAgICAgIG1pblVuaXQ6ICdtaWxsaXNlY29uZCcsXG4gICAgICAgICAgICBkaXNwbGF5Rm9ybWF0czoge31cbiAgICAgICAgfSxcbiAgICAgICAgdGlja3M6IHtcbiBzb3VyY2U6ICdhdXRvJyxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBmYWxzZSxcbiAgICAgICAgICAgIG1ham9yOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gY29uc3RydWN0b3IocHJvcHMpe1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgICB0aGlzLl9jYWNoZSA9IHtcbiAgICAgICAgICAgIGRhdGE6IFtdLFxuICAgICAgICAgICAgbGFiZWxzOiBbXSxcbiAgICAgICAgICAgIGFsbDogW11cbiAgICAgICAgfTtcbiAgICAgICAgIHRoaXMuX3VuaXQgPSAnZGF5JztcbiAgICAgICAgIHRoaXMuX21ham9yVW5pdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fb2Zmc2V0cyA9IHt9O1xuICAgICAgICB0aGlzLl9ub3JtYWxpemVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3BhcnNlT3B0cyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaW5pdChzY2FsZU9wdHMsIG9wdHMgPSB7fSkge1xuICAgICAgICBjb25zdCB0aW1lID0gc2NhbGVPcHRzLnRpbWUgfHwgKHNjYWxlT3B0cy50aW1lID0ge30pO1xuICAgICAgICAgY29uc3QgYWRhcHRlciA9IHRoaXMuX2FkYXB0ZXIgPSBuZXcgYWRhcHRlcnMuX2RhdGUoc2NhbGVPcHRzLmFkYXB0ZXJzLmRhdGUpO1xuICAgICAgICBhZGFwdGVyLmluaXQob3B0cyk7XG4gICAgICAgIG1lcmdlSWYodGltZS5kaXNwbGF5Rm9ybWF0cywgYWRhcHRlci5mb3JtYXRzKCkpO1xuICAgICAgICB0aGlzLl9wYXJzZU9wdHMgPSB7XG4gICAgICAgICAgICBwYXJzZXI6IHRpbWUucGFyc2VyLFxuICAgICAgICAgICAgcm91bmQ6IHRpbWUucm91bmQsXG4gICAgICAgICAgICBpc29XZWVrZGF5OiB0aW1lLmlzb1dlZWtkYXlcbiAgICAgICAgfTtcbiAgICAgICAgc3VwZXIuaW5pdChzY2FsZU9wdHMpO1xuICAgICAgICB0aGlzLl9ub3JtYWxpemVkID0gb3B0cy5ub3JtYWxpemVkO1xuICAgIH1cbiBwYXJzZShyYXcsIGluZGV4KSB7XG4gICAgICAgIGlmIChyYXcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcnNlKHRoaXMsIHJhdyk7XG4gICAgfVxuICAgIGJlZm9yZUxheW91dCgpIHtcbiAgICAgICAgc3VwZXIuYmVmb3JlTGF5b3V0KCk7XG4gICAgICAgIHRoaXMuX2NhY2hlID0ge1xuICAgICAgICAgICAgZGF0YTogW10sXG4gICAgICAgICAgICBsYWJlbHM6IFtdLFxuICAgICAgICAgICAgYWxsOiBbXVxuICAgICAgICB9O1xuICAgIH1cbiAgICBkZXRlcm1pbmVEYXRhTGltaXRzKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBhZGFwdGVyID0gdGhpcy5fYWRhcHRlcjtcbiAgICAgICAgY29uc3QgdW5pdCA9IG9wdGlvbnMudGltZS51bml0IHx8ICdkYXknO1xuICAgICAgICBsZXQgeyBtaW4gLCBtYXggLCBtaW5EZWZpbmVkICwgbWF4RGVmaW5lZCAgfSA9IHRoaXMuZ2V0VXNlckJvdW5kcygpO1xuIGZ1bmN0aW9uIF9hcHBseUJvdW5kcyhib3VuZHMpIHtcbiAgICAgICAgICAgIGlmICghbWluRGVmaW5lZCAmJiAhaXNOYU4oYm91bmRzLm1pbikpIHtcbiAgICAgICAgICAgICAgICBtaW4gPSBNYXRoLm1pbihtaW4sIGJvdW5kcy5taW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFtYXhEZWZpbmVkICYmICFpc05hTihib3VuZHMubWF4KSkge1xuICAgICAgICAgICAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgYm91bmRzLm1heCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFtaW5EZWZpbmVkIHx8ICFtYXhEZWZpbmVkKSB7XG4gICAgICAgICAgICBfYXBwbHlCb3VuZHModGhpcy5fZ2V0TGFiZWxCb3VuZHMoKSk7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5ib3VuZHMgIT09ICd0aWNrcycgfHwgb3B0aW9ucy50aWNrcy5zb3VyY2UgIT09ICdsYWJlbHMnKSB7XG4gICAgICAgICAgICAgICAgX2FwcGx5Qm91bmRzKHRoaXMuZ2V0TWluTWF4KGZhbHNlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbWluID0gaXNOdW1iZXJGaW5pdGUobWluKSAmJiAhaXNOYU4obWluKSA/IG1pbiA6ICthZGFwdGVyLnN0YXJ0T2YoRGF0ZS5ub3coKSwgdW5pdCk7XG4gICAgICAgIG1heCA9IGlzTnVtYmVyRmluaXRlKG1heCkgJiYgIWlzTmFOKG1heCkgPyBtYXggOiArYWRhcHRlci5lbmRPZihEYXRlLm5vdygpLCB1bml0KSArIDE7XG4gICAgICAgIHRoaXMubWluID0gTWF0aC5taW4obWluLCBtYXggLSAxKTtcbiAgICAgICAgdGhpcy5tYXggPSBNYXRoLm1heChtaW4gKyAxLCBtYXgpO1xuICAgIH1cbiBfZ2V0TGFiZWxCb3VuZHMoKSB7XG4gICAgICAgIGNvbnN0IGFyciA9IHRoaXMuZ2V0TGFiZWxUaW1lc3RhbXBzKCk7XG4gICAgICAgIGxldCBtaW4gPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgICAgIGxldCBtYXggPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7XG4gICAgICAgIGlmIChhcnIubGVuZ3RoKSB7XG4gICAgICAgICAgICBtaW4gPSBhcnJbMF07XG4gICAgICAgICAgICBtYXggPSBhcnJbYXJyLmxlbmd0aCAtIDFdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtaW4sXG4gICAgICAgICAgICBtYXhcbiAgICAgICAgfTtcbiAgICB9XG4gYnVpbGRUaWNrcygpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgdGltZU9wdHMgPSBvcHRpb25zLnRpbWU7XG4gICAgICAgIGNvbnN0IHRpY2tPcHRzID0gb3B0aW9ucy50aWNrcztcbiAgICAgICAgY29uc3QgdGltZXN0YW1wcyA9IHRpY2tPcHRzLnNvdXJjZSA9PT0gJ2xhYmVscycgPyB0aGlzLmdldExhYmVsVGltZXN0YW1wcygpIDogdGhpcy5fZ2VuZXJhdGUoKTtcbiAgICAgICAgaWYgKG9wdGlvbnMuYm91bmRzID09PSAndGlja3MnICYmIHRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLm1pbiA9IHRoaXMuX3VzZXJNaW4gfHwgdGltZXN0YW1wc1swXTtcbiAgICAgICAgICAgIHRoaXMubWF4ID0gdGhpcy5fdXNlck1heCB8fCB0aW1lc3RhbXBzW3RpbWVzdGFtcHMubGVuZ3RoIC0gMV07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWluID0gdGhpcy5taW47XG4gICAgICAgIGNvbnN0IG1heCA9IHRoaXMubWF4O1xuICAgICAgICBjb25zdCB0aWNrcyA9IF9maWx0ZXJCZXR3ZWVuKHRpbWVzdGFtcHMsIG1pbiwgbWF4KTtcbiAgICAgICAgdGhpcy5fdW5pdCA9IHRpbWVPcHRzLnVuaXQgfHwgKHRpY2tPcHRzLmF1dG9Ta2lwID8gZGV0ZXJtaW5lVW5pdEZvckF1dG9UaWNrcyh0aW1lT3B0cy5taW5Vbml0LCB0aGlzLm1pbiwgdGhpcy5tYXgsIHRoaXMuX2dldExhYmVsQ2FwYWNpdHkobWluKSkgOiBkZXRlcm1pbmVVbml0Rm9yRm9ybWF0dGluZyh0aGlzLCB0aWNrcy5sZW5ndGgsIHRpbWVPcHRzLm1pblVuaXQsIHRoaXMubWluLCB0aGlzLm1heCkpO1xuICAgICAgICB0aGlzLl9tYWpvclVuaXQgPSAhdGlja09wdHMubWFqb3IuZW5hYmxlZCB8fCB0aGlzLl91bml0ID09PSAneWVhcicgPyB1bmRlZmluZWQgOiBkZXRlcm1pbmVNYWpvclVuaXQodGhpcy5fdW5pdCk7XG4gICAgICAgIHRoaXMuaW5pdE9mZnNldHModGltZXN0YW1wcyk7XG4gICAgICAgIGlmIChvcHRpb25zLnJldmVyc2UpIHtcbiAgICAgICAgICAgIHRpY2tzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGlja3NGcm9tVGltZXN0YW1wcyh0aGlzLCB0aWNrcywgdGhpcy5fbWFqb3JVbml0KTtcbiAgICB9XG4gICAgYWZ0ZXJBdXRvU2tpcCgpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5vZmZzZXRBZnRlckF1dG9za2lwKSB7XG4gICAgICAgICAgICB0aGlzLmluaXRPZmZzZXRzKHRoaXMudGlja3MubWFwKCh0aWNrKT0+K3RpY2sudmFsdWUpKTtcbiAgICAgICAgfVxuICAgIH1cbiBpbml0T2Zmc2V0cyh0aW1lc3RhbXBzID0gW10pIHtcbiAgICAgICAgbGV0IHN0YXJ0ID0gMDtcbiAgICAgICAgbGV0IGVuZCA9IDA7XG4gICAgICAgIGxldCBmaXJzdCwgbGFzdDtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5vZmZzZXQgJiYgdGltZXN0YW1wcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGZpcnN0ID0gdGhpcy5nZXREZWNpbWFsRm9yVmFsdWUodGltZXN0YW1wc1swXSk7XG4gICAgICAgICAgICBpZiAodGltZXN0YW1wcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICBzdGFydCA9IDEgLSBmaXJzdDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RhcnQgPSAodGhpcy5nZXREZWNpbWFsRm9yVmFsdWUodGltZXN0YW1wc1sxXSkgLSBmaXJzdCkgLyAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFzdCA9IHRoaXMuZ2V0RGVjaW1hbEZvclZhbHVlKHRpbWVzdGFtcHNbdGltZXN0YW1wcy5sZW5ndGggLSAxXSk7XG4gICAgICAgICAgICBpZiAodGltZXN0YW1wcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICBlbmQgPSBsYXN0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbmQgPSAobGFzdCAtIHRoaXMuZ2V0RGVjaW1hbEZvclZhbHVlKHRpbWVzdGFtcHNbdGltZXN0YW1wcy5sZW5ndGggLSAyXSkpIC8gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsaW1pdCA9IHRpbWVzdGFtcHMubGVuZ3RoIDwgMyA/IDAuNSA6IDAuMjU7XG4gICAgICAgIHN0YXJ0ID0gX2xpbWl0VmFsdWUoc3RhcnQsIDAsIGxpbWl0KTtcbiAgICAgICAgZW5kID0gX2xpbWl0VmFsdWUoZW5kLCAwLCBsaW1pdCk7XG4gICAgICAgIHRoaXMuX29mZnNldHMgPSB7XG4gICAgICAgICAgICBzdGFydCxcbiAgICAgICAgICAgIGVuZCxcbiAgICAgICAgICAgIGZhY3RvcjogMSAvIChzdGFydCArIDEgKyBlbmQpXG4gICAgICAgIH07XG4gICAgfVxuIF9nZW5lcmF0ZSgpIHtcbiAgICAgICAgY29uc3QgYWRhcHRlciA9IHRoaXMuX2FkYXB0ZXI7XG4gICAgICAgIGNvbnN0IG1pbiA9IHRoaXMubWluO1xuICAgICAgICBjb25zdCBtYXggPSB0aGlzLm1heDtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgdGltZU9wdHMgPSBvcHRpb25zLnRpbWU7XG4gICAgICAgIGNvbnN0IG1pbm9yID0gdGltZU9wdHMudW5pdCB8fCBkZXRlcm1pbmVVbml0Rm9yQXV0b1RpY2tzKHRpbWVPcHRzLm1pblVuaXQsIG1pbiwgbWF4LCB0aGlzLl9nZXRMYWJlbENhcGFjaXR5KG1pbikpO1xuICAgICAgICBjb25zdCBzdGVwU2l6ZSA9IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMudGlja3Muc3RlcFNpemUsIDEpO1xuICAgICAgICBjb25zdCB3ZWVrZGF5ID0gbWlub3IgPT09ICd3ZWVrJyA/IHRpbWVPcHRzLmlzb1dlZWtkYXkgOiBmYWxzZTtcbiAgICAgICAgY29uc3QgaGFzV2Vla2RheSA9IGlzTnVtYmVyKHdlZWtkYXkpIHx8IHdlZWtkYXkgPT09IHRydWU7XG4gICAgICAgIGNvbnN0IHRpY2tzID0ge307XG4gICAgICAgIGxldCBmaXJzdCA9IG1pbjtcbiAgICAgICAgbGV0IHRpbWUsIGNvdW50O1xuICAgICAgICBpZiAoaGFzV2Vla2RheSkge1xuICAgICAgICAgICAgZmlyc3QgPSArYWRhcHRlci5zdGFydE9mKGZpcnN0LCAnaXNvV2VlaycsIHdlZWtkYXkpO1xuICAgICAgICB9XG4gICAgICAgIGZpcnN0ID0gK2FkYXB0ZXIuc3RhcnRPZihmaXJzdCwgaGFzV2Vla2RheSA/ICdkYXknIDogbWlub3IpO1xuICAgICAgICBpZiAoYWRhcHRlci5kaWZmKG1heCwgbWluLCBtaW5vcikgPiAxMDAwMDAgKiBzdGVwU2l6ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1pbiArICcgYW5kICcgKyBtYXggKyAnIGFyZSB0b28gZmFyIGFwYXJ0IHdpdGggc3RlcFNpemUgb2YgJyArIHN0ZXBTaXplICsgJyAnICsgbWlub3IpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcHMgPSBvcHRpb25zLnRpY2tzLnNvdXJjZSA9PT0gJ2RhdGEnICYmIHRoaXMuZ2V0RGF0YVRpbWVzdGFtcHMoKTtcbiAgICAgICAgZm9yKHRpbWUgPSBmaXJzdCwgY291bnQgPSAwOyB0aW1lIDwgbWF4OyB0aW1lID0gK2FkYXB0ZXIuYWRkKHRpbWUsIHN0ZXBTaXplLCBtaW5vciksIGNvdW50Kyspe1xuICAgICAgICAgICAgYWRkVGljayh0aWNrcywgdGltZSwgdGltZXN0YW1wcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWUgPT09IG1heCB8fCBvcHRpb25zLmJvdW5kcyA9PT0gJ3RpY2tzJyB8fCBjb3VudCA9PT0gMSkge1xuICAgICAgICAgICAgYWRkVGljayh0aWNrcywgdGltZSwgdGltZXN0YW1wcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRpY2tzKS5zb3J0KChhLCBiKT0+YSAtIGIpLm1hcCgoeCk9Pit4KTtcbiAgICB9XG4gZ2V0TGFiZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBhZGFwdGVyID0gdGhpcy5fYWRhcHRlcjtcbiAgICAgICAgY29uc3QgdGltZU9wdHMgPSB0aGlzLm9wdGlvbnMudGltZTtcbiAgICAgICAgaWYgKHRpbWVPcHRzLnRvb2x0aXBGb3JtYXQpIHtcbiAgICAgICAgICAgIHJldHVybiBhZGFwdGVyLmZvcm1hdCh2YWx1ZSwgdGltZU9wdHMudG9vbHRpcEZvcm1hdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFkYXB0ZXIuZm9ybWF0KHZhbHVlLCB0aW1lT3B0cy5kaXNwbGF5Rm9ybWF0cy5kYXRldGltZSk7XG4gICAgfVxuIGZvcm1hdCh2YWx1ZSwgZm9ybWF0KSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGZvcm1hdHMgPSBvcHRpb25zLnRpbWUuZGlzcGxheUZvcm1hdHM7XG4gICAgICAgIGNvbnN0IHVuaXQgPSB0aGlzLl91bml0O1xuICAgICAgICBjb25zdCBmbXQgPSBmb3JtYXQgfHwgZm9ybWF0c1t1bml0XTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkYXB0ZXIuZm9ybWF0KHZhbHVlLCBmbXQpO1xuICAgIH1cbiBfdGlja0Zvcm1hdEZ1bmN0aW9uKHRpbWUsIGluZGV4LCB0aWNrcywgZm9ybWF0KSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlciA9IG9wdGlvbnMudGlja3MuY2FsbGJhY2s7XG4gICAgICAgIGlmIChmb3JtYXR0ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhmb3JtYXR0ZXIsIFtcbiAgICAgICAgICAgICAgICB0aW1lLFxuICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgIHRpY2tzXG4gICAgICAgICAgICBdLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmb3JtYXRzID0gb3B0aW9ucy50aW1lLmRpc3BsYXlGb3JtYXRzO1xuICAgICAgICBjb25zdCB1bml0ID0gdGhpcy5fdW5pdDtcbiAgICAgICAgY29uc3QgbWFqb3JVbml0ID0gdGhpcy5fbWFqb3JVbml0O1xuICAgICAgICBjb25zdCBtaW5vckZvcm1hdCA9IHVuaXQgJiYgZm9ybWF0c1t1bml0XTtcbiAgICAgICAgY29uc3QgbWFqb3JGb3JtYXQgPSBtYWpvclVuaXQgJiYgZm9ybWF0c1ttYWpvclVuaXRdO1xuICAgICAgICBjb25zdCB0aWNrID0gdGlja3NbaW5kZXhdO1xuICAgICAgICBjb25zdCBtYWpvciA9IG1ham9yVW5pdCAmJiBtYWpvckZvcm1hdCAmJiB0aWNrICYmIHRpY2subWFqb3I7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGFwdGVyLmZvcm1hdCh0aW1lLCBmb3JtYXQgfHwgKG1ham9yID8gbWFqb3JGb3JtYXQgOiBtaW5vckZvcm1hdCkpO1xuICAgIH1cbiBnZW5lcmF0ZVRpY2tMYWJlbHModGlja3MpIHtcbiAgICAgICAgbGV0IGksIGlsZW4sIHRpY2s7XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IHRpY2tzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICB0aWNrID0gdGlja3NbaV07XG4gICAgICAgICAgICB0aWNrLmxhYmVsID0gdGhpcy5fdGlja0Zvcm1hdEZ1bmN0aW9uKHRpY2sudmFsdWUsIGksIHRpY2tzKTtcbiAgICAgICAgfVxuICAgIH1cbiBnZXREZWNpbWFsRm9yVmFsdWUodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsID8gTmFOIDogKHZhbHVlIC0gdGhpcy5taW4pIC8gKHRoaXMubWF4IC0gdGhpcy5taW4pO1xuICAgIH1cbiBnZXRQaXhlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG9mZnNldHMgPSB0aGlzLl9vZmZzZXRzO1xuICAgICAgICBjb25zdCBwb3MgPSB0aGlzLmdldERlY2ltYWxGb3JWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBpeGVsRm9yRGVjaW1hbCgob2Zmc2V0cy5zdGFydCArIHBvcykgKiBvZmZzZXRzLmZhY3Rvcik7XG4gICAgfVxuIGdldFZhbHVlRm9yUGl4ZWwocGl4ZWwpIHtcbiAgICAgICAgY29uc3Qgb2Zmc2V0cyA9IHRoaXMuX29mZnNldHM7XG4gICAgICAgIGNvbnN0IHBvcyA9IHRoaXMuZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKSAvIG9mZnNldHMuZmFjdG9yIC0gb2Zmc2V0cy5lbmQ7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbiArIHBvcyAqICh0aGlzLm1heCAtIHRoaXMubWluKTtcbiAgICB9XG4gX2dldExhYmVsU2l6ZShsYWJlbCkge1xuICAgICAgICBjb25zdCB0aWNrc09wdHMgPSB0aGlzLm9wdGlvbnMudGlja3M7XG4gICAgICAgIGNvbnN0IHRpY2tMYWJlbFdpZHRoID0gdGhpcy5jdHgubWVhc3VyZVRleHQobGFiZWwpLndpZHRoO1xuICAgICAgICBjb25zdCBhbmdsZSA9IHRvUmFkaWFucyh0aGlzLmlzSG9yaXpvbnRhbCgpID8gdGlja3NPcHRzLm1heFJvdGF0aW9uIDogdGlja3NPcHRzLm1pblJvdGF0aW9uKTtcbiAgICAgICAgY29uc3QgY29zUm90YXRpb24gPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICAgIGNvbnN0IHNpblJvdGF0aW9uID0gTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgICBjb25zdCB0aWNrRm9udFNpemUgPSB0aGlzLl9yZXNvbHZlVGlja0ZvbnRPcHRpb25zKDApLnNpemU7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB3OiB0aWNrTGFiZWxXaWR0aCAqIGNvc1JvdGF0aW9uICsgdGlja0ZvbnRTaXplICogc2luUm90YXRpb24sXG4gICAgICAgICAgICBoOiB0aWNrTGFiZWxXaWR0aCAqIHNpblJvdGF0aW9uICsgdGlja0ZvbnRTaXplICogY29zUm90YXRpb25cbiAgICAgICAgfTtcbiAgICB9XG4gX2dldExhYmVsQ2FwYWNpdHkoZXhhbXBsZVRpbWUpIHtcbiAgICAgICAgY29uc3QgdGltZU9wdHMgPSB0aGlzLm9wdGlvbnMudGltZTtcbiAgICAgICAgY29uc3QgZGlzcGxheUZvcm1hdHMgPSB0aW1lT3B0cy5kaXNwbGF5Rm9ybWF0cztcbiAgICAgICAgY29uc3QgZm9ybWF0ID0gZGlzcGxheUZvcm1hdHNbdGltZU9wdHMudW5pdF0gfHwgZGlzcGxheUZvcm1hdHMubWlsbGlzZWNvbmQ7XG4gICAgICAgIGNvbnN0IGV4YW1wbGVMYWJlbCA9IHRoaXMuX3RpY2tGb3JtYXRGdW5jdGlvbihleGFtcGxlVGltZSwgMCwgdGlja3NGcm9tVGltZXN0YW1wcyh0aGlzLCBbXG4gICAgICAgICAgICBleGFtcGxlVGltZVxuICAgICAgICBdLCB0aGlzLl9tYWpvclVuaXQpLCBmb3JtYXQpO1xuICAgICAgICBjb25zdCBzaXplID0gdGhpcy5fZ2V0TGFiZWxTaXplKGV4YW1wbGVMYWJlbCk7XG4gICAgICAgIGNvbnN0IGNhcGFjaXR5ID0gTWF0aC5mbG9vcih0aGlzLmlzSG9yaXpvbnRhbCgpID8gdGhpcy53aWR0aCAvIHNpemUudyA6IHRoaXMuaGVpZ2h0IC8gc2l6ZS5oKSAtIDE7XG4gICAgICAgIHJldHVybiBjYXBhY2l0eSA+IDAgPyBjYXBhY2l0eSA6IDE7XG4gICAgfVxuIGdldERhdGFUaW1lc3RhbXBzKCkge1xuICAgICAgICBsZXQgdGltZXN0YW1wcyA9IHRoaXMuX2NhY2hlLmRhdGEgfHwgW107XG4gICAgICAgIGxldCBpLCBpbGVuO1xuICAgICAgICBpZiAodGltZXN0YW1wcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aW1lc3RhbXBzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGFzID0gdGhpcy5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcygpO1xuICAgICAgICBpZiAodGhpcy5fbm9ybWFsaXplZCAmJiBtZXRhcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZS5kYXRhID0gbWV0YXNbMF0uY29udHJvbGxlci5nZXRBbGxQYXJzZWRWYWx1ZXModGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gbWV0YXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIHRpbWVzdGFtcHMgPSB0aW1lc3RhbXBzLmNvbmNhdChtZXRhc1tpXS5jb250cm9sbGVyLmdldEFsbFBhcnNlZFZhbHVlcyh0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlLmRhdGEgPSB0aGlzLm5vcm1hbGl6ZSh0aW1lc3RhbXBzKTtcbiAgICB9XG4gZ2V0TGFiZWxUaW1lc3RhbXBzKCkge1xuICAgICAgICBjb25zdCB0aW1lc3RhbXBzID0gdGhpcy5fY2FjaGUubGFiZWxzIHx8IFtdO1xuICAgICAgICBsZXQgaSwgaWxlbjtcbiAgICAgICAgaWYgKHRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGltZXN0YW1wcztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYWJlbHMgPSB0aGlzLmdldExhYmVscygpO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBsYWJlbHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIHRpbWVzdGFtcHMucHVzaChwYXJzZSh0aGlzLCBsYWJlbHNbaV0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGUubGFiZWxzID0gdGhpcy5fbm9ybWFsaXplZCA/IHRpbWVzdGFtcHMgOiB0aGlzLm5vcm1hbGl6ZSh0aW1lc3RhbXBzKTtcbiAgICB9XG4gbm9ybWFsaXplKHZhbHVlcykge1xuICAgICAgICByZXR1cm4gX2FycmF5VW5pcXVlKHZhbHVlcy5zb3J0KHNvcnRlcikpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaW50ZXJwb2xhdGUodGFibGUsIHZhbCwgcmV2ZXJzZSkge1xuICAgIGxldCBsbyA9IDA7XG4gICAgbGV0IGhpID0gdGFibGUubGVuZ3RoIC0gMTtcbiAgICBsZXQgcHJldlNvdXJjZSwgbmV4dFNvdXJjZSwgcHJldlRhcmdldCwgbmV4dFRhcmdldDtcbiAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICBpZiAodmFsID49IHRhYmxlW2xvXS5wb3MgJiYgdmFsIDw9IHRhYmxlW2hpXS5wb3MpIHtcbiAgICAgICAgICAgICh7IGxvICwgaGkgIH0gPSBfbG9va3VwQnlLZXkodGFibGUsICdwb3MnLCB2YWwpKTtcbiAgICAgICAgfVxuICAgICAgICAoeyBwb3M6IHByZXZTb3VyY2UgLCB0aW1lOiBwcmV2VGFyZ2V0ICB9ID0gdGFibGVbbG9dKTtcbiAgICAgICAgKHsgcG9zOiBuZXh0U291cmNlICwgdGltZTogbmV4dFRhcmdldCAgfSA9IHRhYmxlW2hpXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHZhbCA+PSB0YWJsZVtsb10udGltZSAmJiB2YWwgPD0gdGFibGVbaGldLnRpbWUpIHtcbiAgICAgICAgICAgICh7IGxvICwgaGkgIH0gPSBfbG9va3VwQnlLZXkodGFibGUsICd0aW1lJywgdmFsKSk7XG4gICAgICAgIH1cbiAgICAgICAgKHsgdGltZTogcHJldlNvdXJjZSAsIHBvczogcHJldlRhcmdldCAgfSA9IHRhYmxlW2xvXSk7XG4gICAgICAgICh7IHRpbWU6IG5leHRTb3VyY2UgLCBwb3M6IG5leHRUYXJnZXQgIH0gPSB0YWJsZVtoaV0pO1xuICAgIH1cbiAgICBjb25zdCBzcGFuID0gbmV4dFNvdXJjZSAtIHByZXZTb3VyY2U7XG4gICAgcmV0dXJuIHNwYW4gPyBwcmV2VGFyZ2V0ICsgKG5leHRUYXJnZXQgLSBwcmV2VGFyZ2V0KSAqICh2YWwgLSBwcmV2U291cmNlKSAvIHNwYW4gOiBwcmV2VGFyZ2V0O1xufVxuY2xhc3MgVGltZVNlcmllc1NjYWxlIGV4dGVuZHMgVGltZVNjYWxlIHtcbiAgICBzdGF0aWMgaWQgPSAndGltZXNlcmllcyc7XG4gc3RhdGljIGRlZmF1bHRzID0gVGltZVNjYWxlLmRlZmF1bHRzO1xuIGNvbnN0cnVjdG9yKHByb3BzKXtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICAgdGhpcy5fdGFibGUgPSBbXTtcbiAgICAgICAgIHRoaXMuX21pblBvcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMuX3RhYmxlUmFuZ2UgPSB1bmRlZmluZWQ7XG4gICAgfVxuIGluaXRPZmZzZXRzKCkge1xuICAgICAgICBjb25zdCB0aW1lc3RhbXBzID0gdGhpcy5fZ2V0VGltZXN0YW1wc0ZvclRhYmxlKCk7XG4gICAgICAgIGNvbnN0IHRhYmxlID0gdGhpcy5fdGFibGUgPSB0aGlzLmJ1aWxkTG9va3VwVGFibGUodGltZXN0YW1wcyk7XG4gICAgICAgIHRoaXMuX21pblBvcyA9IGludGVycG9sYXRlKHRhYmxlLCB0aGlzLm1pbik7XG4gICAgICAgIHRoaXMuX3RhYmxlUmFuZ2UgPSBpbnRlcnBvbGF0ZSh0YWJsZSwgdGhpcy5tYXgpIC0gdGhpcy5fbWluUG9zO1xuICAgICAgICBzdXBlci5pbml0T2Zmc2V0cyh0aW1lc3RhbXBzKTtcbiAgICB9XG4gYnVpbGRMb29rdXBUYWJsZSh0aW1lc3RhbXBzKSB7XG4gICAgICAgIGNvbnN0IHsgbWluICwgbWF4ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICAgICAgY29uc3QgdGFibGUgPSBbXTtcbiAgICAgICAgbGV0IGksIGlsZW4sIHByZXYsIGN1cnIsIG5leHQ7XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IHRpbWVzdGFtcHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIGN1cnIgPSB0aW1lc3RhbXBzW2ldO1xuICAgICAgICAgICAgaWYgKGN1cnIgPj0gbWluICYmIGN1cnIgPD0gbWF4KSB7XG4gICAgICAgICAgICAgICAgaXRlbXMucHVzaChjdXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaXRlbXMubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWU6IG1pbixcbiAgICAgICAgICAgICAgICAgICAgcG9zOiAwXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWU6IG1heCxcbiAgICAgICAgICAgICAgICAgICAgcG9zOiAxXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgbmV4dCA9IGl0ZW1zW2kgKyAxXTtcbiAgICAgICAgICAgIHByZXYgPSBpdGVtc1tpIC0gMV07XG4gICAgICAgICAgICBjdXJyID0gaXRlbXNbaV07XG4gICAgICAgICAgICBpZiAoTWF0aC5yb3VuZCgobmV4dCArIHByZXYpIC8gMikgIT09IGN1cnIpIHtcbiAgICAgICAgICAgICAgICB0YWJsZS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdGltZTogY3VycixcbiAgICAgICAgICAgICAgICAgICAgcG9zOiBpIC8gKGlsZW4gLSAxKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YWJsZTtcbiAgICB9XG4gX2dldFRpbWVzdGFtcHNGb3JUYWJsZSgpIHtcbiAgICAgICAgbGV0IHRpbWVzdGFtcHMgPSB0aGlzLl9jYWNoZS5hbGwgfHwgW107XG4gICAgICAgIGlmICh0aW1lc3RhbXBzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRpbWVzdGFtcHM7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuZ2V0RGF0YVRpbWVzdGFtcHMoKTtcbiAgICAgICAgY29uc3QgbGFiZWwgPSB0aGlzLmdldExhYmVsVGltZXN0YW1wcygpO1xuICAgICAgICBpZiAoZGF0YS5sZW5ndGggJiYgbGFiZWwubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aW1lc3RhbXBzID0gdGhpcy5ub3JtYWxpemUoZGF0YS5jb25jYXQobGFiZWwpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpbWVzdGFtcHMgPSBkYXRhLmxlbmd0aCA/IGRhdGEgOiBsYWJlbDtcbiAgICAgICAgfVxuICAgICAgICB0aW1lc3RhbXBzID0gdGhpcy5fY2FjaGUuYWxsID0gdGltZXN0YW1wcztcbiAgICAgICAgcmV0dXJuIHRpbWVzdGFtcHM7XG4gICAgfVxuIGdldERlY2ltYWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gKGludGVycG9sYXRlKHRoaXMuX3RhYmxlLCB2YWx1ZSkgLSB0aGlzLl9taW5Qb3MpIC8gdGhpcy5fdGFibGVSYW5nZTtcbiAgICB9XG4gZ2V0VmFsdWVGb3JQaXhlbChwaXhlbCkge1xuICAgICAgICBjb25zdCBvZmZzZXRzID0gdGhpcy5fb2Zmc2V0cztcbiAgICAgICAgY29uc3QgZGVjaW1hbCA9IHRoaXMuZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKSAvIG9mZnNldHMuZmFjdG9yIC0gb2Zmc2V0cy5lbmQ7XG4gICAgICAgIHJldHVybiBpbnRlcnBvbGF0ZSh0aGlzLl90YWJsZSwgZGVjaW1hbCAqIHRoaXMuX3RhYmxlUmFuZ2UgKyB0aGlzLl9taW5Qb3MsIHRydWUpO1xuICAgIH1cbn1cblxudmFyIHNjYWxlcyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbl9fcHJvdG9fXzogbnVsbCxcbkNhdGVnb3J5U2NhbGU6IENhdGVnb3J5U2NhbGUsXG5MaW5lYXJTY2FsZTogTGluZWFyU2NhbGUsXG5Mb2dhcml0aG1pY1NjYWxlOiBMb2dhcml0aG1pY1NjYWxlLFxuUmFkaWFsTGluZWFyU2NhbGU6IFJhZGlhbExpbmVhclNjYWxlLFxuVGltZVNjYWxlOiBUaW1lU2NhbGUsXG5UaW1lU2VyaWVzU2NhbGU6IFRpbWVTZXJpZXNTY2FsZVxufSk7XG5cbmNvbnN0IHJlZ2lzdGVyYWJsZXMgPSBbXG4gICAgY29udHJvbGxlcnMsXG4gICAgZWxlbWVudHMsXG4gICAgcGx1Z2lucyxcbiAgICBzY2FsZXNcbl07XG5cbmV4cG9ydCB7IEFuaW1hdGlvbiwgQW5pbWF0aW9ucywgQXJjRWxlbWVudCwgQmFyQ29udHJvbGxlciwgQmFyRWxlbWVudCwgQmFzZVBsYXRmb3JtLCBCYXNpY1BsYXRmb3JtLCBCdWJibGVDb250cm9sbGVyLCBDYXRlZ29yeVNjYWxlLCBDaGFydCwgcGx1Z2luX2NvbG9ycyBhcyBDb2xvcnMsIERhdGFzZXRDb250cm9sbGVyLCBwbHVnaW5fZGVjaW1hdGlvbiBhcyBEZWNpbWF0aW9uLCBEb21QbGF0Zm9ybSwgRG91Z2hudXRDb250cm9sbGVyLCBFbGVtZW50LCBpbmRleCBhcyBGaWxsZXIsIEludGVyYWN0aW9uLCBwbHVnaW5fbGVnZW5kIGFzIExlZ2VuZCwgTGluZUNvbnRyb2xsZXIsIExpbmVFbGVtZW50LCBMaW5lYXJTY2FsZSwgTG9nYXJpdGhtaWNTY2FsZSwgUGllQ29udHJvbGxlciwgUG9pbnRFbGVtZW50LCBQb2xhckFyZWFDb250cm9sbGVyLCBSYWRhckNvbnRyb2xsZXIsIFJhZGlhbExpbmVhclNjYWxlLCBTY2FsZSwgU2NhdHRlckNvbnRyb2xsZXIsIHBsdWdpbl9zdWJ0aXRsZSBhcyBTdWJUaXRsZSwgVGltZVNjYWxlLCBUaW1lU2VyaWVzU2NhbGUsIHBsdWdpbl90aXRsZSBhcyBUaXRsZSwgcGx1Z2luX3Rvb2x0aXAgYXMgVG9vbHRpcCwgYWRhcHRlcnMgYXMgX2FkYXB0ZXJzLCBfZGV0ZWN0UGxhdGZvcm0sIGFuaW1hdG9yLCBjb250cm9sbGVycywgZWxlbWVudHMsIGxheW91dHMsIHBsdWdpbnMsIHJlZ2lzdGVyYWJsZXMsIHJlZ2lzdHJ5LCBzY2FsZXMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNoYXJ0LmpzLm1hcFxuIl0sIm5hbWVzIjpbInJvdW5kIiwidiIsImxpbSIsImwiLCJoIiwiTWF0aCIsIm1heCIsIm1pbiIsInAyYiIsIm4yYiIsImIybiIsIm4ycCIsIm1hcCQxIiwiQSIsIkIiLCJDIiwiRCIsIkUiLCJGIiwiYSIsImIiLCJjIiwiZCIsImUiLCJmIiwiaGV4IiwiaDEiLCJoMiIsImVxIiwiSFVFX1JFIiwiaHNsMnJnYm4iLCJzIiwibiIsImsiLCJoc3YycmdibiIsImh3YjJyZ2JuIiwidyIsInJnYiIsImkiLCJyZ2IyaHNsIiwiciIsImciLCJodWVWYWx1ZSIsImNhbGxuIiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwiaHNsMnJnYiIsImh1ZSIsIngiLCJaIiwiWSIsIlgiLCJXIiwiViIsIlUiLCJUIiwiUyIsIlIiLCJRIiwiUCIsIk8iLCJOIiwiTSIsIkwiLCJLIiwiRyIsIkgiLCJJIiwiSiIsIm5hbWVzJDEiLCJPaWNlWGUiLCJhbnRpcXVld0V0ZSIsImFxdWEiLCJhcXVhbWFyUmUiLCJhenVZIiwiYmVpZ2UiLCJiaXNxdWUiLCJibGFjayIsImJsYW5LZWRPbW9uZCIsIlhlIiwiWGV2aVRldCIsImJQd24iLCJidXJseXdvb2QiLCJjYU10WGUiLCJLYXJ0WXVzZSIsIktvY1RhdGUiLCJjU08iLCJjU25mbG93ZXJYZSIsImNTbnNpbGsiLCJjcmltc29uIiwiY3lhbiIsInhYZSIsInhjeWFuIiwieGdUTW5QZCIsInhXYXkiLCJ4Z1lGIiwieGdZeSIsInhraGFraSIsInhtYWdGdGEiLCJ4VGl2ZWdZRiIsInhTYW5nZSIsInhTY0VkIiwieFlkIiwieHNPbW9uIiwieHNIZ1lGIiwieFVYZSIsInhVV2F5IiwieFVnWXkiLCJ4UWUiLCJ4dmlUZXQiLCJkQXBwUmsiLCJkQXBza3lYZSIsImRpbVdheSIsImRpbWdZeSIsImRvZGdlclhlIiwiZmlZYnJpY2siLCJmbFNPd0V0ZSIsImZvWXN0V0FuIiwiZnVLc2lhIiwiZ2FSc2JTbyIsImdob3N0d0V0ZSIsImdUZCIsImdUTW5QZCIsIldheSIsImdZRiIsImdZRkx3IiwiZ1l5IiwiaG9uZXlNdyIsImhvdHBSayIsIlJkaWFuWWQiLCJSZGlnbyIsIml2U3kiLCJraGFraSIsImxhdkZNciIsImxhdkZNclhzaCIsImxhd25nWUYiLCJObW9uY0VmZm9uIiwiWlhlIiwiWmNTTyIsIlpjeWFuIiwiWmdUTW5QZEx3IiwiWldheSIsIlpnWUYiLCJaZ1l5IiwiWnBSayIsIlpzT21vbiIsIlpzSGdZRiIsIlpza3lYZSIsIlpVV2F5IiwiWlVnWXkiLCJac3RBbFhlIiwiWkx3IiwibGltZSIsImxpbWVnWUYiLCJsUkYiLCJtYWdGdGEiLCJtYVBvbiIsIlZhcXVhbWFyUmUiLCJWWGUiLCJWU2NFZCIsIlZwdXJwTiIsIlZzSGdZRiIsIlZVWGUiLCJWc3ByUmdnWUYiLCJWUWUiLCJWdmlUZXRZZCIsIm1pZG5pZ2h0WGUiLCJtUnRjWWFtIiwibWlzdHlQc2UiLCJtb2NjYXNSIiwibmF2YWpvd0V0ZSIsIm5hdnkiLCJUZGxhY2UiLCJUaXZlIiwiVGl2ZWRCYiIsIlNhbmdlIiwiU2FuZ2VZZCIsIlNjRWQiLCJwT2VnVE1uUGQiLCJwT2VnWUYiLCJwT2VRZSIsInBPZXZpVGV0WWQiLCJwYXBheWF3RXAiLCJwSEtwdWZmIiwicGVydSIsInBSayIsInBsdW0iLCJwb3dNclhlIiwicHVycE4iLCJZYmVjY2FwdXJwTiIsIllkIiwiUHN5YnJvd24iLCJQeU9YZSIsInNhZGROYlB3biIsInNPbW9uIiwic2FuZHliUHduIiwic0hnWUYiLCJzSHNoZWxsIiwic2lGbmEiLCJzaWx2ZXIiLCJza3lYZSIsIlVYZSIsIlVXYXkiLCJVZ1l5Iiwic25vdyIsInNwclJnZ1lGIiwic3RBbFhlIiwidGFuIiwidGVPIiwidEVzdE4iLCJ0b21hdG8iLCJRZSIsInZpVGV0IiwiSkh0Iiwid0V0ZSIsIndFdGVzbW9rZSIsIkx3IiwiTHdnWUYiLCJuYW1lcyIsIlJHQl9SRSIsInRvIiwicG93IiwiZnJvbSIsIm1vZEhTTCIsInJhdGlvIiwidG1wIiwiY2xvbmUiLCJwcm90byIsIk9iamVjdCIsImFzc2lnbiIsImZyb21PYmplY3QiLCJpbnB1dCIsImxlbmd0aCIsImZ1bmN0aW9uUGFyc2UiLCJzdHIiLCJjaGFyQXQiLCJtIiwiZXhlYyIsInJnYlBhcnNlIiwicDEiLCJwMiIsImh3YjJyZ2IiLCJoc3YycmdiIiwiaHVlUGFyc2UiLCJDb2xvciIsImNvbnN0cnVjdG9yIiwidHlwZSIsInJldCIsImxlbiIsInVucGFja2VkIiwia2V5cyIsInRrZXlzIiwiaiIsIm9rIiwibmsiLCJyZXBsYWNlIiwicGFyc2VJbnQiLCJ1bnBhY2siLCJ0cmFuc3BhcmVudCIsInRvTG93ZXJDYXNlIiwibmFtZVBhcnNlIiwidGhpcyIsIl9yZ2IiLCJfdmFsaWQiLCJ2YWxpZCIsIm9iaiIsInJnYlN0cmluZyIsInVuZGVmaW5lZCIsImhleFN0cmluZyIsImlzU2hvcnQiLCJhbHBoYSIsImhzbFN0cmluZyIsIm1peCIsImNvbG9yIiwid2VpZ2h0IiwiYzEiLCJjMiIsIncyIiwicCIsIncxIiwiaW50ZXJwb2xhdGUiLCJ0IiwicmdiMSIsInJnYjIiLCJjbGVhcmVyIiwiZ3JleXNjYWxlIiwidmFsIiwib3BhcXVlciIsIm5lZ2F0ZSIsImxpZ2h0ZW4iLCJkYXJrZW4iLCJzYXR1cmF0ZSIsImRlc2F0dXJhdGUiLCJyb3RhdGUiLCJkZWciLCJub29wIiwidWlkIiwiaWQiLCJpc051bGxPclVuZGVmIiwidmFsdWUiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJzbGljZSIsImlzT2JqZWN0IiwiaXNOdW1iZXJGaW5pdGUiLCJOdW1iZXIiLCJpc0Zpbml0ZSIsImZpbml0ZU9yRGVmYXVsdCIsImRlZmF1bHRWYWx1ZSIsInZhbHVlT3JEZWZhdWx0IiwidG9EaW1lbnNpb24iLCJkaW1lbnNpb24iLCJlbmRzV2l0aCIsInBhcnNlRmxvYXQiLCJjYWxsYmFjayIsImZuIiwiYXJncyIsInRoaXNBcmciLCJhcHBseSIsImVhY2giLCJsb29wYWJsZSIsInJldmVyc2UiLCJfZWxlbWVudHNFcXVhbCIsImEwIiwiYTEiLCJpbGVuIiwidjAiLCJ2MSIsImRhdGFzZXRJbmRleCIsImluZGV4Iiwic291cmNlIiwidGFyZ2V0IiwiY3JlYXRlIiwia2xlbiIsImlzVmFsaWRLZXkiLCJrZXkiLCJpbmRleE9mIiwiX21lcmdlciIsIm9wdGlvbnMiLCJ0dmFsIiwic3ZhbCIsIm1lcmdlIiwic291cmNlcyIsIm1lcmdlciIsImN1cnJlbnQiLCJtZXJnZUlmIiwiX21lcmdlcklmIiwiaGFzT3duUHJvcGVydHkiLCJrZXlSZXNvbHZlcnMiLCJvIiwieSIsInJlc29sdmVPYmplY3RLZXkiLCJyZXNvbHZlciIsInBhcnRzIiwic3BsaXQiLCJwYXJ0IiwicHVzaCIsIl9zcGxpdEtleSIsIl9nZXRLZXlSZXNvbHZlciIsIl9jYXBpdGFsaXplIiwidG9VcHBlckNhc2UiLCJkZWZpbmVkIiwiaXNGdW5jdGlvbiIsInNldHNFcXVhbCIsInNpemUiLCJpdGVtIiwiaGFzIiwiUEkiLCJUQVUiLCJQSVRBVSIsIklORklOSVRZIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJSQURfUEVSX0RFRyIsIkhBTEZfUEkiLCJRVUFSVEVSX1BJIiwiVFdPX1RISVJEU19QSSIsImxvZzEwIiwic2lnbiIsImFsbW9zdEVxdWFscyIsImVwc2lsb24iLCJhYnMiLCJuaWNlTnVtIiwicmFuZ2UiLCJyb3VuZGVkUmFuZ2UiLCJuaWNlUmFuZ2UiLCJmbG9vciIsImZyYWN0aW9uIiwiaXNOdW1iZXIiLCJpc05hTiIsIl9zZXRNaW5BbmRNYXhCeUtleSIsImFycmF5IiwicHJvcGVydHkiLCJ0b1JhZGlhbnMiLCJkZWdyZWVzIiwidG9EZWdyZWVzIiwicmFkaWFucyIsIl9kZWNpbWFsUGxhY2VzIiwiZ2V0QW5nbGVGcm9tUG9pbnQiLCJjZW50cmVQb2ludCIsImFuZ2xlUG9pbnQiLCJkaXN0YW5jZUZyb21YQ2VudGVyIiwiZGlzdGFuY2VGcm9tWUNlbnRlciIsInJhZGlhbERpc3RhbmNlRnJvbUNlbnRlciIsInNxcnQiLCJhbmdsZSIsImF0YW4yIiwiZGlzdGFuY2UiLCJkaXN0YW5jZUJldHdlZW5Qb2ludHMiLCJwdDEiLCJwdDIiLCJfYW5nbGVEaWZmIiwiX25vcm1hbGl6ZUFuZ2xlIiwiX2FuZ2xlQmV0d2VlbiIsInN0YXJ0IiwiZW5kIiwic2FtZUFuZ2xlSXNGdWxsQ2lyY2xlIiwiYW5nbGVUb1N0YXJ0IiwiYW5nbGVUb0VuZCIsInN0YXJ0VG9BbmdsZSIsImVuZFRvQW5nbGUiLCJfbGltaXRWYWx1ZSIsIl9pc0JldHdlZW4iLCJfbG9va3VwIiwidGFibGUiLCJjbXAiLCJtaWQiLCJoaSIsImxvIiwiX2xvb2t1cEJ5S2V5IiwibGFzdCIsInRpIiwiX3Jsb29rdXBCeUtleSIsImFycmF5RXZlbnRzIiwidW5saXN0ZW5BcnJheUV2ZW50cyIsImxpc3RlbmVyIiwic3R1YiIsIl9jaGFydGpzIiwibGlzdGVuZXJzIiwic3BsaWNlIiwiZm9yRWFjaCIsIl9hcnJheVVuaXF1ZSIsIml0ZW1zIiwic2V0IiwiU2V0IiwiYWRkIiwicmVxdWVzdEFuaW1GcmFtZSIsIndpbmRvdyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInRocm90dGxlZCIsImFyZ3NUb1VzZSIsInRpY2tpbmciLCJfdG9MZWZ0UmlnaHRDZW50ZXIiLCJhbGlnbiIsIl9hbGlnblN0YXJ0RW5kIiwiX2dldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHMiLCJtZXRhIiwicG9pbnRzIiwiYW5pbWF0aW9uc0Rpc2FibGVkIiwicG9pbnRDb3VudCIsImNvdW50IiwiX3NvcnRlZCIsImlTY2FsZSIsIl9wYXJzZWQiLCJheGlzIiwibWluRGVmaW5lZCIsIm1heERlZmluZWQiLCJnZXRVc2VyQm91bmRzIiwiZ2V0UGl4ZWxGb3JWYWx1ZSIsIl9zY2FsZVJhbmdlc0NoYW5nZWQiLCJ4U2NhbGUiLCJ5U2NhbGUiLCJfc2NhbGVSYW5nZXMiLCJuZXdSYW5nZXMiLCJ4bWluIiwieG1heCIsInltaW4iLCJ5bWF4IiwiY2hhbmdlZCIsImF0RWRnZSIsImVsYXN0aWNJbiIsInNpbiIsImVsYXN0aWNPdXQiLCJlZmZlY3RzIiwibGluZWFyIiwiZWFzZUluUXVhZCIsImVhc2VPdXRRdWFkIiwiZWFzZUluT3V0UXVhZCIsImVhc2VJbkN1YmljIiwiZWFzZU91dEN1YmljIiwiZWFzZUluT3V0Q3ViaWMiLCJlYXNlSW5RdWFydCIsImVhc2VPdXRRdWFydCIsImVhc2VJbk91dFF1YXJ0IiwiZWFzZUluUXVpbnQiLCJlYXNlT3V0UXVpbnQiLCJlYXNlSW5PdXRRdWludCIsImVhc2VJblNpbmUiLCJjb3MiLCJlYXNlT3V0U2luZSIsImVhc2VJbk91dFNpbmUiLCJlYXNlSW5FeHBvIiwiZWFzZU91dEV4cG8iLCJlYXNlSW5PdXRFeHBvIiwiZWFzZUluQ2lyYyIsImVhc2VPdXRDaXJjIiwiZWFzZUluT3V0Q2lyYyIsImVhc2VJbkVsYXN0aWMiLCJlYXNlT3V0RWxhc3RpYyIsImVhc2VJbk91dEVsYXN0aWMiLCJlYXNlSW5CYWNrIiwiZWFzZU91dEJhY2siLCJlYXNlSW5PdXRCYWNrIiwiZWFzZUluQm91bmNlIiwiZWFzZU91dEJvdW5jZSIsImVhc2VJbk91dEJvdW5jZSIsImlzUGF0dGVybk9yR3JhZGllbnQiLCJnZXRIb3ZlckNvbG9yIiwibnVtYmVycyIsImNvbG9ycyIsImludGxDYWNoZSIsIk1hcCIsImZvcm1hdE51bWJlciIsIm51bSIsImxvY2FsZSIsImNhY2hlS2V5IiwiSlNPTiIsInN0cmluZ2lmeSIsImZvcm1hdHRlciIsImdldCIsIkludGwiLCJOdW1iZXJGb3JtYXQiLCJnZXROdW1iZXJGb3JtYXQiLCJmb3JtYXQiLCJmb3JtYXR0ZXJzIiwidmFsdWVzIiwibnVtZXJpYyIsInRpY2tWYWx1ZSIsInRpY2tzIiwiY2hhcnQiLCJub3RhdGlvbiIsImRlbHRhIiwibWF4VGljayIsImNhbGN1bGF0ZURlbHRhIiwibG9nRGVsdGEiLCJudW1EZWNpbWFsIiwibWluaW11bUZyYWN0aW9uRGlnaXRzIiwibWF4aW11bUZyYWN0aW9uRGlnaXRzIiwibG9nYXJpdGhtaWMiLCJyZW1haW4iLCJzaWduaWZpY2FuZCIsImluY2x1ZGVzIiwiVGlja3MiLCJvdmVycmlkZXMiLCJkZXNjcmlwdG9ycyIsImdldFNjb3BlJDEiLCJub2RlIiwicm9vdCIsInNjb3BlIiwiRGVmYXVsdHMiLCJfZGVzY3JpcHRvcnMiLCJfYXBwbGllcnMiLCJhbmltYXRpb24iLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJDb2xvciIsImRhdGFzZXRzIiwiZGV2aWNlUGl4ZWxSYXRpbyIsImNvbnRleHQiLCJwbGF0Zm9ybSIsImdldERldmljZVBpeGVsUmF0aW8iLCJlbGVtZW50cyIsImV2ZW50cyIsImZvbnQiLCJmYW1pbHkiLCJzdHlsZSIsImxpbmVIZWlnaHQiLCJob3ZlciIsImhvdmVyQmFja2dyb3VuZENvbG9yIiwiY3R4IiwiaG92ZXJCb3JkZXJDb2xvciIsImhvdmVyQ29sb3IiLCJpbmRleEF4aXMiLCJpbnRlcmFjdGlvbiIsIm1vZGUiLCJpbnRlcnNlY3QiLCJpbmNsdWRlSW52aXNpYmxlIiwibWFpbnRhaW5Bc3BlY3RSYXRpbyIsIm9uSG92ZXIiLCJvbkNsaWNrIiwicGFyc2luZyIsInBsdWdpbnMiLCJyZXNwb25zaXZlIiwic2NhbGUiLCJzY2FsZXMiLCJzaG93TGluZSIsImRyYXdBY3RpdmVFbGVtZW50c09uVG9wIiwiZGVzY3JpYmUiLCJvdmVycmlkZSIsInJvdXRlIiwibmFtZSIsInRhcmdldFNjb3BlIiwidGFyZ2V0TmFtZSIsInNjb3BlT2JqZWN0IiwidGFyZ2V0U2NvcGVPYmplY3QiLCJwcml2YXRlTmFtZSIsImRlZmluZVByb3BlcnRpZXMiLCJ3cml0YWJsZSIsImVudW1lcmFibGUiLCJsb2NhbCIsImFwcGxpZXJzIiwiZGVmYXVsdHMiLCJfc2NyaXB0YWJsZSIsInN0YXJ0c1dpdGgiLCJfaW5kZXhhYmxlIiwiX2ZhbGxiYWNrIiwiZGVsYXkiLCJkdXJhdGlvbiIsImVhc2luZyIsImxvb3AiLCJwcm9wZXJ0aWVzIiwiYWN0aXZlIiwicmVzaXplIiwic2hvdyIsImFuaW1hdGlvbnMiLCJ2aXNpYmxlIiwiaGlkZSIsImF1dG9QYWRkaW5nIiwicGFkZGluZyIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwibGVmdCIsImRpc3BsYXkiLCJvZmZzZXQiLCJiZWdpbkF0WmVybyIsImJvdW5kcyIsImdyYWNlIiwiZ3JpZCIsImxpbmVXaWR0aCIsImRyYXdPbkNoYXJ0QXJlYSIsImRyYXdUaWNrcyIsInRpY2tMZW5ndGgiLCJ0aWNrV2lkdGgiLCJfY3R4IiwidGlja0NvbG9yIiwiYm9yZGVyIiwiZGFzaCIsImRhc2hPZmZzZXQiLCJ3aWR0aCIsInRpdGxlIiwidGV4dCIsIm1pblJvdGF0aW9uIiwibWF4Um90YXRpb24iLCJtaXJyb3IiLCJ0ZXh0U3Ryb2tlV2lkdGgiLCJ0ZXh0U3Ryb2tlQ29sb3IiLCJhdXRvU2tpcCIsImF1dG9Ta2lwUGFkZGluZyIsImxhYmVsT2Zmc2V0IiwibWlub3IiLCJtYWpvciIsImNyb3NzQWxpZ24iLCJzaG93TGFiZWxCYWNrZHJvcCIsImJhY2tkcm9wQ29sb3IiLCJiYWNrZHJvcFBhZGRpbmciLCJfbWVhc3VyZVRleHQiLCJkYXRhIiwiZ2MiLCJsb25nZXN0Iiwic3RyaW5nIiwidGV4dFdpZHRoIiwibWVhc3VyZVRleHQiLCJfbG9uZ2VzdFRleHQiLCJhcnJheU9mVGhpbmdzIiwiY2FjaGUiLCJnYXJiYWdlQ29sbGVjdCIsInNhdmUiLCJqbGVuIiwidGhpbmciLCJuZXN0ZWRUaGluZyIsInJlc3RvcmUiLCJnY0xlbiIsIl9hbGlnblBpeGVsIiwicGl4ZWwiLCJjdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyIsImhhbGZXaWR0aCIsImNsZWFyQ2FudmFzIiwiY2FudmFzIiwiZ2V0Q29udGV4dCIsInJlc2V0VHJhbnNmb3JtIiwiY2xlYXJSZWN0IiwiaGVpZ2h0IiwiZHJhd1BvaW50IiwiZHJhd1BvaW50TGVnZW5kIiwieE9mZnNldCIsInlPZmZzZXQiLCJjb3JuZXJSYWRpdXMiLCJ4T2Zmc2V0VyIsInlPZmZzZXRXIiwicG9pbnRTdHlsZSIsInJvdGF0aW9uIiwicmFkaXVzIiwicmFkIiwidHJhbnNsYXRlIiwiZHJhd0ltYWdlIiwiYmVnaW5QYXRoIiwiZWxsaXBzZSIsImFyYyIsImNsb3NlUGF0aCIsIm1vdmVUbyIsImxpbmVUbyIsIlNRUlQxXzIiLCJyZWN0IiwiZmlsbCIsImJvcmRlcldpZHRoIiwic3Ryb2tlIiwiX2lzUG9pbnRJbkFyZWEiLCJwb2ludCIsImFyZWEiLCJtYXJnaW4iLCJjbGlwQXJlYSIsImNsaXAiLCJ1bmNsaXBBcmVhIiwiX3N0ZXBwZWRMaW5lVG8iLCJwcmV2aW91cyIsImZsaXAiLCJtaWRwb2ludCIsIl9iZXppZXJDdXJ2ZVRvIiwiYmV6aWVyQ3VydmVUbyIsImNwMXgiLCJjcDJ4IiwiY3AxeSIsImNwMnkiLCJyZW5kZXJUZXh0Iiwib3B0cyIsImxpbmVzIiwic3Ryb2tlV2lkdGgiLCJzdHJva2VDb2xvciIsImxpbmUiLCJ0cmFuc2xhdGlvbiIsImZpbGxTdHlsZSIsInRleHRBbGlnbiIsInRleHRCYXNlbGluZSIsInNldFJlbmRlck9wdHMiLCJiYWNrZHJvcCIsImRyYXdCYWNrZHJvcCIsInN0cm9rZVN0eWxlIiwic3Ryb2tlVGV4dCIsIm1heFdpZHRoIiwiZmlsbFRleHQiLCJkZWNvcmF0ZVRleHQiLCJzdHJpa2V0aHJvdWdoIiwidW5kZXJsaW5lIiwibWV0cmljcyIsImFjdHVhbEJvdW5kaW5nQm94TGVmdCIsImFjdHVhbEJvdW5kaW5nQm94UmlnaHQiLCJhY3R1YWxCb3VuZGluZ0JveEFzY2VudCIsImFjdHVhbEJvdW5kaW5nQm94RGVzY2VudCIsInlEZWNvcmF0aW9uIiwiZGVjb3JhdGlvbldpZHRoIiwib2xkQ29sb3IiLCJmaWxsUmVjdCIsImFkZFJvdW5kZWRSZWN0UGF0aCIsInRvcExlZnQiLCJib3R0b21MZWZ0IiwiYm90dG9tUmlnaHQiLCJ0b3BSaWdodCIsIkxJTkVfSEVJR0hUIiwiRk9OVF9TVFlMRSIsInRvTGluZUhlaWdodCIsIm1hdGNoZXMiLCJtYXRjaCIsIm51bWJlck9yWmVybyIsIl9yZWFkVmFsdWVUb1Byb3BzIiwicHJvcHMiLCJvYmpQcm9wcyIsInJlYWQiLCJwcm9wIiwidG9UUkJMIiwidG9UUkJMQ29ybmVycyIsInRvUGFkZGluZyIsInRvRm9udCIsImZhbGxiYWNrIiwiY29uc29sZSIsIndhcm4iLCJ0b0ZvbnRTdHJpbmciLCJyZXNvbHZlIiwiaW5wdXRzIiwiaW5mbyIsImNhY2hlYWJsZSIsImNyZWF0ZUNvbnRleHQiLCJwYXJlbnRDb250ZXh0IiwiX2NyZWF0ZVJlc29sdmVyIiwic2NvcGVzIiwicHJlZml4ZXMiLCJyb290U2NvcGVzIiwiZ2V0VGFyZ2V0IiwiX3Jlc29sdmUiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsIl9jYWNoZWFibGUiLCJfc2NvcGVzIiwiX3Jvb3RTY29wZXMiLCJfZ2V0VGFyZ2V0IiwiUHJveHkiLCJkZWxldGVQcm9wZXJ0eSIsIl9rZXlzIiwiX2NhY2hlZCIsInByb3h5IiwicHJlZml4IiwicmVhZEtleSIsIm5lZWRzU3ViUmVzb2x2ZXIiLCJjcmVhdGVTdWJSZXNvbHZlciIsIl9yZXNvbHZlV2l0aFByZWZpeGVzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiUmVmbGVjdCIsImdldFByb3RvdHlwZU9mIiwiZ2V0S2V5c0Zyb21BbGxTY29wZXMiLCJvd25LZXlzIiwic3RvcmFnZSIsIl9zdG9yYWdlIiwiX2F0dGFjaENvbnRleHQiLCJzdWJQcm94eSIsImRlc2NyaXB0b3JEZWZhdWx0cyIsIl9wcm94eSIsIl9jb250ZXh0IiwiX3N1YlByb3h5IiwiX3N0YWNrIiwic2V0Q29udGV4dCIsInJlY2VpdmVyIiwiaXNTY3JpcHRhYmxlIiwiRXJyb3IiLCJqb2luIiwiZGVsZXRlIiwiX3Jlc29sdmVTY3JpcHRhYmxlIiwiaXNJbmRleGFibGUiLCJhcnIiLCJmaWx0ZXIiLCJfcmVzb2x2ZUFycmF5IiwiX3Jlc29sdmVXaXRoQ29udGV4dCIsImFsbEtleXMiLCJjb25maWd1cmFibGUiLCJzY3JpcHRhYmxlIiwiaW5kZXhhYmxlIiwiX2FsbEtleXMiLCJyZXNvbHZlRmFsbGJhY2siLCJnZXRTY29wZSIsInBhcmVudCIsImFkZFNjb3BlcyIsInBhcmVudFNjb3BlcyIsInBhcmVudEZhbGxiYWNrIiwiYWxsU2NvcGVzIiwiYWRkU2NvcGVzRnJvbUtleSIsInN1YkdldFRhcmdldCIsInJlc29sdmVLZXlzRnJvbUFsbFNjb3BlcyIsIl9wYXJzZU9iamVjdERhdGFSYWRpYWxTY2FsZSIsIl9wYXJzaW5nIiwicGFyc2VkIiwicGFyc2UiLCJFUFNJTE9OIiwiZ2V0UG9pbnQiLCJza2lwIiwiZ2V0VmFsdWVBeGlzIiwic3BsaW5lQ3VydmUiLCJmaXJzdFBvaW50IiwibWlkZGxlUG9pbnQiLCJhZnRlclBvaW50IiwibmV4dCIsImQwMSIsImQxMiIsInMwMSIsInMxMiIsImZhIiwiZmIiLCJjYXBDb250cm9sUG9pbnQiLCJwdCIsIl91cGRhdGVCZXppZXJDb250cm9sUG9pbnRzIiwiY29udHJvbFBvaW50cyIsInNwYW5HYXBzIiwiY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSIsInZhbHVlQXhpcyIsInBvaW50c0xlbiIsImRlbHRhSyIsIm1LIiwicG9pbnRCZWZvcmUiLCJwb2ludEN1cnJlbnQiLCJwb2ludEFmdGVyIiwic2xvcGVEZWx0YSIsImFscGhhSyIsImJldGFLIiwidGF1SyIsInNxdWFyZWRNYWduaXR1ZGUiLCJtb25vdG9uZUFkanVzdCIsImlQaXhlbCIsInZQaXhlbCIsIm1vbm90b25lQ29tcHV0ZSIsInNwbGluZUN1cnZlTW9ub3RvbmUiLCJwcmV2IiwidGVuc2lvbiIsImNhcEJlemllclBvaW50cyIsImluQXJlYSIsImluQXJlYVByZXYiLCJpbkFyZWFOZXh0IiwiX2lzRG9tU3VwcG9ydGVkIiwiZG9jdW1lbnQiLCJfZ2V0UGFyZW50Tm9kZSIsImRvbU5vZGUiLCJwYXJlbnROb2RlIiwiaG9zdCIsInBhcnNlTWF4U3R5bGUiLCJzdHlsZVZhbHVlIiwicGFyZW50UHJvcGVydHkiLCJ2YWx1ZUluUGl4ZWxzIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImVsZW1lbnQiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJwb3NpdGlvbnMiLCJnZXRQb3NpdGlvbmVkU3R5bGUiLCJzdHlsZXMiLCJzdWZmaXgiLCJyZXN1bHQiLCJwb3MiLCJ1c2VPZmZzZXRQb3MiLCJzaGFkb3dSb290IiwiZ2V0UmVsYXRpdmVQb3NpdGlvbiIsImV2ZW50IiwiYm9yZGVyQm94IiwiYm94U2l6aW5nIiwicGFkZGluZ3MiLCJib3JkZXJzIiwiYm94IiwidG91Y2hlcyIsIm9mZnNldFgiLCJvZmZzZXRZIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xpZW50WCIsImNsaWVudFkiLCJnZXRDYW52YXNQb3NpdGlvbiIsInJvdW5kMSIsInJldGluYVNjYWxlIiwiZm9yY2VSYXRpbyIsImZvcmNlU3R5bGUiLCJwaXhlbFJhdGlvIiwiZGV2aWNlSGVpZ2h0IiwiZGV2aWNlV2lkdGgiLCJzZXRUcmFuc2Zvcm0iLCJzdXBwb3J0c0V2ZW50TGlzdGVuZXJPcHRpb25zIiwicGFzc2l2ZVN1cHBvcnRlZCIsInBhc3NpdmUiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlYWRVc2VkU2l6ZSIsImVsIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImdldFN0eWxlIiwiX3BvaW50SW5MaW5lIiwiX3N0ZXBwZWRJbnRlcnBvbGF0aW9uIiwiX2JlemllckludGVycG9sYXRpb24iLCJjcDEiLCJjcDIiLCJnZXRSdGxBZGFwdGVyIiwicnRsIiwicmVjdFgiLCJzZXRXaWR0aCIsInhQbHVzIiwibGVmdEZvckx0ciIsIml0ZW1XaWR0aCIsImdldFJpZ2h0VG9MZWZ0QWRhcHRlciIsIl9pdGVtV2lkdGgiLCJvdmVycmlkZVRleHREaXJlY3Rpb24iLCJkaXJlY3Rpb24iLCJvcmlnaW5hbCIsImdldFByb3BlcnR5UHJpb3JpdHkiLCJzZXRQcm9wZXJ0eSIsInByZXZUZXh0RGlyZWN0aW9uIiwicmVzdG9yZVRleHREaXJlY3Rpb24iLCJwcm9wZXJ0eUZuIiwiYmV0d2VlbiIsImNvbXBhcmUiLCJub3JtYWxpemUiLCJub3JtYWxpemVTZWdtZW50IiwiX2JvdW5kU2VnbWVudCIsInNlZ21lbnQiLCJzdGFydEJvdW5kIiwiZW5kQm91bmQiLCJnZXRTZWdtZW50IiwicHJldlZhbHVlIiwiaW5zaWRlIiwic3ViU3RhcnQiLCJfYm91bmRTZWdtZW50cyIsInNlZ21lbnRzIiwic3ViIiwicmVhZFN0eWxlIiwiYm9yZGVyQ2FwU3R5bGUiLCJib3JkZXJEYXNoIiwiYm9yZGVyRGFzaE9mZnNldCIsImJvcmRlckpvaW5TdHlsZSIsInN0eWxlQ2hhbmdlZCIsInByZXZTdHlsZSIsIkFuaW1hdG9yIiwiX3JlcXVlc3QiLCJfY2hhcnRzIiwiX3J1bm5pbmciLCJfbGFzdERhdGUiLCJfbm90aWZ5IiwiYW5pbXMiLCJkYXRlIiwiY2FsbGJhY2tzIiwibnVtU3RlcHMiLCJpbml0aWFsIiwiY3VycmVudFN0ZXAiLCJfcmVmcmVzaCIsIl91cGRhdGUiLCJEYXRlIiwibm93IiwicmVtYWluaW5nIiwicnVubmluZyIsImRyYXciLCJfYWN0aXZlIiwiX3RvdGFsIiwidGljayIsInBvcCIsIl9nZXRBbmltcyIsImNoYXJ0cyIsImNvbXBsZXRlIiwicHJvZ3Jlc3MiLCJsaXN0ZW4iLCJjYiIsInJlZHVjZSIsImFjYyIsImN1ciIsIl9kdXJhdGlvbiIsInN0b3AiLCJjYW5jZWwiLCJyZW1vdmUiLCJhbmltYXRvciIsImludGVycG9sYXRvcnMiLCJib29sZWFuIiwiZmFjdG9yIiwiYzAiLCJudW1iZXIiLCJBbmltYXRpb24iLCJjZmciLCJjdXJyZW50VmFsdWUiLCJfZm4iLCJfZWFzaW5nIiwiX3N0YXJ0IiwiX2xvb3AiLCJfdGFyZ2V0IiwiX3Byb3AiLCJfZnJvbSIsIl90byIsIl9wcm9taXNlcyIsInVwZGF0ZSIsImVsYXBzZWQiLCJ3YWl0IiwicHJvbWlzZXMiLCJQcm9taXNlIiwicmVzIiwicmVqIiwicmVzb2x2ZWQiLCJtZXRob2QiLCJBbmltYXRpb25zIiwiY29uZmlnIiwiX2NoYXJ0IiwiX3Byb3BlcnRpZXMiLCJjb25maWd1cmUiLCJhbmltYXRpb25PcHRpb25zIiwiYW5pbWF0ZWRQcm9wcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJvcHRpb24iLCJfYW5pbWF0ZU9wdGlvbnMiLCJuZXdPcHRpb25zIiwiJHNoYXJlZCIsIiRhbmltYXRpb25zIiwicmVzb2x2ZVRhcmdldE9wdGlvbnMiLCJfY3JlYXRlQW5pbWF0aW9ucyIsImFuaW0iLCJhbGwiLCJhd2FpdEFsbCIsInRoZW4iLCJzY2FsZUNsaXAiLCJhbGxvd2VkT3ZlcmZsb3ciLCJnZXRTb3J0ZWREYXRhc2V0SW5kaWNlcyIsImZpbHRlclZpc2libGUiLCJtZXRhc2V0cyIsIl9nZXRTb3J0ZWREYXRhc2V0TWV0YXMiLCJhcHBseVN0YWNrIiwic3RhY2siLCJkc0luZGV4Iiwic2luZ2xlTW9kZSIsIm90aGVyVmFsdWUiLCJpc1N0YWNrZWQiLCJzdGFja2VkIiwiZ2V0T3JDcmVhdGVTdGFjayIsInN0YWNrcyIsInN0YWNrS2V5IiwiaW5kZXhWYWx1ZSIsInN1YlN0YWNrIiwiZ2V0TGFzdEluZGV4SW5TdGFjayIsInZTY2FsZSIsInBvc2l0aXZlIiwiZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXMiLCJ1cGRhdGVTdGFja3MiLCJjb250cm9sbGVyIiwiX2NhY2hlZE1ldGEiLCJfc3RhY2tzIiwiaUF4aXMiLCJ2QXhpcyIsImluZGV4U2NhbGUiLCJ2YWx1ZVNjYWxlIiwiZ2V0U3RhY2tLZXkiLCJfdG9wIiwiX2JvdHRvbSIsIl92aXN1YWxWYWx1ZXMiLCJnZXRGaXJzdFNjYWxlSWQiLCJzaGlmdCIsImNsZWFyU3RhY2tzIiwiaXNEaXJlY3RVcGRhdGVNb2RlIiwiY2xvbmVJZk5vdFNoYXJlZCIsImNhY2hlZCIsInNoYXJlZCIsIkRhdGFzZXRDb250cm9sbGVyIiwic3RhdGljIiwiX2NhY2hlZERhdGFPcHRzIiwiZ2V0TWV0YSIsIl90eXBlIiwiX2RhdGEiLCJfb2JqZWN0RGF0YSIsIl9zaGFyZWRPcHRpb25zIiwiX2RyYXdTdGFydCIsIl9kcmF3Q291bnQiLCJlbmFibGVPcHRpb25TaGFyaW5nIiwic3VwcG9ydHNEZWNpbWF0aW9uIiwiJGNvbnRleHQiLCJfc3luY0xpc3QiLCJkYXRhc2V0RWxlbWVudFR5cGUiLCJkYXRhRWxlbWVudFR5cGUiLCJpbml0aWFsaXplIiwibGlua1NjYWxlcyIsIl9zdGFja2VkIiwiYWRkRWxlbWVudHMiLCJpc1BsdWdpbkVuYWJsZWQiLCJ1cGRhdGVJbmRleCIsImRhdGFzZXQiLCJnZXREYXRhc2V0IiwiY2hvb3NlSWQiLCJ4aWQiLCJ4QXhpc0lEIiwieWlkIiwieUF4aXNJRCIsInJpZCIsInJBeGlzSUQiLCJpaWQiLCJpQXhpc0lEIiwidmlkIiwidkF4aXNJRCIsImdldFNjYWxlRm9ySWQiLCJyU2NhbGUiLCJnZXREYXRhc2V0TWV0YSIsInNjYWxlSUQiLCJfZ2V0T3RoZXJTY2FsZSIsInJlc2V0IiwiX2Rlc3Ryb3kiLCJfZGF0YUNoZWNrIiwiYWRhdGEiLCJjb252ZXJ0T2JqZWN0RGF0YVRvQXJyYXkiLCJpc0V4dGVuc2libGUiLCJkZWZpbmVQcm9wZXJ0eSIsImJhc2UiLCJvYmplY3QiLCJidWlsZE9yVXBkYXRlRWxlbWVudHMiLCJyZXNldE5ld0VsZW1lbnRzIiwic3RhY2tDaGFuZ2VkIiwib2xkU3RhY2tlZCIsIl9yZXN5bmNFbGVtZW50cyIsInNjb3BlS2V5cyIsImRhdGFzZXRTY29wZUtleXMiLCJnZXRPcHRpb25TY29wZXMiLCJjcmVhdGVSZXNvbHZlciIsInNvcnRlZCIsInBhcnNlQXJyYXlEYXRhIiwicGFyc2VPYmplY3REYXRhIiwicGFyc2VQcmltaXRpdmVEYXRhIiwiaXNOb3RJbk9yZGVyQ29tcGFyZWRUb1ByZXYiLCJsYWJlbHMiLCJnZXRMYWJlbHMiLCJzaW5nbGVTY2FsZSIsInhBeGlzS2V5IiwieUF4aXNLZXkiLCJnZXRQYXJzZWQiLCJnZXREYXRhRWxlbWVudCIsInVwZGF0ZVJhbmdlRnJvbVBhcnNlZCIsInBhcnNlZFZhbHVlIiwiTmFOIiwiZ2V0TWluTWF4IiwiY2FuU3RhY2siLCJvdGhlclNjYWxlIiwiaGlkZGVuIiwiY3JlYXRlU3RhY2siLCJORUdBVElWRV9JTkZJTklUWSIsIm90aGVyTWluIiwib3RoZXJNYXgiLCJfc2tpcCIsImdldEFsbFBhcnNlZFZhbHVlcyIsImdldE1heE92ZXJmbG93IiwiZ2V0TGFiZWxBbmRWYWx1ZSIsImxhYmVsIiwiZ2V0TGFiZWxGb3JWYWx1ZSIsIl9jbGlwIiwiZGlzYWJsZWQiLCJ0b0NsaXAiLCJkZWZhdWx0Q2xpcCIsImNoYXJ0QXJlYSIsInJlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMiLCJyZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zIiwiZGF0YUluZGV4IiwicmF3IiwiY3JlYXRlRGF0YUNvbnRleHQiLCJjcmVhdGVEYXRhc2V0Q29udGV4dCIsIl9yZXNvbHZlRWxlbWVudE9wdGlvbnMiLCJlbGVtZW50VHlwZSIsInNoYXJpbmciLCJkYXRhc2V0RWxlbWVudFNjb3BlS2V5cyIsInJlc29sdmVOYW1lZE9wdGlvbnMiLCJmcmVlemUiLCJfcmVzb2x2ZUFuaW1hdGlvbnMiLCJ0cmFuc2l0aW9uIiwiZGF0YXNldEFuaW1hdGlvblNjb3BlS2V5cyIsImdldFNoYXJlZE9wdGlvbnMiLCJpbmNsdWRlT3B0aW9ucyIsInNoYXJlZE9wdGlvbnMiLCJfYW5pbWF0aW9uc0Rpc2FibGVkIiwiX2dldFNoYXJlZE9wdGlvbnMiLCJmaXJzdE9wdHMiLCJwcmV2aW91c2x5U2hhcmVkT3B0aW9ucyIsInVwZGF0ZVNoYXJlZE9wdGlvbnMiLCJ1cGRhdGVFbGVtZW50IiwiX3NldFN0eWxlIiwicmVtb3ZlSG92ZXJTdHlsZSIsInNldEhvdmVyU3R5bGUiLCJfcmVtb3ZlRGF0YXNldEhvdmVyU3R5bGUiLCJfc2V0RGF0YXNldEhvdmVyU3R5bGUiLCJhcmcxIiwiYXJnMiIsIm51bU1ldGEiLCJudW1EYXRhIiwiX2luc2VydEVsZW1lbnRzIiwiX3JlbW92ZUVsZW1lbnRzIiwibW92ZSIsInVwZGF0ZUVsZW1lbnRzIiwicmVtb3ZlZCIsIl9zeW5jIiwiX2RhdGFDaGFuZ2VzIiwiX29uRGF0YVB1c2giLCJhcmd1bWVudHMiLCJfb25EYXRhUG9wIiwiX29uRGF0YVNoaWZ0IiwiX29uRGF0YVNwbGljZSIsIm5ld0NvdW50IiwiX29uRGF0YVVuc2hpZnQiLCJjb21wdXRlTWluU2FtcGxlU2l6ZSIsIl9jYWNoZSIsIiRiYXIiLCJ2aXNpYmxlTWV0YXMiLCJjb25jYXQiLCJzb3J0IiwiZ2V0QWxsU2NhbGVWYWx1ZXMiLCJjdXJyIiwiX2xlbmd0aCIsInVwZGF0ZU1pbkFuZFByZXYiLCJnZXRQaXhlbEZvclRpY2siLCJwYXJzZVZhbHVlIiwiZW50cnkiLCJzdGFydFZhbHVlIiwiZW5kVmFsdWUiLCJiYXJTdGFydCIsImJhckVuZCIsIl9jdXN0b20iLCJwYXJzZUZsb2F0QmFyIiwicGFyc2VBcnJheU9yUHJpbWl0aXZlIiwiaXNGbG9hdEJhciIsImN1c3RvbSIsInNldEJvcmRlclNraXBwZWQiLCJlZGdlIiwiYm9yZGVyU2tpcHBlZCIsImhvcml6b250YWwiLCJib3JkZXJQcm9wcyIsImVuYWJsZUJvcmRlclJhZGl1cyIsInBhcnNlRWRnZSIsIm9yaWciLCJ2MiIsInN0YXJ0RW5kIiwic2V0SW5mbGF0ZUFtb3VudCIsImluZmxhdGVBbW91bnQiLCJCYXJDb250cm9sbGVyIiwiY2F0ZWdvcnlQZXJjZW50YWdlIiwiYmFyUGVyY2VudGFnZSIsImdyb3VwZWQiLCJfaW5kZXhfIiwiX3ZhbHVlXyIsImlBeGlzS2V5IiwidkF4aXNLZXkiLCJzdXBlciIsImJhcnMiLCJnZXRCYXNlUGl4ZWwiLCJpc0hvcml6b250YWwiLCJydWxlciIsIl9nZXRSdWxlciIsInZwaXhlbHMiLCJoZWFkIiwiX2NhbGN1bGF0ZUJhclZhbHVlUGl4ZWxzIiwiaXBpeGVscyIsIl9jYWxjdWxhdGVCYXJJbmRleFBpeGVscyIsImNlbnRlciIsIl9nZXRTdGFja3MiLCJza2lwTnVsbCIsIl9nZXRTdGFja0NvdW50IiwiX2dldFN0YWNrSW5kZXgiLCJwaXhlbHMiLCJiYXJUaGlja25lc3MiLCJfc3RhcnRQaXhlbCIsIl9lbmRQaXhlbCIsInN0YWNrQ291bnQiLCJiYXNlVmFsdWUiLCJtaW5CYXJMZW5ndGgiLCJhY3R1YWxCYXNlIiwiZmxvYXRpbmciLCJnZXREYXRhVmlzaWJpbGl0eSIsImJhclNpZ24iLCJzdGFydFBpeGVsIiwiZ2V0UGl4ZWxGb3JEZWNpbWFsIiwiZW5kUGl4ZWwiLCJnZXRWYWx1ZUZvclBpeGVsIiwiaGFsZkdyaWQiLCJnZXRMaW5lV2lkdGhGb3JWYWx1ZSIsIm1heEJhclRoaWNrbmVzcyIsIkluZmluaXR5IiwicGVyY2VudCIsImNodW5rIiwiY29tcHV0ZUZsZXhDYXRlZ29yeVRyYWl0cyIsInRoaWNrbmVzcyIsImNvbXB1dGVGaXRDYXRlZ29yeVRyYWl0cyIsInN0YWNrSW5kZXgiLCJyZWN0cyIsIkJ1YmJsZUNvbnRyb2xsZXIiLCJEb3VnaG51dENvbnRyb2xsZXIiLCJhbmltYXRlUm90YXRlIiwiYW5pbWF0ZVNjYWxlIiwiY3V0b3V0IiwiY2lyY3VtZmVyZW5jZSIsInNwYWNpbmciLCJhc3BlY3RSYXRpbyIsImxlZ2VuZCIsImdlbmVyYXRlTGFiZWxzIiwiZm9udENvbG9yIiwibGVnZW5kSXRlbSIsInRvZ2dsZURhdGFWaXNpYmlsaXR5IiwiaW5uZXJSYWRpdXMiLCJvdXRlclJhZGl1cyIsImdldHRlciIsIl9nZXRSb3RhdGlvbiIsIl9nZXRDaXJjdW1mZXJlbmNlIiwiX2dldFJvdGF0aW9uRXh0ZW50cyIsImlzRGF0YXNldFZpc2libGUiLCJhcmNzIiwiZ2V0TWF4Qm9yZGVyV2lkdGgiLCJnZXRNYXhPZmZzZXQiLCJtYXhTaXplIiwiY2hhcnRXZWlnaHQiLCJfZ2V0UmluZ1dlaWdodCIsInJhdGlvWCIsInJhdGlvWSIsInN0YXJ0QW5nbGUiLCJlbmRBbmdsZSIsInN0YXJ0WCIsInN0YXJ0WSIsImVuZFgiLCJlbmRZIiwiY2FsY01heCIsImNhbGNNaW4iLCJtYXhYIiwibWF4WSIsIm1pblgiLCJtaW5ZIiwiZ2V0UmF0aW9BbmRPZmZzZXQiLCJtYXhIZWlnaHQiLCJtYXhSYWRpdXMiLCJyYWRpdXNMZW5ndGgiLCJfZ2V0VmlzaWJsZURhdGFzZXRXZWlnaHRUb3RhbCIsInRvdGFsIiwiY2FsY3VsYXRlVG90YWwiLCJfZ2V0UmluZ1dlaWdodE9mZnNldCIsIl9jaXJjdW1mZXJlbmNlIiwiY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZSIsImFuaW1hdGlvbk9wdHMiLCJjZW50ZXJYIiwiY2VudGVyWSIsIm1ldGFEYXRhIiwiYm9yZGVyQWxpZ24iLCJob3ZlckJvcmRlcldpZHRoIiwiaG92ZXJPZmZzZXQiLCJyaW5nV2VpZ2h0T2Zmc2V0IiwiTGluZUNvbnRyb2xsZXIiLCJfZGF0YXNldCIsIl9kYXRhc2V0SW5kZXgiLCJfZGVjaW1hdGVkIiwiYW5pbWF0ZWQiLCJtYXhHYXBMZW5ndGgiLCJkaXJlY3RVcGRhdGUiLCJwb2ludHNDb3VudCIsInByZXZQYXJzZWQiLCJudWxsRGF0YSIsImxhc3RQb2ludCIsInVwZGF0ZUNvbnRyb2xQb2ludHMiLCJQb2xhckFyZWFDb250cm9sbGVyIiwiYW5nbGVMaW5lcyIsImNpcmN1bGFyIiwicG9pbnRMYWJlbHMiLCJiaW5kIiwiX3VwZGF0ZVJhZGl1cyIsIm1pblNpemUiLCJjdXRvdXRQZXJjZW50YWdlIiwiZ2V0VmlzaWJsZURhdGFzZXRDb3VudCIsInhDZW50ZXIiLCJ5Q2VudGVyIiwiZGF0YXNldFN0YXJ0QW5nbGUiLCJnZXRJbmRleEFuZ2xlIiwiZGVmYXVsdEFuZ2xlIiwiY291bnRWaXNpYmxlRWxlbWVudHMiLCJfY29tcHV0ZUFuZ2xlIiwiZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUiLCJQaWVDb250cm9sbGVyIiwiUmFkYXJDb250cm9sbGVyIiwiX2Z1bGxMb29wIiwicG9pbnRQb3NpdGlvbiIsImdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZSIsIlNjYXR0ZXJDb250cm9sbGVyIiwicmVnaXN0cnkiLCJnZXRFbGVtZW50IiwiY29udHJvbGxlcnMiLCJfX3Byb3RvX18iLCJEYXRlQWRhcHRlckJhc2UiLCJtZW1iZXJzIiwiaW5pdCIsImZvcm1hdHMiLCJkaWZmIiwic3RhcnRPZiIsImVuZE9mIiwiYWRhcHRlcnMiLCJfZGF0ZSIsImJpbmFyeVNlYXJjaCIsIm1ldGFzZXQiLCJsb29rdXBNZXRob2QiLCJfcmV2ZXJzZVBpeGVscyIsImdldFJhbmdlIiwiZXZhbHVhdGVJbnRlcmFjdGlvbkl0ZW1zIiwicG9zaXRpb24iLCJoYW5kbGVyIiwiZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcyIsImdldEludGVyc2VjdEl0ZW1zIiwidXNlRmluYWxQb3NpdGlvbiIsImlzUG9pbnRJbkFyZWEiLCJpblJhbmdlIiwiZ2V0TmVhcmVzdEl0ZW1zIiwiZGlzdGFuY2VNZXRyaWMiLCJ1c2VYIiwidXNlWSIsImRlbHRhWCIsImRlbHRhWSIsImdldERpc3RhbmNlTWV0cmljRm9yQXhpcyIsIm1pbkRpc3RhbmNlIiwiZ2V0Q2VudGVyUG9pbnQiLCJnZXROZWFyZXN0Q2FydGVzaWFuSXRlbXMiLCJnZXRQcm9wcyIsImdldE5lYXJlc3RSYWRpYWxJdGVtcyIsImdldEF4aXNJdGVtcyIsInJhbmdlTWV0aG9kIiwiaW50ZXJzZWN0c0l0ZW0iLCJJbnRlcmFjdGlvbiIsIm1vZGVzIiwibmVhcmVzdCIsIlNUQVRJQ19QT1NJVElPTlMiLCJmaWx0ZXJCeVBvc2l0aW9uIiwiZmlsdGVyRHluYW1pY1Bvc2l0aW9uQnlBeGlzIiwic29ydEJ5V2VpZ2h0IiwiZ2V0Q29tYmluZWRNYXgiLCJtYXhQYWRkaW5nIiwidXBkYXRlTWF4UGFkZGluZyIsImJveFBhZGRpbmciLCJ1cGRhdGVEaW1zIiwicGFyYW1zIiwibGF5b3V0IiwiZ2V0UGFkZGluZyIsIm5ld1dpZHRoIiwib3V0ZXJXaWR0aCIsIm5ld0hlaWdodCIsIm91dGVySGVpZ2h0Iiwid2lkdGhDaGFuZ2VkIiwiaGVpZ2h0Q2hhbmdlZCIsInNhbWUiLCJvdGhlciIsImdldE1hcmdpbnMiLCJtYXJnaW5Gb3JQb3NpdGlvbnMiLCJmaXRCb3hlcyIsImJveGVzIiwicmVmaXRCb3hlcyIsInJlZml0IiwiZnVsbFNpemUiLCJzZXRCb3hEaW1zIiwicGxhY2VCb3hlcyIsInVzZXJQYWRkaW5nIiwicGxhY2VkIiwic3RhY2tXZWlnaHQiLCJoZWlnaHQxIiwid2lkdGgxIiwibGF5b3V0cyIsImFkZEJveCIsIl9sYXllcnMiLCJ6IiwicmVtb3ZlQm94IiwibGF5b3V0SXRlbSIsIm1pblBhZGRpbmciLCJhdmFpbGFibGVXaWR0aCIsImF2YWlsYWJsZUhlaWdodCIsImxheW91dEJveGVzIiwid3JhcEJveGVzIiwid3JhcCIsImNlbnRlckhvcml6b250YWwiLCJjZW50ZXJWZXJ0aWNhbCIsImxlZnRBbmRUb3AiLCJyaWdodEFuZEJvdHRvbSIsInZlcnRpY2FsIiwiYnVpbGRMYXlvdXRCb3hlcyIsInZlcnRpY2FsQm94ZXMiLCJob3Jpem9udGFsQm94ZXMiLCJiZWZvcmVMYXlvdXQiLCJ2aXNpYmxlVmVydGljYWxCb3hDb3VudCIsInZCb3hNYXhXaWR0aCIsImhCb3hNYXhIZWlnaHQiLCJidWlsZFN0YWNrcyIsInNldExheW91dERpbXMiLCJ1cGRhdGVQb3MiLCJjaGFuZ2UiLCJoYW5kbGVNYXhQYWRkaW5nIiwiQmFzZVBsYXRmb3JtIiwiYWNxdWlyZUNvbnRleHQiLCJyZWxlYXNlQ29udGV4dCIsImdldE1heGltdW1TaXplIiwiaXNBdHRhY2hlZCIsInVwZGF0ZUNvbmZpZyIsIkJhc2ljUGxhdGZvcm0iLCJFWFBBTkRPX0tFWSIsIkVWRU5UX1RZUEVTIiwidG91Y2hzdGFydCIsInRvdWNobW92ZSIsInRvdWNoZW5kIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmRvd24iLCJwb2ludGVybW92ZSIsInBvaW50ZXJ1cCIsInBvaW50ZXJsZWF2ZSIsInBvaW50ZXJvdXQiLCJpc051bGxPckVtcHR5IiwiZXZlbnRMaXN0ZW5lck9wdGlvbnMiLCJyZW1vdmVMaXN0ZW5lciIsIm5vZGVMaXN0Q29udGFpbnMiLCJub2RlTGlzdCIsImNvbnRhaW5zIiwiY3JlYXRlQXR0YWNoT2JzZXJ2ZXIiLCJvYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJlbnRyaWVzIiwidHJpZ2dlciIsImFkZGVkTm9kZXMiLCJyZW1vdmVkTm9kZXMiLCJvYnNlcnZlIiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsImNyZWF0ZURldGFjaE9ic2VydmVyIiwiZHJwTGlzdGVuaW5nQ2hhcnRzIiwib2xkRGV2aWNlUGl4ZWxSYXRpbyIsIm9uV2luZG93UmVzaXplIiwiZHByIiwiY3JlYXRlUmVzaXplT2JzZXJ2ZXIiLCJjb250YWluZXIiLCJjbGllbnRXaWR0aCIsIlJlc2l6ZU9ic2VydmVyIiwiY29udGVudFJlY3QiLCJsaXN0ZW5EZXZpY2VQaXhlbFJhdGlvQ2hhbmdlcyIsInJlbGVhc2VPYnNlcnZlciIsImRpc2Nvbm5lY3QiLCJ1bmxpc3RlbkRldmljZVBpeGVsUmF0aW9DaGFuZ2VzIiwiY3JlYXRlUHJveHlBbmRMaXN0ZW4iLCJuYXRpdmUiLCJmcm9tTmF0aXZlRXZlbnQiLCJhZGRMaXN0ZW5lciIsIkRvbVBsYXRmb3JtIiwicmVuZGVySGVpZ2h0IiwiZ2V0QXR0cmlidXRlIiwicmVuZGVyV2lkdGgiLCJkaXNwbGF5V2lkdGgiLCJkaXNwbGF5SGVpZ2h0IiwiaW5pdENhbnZhcyIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInByb3hpZXMiLCIkcHJveGllcyIsImF0dGFjaCIsImRldGFjaCIsImJiV2lkdGgiLCJiYkhlaWdodCIsIm1hcmdpbnMiLCJjb250YWluZXJTaXplIiwiY29udGFpbmVyU3R5bGUiLCJjb250YWluZXJCb3JkZXIiLCJjb250YWluZXJQYWRkaW5nIiwiY2xpZW50SGVpZ2h0IiwiZ2V0Q29udGFpbmVyU2l6ZSIsImlzQ29ubmVjdGVkIiwiX2RldGVjdFBsYXRmb3JtIiwiT2Zmc2NyZWVuQ2FudmFzIiwiRWxlbWVudCIsInRvb2x0aXBQb3NpdGlvbiIsImhhc1ZhbHVlIiwiZmluYWwiLCJuZXdUaWNrcyIsIm1ham9yU3RhcnQiLCJtYWpvckVuZCIsImNlaWwiLCJvZmZzZXRGcm9tRWRnZSIsImdldFRpY2tzTGltaXQiLCJ0aWNrc0xlbmd0aCIsIm1heFRpY2tzTGltaXQiLCJzYW1wbGUiLCJudW1JdGVtcyIsImluY3JlbWVudCIsImdldFBpeGVsRm9yR3JpZExpbmUiLCJvZmZzZXRHcmlkTGluZXMiLCJ2YWxpZEluZGV4IiwibGluZVZhbHVlIiwiZ2V0VGlja01hcmtMZW5ndGgiLCJnZXRUaXRsZUhlaWdodCIsInRpdGxlQWxpZ24iLCJyZXZlcnNlQWxpZ24iLCJTY2FsZSIsIl9tYXJnaW5zIiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsImxhYmVsUm90YXRpb24iLCJfcmFuZ2UiLCJfZ3JpZExpbmVJdGVtcyIsIl9sYWJlbEl0ZW1zIiwiX2xhYmVsU2l6ZXMiLCJfbWF4TGVuZ3RoIiwiX2xvbmdlc3RUZXh0Q2FjaGUiLCJfdXNlck1heCIsIl91c2VyTWluIiwiX3N1Z2dlc3RlZE1heCIsIl9zdWdnZXN0ZWRNaW4iLCJfdGlja3NMZW5ndGgiLCJfYm9yZGVyVmFsdWUiLCJfZGF0YUxpbWl0c0NhY2hlZCIsInN1Z2dlc3RlZE1pbiIsInN1Z2dlc3RlZE1heCIsIm1ldGFzIiwiZ2V0VGlja3MiLCJ4TGFiZWxzIiwieUxhYmVscyIsImdldExhYmVsSXRlbXMiLCJfY29tcHV0ZUxhYmVsSXRlbXMiLCJiZWZvcmVVcGRhdGUiLCJ0aWNrT3B0cyIsInNhbXBsZVNpemUiLCJiZWZvcmVTZXREaW1lbnNpb25zIiwic2V0RGltZW5zaW9ucyIsImFmdGVyU2V0RGltZW5zaW9ucyIsImJlZm9yZURhdGFMaW1pdHMiLCJkZXRlcm1pbmVEYXRhTGltaXRzIiwiYWZ0ZXJEYXRhTGltaXRzIiwibWlubWF4Iiwia2VlcFplcm8iLCJfYWRkR3JhY2UiLCJiZWZvcmVCdWlsZFRpY2tzIiwiYnVpbGRUaWNrcyIsImFmdGVyQnVpbGRUaWNrcyIsInNhbXBsaW5nRW5hYmxlZCIsIl9jb252ZXJ0VGlja3NUb0xhYmVscyIsImJlZm9yZUNhbGN1bGF0ZUxhYmVsUm90YXRpb24iLCJjYWxjdWxhdGVMYWJlbFJvdGF0aW9uIiwiYWZ0ZXJDYWxjdWxhdGVMYWJlbFJvdGF0aW9uIiwiZGV0ZXJtaW5lZE1heFRpY2tzIiwiX3RpY2tTaXplIiwibWF4U2NhbGUiLCJtYXhDaGFydCIsImRldGVybWluZU1heFRpY2tzIiwidGlja3NMaW1pdCIsIm1ham9ySW5kaWNlcyIsImVuYWJsZWQiLCJnZXRNYWpvckluZGljZXMiLCJudW1NYWpvckluZGljZXMiLCJmaXJzdCIsInNraXBNYWpvcnMiLCJldmVuTWFqb3JTcGFjaW5nIiwiZ2V0RXZlblNwYWNpbmciLCJmYWN0b3JzIiwiX2ZhY3Rvcml6ZSIsImNhbGN1bGF0ZVNwYWNpbmciLCJhdmdNYWpvclNwYWNpbmciLCJhZnRlckF1dG9Ta2lwIiwiYmVmb3JlRml0IiwiZml0IiwiYWZ0ZXJGaXQiLCJhZnRlclVwZGF0ZSIsInJldmVyc2VQaXhlbHMiLCJfYWxpZ25Ub1BpeGVscyIsImFsaWduVG9QaXhlbHMiLCJfY2FsbEhvb2tzIiwibm90aWZ5UGx1Z2lucyIsImJlZm9yZVRpY2tUb0xhYmVsQ29udmVyc2lvbiIsImdlbmVyYXRlVGlja0xhYmVscyIsImFmdGVyVGlja1RvTGFiZWxDb252ZXJzaW9uIiwibnVtVGlja3MiLCJtYXhMYWJlbERpYWdvbmFsIiwiX2lzVmlzaWJsZSIsImxhYmVsU2l6ZXMiLCJfZ2V0TGFiZWxTaXplcyIsIm1heExhYmVsV2lkdGgiLCJ3aWRlc3QiLCJtYXhMYWJlbEhlaWdodCIsImhpZ2hlc3QiLCJhc2luIiwidGl0bGVPcHRzIiwiZ3JpZE9wdHMiLCJ0aXRsZUhlaWdodCIsInRpY2tQYWRkaW5nIiwiYW5nbGVSYWRpYW5zIiwibGFiZWxIZWlnaHQiLCJsYWJlbFdpZHRoIiwiX2NhbGN1bGF0ZVBhZGRpbmciLCJfaGFuZGxlTWFyZ2lucyIsImlzUm90YXRlZCIsImxhYmVsc0JlbG93VGlja3MiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0UmlnaHQiLCJpc0Z1bGxTaXplIiwiX2NvbXB1dGVMYWJlbFNpemVzIiwiY2FjaGVzIiwid2lkdGhzIiwiaGVpZ2h0cyIsInRpY2tGb250IiwiZm9udFN0cmluZyIsIm5lc3RlZExhYmVsIiwid2lkZXN0TGFiZWxTaXplIiwiaGlnaGVzdExhYmVsU2l6ZSIsIl9yZXNvbHZlVGlja0ZvbnRPcHRpb25zIiwidmFsdWVBdCIsImlkeCIsImRlY2ltYWwiLCJnZXREZWNpbWFsRm9yUGl4ZWwiLCJnZXRCYXNlVmFsdWUiLCJjcmVhdGVUaWNrQ29udGV4dCIsIm9wdGlvblRpY2tzIiwicm90IiwiX2NvbXB1dGVHcmlkTGluZUl0ZW1zIiwidGwiLCJib3JkZXJPcHRzIiwiYXhpc1dpZHRoIiwiYXhpc0hhbGZXaWR0aCIsImFsaWduQm9yZGVyVmFsdWUiLCJib3JkZXJWYWx1ZSIsImFsaWduZWRMaW5lVmFsdWUiLCJ0eDEiLCJ0eTEiLCJ0eDIiLCJ0eTIiLCJ4MSIsInkxIiwieDIiLCJ5MiIsInBvc2l0aW9uQXhpc0lEIiwicG9zaXRpb25BeGlzSUQxIiwidmFsdWUxIiwibGltaXQiLCJzdGVwIiwib3B0c0F0SW5kZXgiLCJvcHRzQXRJbmRleEJvcmRlciIsImxpbmVDb2xvciIsInRpY2tCb3JkZXJEYXNoIiwidGlja0JvcmRlckRhc2hPZmZzZXQiLCJ0aWNrQW5kUGFkZGluZyIsImhUaWNrQW5kUGFkZGluZyIsImxpbmVDb3VudCIsInRleHRPZmZzZXQiLCJfZ2V0WEF4aXNMYWJlbEFsaWdubWVudCIsIl9nZXRZQXhpc0xhYmVsQWxpZ25tZW50IiwicmV0MSIsImhhbGZDb3VudCIsInRpY2tUZXh0QWxpZ24iLCJsYWJlbFBhZGRpbmciLCJfY29tcHV0ZUxhYmVsQXJlYSIsImRyYXdCYWNrZ3JvdW5kIiwiZmluZEluZGV4IiwiZHJhd0dyaWQiLCJkcmF3TGluZSIsInNldExpbmVEYXNoIiwibGluZURhc2hPZmZzZXQiLCJkcmF3Qm9yZGVyIiwibGFzdExpbmVXaWR0aCIsImRyYXdMYWJlbHMiLCJyZW5kZXJUZXh0T3B0aW9ucyIsImRyYXdUaXRsZSIsInRpdGxlWCIsInRpdGxlWSIsInRpdGxlQXJncyIsInR6IiwiZ3oiLCJieiIsImF4aXNJRCIsIl9tYXhEaWdpdHMiLCJmb250U2l6ZSIsIlR5cGVkUmVnaXN0cnkiLCJpc0ZvclR5cGUiLCJpc1Byb3RvdHlwZU9mIiwicmVnaXN0ZXIiLCJwYXJlbnRTY29wZSIsImlzSUNoYXJ0Q29tcG9uZW50IiwiaXRlbURlZmF1bHRzIiwiZGVmYXVsdFJvdXRlcyIsInJvdXRlcyIsInByb3BlcnR5UGFydHMiLCJzb3VyY2VOYW1lIiwic291cmNlU2NvcGUiLCJyb3V0ZURlZmF1bHRzIiwicmVnaXN0ZXJEZWZhdWx0cyIsInVucmVnaXN0ZXIiLCJSZWdpc3RyeSIsIl90eXBlZFJlZ2lzdHJpZXMiLCJfZWFjaCIsImFkZENvbnRyb2xsZXJzIiwiYWRkUGx1Z2lucyIsImFkZFNjYWxlcyIsImdldENvbnRyb2xsZXIiLCJfZ2V0IiwiZ2V0UGx1Z2luIiwiZ2V0U2NhbGUiLCJyZW1vdmVDb250cm9sbGVycyIsInJlbW92ZUVsZW1lbnRzIiwicmVtb3ZlUGx1Z2lucyIsInJlbW92ZVNjYWxlcyIsInR5cGVkUmVnaXN0cnkiLCJhcmciLCJyZWciLCJfZ2V0UmVnaXN0cnlGb3JUeXBlIiwiX2V4ZWMiLCJpdGVtUmVnIiwiY29tcG9uZW50IiwiY2FtZWxNZXRob2QiLCJQbHVnaW5TZXJ2aWNlIiwiX2luaXQiLCJub3RpZnkiLCJob29rIiwiX2NyZWF0ZURlc2NyaXB0b3JzIiwiZGVzY3JpcHRvciIsInBsdWdpbiIsImNhbmNlbGFibGUiLCJpbnZhbGlkYXRlIiwiX29sZENhY2hlIiwiX25vdGlmeVN0YXRlQ2hhbmdlcyIsImxvY2FsSWRzIiwiaTEiLCJhbGxQbHVnaW5zIiwiZ2V0T3B0cyIsInBsdWdpbk9wdHMiLCJjcmVhdGVEZXNjcmlwdG9ycyIsInByZXZpb3VzRGVzY3JpcHRvcnMiLCJzb21lIiwicGx1Z2luU2NvcGVLZXlzIiwiZ2V0SW5kZXhBeGlzIiwiZGF0YXNldERlZmF1bHRzIiwiZGV0ZXJtaW5lQXhpcyIsInNjYWxlT3B0aW9ucyIsImluaXRPcHRpb25zIiwiY2hhcnREZWZhdWx0cyIsImNvbmZpZ1NjYWxlcyIsImNoYXJ0SW5kZXhBeGlzIiwic2NhbGVDb25mIiwiZXJyb3IiLCJkZWZhdWx0SWQiLCJnZXREZWZhdWx0U2NhbGVJREZyb21BeGlzIiwiZGVmYXVsdFNjYWxlT3B0aW9ucyIsImRlZmF1bHRJRCIsImdldEF4aXNGcm9tRGVmYXVsdFNjYWxlSUQiLCJtZXJnZVNjYWxlQ29uZmlnIiwiaW5pdERhdGEiLCJrZXlDYWNoZSIsImtleXNDYWNoZWQiLCJjYWNoZWRLZXlzIiwiZ2VuZXJhdGUiLCJhZGRJZkZvdW5kIiwiQ29uZmlnIiwiX2NvbmZpZyIsImluaXRDb25maWciLCJfc2NvcGVDYWNoZSIsIl9yZXNvbHZlckNhY2hlIiwiY2xlYXJDYWNoZSIsImNsZWFyIiwiZGF0YXNldFR5cGUiLCJhZGRpdGlvbmFsT3B0aW9uU2NvcGVzIiwiX2NhY2hlZFNjb3BlcyIsIm1haW5TY29wZSIsInJlc2V0Q2FjaGUiLCJrZXlMaXN0cyIsImNoYXJ0T3B0aW9uU2NvcGVzIiwic3ViUHJlZml4ZXMiLCJnZXRSZXNvbHZlciIsImhhc0Z1bmN0aW9uIiwibmVlZENvbnRleHQiLCJyZXNvbHZlckNhY2hlIiwiS05PV05fUE9TSVRJT05TIiwicG9zaXRpb25Jc0hvcml6b250YWwiLCJjb21wYXJlMkxldmVsIiwibDEiLCJsMiIsIm9uQW5pbWF0aW9uc0NvbXBsZXRlIiwib25Db21wbGV0ZSIsIm9uQW5pbWF0aW9uUHJvZ3Jlc3MiLCJvblByb2dyZXNzIiwiZ2V0Q2FudmFzIiwiZ2V0RWxlbWVudEJ5SWQiLCJpbnN0YW5jZXMiLCJnZXRDaGFydCIsIm1vdmVOdW1lcmljS2V5cyIsImludEtleSIsIkNoYXJ0IiwiaW52YWxpZGF0ZVBsdWdpbnMiLCJ1c2VyQ29uZmlnIiwiaW5pdGlhbENhbnZhcyIsImV4aXN0aW5nQ2hhcnQiLCJfb3B0aW9ucyIsIl9hc3BlY3RSYXRpbyIsIl9tZXRhc2V0cyIsIl9sYXN0RXZlbnQiLCJfbGlzdGVuZXJzIiwiX3Jlc3BvbnNpdmVMaXN0ZW5lcnMiLCJfc29ydGVkTWV0YXNldHMiLCJfcGx1Z2lucyIsIl9oaWRkZW5JbmRpY2VzIiwiYXR0YWNoZWQiLCJfZG9SZXNpemUiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImRlYm91bmNlIiwicmVzaXplRGVsYXkiLCJfaW5pdGlhbGl6ZSIsImJpbmRFdmVudHMiLCJfcmVzaXplQmVmb3JlRHJhdyIsIl9yZXNpemUiLCJuZXdTaXplIiwibmV3UmF0aW8iLCJvblJlc2l6ZSIsInJlbmRlciIsImVuc3VyZVNjYWxlc0hhdmVJRHMiLCJheGlzT3B0aW9ucyIsImJ1aWxkT3JVcGRhdGVTY2FsZXMiLCJzY2FsZU9wdHMiLCJ1cGRhdGVkIiwiaXNSYWRpYWwiLCJkcG9zaXRpb24iLCJkdHlwZSIsInNjYWxlVHlwZSIsImhhc1VwZGF0ZWQiLCJfdXBkYXRlTWV0YXNldHMiLCJfZGVzdHJveURhdGFzZXRNZXRhIiwiX3JlbW92ZVVucmVmZXJlbmNlZE1ldGFzZXRzIiwiYnVpbGRPclVwZGF0ZUNvbnRyb2xsZXJzIiwibmV3Q29udHJvbGxlcnMiLCJvcmRlciIsIkNvbnRyb2xsZXJDbGFzcyIsIl9yZXNldEVsZW1lbnRzIiwiYW5pbXNEaXNhYmxlZCIsIl91cGRhdGVTY2FsZXMiLCJfY2hlY2tFdmVudEJpbmRpbmdzIiwiX3VwZGF0ZUhpZGRlbkluZGljZXMiLCJfbWluUGFkZGluZyIsIl91cGRhdGVMYXlvdXQiLCJfdXBkYXRlRGF0YXNldHMiLCJfZXZlbnRIYW5kbGVyIiwiX3VwZGF0ZUhvdmVyU3R5bGVzIiwiZXhpc3RpbmdFdmVudHMiLCJuZXdFdmVudHMiLCJ1bmJpbmRFdmVudHMiLCJjaGFuZ2VzIiwiX2dldFVuaWZvcm1EYXRhQ2hhbmdlcyIsImRhdGFzZXRDb3VudCIsIm1ha2VTZXQiLCJjaGFuZ2VTZXQiLCJub0FyZWEiLCJfaWR4IiwiaWxlbjEiLCJfdXBkYXRlRGF0YXNldCIsImxheWVycyIsIl9kcmF3RGF0YXNldHMiLCJfZHJhd0RhdGFzZXQiLCJ1c2VDbGlwIiwiZ2V0RGF0YXNldEFyZWEiLCJnZXRFbGVtZW50c0F0RXZlbnRGb3JNb2RlIiwic2V0RGF0YXNldFZpc2liaWxpdHkiLCJfdXBkYXRlVmlzaWJpbGl0eSIsIl9zdG9wIiwiZGVzdHJveSIsInRvQmFzZTY0SW1hZ2UiLCJ0b0RhdGFVUkwiLCJiaW5kVXNlckV2ZW50cyIsImJpbmRSZXNwb25zaXZlRXZlbnRzIiwiX2FkZCIsIl9yZW1vdmUiLCJkZXRhY2hlZCIsInVwZGF0ZUhvdmVyU3R5bGUiLCJnZXRBY3RpdmVFbGVtZW50cyIsInNldEFjdGl2ZUVsZW1lbnRzIiwiYWN0aXZlRWxlbWVudHMiLCJsYXN0QWN0aXZlIiwicGx1Z2luSWQiLCJyZXBsYXkiLCJob3Zlck9wdGlvbnMiLCJkZWFjdGl2YXRlZCIsImFjdGl2YXRlZCIsImluQ2hhcnRBcmVhIiwiZXZlbnRGaWx0ZXIiLCJfaGFuZGxlRXZlbnQiLCJfZ2V0QWN0aXZlRWxlbWVudHMiLCJpc0NsaWNrIiwiX2lzQ2xpY2tFdmVudCIsImxhc3RFdmVudCIsImRldGVybWluZUxhc3RFdmVudCIsInJUaGV0YVRvWFkiLCJ0aGV0YSIsInBhdGhBcmMiLCJwaXhlbE1hcmdpbiIsImlubmVyUiIsInNwYWNpbmdPZmZzZXQiLCJhdk5vZ1NwYWNpbmdSYWRpdXMiLCJhbmdsZU9mZnNldCIsIm91dGVyU3RhcnQiLCJvdXRlckVuZCIsImlubmVyU3RhcnQiLCJpbm5lckVuZCIsImFuZ2xlRGVsdGEiLCJib3JkZXJSYWRpdXMiLCJoYWxmVGhpY2tuZXNzIiwiaW5uZXJMaW1pdCIsImNvbXB1dGVPdXRlckxpbWl0Iiwib3V0ZXJBcmNMaW1pdCIsInBhcnNlQm9yZGVyUmFkaXVzJDEiLCJvdXRlclN0YXJ0QWRqdXN0ZWRSYWRpdXMiLCJvdXRlckVuZEFkanVzdGVkUmFkaXVzIiwib3V0ZXJTdGFydEFkanVzdGVkQW5nbGUiLCJvdXRlckVuZEFkanVzdGVkQW5nbGUiLCJpbm5lclN0YXJ0QWRqdXN0ZWRSYWRpdXMiLCJpbm5lckVuZEFkanVzdGVkUmFkaXVzIiwiaW5uZXJTdGFydEFkanVzdGVkQW5nbGUiLCJpbm5lckVuZEFkanVzdGVkQW5nbGUiLCJvdXRlck1pZEFkanVzdGVkQW5nbGUiLCJwQ2VudGVyIiwicDQiLCJwQ2VudGVyMSIsImlubmVyTWlkQWRqdXN0ZWRBbmdsZSIsInBDZW50ZXIyIiwicDgiLCJwQ2VudGVyMyIsIm91dGVyU3RhcnRYIiwib3V0ZXJTdGFydFkiLCJvdXRlckVuZFgiLCJvdXRlckVuZFkiLCJBcmNFbGVtZW50IiwiZnVsbENpcmNsZXMiLCJjaGFydFgiLCJjaGFydFkiLCJyQWRqdXN0IiwiYmV0d2VlbkFuZ2xlcyIsIndpdGhpblJhZGl1cyIsImhhbGZBbmdsZSIsImhhbGZSYWRpdXMiLCJyYWRpdXNPZmZzZXQiLCJkcmF3QXJjIiwiaW5uZXIiLCJsaW5lSm9pbiIsImFuZ2xlTWFyZ2luIiwiY2xpcEFyYyIsInNldFN0eWxlIiwibGluZUNhcCIsInBhdGhWYXJzIiwicGFyYW1zU3RhcnQiLCJwYXJhbXNFbmQiLCJzZWdtZW50U3RhcnQiLCJzZWdtZW50RW5kIiwib3V0c2lkZSIsInBhdGhTZWdtZW50IiwibGluZU1ldGhvZCIsInN0ZXBwZWQiLCJnZXRMaW5lTWV0aG9kIiwiZmFzdFBhdGhTZWdtZW50IiwicHJldlgiLCJsYXN0WSIsImF2Z1giLCJjb3VudFgiLCJwb2ludEluZGV4IiwiZHJhd1giLCJ0cnVuY1giLCJfZ2V0U2VnbWVudE1ldGhvZCIsInVzZVBhdGgyRCIsIlBhdGgyRCIsIkxpbmVFbGVtZW50IiwiX3BhdGgiLCJfcG9pbnRzIiwiX3NlZ21lbnRzIiwiX3BvaW50c1VwZGF0ZWQiLCJzZWdtZW50T3B0aW9ucyIsImZpbmRTdGFydEFuZEVuZCIsImNoYXJ0Q29udGV4dCIsImJhc2VTdHlsZSIsImFkZFN0eWxlIiwic3QiLCJkaXIiLCJwMCIsInAwRGF0YUluZGV4IiwicDFEYXRhSW5kZXgiLCJkb1NwbGl0QnlTdHlsZXMiLCJzcGxpdEJ5U3R5bGVzIiwic29saWRTZWdtZW50cyIsIl9jb21wdXRlU2VnbWVudHMiLCJfaW50ZXJwb2xhdGUiLCJfZ2V0SW50ZXJwb2xhdGlvbk1ldGhvZCIsImludGVycG9sYXRlZCIsInNlZ21lbnRNZXRob2QiLCJwYXRoIiwic3Ryb2tlUGF0aFdpdGhDYWNoZSIsInN0cm9rZVBhdGhEaXJlY3QiLCJpblJhbmdlJDEiLCJoaXRSYWRpdXMiLCJQb2ludEVsZW1lbnQiLCJob3ZlclJhZGl1cyIsIm1vdXNlWCIsIm1vdXNlWSIsImluWFJhbmdlIiwiaW5ZUmFuZ2UiLCJnZXRCYXJCb3VuZHMiLCJiYXIiLCJoYWxmIiwic2tpcE9yTGltaXQiLCJza2lwWCIsInNraXBZIiwiYWRkTm9ybWFsUmVjdFBhdGgiLCJpbmZsYXRlUmVjdCIsImFtb3VudCIsInJlZlJlY3QiLCJCYXJFbGVtZW50Iiwib3V0ZXIiLCJtYXhXIiwibWF4SCIsInBhcnNlQm9yZGVyV2lkdGgiLCJtYXhSIiwiZW5hYmxlQm9yZGVyIiwicGFyc2VCb3JkZXJSYWRpdXMiLCJib3VuZGluZ1JlY3RzIiwiYWRkUmVjdFBhdGgiLCJCT1JERVJfQ09MT1JTIiwiQkFDS0dST1VORF9DT0xPUlMiLCJnZXRCb3JkZXJDb2xvciIsImdldEJhY2tncm91bmRDb2xvciIsImNvbnRhaW5zQ29sb3JzRGVmaW5pdGlvbnMiLCJwbHVnaW5fY29sb3JzIiwiZm9yY2VPdmVycmlkZSIsIl9hcmdzIiwiY2hhcnRPcHRpb25zIiwiY29sb3JpemVyIiwiY29sb3JpemVEb3VnaG51dERhdGFzZXQiLCJjb2xvcml6ZVBvbGFyQXJlYURhdGFzZXQiLCJjb2xvcml6ZURlZmF1bHREYXRhc2V0IiwiZ2V0Q29sb3JpemVyIiwiY2xlYW5EZWNpbWF0ZWREYXRhc2V0IiwiY2xlYW5EZWNpbWF0ZWREYXRhIiwicGx1Z2luX2RlY2ltYXRpb24iLCJhbGdvcml0aG0iLCJiZWZvcmVFbGVtZW50c1VwZGF0ZSIsInhBeGlzIiwiZGVjaW1hdGVkIiwiZ2V0U3RhcnRBbmRDb3VudE9mVmlzaWJsZVBvaW50c1NpbXBsaWZpZWQiLCJ0aHJlc2hvbGQiLCJzYW1wbGVzIiwiYnVja2V0V2lkdGgiLCJzYW1wbGVkSW5kZXgiLCJlbmRJbmRleCIsIm1heEFyZWFQb2ludCIsIm1heEFyZWEiLCJuZXh0QSIsImF2Z1kiLCJhdmdSYW5nZVN0YXJ0IiwiYXZnUmFuZ2VFbmQiLCJhdmdSYW5nZUxlbmd0aCIsInJhbmdlT2ZmcyIsInJhbmdlVG8iLCJwb2ludEF4IiwicG9pbnRBeSIsImx0dGJEZWNpbWF0aW9uIiwibWluSW5kZXgiLCJtYXhJbmRleCIsInN0YXJ0SW5kZXgiLCJ4TWluIiwiZHgiLCJsYXN0SW5kZXgiLCJpbnRlcm1lZGlhdGVJbmRleDEiLCJpbnRlcm1lZGlhdGVJbmRleDIiLCJtaW5NYXhEZWNpbWF0aW9uIiwiX2dldEJvdW5kcyIsIl9maW5kU2VnbWVudEVuZCIsIl9nZXRFZGdlIiwiX2NyZWF0ZUJvdW5kYXJ5TGluZSIsImJvdW5kYXJ5IiwibGluZVBvaW50cyIsIl9wb2ludHNGcm9tU2VnbWVudHMiLCJfc2hvdWxkQXBwbHlGaWxsIiwiX3Jlc29sdmVUYXJnZXQiLCJwcm9wYWdhdGUiLCJ2aXNpdGVkIiwiX2RlY29kZUZpbGwiLCJmaWxsT3B0aW9uIiwicGFyc2VGaWxsT3B0aW9uIiwiZmlyc3RDaCIsImRlY29kZVRhcmdldEluZGV4IiwiYWRkUG9pbnRzQmVsb3ciLCJzb3VyY2VQb2ludCIsImxpbmVzQmVsb3ciLCJwb3N0cG9uZWQiLCJmaW5kUG9pbnQiLCJ1bnNoaWZ0IiwicG9pbnRWYWx1ZSIsImZpcnN0VmFsdWUiLCJsYXN0VmFsdWUiLCJzaW1wbGVBcmMiLCJfZHJhd2ZpbGwiLCJnZXRMaW5lQnlJbmRleCIsInNvdXJjZVBvaW50cyIsImJlbG93IiwiZ2V0TGluZXNCZWxvdyIsIl9idWlsZFN0YWNrTGluZSIsIl9nZXRUYXJnZXRWYWx1ZSIsImNvbXB1dGVDaXJjdWxhckJvdW5kYXJ5IiwiX2dldFRhcmdldFBpeGVsIiwiY29tcHV0ZUxpbmVhckJvdW5kYXJ5IiwiY29tcHV0ZUJvdW5kYXJ5IiwibGluZU9wdHMiLCJhYm92ZSIsImNsaXBWZXJ0aWNhbCIsImRvRmlsbCIsImNsaXBZIiwibGluZUxvb3AiLCJ0cG9pbnRzIiwidGFyZ2V0U2VnbWVudHMiLCJ0Z3QiLCJzdWJCb3VuZHMiLCJmaWxsU291cmNlcyIsImZpbGxTb3VyY2UiLCJzcmMiLCJub3RTaGFwZSIsImNsaXBCb3VuZHMiLCJpbnRlcnBvbGF0ZWRMaW5lVG8iLCJ0YXJnZXRMb29wIiwiaW50ZXJwb2xhdGVkUG9pbnQiLCJhZnRlckRhdGFzZXRzVXBkYXRlIiwiJGZpbGxlciIsImJlZm9yZURyYXciLCJkcmF3VGltZSIsImJlZm9yZURhdGFzZXRzRHJhdyIsImJlZm9yZURhdGFzZXREcmF3IiwiZ2V0Qm94U2l6ZSIsImxhYmVsT3B0cyIsImJveEhlaWdodCIsImJveFdpZHRoIiwidXNlUG9pbnRTdHlsZSIsInBvaW50U3R5bGVXaWR0aCIsIml0ZW1IZWlnaHQiLCJMZWdlbmQiLCJfYWRkZWQiLCJsZWdlbmRIaXRCb3hlcyIsIl9ob3ZlcmVkSXRlbSIsImRvdWdobnV0TW9kZSIsImxlZ2VuZEl0ZW1zIiwiY29sdW1uU2l6ZXMiLCJsaW5lV2lkdGhzIiwiYnVpbGRMYWJlbHMiLCJsYWJlbEZvbnQiLCJfY29tcHV0ZVRpdGxlSGVpZ2h0IiwiX2ZpdFJvd3MiLCJfZml0Q29scyIsImhpdGJveGVzIiwidG90YWxIZWlnaHQiLCJyb3ciLCJfaXRlbUhlaWdodCIsImhlaWdodExpbWl0IiwidG90YWxXaWR0aCIsImN1cnJlbnRDb2xXaWR0aCIsImN1cnJlbnRDb2xIZWlnaHQiLCJjb2wiLCJsZWdlbmRJdGVtVGV4dCIsImNhbGN1bGF0ZUl0ZW1XaWR0aCIsImZvbnRMaW5lSGVpZ2h0IiwiY2FsY3VsYXRlTGVnZW5kSXRlbUhlaWdodCIsImNhbGN1bGF0ZUl0ZW1IZWlnaHQiLCJjYWxjdWxhdGVJdGVtU2l6ZSIsImFkanVzdEhpdEJveGVzIiwicnRsSGVscGVyIiwiaGl0Ym94IiwiaGl0Ym94MSIsIl9kcmF3IiwiZGVmYXVsdENvbG9yIiwiaGFsZkZvbnRTaXplIiwiY3Vyc29yIiwidGV4dERpcmVjdGlvbiIsImxpbmVEYXNoIiwiZHJhd09wdGlvbnMiLCJTUVJUMiIsInlCb3hUb3AiLCJ4Qm94TGVmdCIsImRyYXdMZWdlbmRCb3giLCJfdGV4dFgiLCJ0aXRsZUZvbnQiLCJ0aXRsZVBhZGRpbmciLCJ0b3BQYWRkaW5nUGx1c0hhbGZGb250U2l6ZSIsIl9nZXRMZWdlbmRJdGVtQXQiLCJoaXRCb3giLCJsaCIsImhhbmRsZUV2ZW50Iiwib25MZWF2ZSIsImlzTGlzdGVuZWQiLCJob3ZlcmVkSXRlbSIsInNhbWVJdGVtIiwicGx1Z2luX2xlZ2VuZCIsIl9lbGVtZW50IiwiYWZ0ZXJFdmVudCIsImNpIiwidXNlQm9yZGVyUmFkaXVzIiwiVGl0bGUiLCJfcGFkZGluZyIsInRleHRTaXplIiwiX2RyYXdBcmdzIiwiZm9udE9wdHMiLCJwbHVnaW5fdGl0bGUiLCJ0aXRsZUJsb2NrIiwiY3JlYXRlVGl0bGUiLCJXZWFrTWFwIiwicGx1Z2luX3N1YnRpdGxlIiwicG9zaXRpb25lcnMiLCJhdmVyYWdlIiwiZXZlbnRQb3NpdGlvbiIsIm5lYXJlc3RFbGVtZW50IiwidHAiLCJwdXNoT3JDb25jYXQiLCJ0b1B1c2giLCJzcGxpdE5ld2xpbmVzIiwiU3RyaW5nIiwiY3JlYXRlVG9vbHRpcEl0ZW0iLCJmb3JtYXR0ZWRWYWx1ZSIsImdldFRvb2x0aXBTaXplIiwidG9vbHRpcCIsImJvZHkiLCJmb290ZXIiLCJib2R5Rm9udCIsImZvb3RlckZvbnQiLCJ0aXRsZUxpbmVDb3VudCIsImZvb3RlckxpbmVDb3VudCIsImJvZHlMaW5lSXRlbUNvdW50IiwiY29tYmluZWRCb2R5TGVuZ3RoIiwiYm9keUl0ZW0iLCJiZWZvcmUiLCJhZnRlciIsImJlZm9yZUJvZHkiLCJhZnRlckJvZHkiLCJ0aXRsZVNwYWNpbmciLCJ0aXRsZU1hcmdpbkJvdHRvbSIsImRpc3BsYXlDb2xvcnMiLCJib2R5U3BhY2luZyIsImZvb3Rlck1hcmdpblRvcCIsImZvb3RlclNwYWNpbmciLCJ3aWR0aFBhZGRpbmciLCJtYXhMaW5lV2lkdGgiLCJkZXRlcm1pbmVYQWxpZ24iLCJ5QWxpZ24iLCJjaGFydFdpZHRoIiwieEFsaWduIiwiY2FyZXQiLCJjYXJldFNpemUiLCJjYXJldFBhZGRpbmciLCJkb2VzTm90Rml0V2l0aEFsaWduIiwiZGV0ZXJtaW5lQWxpZ25tZW50IiwiZGV0ZXJtaW5lWUFsaWduIiwiZ2V0QmFja2dyb3VuZFBvaW50IiwiYWxpZ25tZW50IiwicGFkZGluZ0FuZFNpemUiLCJhbGlnblgiLCJhbGlnblkiLCJnZXRBbGlnbmVkWCIsImdldEJlZm9yZUFmdGVyQm9keUxpbmVzIiwib3ZlcnJpZGVDYWxsYmFja3MiLCJkZWZhdWx0Q2FsbGJhY2tzIiwiYmVmb3JlVGl0bGUiLCJ0b29sdGlwSXRlbXMiLCJsYWJlbENvdW50IiwiYWZ0ZXJUaXRsZSIsImJlZm9yZUxhYmVsIiwidG9vbHRpcEl0ZW0iLCJsYWJlbENvbG9yIiwibGFiZWxUZXh0Q29sb3IiLCJib2R5Q29sb3IiLCJsYWJlbFBvaW50U3R5bGUiLCJhZnRlckxhYmVsIiwiYmVmb3JlRm9vdGVyIiwiYWZ0ZXJGb290ZXIiLCJpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayIsIlRvb2x0aXAiLCJvcGFjaXR5IiwiX2V2ZW50UG9zaXRpb24iLCJfc2l6ZSIsIl9jYWNoZWRBbmltYXRpb25zIiwiX3Rvb2x0aXBJdGVtcyIsImRhdGFQb2ludHMiLCJjYXJldFgiLCJjYXJldFkiLCJsYWJlbENvbG9ycyIsImxhYmVsUG9pbnRTdHlsZXMiLCJsYWJlbFRleHRDb2xvcnMiLCJnZXRUaXRsZSIsImdldEJlZm9yZUJvZHkiLCJnZXRCb2R5IiwiYm9keUl0ZW1zIiwic2NvcGVkIiwiZ2V0QWZ0ZXJCb2R5IiwiZ2V0Rm9vdGVyIiwiX2NyZWF0ZUl0ZW1zIiwiaXRlbVNvcnQiLCJwb3NpdGlvbkFuZFNpemUiLCJiYWNrZ3JvdW5kUG9pbnQiLCJleHRlcm5hbCIsImRyYXdDYXJldCIsInRvb2x0aXBQb2ludCIsImNhcmV0UG9zaXRpb24iLCJnZXRDYXJldFBvc2l0aW9uIiwieDMiLCJ5MyIsInB0WCIsInB0WSIsInRpdGxlQ29sb3IiLCJfZHJhd0NvbG9yQm94IiwiY29sb3JYIiwicnRsQ29sb3JYIiwieU9mZlNldCIsImNvbG9yWSIsIm11bHRpS2V5QmFja2dyb3VuZCIsIm91dGVyWCIsImlubmVyWCIsInN0cm9rZVJlY3QiLCJkcmF3Qm9keSIsImJvZHlBbGlnbiIsImJvZHlMaW5lSGVpZ2h0IiwieExpbmVQYWRkaW5nIiwiZmlsbExpbmVPZlRleHQiLCJib2R5QWxpZ25Gb3JDYWxjdWxhdGlvbiIsInRleHRDb2xvciIsImRyYXdGb290ZXIiLCJmb290ZXJBbGlnbiIsImZvb3RlckNvbG9yIiwidG9vbHRpcFNpemUiLCJxdWFkcmF0aWNDdXJ2ZVRvIiwiX3VwZGF0ZUFuaW1hdGlvblRhcmdldCIsImFuaW1YIiwiYW5pbVkiLCJfd2lsbFJlbmRlciIsImhhc1Rvb2x0aXBDb250ZW50IiwiZ2xvYmFsQWxwaGEiLCJwb3NpdGlvbkNoYW5nZWQiLCJfcG9zaXRpb25DaGFuZ2VkIiwiX2lnbm9yZVJlcGxheUV2ZW50cyIsInBsdWdpbl90b29sdGlwIiwiYWZ0ZXJJbml0IiwiYWZ0ZXJEcmF3IiwiQ29sb3JzIiwiRGVjaW1hdGlvbiIsIkZpbGxlciIsIlN1YlRpdGxlIiwiX2dldExhYmVsRm9yVmFsdWUiLCJDYXRlZ29yeVNjYWxlIiwiX3N0YXJ0VmFsdWUiLCJfdmFsdWVSYW5nZSIsIl9hZGRlZExhYmVscyIsImFkZGVkIiwiYWRkZWRMYWJlbHMiLCJhZGRJZlN0cmluZyIsImxhc3RJbmRleE9mIiwiZmluZE9yQWRkTGFiZWwiLCJyZWxhdGl2ZUxhYmVsU2l6ZSIsIm1pblNwYWNpbmciLCJMaW5lYXJTY2FsZUJhc2UiLCJfZW5kVmFsdWUiLCJoYW5kbGVUaWNrUmFuZ2VPcHRpb25zIiwic2V0TWluIiwic2V0TWF4IiwibWluU2lnbiIsIm1heFNpZ24iLCJnZXRUaWNrTGltaXQiLCJtYXhUaWNrcyIsInN0ZXBTaXplIiwiY29tcHV0ZVRpY2tMaW1pdCIsImdlbmVyYXRpb25PcHRpb25zIiwiZGF0YVJhbmdlIiwicHJlY2lzaW9uIiwibWF4RGlnaXRzIiwiaW5jbHVkZUJvdW5kcyIsInVuaXQiLCJtYXhTcGFjZXMiLCJybWluIiwicm1heCIsImNvdW50RGVmaW5lZCIsIm5pY2VNaW4iLCJuaWNlTWF4IiwibnVtU3BhY2VzIiwicm91bmRlZCIsImFsbW9zdFdob2xlIiwiZGVjaW1hbFBsYWNlcyIsImdlbmVyYXRlVGlja3MkMSIsIkxpbmVhclNjYWxlIiwibG9nMTBGbG9vciIsImNoYW5nZUV4cG9uZW50IiwiaXNNYWpvciIsInRpY2tWYWwiLCJzdGVwcyIsInJhbmdlRXhwIiwicmFuZ2VTdGVwIiwiTG9nYXJpdGhtaWNTY2FsZSIsIl96ZXJvIiwibWluRXhwIiwiZXhwIiwic3RhcnRFeHAiLCJsYXN0VGljayIsImdlbmVyYXRlVGlja3MiLCJnZXRUaWNrQmFja2Ryb3BIZWlnaHQiLCJkZXRlcm1pbmVMaW1pdHMiLCJ1cGRhdGVMaW1pdHMiLCJsaW1pdHMiLCJoTGltaXRzIiwidkxpbWl0cyIsImdldFRleHRBbGlnbkZvckFuZ2xlIiwieUZvckFuZ2xlIiwicGF0aFJhZGl1c0xpbmUiLCJnZXRQb2ludFBvc2l0aW9uIiwiUmFkaWFsTGluZWFyU2NhbGUiLCJhbmltYXRlIiwiY2VudGVyUG9pbnRMYWJlbHMiLCJkcmF3aW5nQXJlYSIsIl9wb2ludExhYmVscyIsIl9wb2ludExhYmVsSXRlbXMiLCJ2YWx1ZUNvdW50IiwicG9pbnRMYWJlbE9wdHMiLCJhZGRpdGlvbmFsQW5nbGUiLCJnZXRQb2ludExhYmVsQ29udGV4dCIsInBsRm9udCIsInNldENlbnRlclBvaW50IiwiZXh0cmEiLCJvdXRlckRpc3RhbmNlIiwicG9pbnRMYWJlbFBvc2l0aW9uIiwiYnVpbGRQb2ludExhYmVsSXRlbXMiLCJmaXRXaXRoUG9pbnRMYWJlbHMiLCJsZWZ0TW92ZW1lbnQiLCJyaWdodE1vdmVtZW50IiwidG9wTW92ZW1lbnQiLCJib3R0b21Nb3ZlbWVudCIsInNjYWxpbmdGYWN0b3IiLCJnZXRWYWx1ZUZvckRpc3RhbmNlRnJvbUNlbnRlciIsInNjYWxlZERpc3RhbmNlIiwicG9pbnRMYWJlbCIsImNyZWF0ZVBvaW50TGFiZWxDb250ZXh0IiwiZGlzdGFuY2VGcm9tQ2VudGVyIiwiZ2V0QmFzZVBvc2l0aW9uIiwiZ2V0UG9pbnRMYWJlbFBvc2l0aW9uIiwiYmFja2Ryb3BMZWZ0IiwiYmFja2Ryb3BUb3AiLCJiYWNrZHJvcFdpZHRoIiwiYmFja2Ryb3BIZWlnaHQiLCJkcmF3UG9pbnRMYWJlbHMiLCJncmlkTGluZU9wdHMiLCJkcmF3UmFkaXVzTGluZSIsIklOVEVSVkFMUyIsIm1pbGxpc2Vjb25kIiwiY29tbW9uIiwic2Vjb25kIiwibWludXRlIiwiaG91ciIsImRheSIsIndlZWsiLCJtb250aCIsInF1YXJ0ZXIiLCJ5ZWFyIiwiVU5JVFMiLCJzb3J0ZXIiLCJhZGFwdGVyIiwiX2FkYXB0ZXIiLCJwYXJzZXIiLCJpc29XZWVrZGF5IiwiX3BhcnNlT3B0cyIsImRldGVybWluZVVuaXRGb3JBdXRvVGlja3MiLCJtaW5Vbml0IiwiY2FwYWNpdHkiLCJpbnRlcnZhbCIsIk1BWF9TQUZFX0lOVEVHRVIiLCJhZGRUaWNrIiwidGltZSIsInRpbWVzdGFtcHMiLCJ0aWNrc0Zyb21UaW1lc3RhbXBzIiwibWFqb3JVbml0Iiwic2V0TWFqb3JUaWNrcyIsIlRpbWVTY2FsZSIsImRpc3BsYXlGb3JtYXRzIiwiX3VuaXQiLCJfbWFqb3JVbml0IiwiX29mZnNldHMiLCJfbm9ybWFsaXplZCIsIm5vcm1hbGl6ZWQiLCJfYXBwbHlCb3VuZHMiLCJfZ2V0TGFiZWxCb3VuZHMiLCJnZXRMYWJlbFRpbWVzdGFtcHMiLCJ0aW1lT3B0cyIsIl9nZW5lcmF0ZSIsIl9maWx0ZXJCZXR3ZWVuIiwiX2dldExhYmVsQ2FwYWNpdHkiLCJkZXRlcm1pbmVVbml0Rm9yRm9ybWF0dGluZyIsImRldGVybWluZU1ham9yVW5pdCIsImluaXRPZmZzZXRzIiwib2Zmc2V0QWZ0ZXJBdXRvc2tpcCIsImdldERlY2ltYWxGb3JWYWx1ZSIsIndlZWtkYXkiLCJoYXNXZWVrZGF5IiwiZ2V0RGF0YVRpbWVzdGFtcHMiLCJ0b29sdGlwRm9ybWF0IiwiZGF0ZXRpbWUiLCJmbXQiLCJfdGlja0Zvcm1hdEZ1bmN0aW9uIiwibWlub3JGb3JtYXQiLCJtYWpvckZvcm1hdCIsIm9mZnNldHMiLCJfZ2V0TGFiZWxTaXplIiwidGlja3NPcHRzIiwidGlja0xhYmVsV2lkdGgiLCJjb3NSb3RhdGlvbiIsInNpblJvdGF0aW9uIiwidGlja0ZvbnRTaXplIiwiZXhhbXBsZVRpbWUiLCJleGFtcGxlTGFiZWwiLCJwcmV2U291cmNlIiwibmV4dFNvdXJjZSIsInByZXZUYXJnZXQiLCJuZXh0VGFyZ2V0Iiwic3BhbiIsIlRpbWVTZXJpZXNTY2FsZSIsIl90YWJsZSIsIl9taW5Qb3MiLCJfdGFibGVSYW5nZSIsIl9nZXRUaW1lc3RhbXBzRm9yVGFibGUiLCJidWlsZExvb2t1cFRhYmxlIiwicmVnaXN0ZXJhYmxlcyJdLCJzb3VyY2VSb290IjoiIn0=