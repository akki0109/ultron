(self.webpackChunklavender_medical=self.webpackChunklavender_medical||[]).push([[9938],{83461:function(e,n,t){e.exports=t(5090)},89469:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r,o=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}(),a=(r=t(10756))&&r.__esModule?r:{default:r},i=t(99182),u=t(69695),c=function(e){function n(e){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);var t=function(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,e));return t.state={},t}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),o(n,[{key:"buildURI",value:function(){return i.buildURI.apply(void 0,arguments)}},{key:"componentDidMount",value:function(){var e=this.props,n=e.data,t=e.headers,r=e.separator,o=e.enclosingCharacter,a=e.uFEFF,i=e.target,u=e.specs,c=e.replace;this.state.page=window.open(this.buildURI(n,a,t,r,o),i,u,c)}},{key:"getWindow",value:function(){return this.state.page}},{key:"render",value:function(){return null}}]),n}(a.default.Component);c.defaultProps=Object.assign(u.defaultProps,{target:"_blank"}),c.propTypes=u.propTypes,n.default=c},26425:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},a=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}(),i=(r=t(10756))&&r.__esModule?r:{default:r},u=t(99182),c=t(69695),l=function(e){function n(e){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);var t=function(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,e));return t.buildURI=t.buildURI.bind(t),t}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),a(n,[{key:"buildURI",value:function(){return u.buildURI.apply(void 0,arguments)}},{key:"handleLegacy",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(window.navigator.msSaveOrOpenBlob){e.preventDefault();var t=this.props,r=t.data,o=t.headers,a=t.separator,i=t.filename,c=t.enclosingCharacter,l=t.uFEFF,f=n&&"function"==typeof r?r():r,s=new Blob([l?"\ufeff":"",(0,u.toCSV)(f,o,a,c)]);return window.navigator.msSaveBlob(s,i),!1}}},{key:"handleAsyncClick",value:function(e){var n=this;this.props.onClick(e,(function(t){!1!==t?n.handleLegacy(e,!0):e.preventDefault()}))}},{key:"handleSyncClick",value:function(e){!1===this.props.onClick(e)?e.preventDefault():this.handleLegacy(e)}},{key:"handleClick",value:function(){var e=this;return function(n){if("function"==typeof e.props.onClick)return e.props.asyncOnClick?e.handleAsyncClick(n):e.handleSyncClick(n);e.handleLegacy(n)}}},{key:"render",value:function(){var e=this,n=this.props,t=n.data,r=n.headers,a=n.separator,u=n.filename,c=n.uFEFF,l=n.children,f=(n.onClick,n.asyncOnClick,n.enclosingCharacter),s=function(e,n){var t={};for(var r in e)n.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}(n,["data","headers","separator","filename","uFEFF","children","onClick","asyncOnClick","enclosingCharacter"]),p="undefined"==typeof window?"":this.buildURI(t,c,r,a,f);return i.default.createElement("a",o({download:u},s,{ref:function(n){return e.link=n},target:"_self",href:p,onClick:this.handleClick()}),l)}}]),n}(i.default.Component);l.defaultProps=c.defaultProps,l.propTypes=c.propTypes,n.default=l},99182:function(e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function r(e){if(Array.isArray(e)){for(var n=0,t=Array(e.length);n<e.length;n++)t[n]=e[n];return t}return Array.from(e)}var o=n.isSafari=function(){return/^((?!chrome|android).)*safari/i.test(navigator.userAgent)},a=n.isJsons=function(e){return Array.isArray(e)&&e.every((function(e){return"object"===(void 0===e?"undefined":t(e))&&!(e instanceof Array)}))},i=n.isArrays=function(e){return Array.isArray(e)&&e.every((function(e){return Array.isArray(e)}))},u=n.jsonsHeaders=function(e){return Array.from(e.map((function(e){return Object.keys(e)})).reduce((function(e,n){return new Set([].concat(r(e),r(n)))}),[]))},c=n.jsons2arrays=function(e,n){var t=n=n||u(e),o=n;a(n)&&(t=n.map((function(e){return e.label})),o=n.map((function(e){return e.key})));var i=e.map((function(e){return o.map((function(n){return l(n,e)}))}));return[t].concat(r(i))},l=n.getHeaderValue=function(e,n){var t=e.replace(/\[([^\]]+)]/g,".$1").split(".").reduce((function(e,n,t,r){var o=e[n];if(null!=o)return o;r.splice(1)}),n);return void 0===t?e in n?n[e]:"":t},f=n.elementOrEmpty=function(e){return null==e?"":e},s=n.joiner=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:",",t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:'"';return e.filter((function(e){return e})).map((function(e){return e.map((function(e){return f(e)})).map((function(e){return""+t+e+t})).join(n)})).join("\n")},p=n.arrays2csv=function(e,n,t,o){return s(n?[n].concat(r(e)):e,t,o)},d=n.jsons2csv=function(e,n,t,r){return s(c(e,n),t,r)},y=n.string2csv=function(e,n,t,r){return n?n.join(t)+"\n"+e:e.replace(/"/g,'""')},v=n.toCSV=function(e,n,t,r){if(a(e))return d(e,n,t,r);if(i(e))return p(e,n,t,r);if("string"==typeof e)return y(e,n,t);throw new TypeError('Data should be a "String", "Array of arrays" OR "Array of objects" ')};n.buildURI=function(e,n,t,r,a){var i=v(e,t,r,a),u=o()?"application/csv":"text/csv",c=new Blob([n?"\ufeff":"",i],{type:u}),l="data:"+u+";charset=utf-8,"+(n?"\ufeff":"")+i,f=window.URL||window.webkitURL;return void 0===f.createObjectURL?l:f.createObjectURL(c)}},5090:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.CSVLink=n.CSVDownload=void 0;var r=a(t(89469)),o=a(t(26425));function a(e){return e&&e.__esModule?e:{default:e}}n.CSVDownload=r.default,n.CSVLink=o.default},69695:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.PropsNotForwarded=n.defaultProps=n.propTypes=void 0;var r,o=((r=t(10756))&&r.__esModule,t(45697));n.propTypes={data:(0,o.oneOfType)([o.string,o.array,o.func]).isRequired,headers:o.array,target:o.string,separator:o.string,filename:o.string,uFEFF:o.bool,onClick:o.func,asyncOnClick:o.bool,enclosingCharacter:o.string},n.defaultProps={separator:",",filename:"generatedBy_react-csv.csv",uFEFF:!0,asyncOnClick:!1,enclosingCharacter:'"'},n.PropsNotForwarded=["data","headers"]}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,