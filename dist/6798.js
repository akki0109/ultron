/*! For license information please see 6798.js.LICENSE.txt */
(self.webpackChunklavender_medical=self.webpackChunklavender_medical||[]).push([[6798,9134],{38240:function(t,e,n){"use strict";n.d(e,{kZ:function(){return b}});var r=n(50400),i=n(82163),o=n(62057),a=n(62556),s=n(96333),f=n(4063),u=n(67252),c=n(60611),p=n(138);function d(t,e,n){void 0===n&&(n=!1);var d,l,h=(0,a.Re)(e),v=(0,a.Re)(e)&&function(t){var e=t.getBoundingClientRect(),n=(0,p.NM)(e.width)/t.offsetWidth||1,r=(0,p.NM)(e.height)/t.offsetHeight||1;return 1!==n||1!==r}(e),m=(0,u.Z)(e),g=(0,r.Z)(t,v,n),Z={scrollLeft:0,scrollTop:0},y={x:0,y:0};return(h||!h&&!n)&&(("body"!==(0,s.Z)(e)||(0,c.Z)(m))&&(Z=(d=e)!==(0,o.Z)(d)&&(0,a.Re)(d)?{scrollLeft:(l=d).scrollLeft,scrollTop:l.scrollTop}:(0,i.Z)(d)),(0,a.Re)(e)?((y=(0,r.Z)(e,!0)).x+=e.clientLeft,y.y+=e.clientTop):m&&(y.x=(0,f.Z)(m))),{x:g.left+Z.scrollLeft-y.x,y:g.top+Z.scrollTop-y.y,width:g.width,height:g.height}}var l=n(40583),h=n(63624),v=n(93779),m=n(87701);function g(t){var e=new Map,n=new Set,r=[];function i(t){n.add(t.name),[].concat(t.requires||[],t.requiresIfExists||[]).forEach((function(t){if(!n.has(t)){var r=e.get(t);r&&i(r)}})),r.push(t)}return t.forEach((function(t){e.set(t.name,t)})),t.forEach((function(t){n.has(t.name)||i(t)})),r}var Z={placement:"bottom",modifiers:[],strategy:"absolute"};function y(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return!e.some((function(t){return!(t&&"function"==typeof t.getBoundingClientRect)}))}function b(t){void 0===t&&(t={});var e=t,n=e.defaultModifiers,r=void 0===n?[]:n,i=e.defaultOptions,o=void 0===i?Z:i;return function(t,e,n){void 0===n&&(n=o);var i,s,f={placement:"bottom",orderedModifiers:[],options:Object.assign({},Z,o),modifiersData:{},elements:{reference:t,popper:e},attributes:{},styles:{}},u=[],c=!1,p={state:f,setOptions:function(n){var i="function"==typeof n?n(f.options):n;b(),f.options=Object.assign({},o,f.options,i),f.scrollParents={reference:(0,a.kK)(t)?(0,h.Z)(t):t.contextElement?(0,h.Z)(t.contextElement):[],popper:(0,h.Z)(e)};var s,c,d=function(t){var e=g(t);return m.xs.reduce((function(t,n){return t.concat(e.filter((function(t){return t.phase===n})))}),[])}((s=[].concat(r,f.options.modifiers),c=s.reduce((function(t,e){var n=t[e.name];return t[e.name]=n?Object.assign({},n,e,{options:Object.assign({},n.options,e.options),data:Object.assign({},n.data,e.data)}):e,t}),{}),Object.keys(c).map((function(t){return c[t]}))));return f.orderedModifiers=d.filter((function(t){return t.enabled})),f.orderedModifiers.forEach((function(t){var e=t.name,n=t.options,r=void 0===n?{}:n,i=t.effect;if("function"==typeof i){var o=i({state:f,name:e,instance:p,options:r});u.push(o||function(){})}})),p.update()},forceUpdate:function(){if(!c){var t=f.elements,e=t.reference,n=t.popper;if(y(e,n)){f.rects={reference:d(e,(0,v.Z)(n),"fixed"===f.options.strategy),popper:(0,l.Z)(n)},f.reset=!1,f.placement=f.options.placement,f.orderedModifiers.forEach((function(t){return f.modifiersData[t.name]=Object.assign({},t.data)}));for(var r=0;r<f.orderedModifiers.length;r++)if(!0!==f.reset){var i=f.orderedModifiers[r],o=i.fn,a=i.options,s=void 0===a?{}:a,u=i.name;"function"==typeof o&&(f=o({state:f,options:s,name:u,instance:p})||f)}else f.reset=!1,r=-1}}},update:(i=function(){return new Promise((function(t){p.forceUpdate(),t(f)}))},function(){return s||(s=new Promise((function(t){Promise.resolve().then((function(){s=void 0,t(i())}))}))),s}),destroy:function(){b(),c=!0}};if(!y(t,e))return p;function b(){u.forEach((function(t){return t()})),u=[]}return p.setOptions(n).then((function(t){!c&&n.onFirstUpdate&&n.onFirstUpdate(t)})),p}}},94985:function(t,e,n){"use strict";n.d(e,{Z:function(){return i}});var r=n(62556);function i(t,e){var n=e.getRootNode&&e.getRootNode();if(t.contains(e))return!0;if(n&&(0,r.Zq)(n)){var i=e;do{if(i&&t.isSameNode(i))return!0;i=i.parentNode||i.host}while(i)}return!1}},50400:function(t,e,n){"use strict";n.d(e,{Z:function(){return s}});var r=n(62556),i=n(138),o=n(62057),a=n(67977);function s(t,e,n){void 0===e&&(e=!1),void 0===n&&(n=!1);var s=t.getBoundingClientRect(),f=1,u=1;e&&(0,r.Re)(t)&&(f=t.offsetWidth>0&&(0,i.NM)(s.width)/t.offsetWidth||1,u=t.offsetHeight>0&&(0,i.NM)(s.height)/t.offsetHeight||1);var c=((0,r.kK)(t)?(0,o.Z)(t):window).visualViewport,p=!(0,a.Z)()&&n,d=(s.left+(p&&c?c.offsetLeft:0))/f,l=(s.top+(p&&c?c.offsetTop:0))/u,h=s.width/f,v=s.height/u;return{width:h,height:v,top:l,right:d+h,bottom:l+v,left:d,x:d,y:l}}},43062:function(t,e,n){"use strict";n.d(e,{Z:function(){return i}});var r=n(62057);function i(t){return(0,r.Z)(t).getComputedStyle(t)}},67252:function(t,e,n){"use strict";n.d(e,{Z:function(){return i}});var r=n(62556);function i(t){return(((0,r.kK)(t)?t.ownerDocument:t.document)||window.document).documentElement}},40583:function(t,e,n){"use strict";n.d(e,{Z:function(){return i}});var r=n(50400);function i(t){var e=(0,r.Z)(t),n=t.offsetWidth,i=t.offsetHeight;return Math.abs(e.width-n)<=1&&(n=e.width),Math.abs(e.height-i)<=1&&(i=e.height),{x:t.offsetLeft,y:t.offsetTop,width:n,height:i}}},96333:function(t,e,n){"use strict";function r(t){return t?(t.nodeName||"").toLowerCase():null}n.d(e,{Z:function(){return r}})},93779:function(t,e,n){"use strict";n.d(e,{Z:function(){return p}});var r=n(62057),i=n(96333),o=n(43062),a=n(62556);function s(t){return["table","td","th"].indexOf((0,i.Z)(t))>=0}var f=n(95923),u=n(85918);function c(t){return(0,a.Re)(t)&&"fixed"!==(0,o.Z)(t).position?t.offsetParent:null}function p(t){for(var e=(0,r.Z)(t),n=c(t);n&&s(n)&&"static"===(0,o.Z)(n).position;)n=c(n);return n&&("html"===(0,i.Z)(n)||"body"===(0,i.Z)(n)&&"static"===(0,o.Z)(n).position)?e:n||function(t){var e=/firefox/i.test((0,u.Z)());if(/Trident/i.test((0,u.Z)())&&(0,a.Re)(t)&&"fixed"===(0,o.Z)(t).position)return null;var n=(0,f.Z)(t);for((0,a.Zq)(n)&&(n=n.host);(0,a.Re)(n)&&["html","body"].indexOf((0,i.Z)(n))<0;){var r=(0,o.Z)(n);if("none"!==r.transform||"none"!==r.perspective||"paint"===r.contain||-1!==["transform","perspective"].indexOf(r.willChange)||e&&"filter"===r.willChange||e&&r.filter&&"none"!==r.filter)return n;n=n.parentNode}return null}(t)||e}},95923:function(t,e,n){"use strict";n.d(e,{Z:function(){return a}});var r=n(96333),i=n(67252),o=n(62556);function a(t){return"html"===(0,r.Z)(t)?t:t.assignedSlot||t.parentNode||((0,o.Zq)(t)?t.host:null)||(0,i.Z)(t)}},62057:function(t,e,n){"use strict";function r(t){if(null==t)return window;if("[object Window]"!==t.toString()){var e=t.ownerDocument;return e&&e.defaultView||window}return t}n.d(e,{Z:function(){return r}})},82163:function(t,e,n){"use strict";n.d(e,{Z:function(){return i}});var r=n(62057);function i(t){var e=(0,r.Z)(t);return{scrollLeft:e.pageXOffset,scrollTop:e.pageYOffset}}},4063:function(t,e,n){"use strict";n.d(e,{Z:function(){return a}});var r=n(50400),i=n(67252),o=n(82163);function a(t){return(0,r.Z)((0,i.Z)(t)).left+(0,o.Z)(t).scrollLeft}},62556:function(t,e,n){"use strict";n.d(e,{Re:function(){return o},Zq:function(){return a},kK:function(){return i}});var r=n(62057);function i(t){return t instanceof(0,r.Z)(t).Element||t instanceof Element}function o(t){return t instanceof(0,r.Z)(t).HTMLElement||t instanceof HTMLElement}function a(t){return"undefined"!=typeof ShadowRoot&&(t instanceof(0,r.Z)(t).ShadowRoot||t instanceof ShadowRoot)}},67977:function(t,e,n){"use strict";n.d(e,{Z:function(){return i}});var r=n(85918);function i(){return!/^((?!chrome|android).)*safari/i.test((0,r.Z)())}},60611:function(t,e,n){"use strict";n.d(e,{Z:function(){return i}});var r=n(43062);function i(t){var e=(0,r.Z)(t),n=e.overflow,i=e.overflowX,o=e.overflowY;return/auto|scroll|overlay|hidden/.test(n+o+i)}},63624:function(t,e,n){"use strict";n.d(e,{Z:function(){return u}});var r=n(95923),i=n(60611),o=n(96333),a=n(62556);function s(t){return["html","body","#document"].indexOf((0,o.Z)(t))>=0?t.ownerDocument.body:(0,a.Re)(t)&&(0,i.Z)(t)?t:s((0,r.Z)(t))}var f=n(62057);function u(t,e){var n;void 0===e&&(e=[]);var o=s(t),a=o===(null==(n=t.ownerDocument)?void 0:n.body),c=(0,f.Z)(o),p=a?[c].concat(c.visualViewport||[],(0,i.Z)(o)?o:[]):o,d=e.concat(p);return a?d:d.concat(u((0,r.Z)(p)))}},87701:function(t,e,n){"use strict";n.d(e,{BL:function(){return u},Ct:function(){return m},F2:function(){return o},I:function(){return i},Pj:function(){return d},YP:function(){return h},bw:function(){return v},d7:function(){return s},k5:function(){return l},mv:function(){return f},t$:function(){return a},ut:function(){return c},we:function(){return r},xs:function(){return g},zV:function(){return p}});var r="top",i="bottom",o="right",a="left",s="auto",f=[r,i,o,a],u="start",c="end",p="clippingParents",d="viewport",l="popper",h="reference",v=f.reduce((function(t,e){return t.concat([e+"-"+u,e+"-"+c])}),[]),m=[].concat(f,[s]).reduce((function(t,e){return t.concat([e,e+"-"+u,e+"-"+c])}),[]),g=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"]},66896:function(t,e,n){"use strict";var r=n(6206),i=n(40583),o=n(94985),a=n(93779),s=n(11516),f=n(57516),u=n(63293),c=n(33706),p=n(87701);e.Z={name:"arrow",enabled:!0,phase:"main",fn:function(t){var e,n=t.state,o=t.name,d=t.options,l=n.elements.arrow,h=n.modifiersData.popperOffsets,v=(0,r.Z)(n.placement),m=(0,s.Z)(v),g=[p.t$,p.F2].indexOf(v)>=0?"height":"width";if(l&&h){var Z=function(t,e){return t="function"==typeof t?t(Object.assign({},e.rects,{placement:e.placement})):t,(0,u.Z)("number"!=typeof t?t:(0,c.Z)(t,p.mv))}(d.padding,n),y=(0,i.Z)(l),b="y"===m?p.we:p.t$,w="y"===m?p.I:p.F2,x=n.rects.reference[g]+n.rects.reference[m]-h[m]-n.rects.popper[g],O=h[m]-n.rects.reference[m],k=(0,a.Z)(l),j=k?"y"===m?k.clientHeight||0:k.clientWidth||0:0,E=x/2-O/2,D=Z[b],R=j-y[g]-Z[w],P=j/2-y[g]/2+E,L=(0,f.u)(D,P,R),A=m;n.modifiersData[o]=((e={})[A]=L,e.centerOffset=L-P,e)}},effect:function(t){var e=t.state,n=t.options.element,r=void 0===n?"[data-popper-arrow]":n;null!=r&&("string"!=typeof r||(r=e.elements.popper.querySelector(r)))&&(0,o.Z)(e.elements.popper,r)&&(e.elements.arrow=r)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]}},36531:function(t,e,n){"use strict";var r=n(87701),i=n(93779),o=n(62057),a=n(67252),s=n(43062),f=n(6206),u=n(14943),c=n(138),p={top:"auto",right:"auto",bottom:"auto",left:"auto"};function d(t){var e,n=t.popper,f=t.popperRect,u=t.placement,d=t.variation,l=t.offsets,h=t.position,v=t.gpuAcceleration,m=t.adaptive,g=t.roundOffsets,Z=t.isFixed,y=l.x,b=void 0===y?0:y,w=l.y,x=void 0===w?0:w,O="function"==typeof g?g({x:b,y:x}):{x:b,y:x};b=O.x,x=O.y;var k=l.hasOwnProperty("x"),j=l.hasOwnProperty("y"),E=r.t$,D=r.we,R=window;if(m){var P=(0,i.Z)(n),L="clientHeight",A="clientWidth";P===(0,o.Z)(n)&&(P=(0,a.Z)(n),"static"!==(0,s.Z)(P).position&&"absolute"===h&&(L="scrollHeight",A="scrollWidth")),(u===r.we||(u===r.t$||u===r.F2)&&d===r.ut)&&(D=r.I,x-=(Z&&P===R&&R.visualViewport?R.visualViewport.height:P[L])-f.height,x*=v?1:-1),u!==r.t$&&(u!==r.we&&u!==r.I||d!==r.ut)||(E=r.F2,b-=(Z&&P===R&&R.visualViewport?R.visualViewport.width:P[A])-f.width,b*=v?1:-1)}var F,M=Object.assign({position:h},m&&p),T=!0===g?function(t){var e=t.x,n=t.y,r=window.devicePixelRatio||1;return{x:(0,c.NM)(e*r)/r||0,y:(0,c.NM)(n*r)/r||0}}({x:b,y:x}):{x:b,y:x};return b=T.x,x=T.y,v?Object.assign({},M,((F={})[D]=j?"0":"",F[E]=k?"0":"",F.transform=(R.devicePixelRatio||1)<=1?"translate("+b+"px, "+x+"px)":"translate3d("+b+"px, "+x+"px, 0)",F)):Object.assign({},M,((e={})[D]=j?x+"px":"",e[E]=k?b+"px":"",e.transform="",e))}e.Z={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(t){var e=t.state,n=t.options,r=n.gpuAcceleration,i=void 0===r||r,o=n.adaptive,a=void 0===o||o,s=n.roundOffsets,c=void 0===s||s,p={placement:(0,f.Z)(e.placement),variation:(0,u.Z)(e.placement),popper:e.elements.popper,popperRect:e.rects.popper,gpuAcceleration:i,isFixed:"fixed"===e.options.strategy};null!=e.modifiersData.popperOffsets&&(e.styles.popper=Object.assign({},e.styles.popper,d(Object.assign({},p,{offsets:e.modifiersData.popperOffsets,position:e.options.strategy,adaptive:a,roundOffsets:c})))),null!=e.modifiersData.arrow&&(e.styles.arrow=Object.assign({},e.styles.arrow,d(Object.assign({},p,{offsets:e.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:c})))),e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-placement":e.placement})},data:{}}},82372:function(t,e,n){"use strict";var r=n(62057),i={passive:!0};e.Z={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(t){var e=t.state,n=t.instance,o=t.options,a=o.scroll,s=void 0===a||a,f=o.resize,u=void 0===f||f,c=(0,r.Z)(e.elements.popper),p=[].concat(e.scrollParents.reference,e.scrollParents.popper);return s&&p.forEach((function(t){t.addEventListener("scroll",n.update,i)})),u&&c.addEventListener("resize",n.update,i),function(){s&&p.forEach((function(t){t.removeEventListener("scroll",n.update,i)})),u&&c.removeEventListener("resize",n.update,i)}},data:{}}},45228:function(t,e,n){"use strict";n.d(e,{Z:function(){return p}});var r={left:"right",right:"left",bottom:"top",top:"bottom"};function i(t){return t.replace(/left|right|bottom|top/g,(function(t){return r[t]}))}var o=n(6206),a={start:"end",end:"start"};function s(t){return t.replace(/start|end/g,(function(t){return a[t]}))}var f=n(9966),u=n(14943),c=n(87701),p={name:"flip",enabled:!0,phase:"main",fn:function(t){var e=t.state,n=t.options,r=t.name;if(!e.modifiersData[r]._skip){for(var a=n.mainAxis,p=void 0===a||a,d=n.altAxis,l=void 0===d||d,h=n.fallbackPlacements,v=n.padding,m=n.boundary,g=n.rootBoundary,Z=n.altBoundary,y=n.flipVariations,b=void 0===y||y,w=n.allowedAutoPlacements,x=e.options.placement,O=(0,o.Z)(x),k=h||(O!==x&&b?function(t){if((0,o.Z)(t)===c.d7)return[];var e=i(t);return[s(t),e,s(e)]}(x):[i(x)]),j=[x].concat(k).reduce((function(t,n){return t.concat((0,o.Z)(n)===c.d7?function(t,e){void 0===e&&(e={});var n=e,r=n.placement,i=n.boundary,a=n.rootBoundary,s=n.padding,p=n.flipVariations,d=n.allowedAutoPlacements,l=void 0===d?c.Ct:d,h=(0,u.Z)(r),v=h?p?c.bw:c.bw.filter((function(t){return(0,u.Z)(t)===h})):c.mv,m=v.filter((function(t){return l.indexOf(t)>=0}));0===m.length&&(m=v);var g=m.reduce((function(e,n){return e[n]=(0,f.Z)(t,{placement:n,boundary:i,rootBoundary:a,padding:s})[(0,o.Z)(n)],e}),{});return Object.keys(g).sort((function(t,e){return g[t]-g[e]}))}(e,{placement:n,boundary:m,rootBoundary:g,padding:v,flipVariations:b,allowedAutoPlacements:w}):n)}),[]),E=e.rects.reference,D=e.rects.popper,R=new Map,P=!0,L=j[0],A=0;A<j.length;A++){var F=j[A],M=(0,o.Z)(F),T=(0,u.Z)(F)===c.BL,V=[c.we,c.I].indexOf(M)>=0,B=V?"width":"height",W=(0,f.Z)(e,{placement:F,boundary:m,rootBoundary:g,altBoundary:Z,padding:v}),I=V?T?c.F2:c.t$:T?c.I:c.we;E[B]>D[B]&&(I=i(I));var C=i(I),H=[];if(p&&H.push(W[M]<=0),l&&H.push(W[I]<=0,W[C]<=0),H.every((function(t){return t}))){L=F,P=!1;break}R.set(F,H)}if(P)for(var S=function(t){var e=j.find((function(e){var n=R.get(e);if(n)return n.slice(0,t).every((function(t){return t}))}));if(e)return L=e,"break"},q=b?3:1;q>0&&"break"!==S(q);q--);e.placement!==L&&(e.modifiersData[r]._skip=!0,e.placement=L,e.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}}},19892:function(t,e,n){"use strict";var r=n(87701),i=n(9966);function o(t,e,n){return void 0===n&&(n={x:0,y:0}),{top:t.top-e.height-n.y,right:t.right-e.width+n.x,bottom:t.bottom-e.height+n.y,left:t.left-e.width-n.x}}function a(t){return[r.we,r.F2,r.I,r.t$].some((function(e){return t[e]>=0}))}e.Z={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(t){var e=t.state,n=t.name,r=e.rects.reference,s=e.rects.popper,f=e.modifiersData.preventOverflow,u=(0,i.Z)(e,{elementContext:"reference"}),c=(0,i.Z)(e,{altBoundary:!0}),p=o(u,r),d=o(c,s,f),l=a(p),h=a(d);e.modifiersData[n]={referenceClippingOffsets:p,popperEscapeOffsets:d,isReferenceHidden:l,hasPopperEscaped:h},e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-reference-hidden":l,"data-popper-escaped":h})}}},82122:function(t,e,n){"use strict";var r=n(6206),i=n(87701);e.Z={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(t){var e=t.state,n=t.options,o=t.name,a=n.offset,s=void 0===a?[0,0]:a,f=i.Ct.reduce((function(t,n){return t[n]=function(t,e,n){var o=(0,r.Z)(t),a=[i.t$,i.we].indexOf(o)>=0?-1:1,s="function"==typeof n?n(Object.assign({},e,{placement:t})):n,f=s[0],u=s[1];return f=f||0,u=(u||0)*a,[i.t$,i.F2].indexOf(o)>=0?{x:u,y:f}:{x:f,y:u}}(n,e.rects,s),t}),{}),u=f[e.placement],c=u.x,p=u.y;null!=e.modifiersData.popperOffsets&&(e.modifiersData.popperOffsets.x+=c,e.modifiersData.popperOffsets.y+=p),e.modifiersData[o]=f}}},77421:function(t,e,n){"use strict";var r=n(72581);e.Z={name:"popperOffsets",enabled:!0,phase:"read",fn:function(t){var e=t.state,n=t.name;e.modifiersData[n]=(0,r.Z)({reference:e.rects.reference,element:e.rects.popper,strategy:"absolute",placement:e.placement})},data:{}}},43920:function(t,e,n){"use strict";n.d(e,{Z:function(){return l}});var r=n(87701),i=n(6206),o=n(11516),a=n(57516),s=n(40583),f=n(93779),u=n(9966),c=n(14943),p=n(23607),d=n(138),l={name:"preventOverflow",enabled:!0,phase:"main",fn:function(t){var e=t.state,n=t.options,l=t.name,h=n.mainAxis,v=void 0===h||h,m=n.altAxis,g=void 0!==m&&m,Z=n.boundary,y=n.rootBoundary,b=n.altBoundary,w=n.padding,x=n.tether,O=void 0===x||x,k=n.tetherOffset,j=void 0===k?0:k,E=(0,u.Z)(e,{boundary:Z,rootBoundary:y,padding:w,altBoundary:b}),D=(0,i.Z)(e.placement),R=(0,c.Z)(e.placement),P=!R,L=(0,o.Z)(D),A="x"===L?"y":"x",F=e.modifiersData.popperOffsets,M=e.rects.reference,T=e.rects.popper,V="function"==typeof j?j(Object.assign({},e.rects,{placement:e.placement})):j,B="number"==typeof V?{mainAxis:V,altAxis:V}:Object.assign({mainAxis:0,altAxis:0},V),W=e.modifiersData.offset?e.modifiersData.offset[e.placement]:null,I={x:0,y:0};if(F){if(v){var C,H="y"===L?r.we:r.t$,S="y"===L?r.I:r.F2,q="y"===L?"height":"width",N=F[L],$=N+E[H],_=N-E[S],K=O?-T[q]/2:0,U=R===r.BL?M[q]:T[q],z=R===r.BL?-T[q]:-M[q],Y=e.elements.arrow,X=O&&Y?(0,s.Z)(Y):{width:0,height:0},G=e.modifiersData["arrow#persistent"]?e.modifiersData["arrow#persistent"].padding:(0,p.Z)(),J=G[H],Q=G[S],tt=(0,a.u)(0,M[q],X[q]),et=P?M[q]/2-K-tt-J-B.mainAxis:U-tt-J-B.mainAxis,nt=P?-M[q]/2+K+tt+Q+B.mainAxis:z+tt+Q+B.mainAxis,rt=e.elements.arrow&&(0,f.Z)(e.elements.arrow),it=rt?"y"===L?rt.clientTop||0:rt.clientLeft||0:0,ot=null!=(C=null==W?void 0:W[L])?C:0,at=N+et-ot-it,st=N+nt-ot,ft=(0,a.u)(O?(0,d.VV)($,at):$,N,O?(0,d.Fp)(_,st):_);F[L]=ft,I[L]=ft-N}if(g){var ut,ct="x"===L?r.we:r.t$,pt="x"===L?r.I:r.F2,dt=F[A],lt="y"===A?"height":"width",ht=dt+E[ct],vt=dt-E[pt],mt=-1!==[r.we,r.t$].indexOf(D),gt=null!=(ut=null==W?void 0:W[A])?ut:0,Zt=mt?ht:dt-M[lt]-T[lt]-gt+B.altAxis,yt=mt?dt+M[lt]+T[lt]-gt-B.altAxis:vt,bt=O&&mt?(0,a.q)(Zt,dt,yt):(0,a.u)(O?Zt:ht,dt,O?yt:vt);F[A]=bt,I[A]=bt-dt}e.modifiersData[l]=I}},requiresIfExists:["offset"]}},72581:function(t,e,n){"use strict";n.d(e,{Z:function(){return s}});var r=n(6206),i=n(14943),o=n(11516),a=n(87701);function s(t){var e,n=t.reference,s=t.element,f=t.placement,u=f?(0,r.Z)(f):null,c=f?(0,i.Z)(f):null,p=n.x+n.width/2-s.width/2,d=n.y+n.height/2-s.height/2;switch(u){case a.we:e={x:p,y:n.y-s.height};break;case a.I:e={x:p,y:n.y+n.height};break;case a.F2:e={x:n.x+n.width,y:d};break;case a.t$:e={x:n.x-s.width,y:d};break;default:e={x:n.x,y:n.y}}var l=u?(0,o.Z)(u):null;if(null!=l){var h="y"===l?"height":"width";switch(c){case a.BL:e[l]=e[l]-(n[h]/2-s[h]/2);break;case a.ut:e[l]=e[l]+(n[h]/2-s[h]/2)}}return e}},9966:function(t,e,n){"use strict";n.d(e,{Z:function(){return O}});var r=n(87701),i=n(62057),o=n(67252),a=n(4063),s=n(67977),f=n(43062),u=n(82163),c=n(138),p=n(63624),d=n(93779),l=n(62556),h=n(50400),v=n(95923),m=n(94985),g=n(96333);function Z(t){return Object.assign({},t,{left:t.x,top:t.y,right:t.x+t.width,bottom:t.y+t.height})}function y(t,e,n){return e===r.Pj?Z(function(t,e){var n=(0,i.Z)(t),r=(0,o.Z)(t),f=n.visualViewport,u=r.clientWidth,c=r.clientHeight,p=0,d=0;if(f){u=f.width,c=f.height;var l=(0,s.Z)();(l||!l&&"fixed"===e)&&(p=f.offsetLeft,d=f.offsetTop)}return{width:u,height:c,x:p+(0,a.Z)(t),y:d}}(t,n)):(0,l.kK)(e)?function(t,e){var n=(0,h.Z)(t,!1,"fixed"===e);return n.top=n.top+t.clientTop,n.left=n.left+t.clientLeft,n.bottom=n.top+t.clientHeight,n.right=n.left+t.clientWidth,n.width=t.clientWidth,n.height=t.clientHeight,n.x=n.left,n.y=n.top,n}(e,n):Z(function(t){var e,n=(0,o.Z)(t),r=(0,u.Z)(t),i=null==(e=t.ownerDocument)?void 0:e.body,s=(0,c.Fp)(n.scrollWidth,n.clientWidth,i?i.scrollWidth:0,i?i.clientWidth:0),p=(0,c.Fp)(n.scrollHeight,n.clientHeight,i?i.scrollHeight:0,i?i.clientHeight:0),d=-r.scrollLeft+(0,a.Z)(t),l=-r.scrollTop;return"rtl"===(0,f.Z)(i||n).direction&&(d+=(0,c.Fp)(n.clientWidth,i?i.clientWidth:0)-s),{width:s,height:p,x:d,y:l}}((0,o.Z)(t)))}var b=n(72581),w=n(63293),x=n(33706);function O(t,e){void 0===e&&(e={});var n=e,i=n.placement,a=void 0===i?t.placement:i,s=n.strategy,u=void 0===s?t.strategy:s,O=n.boundary,k=void 0===O?r.zV:O,j=n.rootBoundary,E=void 0===j?r.Pj:j,D=n.elementContext,R=void 0===D?r.k5:D,P=n.altBoundary,L=void 0!==P&&P,A=n.padding,F=void 0===A?0:A,M=(0,w.Z)("number"!=typeof F?F:(0,x.Z)(F,r.mv)),T=R===r.k5?r.YP:r.k5,V=t.rects.popper,B=t.elements[L?T:R],W=function(t,e,n,r){var i="clippingParents"===e?function(t){var e=(0,p.Z)((0,v.Z)(t)),n=["absolute","fixed"].indexOf((0,f.Z)(t).position)>=0&&(0,l.Re)(t)?(0,d.Z)(t):t;return(0,l.kK)(n)?e.filter((function(t){return(0,l.kK)(t)&&(0,m.Z)(t,n)&&"body"!==(0,g.Z)(t)})):[]}(t):[].concat(e),o=[].concat(i,[n]),a=o[0],s=o.reduce((function(e,n){var i=y(t,n,r);return e.top=(0,c.Fp)(i.top,e.top),e.right=(0,c.VV)(i.right,e.right),e.bottom=(0,c.VV)(i.bottom,e.bottom),e.left=(0,c.Fp)(i.left,e.left),e}),y(t,a,r));return s.width=s.right-s.left,s.height=s.bottom-s.top,s.x=s.left,s.y=s.top,s}((0,l.kK)(B)?B:B.contextElement||(0,o.Z)(t.elements.popper),k,E,u),I=(0,h.Z)(t.elements.reference),C=(0,b.Z)({reference:I,element:V,strategy:"absolute",placement:a}),H=Z(Object.assign({},V,C)),S=R===r.k5?H:I,q={top:W.top-S.top+M.top,bottom:S.bottom-W.bottom+M.bottom,left:W.left-S.left+M.left,right:S.right-W.right+M.right},N=t.modifiersData.offset;if(R===r.k5&&N){var $=N[a];Object.keys(q).forEach((function(t){var e=[r.F2,r.I].indexOf(t)>=0?1:-1,n=[r.we,r.I].indexOf(t)>=0?"y":"x";q[t]+=$[n]*e}))}return q}},33706:function(t,e,n){"use strict";function r(t,e){return e.reduce((function(e,n){return e[n]=t,e}),{})}n.d(e,{Z:function(){return r}})},6206:function(t,e,n){"use strict";function r(t){return t.split("-")[0]}n.d(e,{Z:function(){return r}})},23607:function(t,e,n){"use strict";function r(){return{top:0,right:0,bottom:0,left:0}}n.d(e,{Z:function(){return r}})},11516:function(t,e,n){"use strict";function r(t){return["top","bottom"].indexOf(t)>=0?"x":"y"}n.d(e,{Z:function(){return r}})},14943:function(t,e,n){"use strict";function r(t){return t.split("-")[1]}n.d(e,{Z:function(){return r}})},138:function(t,e,n){"use strict";n.d(e,{Fp:function(){return r},NM:function(){return o},VV:function(){return i}});var r=Math.max,i=Math.min,o=Math.round},63293:function(t,e,n){"use strict";n.d(e,{Z:function(){return i}});var r=n(23607);function i(t){return Object.assign({},(0,r.Z)(),t)}},85918:function(t,e,n){"use strict";function r(){var t=navigator.userAgentData;return null!=t&&t.brands?t.brands.map((function(t){return t.brand+"/"+t.version})).join(" "):navigator.userAgent}n.d(e,{Z:function(){return r}})},57516:function(t,e,n){"use strict";n.d(e,{q:function(){return o},u:function(){return i}});var r=n(138);function i(t,e,n){return(0,r.Fp)(t,(0,r.VV)(e,n))}function o(t,e,n){var r=i(t,e,n);return r>n?n:r}},94184:function(t,e){var n;!function(){"use strict";var r={}.hasOwnProperty;function i(){for(var t=[],e=0;e<arguments.length;e++){var n=arguments[e];if(n){var o=typeof n;if("string"===o||"number"===o)t.push(n);else if(Array.isArray(n)){if(n.length){var a=i.apply(null,n);a&&t.push(a)}}else if("object"===o)if(n.toString===Object.prototype.toString)for(var s in n)r.call(n,s)&&n[s]&&t.push(s);else t.push(n.toString())}}return t.join(" ")}t.exports?(i.default=i,t.exports=i):void 0===(n=function(){return i}.apply(e,[]))||(t.exports=n)}()},92703:function(t,e,n){"use strict";var r=n(50414);function i(){}function o(){}o.resetWarningCache=i,t.exports=function(){function t(t,e,n,i,o,a){if(a!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function e(){return t}t.isRequired=t;var n={array:t,bigint:t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:e,element:t,elementType:t,instanceOf:e,node:t,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e,checkPropTypes:o,resetWarningCache:i};return n.PropTypes=n,n}},45697:function(t,e,n){t.exports=n(92703)()},50414:function(t){"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},42473:function(t){"use strict";t.exports=function(){}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,