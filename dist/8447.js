(self.webpackChunklavender_medical=self.webpackChunklavender_medical||[]).push([[8447],{92778:function(e){function t(e,a){if(!(this instanceof t))return new t(e,a);this.per_page=e||25,this.length=a||10}e.exports=t,t.prototype.build=function(e,t){var a=Math.ceil(e/this.per_page);e=parseInt(e,10),(t=parseInt(t,10)||1)<1&&(t=1),t>a&&(t=a);var i=Math.max(1,t-Math.floor(this.length/2)),n=Math.min(a,t+Math.floor(this.length/2));n-i+1<this.length&&(t<a/2?n=Math.min(a,n+(this.length-(n-i))):i=Math.max(1,i-(this.length-(n-i)))),n-i+1>this.length&&(t>a/2?i++:n--);var r=this.per_page*(t-1);r<0&&(r=0);var s=this.per_page*t-1;return s<0&&(s=0),s>Math.max(e-1,0)&&(s=Math.max(e-1,0)),{total_pages:a,pages:Math.min(n-i+1,a),current_page:t,first_page:i,last_page:n,previous_page:t-1,next_page:t+1,has_previous_page:t>1,has_next_page:t<a,total_results:e,results:Math.min(s-r+1,e),first_result:r,last_result:s}}},49865:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==u(e)&&"function"!=typeof e)return{default:e};var t=l();if(t&&t.has(e))return t.get(e);var a={},i=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=i?Object.getOwnPropertyDescriptor(e,n):null;r&&(r.get||r.set)?Object.defineProperty(a,n,r):a[n]=e[n]}return a.default=e,t&&t.set(e,a),a}(a(95877)),n=s(a(45697)),r=s(a(94184));function s(e){return e&&e.__esModule?e:{default:e}}function l(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return l=function(){return e},e}function u(e){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},u(e)}function o(e,t){for(var a=0;a<t.length;a++){var i=t[a];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function f(e){return f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},f(e)}function p(e,t){return p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},p(e,t)}function c(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var d=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}(this,f(t).apply(this,arguments))}var a,n;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(t,e),a=t,(n=[{key:"handleClick",value:function(e){var t=this.props,a=t.isDisabled,i=t.pageNumber;e.preventDefault(),a||this.props.onClick(i)}},{key:"render",value:function(){var e,t=this.props,a=t.pageText,n=(t.pageNumber,t.activeClass),s=t.itemClass,l=t.linkClass,u=t.activeLinkClass,o=t.disabledClass,f=t.isActive,p=t.isDisabled,d=t.href,g=t.ariaLabel,b=(0,r.default)(s,(c(e={},n,f),c(e,o,p),e)),h=(0,r.default)(l,c({},u,f));return i.default.createElement("li",{className:b,onClick:this.handleClick.bind(this)},i.default.createElement("a",{className:h,href:d,"aria-label":g},a))}}])&&o(a.prototype,n),t}(i.Component);t.default=d,c(d,"propTypes",{pageText:n.default.oneOfType([n.default.string,n.default.element]),pageNumber:n.default.number.isRequired,onClick:n.default.func.isRequired,isActive:n.default.bool.isRequired,isDisabled:n.default.bool,activeClass:n.default.string,activeLinkClass:n.default.string,itemClass:n.default.string,linkClass:n.default.string,disabledClass:n.default.string,href:n.default.string}),c(d,"defaultProps",{activeClass:"active",disabledClass:"disabled",itemClass:void 0,linkClass:void 0,activeLinkCLass:void 0,isActive:!1,isDisabled:!1,href:"#"})},58447:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==f(e)&&"function"!=typeof e)return{default:e};var t=o();if(t&&t.has(e))return t.get(e);var a={},i=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=i?Object.getOwnPropertyDescriptor(e,n):null;r&&(r.get||r.set)?Object.defineProperty(a,n,r):a[n]=e[n]}return a.default=e,t&&t.set(e,a),a}(a(95877)),n=u(a(45697)),r=u(a(92778)),s=u(a(49865)),l=u(a(94184));function u(e){return e&&e.__esModule?e:{default:e}}function o(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return o=function(){return e},e}function f(e){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f(e)}function p(e,t){for(var a=0;a<t.length;a++){var i=t[a];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function c(e){return c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},c(e)}function d(e,t){return d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},d(e,t)}function g(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var b=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){return!t||"object"!==f(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}(this,c(t).apply(this,arguments))}var a,n;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(t,e),a=t,(n=[{key:"isFirstPageVisible",value:function(e){var t=this.props,a=t.hideDisabled;return t.hideNavigation,!(t.hideFirstLastPages||a&&!e)}},{key:"isPrevPageVisible",value:function(e){var t=this.props,a=t.hideDisabled;return!(t.hideNavigation||a&&!e)}},{key:"isNextPageVisible",value:function(e){var t=this.props,a=t.hideDisabled;return!(t.hideNavigation||a&&!e)}},{key:"isLastPageVisible",value:function(e){var t=this.props,a=t.hideDisabled;return t.hideNavigation,!(t.hideFirstLastPages||a&&!e)}},{key:"buildPages",value:function(){for(var e=[],t=this.props,a=t.itemsCountPerPage,n=t.pageRangeDisplayed,u=t.activePage,o=t.prevPageText,f=t.nextPageText,p=t.firstPageText,c=t.lastPageText,d=t.totalItemsCount,g=t.onChange,b=t.activeClass,h=t.itemClass,v=t.itemClassFirst,y=t.itemClassPrev,m=t.itemClassNext,C=t.itemClassLast,_=t.activeLinkClass,P=t.disabledClass,k=(t.hideDisabled,t.hideNavigation,t.linkClass),x=t.linkClassFirst,O=t.linkClassPrev,j=t.linkClassNext,w=t.linkClassLast,T=(t.hideFirstLastPages,t.getPageUrl),L=new r.default(a,n).build(d,u),N=L.first_page;N<=L.last_page;N++)e.push(i.default.createElement(s.default,{isActive:N===u,key:N,href:T(N),pageNumber:N,pageText:N+"",onClick:g,itemClass:h,linkClass:k,activeClass:b,activeLinkClass:_,ariaLabel:"Go to page number ".concat(N)}));return this.isPrevPageVisible(L.has_previous_page)&&e.unshift(i.default.createElement(s.default,{key:"prev"+L.previous_page,href:T(L.previous_page),pageNumber:L.previous_page,onClick:g,pageText:o,isDisabled:!L.has_previous_page,itemClass:(0,l.default)(h,y),linkClass:(0,l.default)(k,O),disabledClass:P,ariaLabel:"Go to previous page"})),this.isFirstPageVisible(L.has_previous_page)&&e.unshift(i.default.createElement(s.default,{key:"first",href:T(1),pageNumber:1,onClick:g,pageText:p,isDisabled:!L.has_previous_page,itemClass:(0,l.default)(h,v),linkClass:(0,l.default)(k,x),disabledClass:P,ariaLabel:"Go to first page"})),this.isNextPageVisible(L.has_next_page)&&e.push(i.default.createElement(s.default,{key:"next"+L.next_page,href:T(L.next_page),pageNumber:L.next_page,onClick:g,pageText:f,isDisabled:!L.has_next_page,itemClass:(0,l.default)(h,m),linkClass:(0,l.default)(k,j),disabledClass:P,ariaLabel:"Go to next page"})),this.isLastPageVisible(L.has_next_page)&&e.push(i.default.createElement(s.default,{key:"last",href:T(L.total_pages),pageNumber:L.total_pages,onClick:g,pageText:c,isDisabled:L.current_page===L.total_pages,itemClass:(0,l.default)(h,C),linkClass:(0,l.default)(k,w),disabledClass:P,ariaLabel:"Go to last page"})),e}},{key:"render",value:function(){var e=this.buildPages();return i.default.createElement("ul",{className:this.props.innerClass},e)}}])&&p(a.prototype,n),t}(i.default.Component);t.default=b,g(b,"propTypes",{totalItemsCount:n.default.number.isRequired,onChange:n.default.func.isRequired,activePage:n.default.number,itemsCountPerPage:n.default.number,pageRangeDisplayed:n.default.number,prevPageText:n.default.oneOfType([n.default.string,n.default.element]),nextPageText:n.default.oneOfType([n.default.string,n.default.element]),lastPageText:n.default.oneOfType([n.default.string,n.default.element]),firstPageText:n.default.oneOfType([n.default.string,n.default.element]),disabledClass:n.default.string,hideDisabled:n.default.bool,hideNavigation:n.default.bool,innerClass:n.default.string,itemClass:n.default.string,itemClassFirst:n.default.string,itemClassPrev:n.default.string,itemClassNext:n.default.string,itemClassLast:n.default.string,linkClass:n.default.string,activeClass:n.default.string,activeLinkClass:n.default.string,linkClassFirst:n.default.string,linkClassPrev:n.default.string,linkClassNext:n.default.string,linkClassLast:n.default.string,hideFirstLastPages:n.default.bool,getPageUrl:n.default.func}),g(b,"defaultProps",{itemsCountPerPage:10,pageRangeDisplayed:5,activePage:1,prevPageText:"⟨",firstPageText:"«",nextPageText:"⟩",lastPageText:"»",innerClass:"pagination",itemClass:void 0,linkClass:void 0,activeLinkClass:void 0,hideFirstLastPages:!1,getPageUrl:function(e){return"#"}})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,