"use strict";(self.webpackChunklavender_medical=self.webpackChunklavender_medical||[]).push([[5430,6495],{26495:function(t,e,n){n.r(e),n.d(e,{Bar:function(){return p},Bubble:function(){return A},Chart:function(){return b},Doughnut:function(){return C},Line:function(){return h},Pie:function(){return w},PolarArea:function(){return m},Radar:function(){return v},Scatter:function(){return y},getDatasetAtEvent:function(){return i},getElementAtEvent:function(){return f},getElementsAtEvent:function(){return d}});var r=n(10756),u=n(65986);const a="label";function o(t,e){"function"==typeof t?t(e):t&&(t.current=e)}function c(t,e){t.labels=e}function s(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:a;const r=[];t.datasets=e.map((e=>{const u=t.datasets.find((t=>t[n]===e[n]));return u&&e.data&&!r.includes(u)?(r.push(u),Object.assign(u,e),u):{...e}}))}function l(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:a;const n={labels:[],datasets:[]};return c(n,t.labels),s(n,t.datasets,e),n}function i(t,e){return t.getElementsAtEventForMode(e.nativeEvent,"dataset",{intersect:!0},!1)}function f(t,e){return t.getElementsAtEventForMode(e.nativeEvent,"nearest",{intersect:!0},!1)}function d(t,e){return t.getElementsAtEventForMode(e.nativeEvent,"index",{intersect:!0},!1)}function g(t,e){const{height:n=150,width:a=300,redraw:i=!1,datasetIdKey:f,type:d,data:g,options:b,plugins:E=[],fallbackContent:h,updateMode:p,...v}=t,C=(0,r.useRef)(null),m=(0,r.useRef)(),A=()=>{C.current&&(m.current=new u.Chart(C.current,{type:d,data:l(g,f),options:b&&{...b},plugins:E}),o(e,m.current))},w=()=>{o(e,null),m.current&&(m.current.destroy(),m.current=null)};return(0,r.useEffect)((()=>{!i&&m.current&&b&&function(t,e){const n=t.options;n&&e&&Object.assign(n,e)}(m.current,b)}),[i,b]),(0,r.useEffect)((()=>{!i&&m.current&&c(m.current.config.data,g.labels)}),[i,g.labels]),(0,r.useEffect)((()=>{!i&&m.current&&g.datasets&&s(m.current.config.data,g.datasets,f)}),[i,g.datasets]),(0,r.useEffect)((()=>{m.current&&(i?(w(),setTimeout(A)):m.current.update(p))}),[i,b,g.labels,g.datasets,p]),(0,r.useEffect)((()=>{m.current&&(w(),setTimeout(A))}),[d]),(0,r.useEffect)((()=>(A(),()=>w())),[]),r.createElement("canvas",Object.assign({ref:C,role:"img",height:n,width:a},v),h)}const b=(0,r.forwardRef)(g);function E(t,e){return u.Chart.register(e),(0,r.forwardRef)(((e,n)=>r.createElement(b,Object.assign({},e,{ref:n,type:t}))))}const h=E("line",u.LineController),p=E("bar",u.BarController),v=E("radar",u.RadarController),C=E("doughnut",u.DoughnutController),m=E("polarArea",u.PolarAreaController),A=E("bubble",u.BubbleController),w=E("pie",u.PieController),y=E("scatter",u.ScatterController)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,